
S_Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000276c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  0000276c  00002800  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800168  00800168  00002908  2**0
                  ALLOC
  3 .stab         00001890  00000000  00000000  00002908  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000845  00000000  00000000  00004198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000049dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b4  00000000  00000000  00004b3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f0e  00000000  00000000  00004cf1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010c3  00000000  00000000  00006bff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001032  00000000  00000000  00007cc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00008cf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002e3  00000000  00000000  00008e74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000956  00000000  00000000  00009157  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009aad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 2e 13 	jmp	0x265c	; 0x265c <__vector_4>
      14:	0c 94 01 13 	jmp	0x2602	; 0x2602 <__vector_5>
      18:	0c 94 d4 12 	jmp	0x25a8	; 0x25a8 <__vector_6>
      1c:	0c 94 a7 12 	jmp	0x254e	; 0x254e <__vector_7>
      20:	0c 94 7a 12 	jmp	0x24f4	; 0x24f4 <__vector_8>
      24:	0c 94 4d 12 	jmp	0x249a	; 0x249a <__vector_9>
      28:	0c 94 20 12 	jmp	0x2440	; 0x2440 <__vector_10>
      2c:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a0 38       	cpi	r26, 0x80	; 128
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ec e6       	ldi	r30, 0x6C	; 108
      78:	f7 e2       	ldi	r31, 0x27	; 39
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 9c 06 	call	0xd38	; 0xd38 <main>
      8a:	0c 94 b4 13 	jmp	0x2768	; 0x2768 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 99 13 	jmp	0x2732	; 0x2732 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 89 13 	jmp	0x2712	; 0x2712 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 cb 05 	call	0xb96	; 0xb96 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 cb 05 	call	0xb96	; 0xb96 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a5 13 	jmp	0x274a	; 0x274a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 89 13 	jmp	0x2712	; 0x2712 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 cb 05 	call	0xb96	; 0xb96 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 cb 05 	call	0xb96	; 0xb96 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a5 13 	jmp	0x274a	; 0x274a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 cb 05 	call	0xb96	; 0xb96 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 cb 05 	call	0xb96	; 0xb96 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 99 13 	jmp	0x2732	; 0x2732 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 85 13 	jmp	0x270a	; 0x270a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 cb 05 	call	0xb96	; 0xb96 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 cb 05 	call	0xb96	; 0xb96 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 89 13 	jmp	0x2712	; 0x2712 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 cb 05 	call	0xb96	; 0xb96 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 cb 05 	call	0xb96	; 0xb96 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 43 06 	call	0xc86	; 0xc86 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 a5 13 	jmp	0x274a	; 0x274a <__epilogue_restores__+0x18>

000007ea <__floatsisf>:
     7ea:	a8 e0       	ldi	r26, 0x08	; 8
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 86 13 	jmp	0x270c	; 0x270c <__prologue_saves__+0x12>
     7f6:	9b 01       	movw	r18, r22
     7f8:	ac 01       	movw	r20, r24
     7fa:	83 e0       	ldi	r24, 0x03	; 3
     7fc:	89 83       	std	Y+1, r24	; 0x01
     7fe:	da 01       	movw	r26, r20
     800:	c9 01       	movw	r24, r18
     802:	88 27       	eor	r24, r24
     804:	b7 fd       	sbrc	r27, 7
     806:	83 95       	inc	r24
     808:	99 27       	eor	r25, r25
     80a:	aa 27       	eor	r26, r26
     80c:	bb 27       	eor	r27, r27
     80e:	b8 2e       	mov	r11, r24
     810:	21 15       	cp	r18, r1
     812:	31 05       	cpc	r19, r1
     814:	41 05       	cpc	r20, r1
     816:	51 05       	cpc	r21, r1
     818:	19 f4       	brne	.+6      	; 0x820 <__floatsisf+0x36>
     81a:	82 e0       	ldi	r24, 0x02	; 2
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	3a c0       	rjmp	.+116    	; 0x894 <__stack+0x35>
     820:	88 23       	and	r24, r24
     822:	a9 f0       	breq	.+42     	; 0x84e <__floatsisf+0x64>
     824:	20 30       	cpi	r18, 0x00	; 0
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	38 07       	cpc	r19, r24
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	48 07       	cpc	r20, r24
     82e:	80 e8       	ldi	r24, 0x80	; 128
     830:	58 07       	cpc	r21, r24
     832:	29 f4       	brne	.+10     	; 0x83e <__floatsisf+0x54>
     834:	60 e0       	ldi	r22, 0x00	; 0
     836:	70 e0       	ldi	r23, 0x00	; 0
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	9f ec       	ldi	r25, 0xCF	; 207
     83c:	30 c0       	rjmp	.+96     	; 0x89e <__stack+0x3f>
     83e:	ee 24       	eor	r14, r14
     840:	ff 24       	eor	r15, r15
     842:	87 01       	movw	r16, r14
     844:	e2 1a       	sub	r14, r18
     846:	f3 0a       	sbc	r15, r19
     848:	04 0b       	sbc	r16, r20
     84a:	15 0b       	sbc	r17, r21
     84c:	02 c0       	rjmp	.+4      	; 0x852 <__floatsisf+0x68>
     84e:	79 01       	movw	r14, r18
     850:	8a 01       	movw	r16, r20
     852:	8e e1       	ldi	r24, 0x1E	; 30
     854:	c8 2e       	mov	r12, r24
     856:	d1 2c       	mov	r13, r1
     858:	dc 82       	std	Y+4, r13	; 0x04
     85a:	cb 82       	std	Y+3, r12	; 0x03
     85c:	ed 82       	std	Y+5, r14	; 0x05
     85e:	fe 82       	std	Y+6, r15	; 0x06
     860:	0f 83       	std	Y+7, r16	; 0x07
     862:	18 87       	std	Y+8, r17	; 0x08
     864:	c8 01       	movw	r24, r16
     866:	b7 01       	movw	r22, r14
     868:	0e 94 a7 04 	call	0x94e	; 0x94e <__clzsi2>
     86c:	01 97       	sbiw	r24, 0x01	; 1
     86e:	18 16       	cp	r1, r24
     870:	19 06       	cpc	r1, r25
     872:	84 f4       	brge	.+32     	; 0x894 <__stack+0x35>
     874:	08 2e       	mov	r0, r24
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	ee 0c       	add	r14, r14
     87a:	ff 1c       	adc	r15, r15
     87c:	00 1f       	adc	r16, r16
     87e:	11 1f       	adc	r17, r17
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	ed 82       	std	Y+5, r14	; 0x05
     886:	fe 82       	std	Y+6, r15	; 0x06
     888:	0f 83       	std	Y+7, r16	; 0x07
     88a:	18 87       	std	Y+8, r17	; 0x08
     88c:	c8 1a       	sub	r12, r24
     88e:	d9 0a       	sbc	r13, r25
     890:	dc 82       	std	Y+4, r13	; 0x04
     892:	cb 82       	std	Y+3, r12	; 0x03
     894:	ba 82       	std	Y+2, r11	; 0x02
     896:	ce 01       	movw	r24, r28
     898:	01 96       	adiw	r24, 0x01	; 1
     89a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__pack_f>
     89e:	28 96       	adiw	r28, 0x08	; 8
     8a0:	e9 e0       	ldi	r30, 0x09	; 9
     8a2:	0c 94 a2 13 	jmp	0x2744	; 0x2744 <__epilogue_restores__+0x12>

000008a6 <__fixsfsi>:
     8a6:	ac e0       	ldi	r26, 0x0C	; 12
     8a8:	b0 e0       	ldi	r27, 0x00	; 0
     8aa:	e9 e5       	ldi	r30, 0x59	; 89
     8ac:	f4 e0       	ldi	r31, 0x04	; 4
     8ae:	0c 94 8d 13 	jmp	0x271a	; 0x271a <__prologue_saves__+0x20>
     8b2:	69 83       	std	Y+1, r22	; 0x01
     8b4:	7a 83       	std	Y+2, r23	; 0x02
     8b6:	8b 83       	std	Y+3, r24	; 0x03
     8b8:	9c 83       	std	Y+4, r25	; 0x04
     8ba:	ce 01       	movw	r24, r28
     8bc:	01 96       	adiw	r24, 0x01	; 1
     8be:	be 01       	movw	r22, r28
     8c0:	6b 5f       	subi	r22, 0xFB	; 251
     8c2:	7f 4f       	sbci	r23, 0xFF	; 255
     8c4:	0e 94 cb 05 	call	0xb96	; 0xb96 <__unpack_f>
     8c8:	8d 81       	ldd	r24, Y+5	; 0x05
     8ca:	82 30       	cpi	r24, 0x02	; 2
     8cc:	61 f1       	breq	.+88     	; 0x926 <__fixsfsi+0x80>
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	50 f1       	brcs	.+84     	; 0x926 <__fixsfsi+0x80>
     8d2:	84 30       	cpi	r24, 0x04	; 4
     8d4:	21 f4       	brne	.+8      	; 0x8de <__fixsfsi+0x38>
     8d6:	8e 81       	ldd	r24, Y+6	; 0x06
     8d8:	88 23       	and	r24, r24
     8da:	51 f1       	breq	.+84     	; 0x930 <__fixsfsi+0x8a>
     8dc:	2e c0       	rjmp	.+92     	; 0x93a <__fixsfsi+0x94>
     8de:	2f 81       	ldd	r18, Y+7	; 0x07
     8e0:	38 85       	ldd	r19, Y+8	; 0x08
     8e2:	37 fd       	sbrc	r19, 7
     8e4:	20 c0       	rjmp	.+64     	; 0x926 <__fixsfsi+0x80>
     8e6:	6e 81       	ldd	r22, Y+6	; 0x06
     8e8:	2f 31       	cpi	r18, 0x1F	; 31
     8ea:	31 05       	cpc	r19, r1
     8ec:	1c f0       	brlt	.+6      	; 0x8f4 <__fixsfsi+0x4e>
     8ee:	66 23       	and	r22, r22
     8f0:	f9 f0       	breq	.+62     	; 0x930 <__fixsfsi+0x8a>
     8f2:	23 c0       	rjmp	.+70     	; 0x93a <__fixsfsi+0x94>
     8f4:	8e e1       	ldi	r24, 0x1E	; 30
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	82 1b       	sub	r24, r18
     8fa:	93 0b       	sbc	r25, r19
     8fc:	29 85       	ldd	r18, Y+9	; 0x09
     8fe:	3a 85       	ldd	r19, Y+10	; 0x0a
     900:	4b 85       	ldd	r20, Y+11	; 0x0b
     902:	5c 85       	ldd	r21, Y+12	; 0x0c
     904:	04 c0       	rjmp	.+8      	; 0x90e <__fixsfsi+0x68>
     906:	56 95       	lsr	r21
     908:	47 95       	ror	r20
     90a:	37 95       	ror	r19
     90c:	27 95       	ror	r18
     90e:	8a 95       	dec	r24
     910:	d2 f7       	brpl	.-12     	; 0x906 <__fixsfsi+0x60>
     912:	66 23       	and	r22, r22
     914:	b1 f0       	breq	.+44     	; 0x942 <__fixsfsi+0x9c>
     916:	50 95       	com	r21
     918:	40 95       	com	r20
     91a:	30 95       	com	r19
     91c:	21 95       	neg	r18
     91e:	3f 4f       	sbci	r19, 0xFF	; 255
     920:	4f 4f       	sbci	r20, 0xFF	; 255
     922:	5f 4f       	sbci	r21, 0xFF	; 255
     924:	0e c0       	rjmp	.+28     	; 0x942 <__fixsfsi+0x9c>
     926:	20 e0       	ldi	r18, 0x00	; 0
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	40 e0       	ldi	r20, 0x00	; 0
     92c:	50 e0       	ldi	r21, 0x00	; 0
     92e:	09 c0       	rjmp	.+18     	; 0x942 <__fixsfsi+0x9c>
     930:	2f ef       	ldi	r18, 0xFF	; 255
     932:	3f ef       	ldi	r19, 0xFF	; 255
     934:	4f ef       	ldi	r20, 0xFF	; 255
     936:	5f e7       	ldi	r21, 0x7F	; 127
     938:	04 c0       	rjmp	.+8      	; 0x942 <__fixsfsi+0x9c>
     93a:	20 e0       	ldi	r18, 0x00	; 0
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	40 e0       	ldi	r20, 0x00	; 0
     940:	50 e8       	ldi	r21, 0x80	; 128
     942:	b9 01       	movw	r22, r18
     944:	ca 01       	movw	r24, r20
     946:	2c 96       	adiw	r28, 0x0c	; 12
     948:	e2 e0       	ldi	r30, 0x02	; 2
     94a:	0c 94 a9 13 	jmp	0x2752	; 0x2752 <__epilogue_restores__+0x20>

0000094e <__clzsi2>:
     94e:	ef 92       	push	r14
     950:	ff 92       	push	r15
     952:	0f 93       	push	r16
     954:	1f 93       	push	r17
     956:	7b 01       	movw	r14, r22
     958:	8c 01       	movw	r16, r24
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	e8 16       	cp	r14, r24
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	f8 06       	cpc	r15, r24
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	08 07       	cpc	r16, r24
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	18 07       	cpc	r17, r24
     96a:	88 f4       	brcc	.+34     	; 0x98e <__clzsi2+0x40>
     96c:	8f ef       	ldi	r24, 0xFF	; 255
     96e:	e8 16       	cp	r14, r24
     970:	f1 04       	cpc	r15, r1
     972:	01 05       	cpc	r16, r1
     974:	11 05       	cpc	r17, r1
     976:	31 f0       	breq	.+12     	; 0x984 <__clzsi2+0x36>
     978:	28 f0       	brcs	.+10     	; 0x984 <__clzsi2+0x36>
     97a:	88 e0       	ldi	r24, 0x08	; 8
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	a0 e0       	ldi	r26, 0x00	; 0
     980:	b0 e0       	ldi	r27, 0x00	; 0
     982:	17 c0       	rjmp	.+46     	; 0x9b2 <__clzsi2+0x64>
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	a0 e0       	ldi	r26, 0x00	; 0
     98a:	b0 e0       	ldi	r27, 0x00	; 0
     98c:	12 c0       	rjmp	.+36     	; 0x9b2 <__clzsi2+0x64>
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	e8 16       	cp	r14, r24
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	f8 06       	cpc	r15, r24
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	08 07       	cpc	r16, r24
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	18 07       	cpc	r17, r24
     99e:	28 f0       	brcs	.+10     	; 0x9aa <__clzsi2+0x5c>
     9a0:	88 e1       	ldi	r24, 0x18	; 24
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	a0 e0       	ldi	r26, 0x00	; 0
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	04 c0       	rjmp	.+8      	; 0x9b2 <__clzsi2+0x64>
     9aa:	80 e1       	ldi	r24, 0x10	; 16
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	a0 e0       	ldi	r26, 0x00	; 0
     9b0:	b0 e0       	ldi	r27, 0x00	; 0
     9b2:	20 e2       	ldi	r18, 0x20	; 32
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	40 e0       	ldi	r20, 0x00	; 0
     9b8:	50 e0       	ldi	r21, 0x00	; 0
     9ba:	28 1b       	sub	r18, r24
     9bc:	39 0b       	sbc	r19, r25
     9be:	4a 0b       	sbc	r20, r26
     9c0:	5b 0b       	sbc	r21, r27
     9c2:	04 c0       	rjmp	.+8      	; 0x9cc <__clzsi2+0x7e>
     9c4:	16 95       	lsr	r17
     9c6:	07 95       	ror	r16
     9c8:	f7 94       	ror	r15
     9ca:	e7 94       	ror	r14
     9cc:	8a 95       	dec	r24
     9ce:	d2 f7       	brpl	.-12     	; 0x9c4 <__clzsi2+0x76>
     9d0:	f7 01       	movw	r30, r14
     9d2:	e8 59       	subi	r30, 0x98	; 152
     9d4:	ff 4f       	sbci	r31, 0xFF	; 255
     9d6:	80 81       	ld	r24, Z
     9d8:	28 1b       	sub	r18, r24
     9da:	31 09       	sbc	r19, r1
     9dc:	41 09       	sbc	r20, r1
     9de:	51 09       	sbc	r21, r1
     9e0:	c9 01       	movw	r24, r18
     9e2:	1f 91       	pop	r17
     9e4:	0f 91       	pop	r16
     9e6:	ff 90       	pop	r15
     9e8:	ef 90       	pop	r14
     9ea:	08 95       	ret

000009ec <__pack_f>:
     9ec:	df 92       	push	r13
     9ee:	ef 92       	push	r14
     9f0:	ff 92       	push	r15
     9f2:	0f 93       	push	r16
     9f4:	1f 93       	push	r17
     9f6:	fc 01       	movw	r30, r24
     9f8:	e4 80       	ldd	r14, Z+4	; 0x04
     9fa:	f5 80       	ldd	r15, Z+5	; 0x05
     9fc:	06 81       	ldd	r16, Z+6	; 0x06
     9fe:	17 81       	ldd	r17, Z+7	; 0x07
     a00:	d1 80       	ldd	r13, Z+1	; 0x01
     a02:	80 81       	ld	r24, Z
     a04:	82 30       	cpi	r24, 0x02	; 2
     a06:	48 f4       	brcc	.+18     	; 0xa1a <__pack_f+0x2e>
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e1       	ldi	r26, 0x10	; 16
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	e8 2a       	or	r14, r24
     a12:	f9 2a       	or	r15, r25
     a14:	0a 2b       	or	r16, r26
     a16:	1b 2b       	or	r17, r27
     a18:	a5 c0       	rjmp	.+330    	; 0xb64 <__pack_f+0x178>
     a1a:	84 30       	cpi	r24, 0x04	; 4
     a1c:	09 f4       	brne	.+2      	; 0xa20 <__pack_f+0x34>
     a1e:	9f c0       	rjmp	.+318    	; 0xb5e <__pack_f+0x172>
     a20:	82 30       	cpi	r24, 0x02	; 2
     a22:	21 f4       	brne	.+8      	; 0xa2c <__pack_f+0x40>
     a24:	ee 24       	eor	r14, r14
     a26:	ff 24       	eor	r15, r15
     a28:	87 01       	movw	r16, r14
     a2a:	05 c0       	rjmp	.+10     	; 0xa36 <__pack_f+0x4a>
     a2c:	e1 14       	cp	r14, r1
     a2e:	f1 04       	cpc	r15, r1
     a30:	01 05       	cpc	r16, r1
     a32:	11 05       	cpc	r17, r1
     a34:	19 f4       	brne	.+6      	; 0xa3c <__pack_f+0x50>
     a36:	e0 e0       	ldi	r30, 0x00	; 0
     a38:	f0 e0       	ldi	r31, 0x00	; 0
     a3a:	96 c0       	rjmp	.+300    	; 0xb68 <__pack_f+0x17c>
     a3c:	62 81       	ldd	r22, Z+2	; 0x02
     a3e:	73 81       	ldd	r23, Z+3	; 0x03
     a40:	9f ef       	ldi	r25, 0xFF	; 255
     a42:	62 38       	cpi	r22, 0x82	; 130
     a44:	79 07       	cpc	r23, r25
     a46:	0c f0       	brlt	.+2      	; 0xa4a <__pack_f+0x5e>
     a48:	5b c0       	rjmp	.+182    	; 0xb00 <__pack_f+0x114>
     a4a:	22 e8       	ldi	r18, 0x82	; 130
     a4c:	3f ef       	ldi	r19, 0xFF	; 255
     a4e:	26 1b       	sub	r18, r22
     a50:	37 0b       	sbc	r19, r23
     a52:	2a 31       	cpi	r18, 0x1A	; 26
     a54:	31 05       	cpc	r19, r1
     a56:	2c f0       	brlt	.+10     	; 0xa62 <__pack_f+0x76>
     a58:	20 e0       	ldi	r18, 0x00	; 0
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	40 e0       	ldi	r20, 0x00	; 0
     a5e:	50 e0       	ldi	r21, 0x00	; 0
     a60:	2a c0       	rjmp	.+84     	; 0xab6 <__pack_f+0xca>
     a62:	b8 01       	movw	r22, r16
     a64:	a7 01       	movw	r20, r14
     a66:	02 2e       	mov	r0, r18
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__pack_f+0x86>
     a6a:	76 95       	lsr	r23
     a6c:	67 95       	ror	r22
     a6e:	57 95       	ror	r21
     a70:	47 95       	ror	r20
     a72:	0a 94       	dec	r0
     a74:	d2 f7       	brpl	.-12     	; 0xa6a <__pack_f+0x7e>
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	04 c0       	rjmp	.+8      	; 0xa88 <__pack_f+0x9c>
     a80:	88 0f       	add	r24, r24
     a82:	99 1f       	adc	r25, r25
     a84:	aa 1f       	adc	r26, r26
     a86:	bb 1f       	adc	r27, r27
     a88:	2a 95       	dec	r18
     a8a:	d2 f7       	brpl	.-12     	; 0xa80 <__pack_f+0x94>
     a8c:	01 97       	sbiw	r24, 0x01	; 1
     a8e:	a1 09       	sbc	r26, r1
     a90:	b1 09       	sbc	r27, r1
     a92:	8e 21       	and	r24, r14
     a94:	9f 21       	and	r25, r15
     a96:	a0 23       	and	r26, r16
     a98:	b1 23       	and	r27, r17
     a9a:	00 97       	sbiw	r24, 0x00	; 0
     a9c:	a1 05       	cpc	r26, r1
     a9e:	b1 05       	cpc	r27, r1
     aa0:	21 f0       	breq	.+8      	; 0xaaa <__pack_f+0xbe>
     aa2:	81 e0       	ldi	r24, 0x01	; 1
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	a0 e0       	ldi	r26, 0x00	; 0
     aa8:	b0 e0       	ldi	r27, 0x00	; 0
     aaa:	9a 01       	movw	r18, r20
     aac:	ab 01       	movw	r20, r22
     aae:	28 2b       	or	r18, r24
     ab0:	39 2b       	or	r19, r25
     ab2:	4a 2b       	or	r20, r26
     ab4:	5b 2b       	or	r21, r27
     ab6:	da 01       	movw	r26, r20
     ab8:	c9 01       	movw	r24, r18
     aba:	8f 77       	andi	r24, 0x7F	; 127
     abc:	90 70       	andi	r25, 0x00	; 0
     abe:	a0 70       	andi	r26, 0x00	; 0
     ac0:	b0 70       	andi	r27, 0x00	; 0
     ac2:	80 34       	cpi	r24, 0x40	; 64
     ac4:	91 05       	cpc	r25, r1
     ac6:	a1 05       	cpc	r26, r1
     ac8:	b1 05       	cpc	r27, r1
     aca:	39 f4       	brne	.+14     	; 0xada <__pack_f+0xee>
     acc:	27 ff       	sbrs	r18, 7
     ace:	09 c0       	rjmp	.+18     	; 0xae2 <__pack_f+0xf6>
     ad0:	20 5c       	subi	r18, 0xC0	; 192
     ad2:	3f 4f       	sbci	r19, 0xFF	; 255
     ad4:	4f 4f       	sbci	r20, 0xFF	; 255
     ad6:	5f 4f       	sbci	r21, 0xFF	; 255
     ad8:	04 c0       	rjmp	.+8      	; 0xae2 <__pack_f+0xf6>
     ada:	21 5c       	subi	r18, 0xC1	; 193
     adc:	3f 4f       	sbci	r19, 0xFF	; 255
     ade:	4f 4f       	sbci	r20, 0xFF	; 255
     ae0:	5f 4f       	sbci	r21, 0xFF	; 255
     ae2:	e0 e0       	ldi	r30, 0x00	; 0
     ae4:	f0 e0       	ldi	r31, 0x00	; 0
     ae6:	20 30       	cpi	r18, 0x00	; 0
     ae8:	a0 e0       	ldi	r26, 0x00	; 0
     aea:	3a 07       	cpc	r19, r26
     aec:	a0 e0       	ldi	r26, 0x00	; 0
     aee:	4a 07       	cpc	r20, r26
     af0:	a0 e4       	ldi	r26, 0x40	; 64
     af2:	5a 07       	cpc	r21, r26
     af4:	10 f0       	brcs	.+4      	; 0xafa <__pack_f+0x10e>
     af6:	e1 e0       	ldi	r30, 0x01	; 1
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	79 01       	movw	r14, r18
     afc:	8a 01       	movw	r16, r20
     afe:	27 c0       	rjmp	.+78     	; 0xb4e <__pack_f+0x162>
     b00:	60 38       	cpi	r22, 0x80	; 128
     b02:	71 05       	cpc	r23, r1
     b04:	64 f5       	brge	.+88     	; 0xb5e <__pack_f+0x172>
     b06:	fb 01       	movw	r30, r22
     b08:	e1 58       	subi	r30, 0x81	; 129
     b0a:	ff 4f       	sbci	r31, 0xFF	; 255
     b0c:	d8 01       	movw	r26, r16
     b0e:	c7 01       	movw	r24, r14
     b10:	8f 77       	andi	r24, 0x7F	; 127
     b12:	90 70       	andi	r25, 0x00	; 0
     b14:	a0 70       	andi	r26, 0x00	; 0
     b16:	b0 70       	andi	r27, 0x00	; 0
     b18:	80 34       	cpi	r24, 0x40	; 64
     b1a:	91 05       	cpc	r25, r1
     b1c:	a1 05       	cpc	r26, r1
     b1e:	b1 05       	cpc	r27, r1
     b20:	39 f4       	brne	.+14     	; 0xb30 <__pack_f+0x144>
     b22:	e7 fe       	sbrs	r14, 7
     b24:	0d c0       	rjmp	.+26     	; 0xb40 <__pack_f+0x154>
     b26:	80 e4       	ldi	r24, 0x40	; 64
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	04 c0       	rjmp	.+8      	; 0xb38 <__pack_f+0x14c>
     b30:	8f e3       	ldi	r24, 0x3F	; 63
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	a0 e0       	ldi	r26, 0x00	; 0
     b36:	b0 e0       	ldi	r27, 0x00	; 0
     b38:	e8 0e       	add	r14, r24
     b3a:	f9 1e       	adc	r15, r25
     b3c:	0a 1f       	adc	r16, r26
     b3e:	1b 1f       	adc	r17, r27
     b40:	17 ff       	sbrs	r17, 7
     b42:	05 c0       	rjmp	.+10     	; 0xb4e <__pack_f+0x162>
     b44:	16 95       	lsr	r17
     b46:	07 95       	ror	r16
     b48:	f7 94       	ror	r15
     b4a:	e7 94       	ror	r14
     b4c:	31 96       	adiw	r30, 0x01	; 1
     b4e:	87 e0       	ldi	r24, 0x07	; 7
     b50:	16 95       	lsr	r17
     b52:	07 95       	ror	r16
     b54:	f7 94       	ror	r15
     b56:	e7 94       	ror	r14
     b58:	8a 95       	dec	r24
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__pack_f+0x164>
     b5c:	05 c0       	rjmp	.+10     	; 0xb68 <__pack_f+0x17c>
     b5e:	ee 24       	eor	r14, r14
     b60:	ff 24       	eor	r15, r15
     b62:	87 01       	movw	r16, r14
     b64:	ef ef       	ldi	r30, 0xFF	; 255
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	6e 2f       	mov	r22, r30
     b6a:	67 95       	ror	r22
     b6c:	66 27       	eor	r22, r22
     b6e:	67 95       	ror	r22
     b70:	90 2f       	mov	r25, r16
     b72:	9f 77       	andi	r25, 0x7F	; 127
     b74:	d7 94       	ror	r13
     b76:	dd 24       	eor	r13, r13
     b78:	d7 94       	ror	r13
     b7a:	8e 2f       	mov	r24, r30
     b7c:	86 95       	lsr	r24
     b7e:	49 2f       	mov	r20, r25
     b80:	46 2b       	or	r20, r22
     b82:	58 2f       	mov	r21, r24
     b84:	5d 29       	or	r21, r13
     b86:	b7 01       	movw	r22, r14
     b88:	ca 01       	movw	r24, r20
     b8a:	1f 91       	pop	r17
     b8c:	0f 91       	pop	r16
     b8e:	ff 90       	pop	r15
     b90:	ef 90       	pop	r14
     b92:	df 90       	pop	r13
     b94:	08 95       	ret

00000b96 <__unpack_f>:
     b96:	fc 01       	movw	r30, r24
     b98:	db 01       	movw	r26, r22
     b9a:	40 81       	ld	r20, Z
     b9c:	51 81       	ldd	r21, Z+1	; 0x01
     b9e:	22 81       	ldd	r18, Z+2	; 0x02
     ba0:	62 2f       	mov	r22, r18
     ba2:	6f 77       	andi	r22, 0x7F	; 127
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	22 1f       	adc	r18, r18
     ba8:	22 27       	eor	r18, r18
     baa:	22 1f       	adc	r18, r18
     bac:	93 81       	ldd	r25, Z+3	; 0x03
     bae:	89 2f       	mov	r24, r25
     bb0:	88 0f       	add	r24, r24
     bb2:	82 2b       	or	r24, r18
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	99 1f       	adc	r25, r25
     bba:	99 27       	eor	r25, r25
     bbc:	99 1f       	adc	r25, r25
     bbe:	11 96       	adiw	r26, 0x01	; 1
     bc0:	9c 93       	st	X, r25
     bc2:	11 97       	sbiw	r26, 0x01	; 1
     bc4:	21 15       	cp	r18, r1
     bc6:	31 05       	cpc	r19, r1
     bc8:	a9 f5       	brne	.+106    	; 0xc34 <__unpack_f+0x9e>
     bca:	41 15       	cp	r20, r1
     bcc:	51 05       	cpc	r21, r1
     bce:	61 05       	cpc	r22, r1
     bd0:	71 05       	cpc	r23, r1
     bd2:	11 f4       	brne	.+4      	; 0xbd8 <__unpack_f+0x42>
     bd4:	82 e0       	ldi	r24, 0x02	; 2
     bd6:	37 c0       	rjmp	.+110    	; 0xc46 <__unpack_f+0xb0>
     bd8:	82 e8       	ldi	r24, 0x82	; 130
     bda:	9f ef       	ldi	r25, 0xFF	; 255
     bdc:	13 96       	adiw	r26, 0x03	; 3
     bde:	9c 93       	st	X, r25
     be0:	8e 93       	st	-X, r24
     be2:	12 97       	sbiw	r26, 0x02	; 2
     be4:	9a 01       	movw	r18, r20
     be6:	ab 01       	movw	r20, r22
     be8:	67 e0       	ldi	r22, 0x07	; 7
     bea:	22 0f       	add	r18, r18
     bec:	33 1f       	adc	r19, r19
     bee:	44 1f       	adc	r20, r20
     bf0:	55 1f       	adc	r21, r21
     bf2:	6a 95       	dec	r22
     bf4:	d1 f7       	brne	.-12     	; 0xbea <__unpack_f+0x54>
     bf6:	83 e0       	ldi	r24, 0x03	; 3
     bf8:	8c 93       	st	X, r24
     bfa:	0d c0       	rjmp	.+26     	; 0xc16 <__unpack_f+0x80>
     bfc:	22 0f       	add	r18, r18
     bfe:	33 1f       	adc	r19, r19
     c00:	44 1f       	adc	r20, r20
     c02:	55 1f       	adc	r21, r21
     c04:	12 96       	adiw	r26, 0x02	; 2
     c06:	8d 91       	ld	r24, X+
     c08:	9c 91       	ld	r25, X
     c0a:	13 97       	sbiw	r26, 0x03	; 3
     c0c:	01 97       	sbiw	r24, 0x01	; 1
     c0e:	13 96       	adiw	r26, 0x03	; 3
     c10:	9c 93       	st	X, r25
     c12:	8e 93       	st	-X, r24
     c14:	12 97       	sbiw	r26, 0x02	; 2
     c16:	20 30       	cpi	r18, 0x00	; 0
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	38 07       	cpc	r19, r24
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	48 07       	cpc	r20, r24
     c20:	80 e4       	ldi	r24, 0x40	; 64
     c22:	58 07       	cpc	r21, r24
     c24:	58 f3       	brcs	.-42     	; 0xbfc <__unpack_f+0x66>
     c26:	14 96       	adiw	r26, 0x04	; 4
     c28:	2d 93       	st	X+, r18
     c2a:	3d 93       	st	X+, r19
     c2c:	4d 93       	st	X+, r20
     c2e:	5c 93       	st	X, r21
     c30:	17 97       	sbiw	r26, 0x07	; 7
     c32:	08 95       	ret
     c34:	2f 3f       	cpi	r18, 0xFF	; 255
     c36:	31 05       	cpc	r19, r1
     c38:	79 f4       	brne	.+30     	; 0xc58 <__unpack_f+0xc2>
     c3a:	41 15       	cp	r20, r1
     c3c:	51 05       	cpc	r21, r1
     c3e:	61 05       	cpc	r22, r1
     c40:	71 05       	cpc	r23, r1
     c42:	19 f4       	brne	.+6      	; 0xc4a <__unpack_f+0xb4>
     c44:	84 e0       	ldi	r24, 0x04	; 4
     c46:	8c 93       	st	X, r24
     c48:	08 95       	ret
     c4a:	64 ff       	sbrs	r22, 4
     c4c:	03 c0       	rjmp	.+6      	; 0xc54 <__unpack_f+0xbe>
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	8c 93       	st	X, r24
     c52:	12 c0       	rjmp	.+36     	; 0xc78 <__unpack_f+0xe2>
     c54:	1c 92       	st	X, r1
     c56:	10 c0       	rjmp	.+32     	; 0xc78 <__unpack_f+0xe2>
     c58:	2f 57       	subi	r18, 0x7F	; 127
     c5a:	30 40       	sbci	r19, 0x00	; 0
     c5c:	13 96       	adiw	r26, 0x03	; 3
     c5e:	3c 93       	st	X, r19
     c60:	2e 93       	st	-X, r18
     c62:	12 97       	sbiw	r26, 0x02	; 2
     c64:	83 e0       	ldi	r24, 0x03	; 3
     c66:	8c 93       	st	X, r24
     c68:	87 e0       	ldi	r24, 0x07	; 7
     c6a:	44 0f       	add	r20, r20
     c6c:	55 1f       	adc	r21, r21
     c6e:	66 1f       	adc	r22, r22
     c70:	77 1f       	adc	r23, r23
     c72:	8a 95       	dec	r24
     c74:	d1 f7       	brne	.-12     	; 0xc6a <__unpack_f+0xd4>
     c76:	70 64       	ori	r23, 0x40	; 64
     c78:	14 96       	adiw	r26, 0x04	; 4
     c7a:	4d 93       	st	X+, r20
     c7c:	5d 93       	st	X+, r21
     c7e:	6d 93       	st	X+, r22
     c80:	7c 93       	st	X, r23
     c82:	17 97       	sbiw	r26, 0x07	; 7
     c84:	08 95       	ret

00000c86 <__fpcmp_parts_f>:
     c86:	1f 93       	push	r17
     c88:	dc 01       	movw	r26, r24
     c8a:	fb 01       	movw	r30, r22
     c8c:	9c 91       	ld	r25, X
     c8e:	92 30       	cpi	r25, 0x02	; 2
     c90:	08 f4       	brcc	.+2      	; 0xc94 <__fpcmp_parts_f+0xe>
     c92:	47 c0       	rjmp	.+142    	; 0xd22 <__fpcmp_parts_f+0x9c>
     c94:	80 81       	ld	r24, Z
     c96:	82 30       	cpi	r24, 0x02	; 2
     c98:	08 f4       	brcc	.+2      	; 0xc9c <__fpcmp_parts_f+0x16>
     c9a:	43 c0       	rjmp	.+134    	; 0xd22 <__fpcmp_parts_f+0x9c>
     c9c:	94 30       	cpi	r25, 0x04	; 4
     c9e:	51 f4       	brne	.+20     	; 0xcb4 <__fpcmp_parts_f+0x2e>
     ca0:	11 96       	adiw	r26, 0x01	; 1
     ca2:	1c 91       	ld	r17, X
     ca4:	84 30       	cpi	r24, 0x04	; 4
     ca6:	99 f5       	brne	.+102    	; 0xd0e <__fpcmp_parts_f+0x88>
     ca8:	81 81       	ldd	r24, Z+1	; 0x01
     caa:	68 2f       	mov	r22, r24
     cac:	70 e0       	ldi	r23, 0x00	; 0
     cae:	61 1b       	sub	r22, r17
     cb0:	71 09       	sbc	r23, r1
     cb2:	3f c0       	rjmp	.+126    	; 0xd32 <__fpcmp_parts_f+0xac>
     cb4:	84 30       	cpi	r24, 0x04	; 4
     cb6:	21 f0       	breq	.+8      	; 0xcc0 <__fpcmp_parts_f+0x3a>
     cb8:	92 30       	cpi	r25, 0x02	; 2
     cba:	31 f4       	brne	.+12     	; 0xcc8 <__fpcmp_parts_f+0x42>
     cbc:	82 30       	cpi	r24, 0x02	; 2
     cbe:	b9 f1       	breq	.+110    	; 0xd2e <__fpcmp_parts_f+0xa8>
     cc0:	81 81       	ldd	r24, Z+1	; 0x01
     cc2:	88 23       	and	r24, r24
     cc4:	89 f1       	breq	.+98     	; 0xd28 <__fpcmp_parts_f+0xa2>
     cc6:	2d c0       	rjmp	.+90     	; 0xd22 <__fpcmp_parts_f+0x9c>
     cc8:	11 96       	adiw	r26, 0x01	; 1
     cca:	1c 91       	ld	r17, X
     ccc:	11 97       	sbiw	r26, 0x01	; 1
     cce:	82 30       	cpi	r24, 0x02	; 2
     cd0:	f1 f0       	breq	.+60     	; 0xd0e <__fpcmp_parts_f+0x88>
     cd2:	81 81       	ldd	r24, Z+1	; 0x01
     cd4:	18 17       	cp	r17, r24
     cd6:	d9 f4       	brne	.+54     	; 0xd0e <__fpcmp_parts_f+0x88>
     cd8:	12 96       	adiw	r26, 0x02	; 2
     cda:	2d 91       	ld	r18, X+
     cdc:	3c 91       	ld	r19, X
     cde:	13 97       	sbiw	r26, 0x03	; 3
     ce0:	82 81       	ldd	r24, Z+2	; 0x02
     ce2:	93 81       	ldd	r25, Z+3	; 0x03
     ce4:	82 17       	cp	r24, r18
     ce6:	93 07       	cpc	r25, r19
     ce8:	94 f0       	brlt	.+36     	; 0xd0e <__fpcmp_parts_f+0x88>
     cea:	28 17       	cp	r18, r24
     cec:	39 07       	cpc	r19, r25
     cee:	bc f0       	brlt	.+46     	; 0xd1e <__fpcmp_parts_f+0x98>
     cf0:	14 96       	adiw	r26, 0x04	; 4
     cf2:	8d 91       	ld	r24, X+
     cf4:	9d 91       	ld	r25, X+
     cf6:	0d 90       	ld	r0, X+
     cf8:	bc 91       	ld	r27, X
     cfa:	a0 2d       	mov	r26, r0
     cfc:	24 81       	ldd	r18, Z+4	; 0x04
     cfe:	35 81       	ldd	r19, Z+5	; 0x05
     d00:	46 81       	ldd	r20, Z+6	; 0x06
     d02:	57 81       	ldd	r21, Z+7	; 0x07
     d04:	28 17       	cp	r18, r24
     d06:	39 07       	cpc	r19, r25
     d08:	4a 07       	cpc	r20, r26
     d0a:	5b 07       	cpc	r21, r27
     d0c:	18 f4       	brcc	.+6      	; 0xd14 <__fpcmp_parts_f+0x8e>
     d0e:	11 23       	and	r17, r17
     d10:	41 f0       	breq	.+16     	; 0xd22 <__fpcmp_parts_f+0x9c>
     d12:	0a c0       	rjmp	.+20     	; 0xd28 <__fpcmp_parts_f+0xa2>
     d14:	82 17       	cp	r24, r18
     d16:	93 07       	cpc	r25, r19
     d18:	a4 07       	cpc	r26, r20
     d1a:	b5 07       	cpc	r27, r21
     d1c:	40 f4       	brcc	.+16     	; 0xd2e <__fpcmp_parts_f+0xa8>
     d1e:	11 23       	and	r17, r17
     d20:	19 f0       	breq	.+6      	; 0xd28 <__fpcmp_parts_f+0xa2>
     d22:	61 e0       	ldi	r22, 0x01	; 1
     d24:	70 e0       	ldi	r23, 0x00	; 0
     d26:	05 c0       	rjmp	.+10     	; 0xd32 <__fpcmp_parts_f+0xac>
     d28:	6f ef       	ldi	r22, 0xFF	; 255
     d2a:	7f ef       	ldi	r23, 0xFF	; 255
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <__fpcmp_parts_f+0xac>
     d2e:	60 e0       	ldi	r22, 0x00	; 0
     d30:	70 e0       	ldi	r23, 0x00	; 0
     d32:	cb 01       	movw	r24, r22
     d34:	1f 91       	pop	r17
     d36:	08 95       	ret

00000d38 <main>:



void OV_TGL_FUNC(void);
void CTC_TGL_FUNC(void);
int main(){
     d38:	df 93       	push	r29
     d3a:	cf 93       	push	r28
     d3c:	00 d0       	rcall	.+0      	; 0xd3e <main+0x6>
     d3e:	cd b7       	in	r28, 0x3d	; 61
     d40:	de b7       	in	r29, 0x3e	; 62
	uint8_t state;
	uint8_t counter;
	state=DIO_setPinDirection(PORTA,PIN0,PIN_OUTPUT);
     d42:	80 e0       	ldi	r24, 0x00	; 0
     d44:	60 e0       	ldi	r22, 0x00	; 0
     d46:	41 e0       	ldi	r20, 0x01	; 1
     d48:	0e 94 c5 07 	call	0xf8a	; 0xf8a <DIO_setPinDirection>
     d4c:	8a 83       	std	Y+2, r24	; 0x02
	state=DIO_setPinDirection(PORTB,PIN0,PIN_OUTPUT);
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	60 e0       	ldi	r22, 0x00	; 0
     d52:	41 e0       	ldi	r20, 0x01	; 1
     d54:	0e 94 c5 07 	call	0xf8a	; 0xf8a <DIO_setPinDirection>
     d58:	8a 83       	std	Y+2, r24	; 0x02
	state=DIO_setPinDirection(PORTC,PIN0,PIN_OUTPUT);
     d5a:	82 e0       	ldi	r24, 0x02	; 2
     d5c:	60 e0       	ldi	r22, 0x00	; 0
     d5e:	41 e0       	ldi	r20, 0x01	; 1
     d60:	0e 94 c5 07 	call	0xf8a	; 0xf8a <DIO_setPinDirection>
     d64:	8a 83       	std	Y+2, r24	; 0x02
	state=DIO_setPinDirection(PORTD,PIN0,PIN_OUTPUT);
     d66:	83 e0       	ldi	r24, 0x03	; 3
     d68:	60 e0       	ldi	r22, 0x00	; 0
     d6a:	41 e0       	ldi	r20, 0x01	; 1
     d6c:	0e 94 c5 07 	call	0xf8a	; 0xf8a <DIO_setPinDirection>
     d70:	8a 83       	std	Y+2, r24	; 0x02
	state=DIO_setPinDirection(PORTB,PIN3,PIN_OUTPUT);
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	63 e0       	ldi	r22, 0x03	; 3
     d76:	41 e0       	ldi	r20, 0x01	; 1
     d78:	0e 94 c5 07 	call	0xf8a	; 0xf8a <DIO_setPinDirection>
     d7c:	8a 83       	std	Y+2, r24	; 0x02
	PWM_init(PWM0);
     d7e:	80 e0       	ldi	r24, 0x00	; 0
     d80:	0e 94 b9 0c 	call	0x1972	; 0x1972 <PWM_init>
	//TIMER_callBackFunc(TIMER0,TIMER_OV_INTERRUPT,&OV_TGL_FUNC);
	//TIMER_callBackFunc(TIMER0,TIMER_CTC_INTERRUPT,&CTC_TGL_FUNC);
	//TIMER_EN_Interrupt(TIMER0);

	TIMER_start(TIMER0);
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <TIMER_start>

	while(1){

		for(counter=1;counter<100;counter++){
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	89 83       	std	Y+1, r24	; 0x01
     d8e:	07 c0       	rjmp	.+14     	; 0xd9e <main+0x66>
			PWM_dutyCycle(PWM0,counter);
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	69 81       	ldd	r22, Y+1	; 0x01
     d94:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <PWM_dutyCycle>

	TIMER_start(TIMER0);

	while(1){

		for(counter=1;counter<100;counter++){
     d98:	89 81       	ldd	r24, Y+1	; 0x01
     d9a:	8f 5f       	subi	r24, 0xFF	; 255
     d9c:	89 83       	std	Y+1, r24	; 0x01
     d9e:	89 81       	ldd	r24, Y+1	; 0x01
     da0:	84 36       	cpi	r24, 0x64	; 100
     da2:	b0 f3       	brcs	.-20     	; 0xd90 <main+0x58>
     da4:	07 c0       	rjmp	.+14     	; 0xdb4 <main+0x7c>
			PWM_dutyCycle(PWM0,counter);

		}
		for(;counter>0;counter--){
			PWM_dutyCycle(PWM0,counter);
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	69 81       	ldd	r22, Y+1	; 0x01
     daa:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <PWM_dutyCycle>

		for(counter=1;counter<100;counter++){
			PWM_dutyCycle(PWM0,counter);

		}
		for(;counter>0;counter--){
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	81 50       	subi	r24, 0x01	; 1
     db2:	89 83       	std	Y+1, r24	; 0x01
     db4:	89 81       	ldd	r24, Y+1	; 0x01
     db6:	88 23       	and	r24, r24
     db8:	b1 f7       	brne	.-20     	; 0xda6 <main+0x6e>
     dba:	e7 cf       	rjmp	.-50     	; 0xd8a <main+0x52>

00000dbc <OV_TGL_FUNC>:

		}
	}
}

void OV_TGL_FUNC(void){
     dbc:	df 93       	push	r29
     dbe:	cf 93       	push	r28
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
	static volatile uint32_t OV_counter = 0;
	OV_counter++;
     dc4:	80 91 68 01 	lds	r24, 0x0168
     dc8:	90 91 69 01 	lds	r25, 0x0169
     dcc:	a0 91 6a 01 	lds	r26, 0x016A
     dd0:	b0 91 6b 01 	lds	r27, 0x016B
     dd4:	01 96       	adiw	r24, 0x01	; 1
     dd6:	a1 1d       	adc	r26, r1
     dd8:	b1 1d       	adc	r27, r1
     dda:	80 93 68 01 	sts	0x0168, r24
     dde:	90 93 69 01 	sts	0x0169, r25
     de2:	a0 93 6a 01 	sts	0x016A, r26
     de6:	b0 93 6b 01 	sts	0x016B, r27
	if((OV_counter%4000)==0){
     dea:	80 91 68 01 	lds	r24, 0x0168
     dee:	90 91 69 01 	lds	r25, 0x0169
     df2:	a0 91 6a 01 	lds	r26, 0x016A
     df6:	b0 91 6b 01 	lds	r27, 0x016B
     dfa:	20 ea       	ldi	r18, 0xA0	; 160
     dfc:	3f e0       	ldi	r19, 0x0F	; 15
     dfe:	40 e0       	ldi	r20, 0x00	; 0
     e00:	50 e0       	ldi	r21, 0x00	; 0
     e02:	bc 01       	movw	r22, r24
     e04:	cd 01       	movw	r24, r26
     e06:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <__udivmodsi4>
     e0a:	dc 01       	movw	r26, r24
     e0c:	cb 01       	movw	r24, r22
     e0e:	00 97       	sbiw	r24, 0x00	; 0
     e10:	a1 05       	cpc	r26, r1
     e12:	b1 05       	cpc	r27, r1
     e14:	21 f4       	brne	.+8      	; 0xe1e <OV_TGL_FUNC+0x62>
		DIO_TogglePin(PORTC,PIN0);
     e16:	82 e0       	ldi	r24, 0x02	; 2
     e18:	60 e0       	ldi	r22, 0x00	; 0
     e1a:	0e 94 1b 0b 	call	0x1636	; 0x1636 <DIO_TogglePin>
	}
	if ((OV_counter%8000)==0){
     e1e:	80 91 68 01 	lds	r24, 0x0168
     e22:	90 91 69 01 	lds	r25, 0x0169
     e26:	a0 91 6a 01 	lds	r26, 0x016A
     e2a:	b0 91 6b 01 	lds	r27, 0x016B
     e2e:	20 e4       	ldi	r18, 0x40	; 64
     e30:	3f e1       	ldi	r19, 0x1F	; 31
     e32:	40 e0       	ldi	r20, 0x00	; 0
     e34:	50 e0       	ldi	r21, 0x00	; 0
     e36:	bc 01       	movw	r22, r24
     e38:	cd 01       	movw	r24, r26
     e3a:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <__udivmodsi4>
     e3e:	dc 01       	movw	r26, r24
     e40:	cb 01       	movw	r24, r22
     e42:	00 97       	sbiw	r24, 0x00	; 0
     e44:	a1 05       	cpc	r26, r1
     e46:	b1 05       	cpc	r27, r1
     e48:	21 f4       	brne	.+8      	; 0xe52 <OV_TGL_FUNC+0x96>
		DIO_TogglePin(PORTD,PIN0);
     e4a:	83 e0       	ldi	r24, 0x03	; 3
     e4c:	60 e0       	ldi	r22, 0x00	; 0
     e4e:	0e 94 1b 0b 	call	0x1636	; 0x1636 <DIO_TogglePin>
	}
}
     e52:	cf 91       	pop	r28
     e54:	df 91       	pop	r29
     e56:	08 95       	ret

00000e58 <CTC_TGL_FUNC>:
void CTC_TGL_FUNC(void){
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
	static volatile uint32_t CTC_counter = 0;
	CTC_counter++;
     e60:	80 91 6c 01 	lds	r24, 0x016C
     e64:	90 91 6d 01 	lds	r25, 0x016D
     e68:	a0 91 6e 01 	lds	r26, 0x016E
     e6c:	b0 91 6f 01 	lds	r27, 0x016F
     e70:	01 96       	adiw	r24, 0x01	; 1
     e72:	a1 1d       	adc	r26, r1
     e74:	b1 1d       	adc	r27, r1
     e76:	80 93 6c 01 	sts	0x016C, r24
     e7a:	90 93 6d 01 	sts	0x016D, r25
     e7e:	a0 93 6e 01 	sts	0x016E, r26
     e82:	b0 93 6f 01 	sts	0x016F, r27
	if((CTC_counter%2000)==0){
     e86:	80 91 6c 01 	lds	r24, 0x016C
     e8a:	90 91 6d 01 	lds	r25, 0x016D
     e8e:	a0 91 6e 01 	lds	r26, 0x016E
     e92:	b0 91 6f 01 	lds	r27, 0x016F
     e96:	20 ed       	ldi	r18, 0xD0	; 208
     e98:	37 e0       	ldi	r19, 0x07	; 7
     e9a:	40 e0       	ldi	r20, 0x00	; 0
     e9c:	50 e0       	ldi	r21, 0x00	; 0
     e9e:	bc 01       	movw	r22, r24
     ea0:	cd 01       	movw	r24, r26
     ea2:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <__udivmodsi4>
     ea6:	dc 01       	movw	r26, r24
     ea8:	cb 01       	movw	r24, r22
     eaa:	00 97       	sbiw	r24, 0x00	; 0
     eac:	a1 05       	cpc	r26, r1
     eae:	b1 05       	cpc	r27, r1
     eb0:	21 f4       	brne	.+8      	; 0xeba <CTC_TGL_FUNC+0x62>
		DIO_TogglePin(PORTB,PIN0);
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	60 e0       	ldi	r22, 0x00	; 0
     eb6:	0e 94 1b 0b 	call	0x1636	; 0x1636 <DIO_TogglePin>
	}
	if ((CTC_counter%4000)==0){
     eba:	80 91 6c 01 	lds	r24, 0x016C
     ebe:	90 91 6d 01 	lds	r25, 0x016D
     ec2:	a0 91 6e 01 	lds	r26, 0x016E
     ec6:	b0 91 6f 01 	lds	r27, 0x016F
     eca:	20 ea       	ldi	r18, 0xA0	; 160
     ecc:	3f e0       	ldi	r19, 0x0F	; 15
     ece:	40 e0       	ldi	r20, 0x00	; 0
     ed0:	50 e0       	ldi	r21, 0x00	; 0
     ed2:	bc 01       	movw	r22, r24
     ed4:	cd 01       	movw	r24, r26
     ed6:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <__udivmodsi4>
     eda:	dc 01       	movw	r26, r24
     edc:	cb 01       	movw	r24, r22
     ede:	00 97       	sbiw	r24, 0x00	; 0
     ee0:	a1 05       	cpc	r26, r1
     ee2:	b1 05       	cpc	r27, r1
     ee4:	21 f4       	brne	.+8      	; 0xeee <CTC_TGL_FUNC+0x96>
		DIO_TogglePin(PORTA,PIN0);
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	60 e0       	ldi	r22, 0x00	; 0
     eea:	0e 94 1b 0b 	call	0x1636	; 0x1636 <DIO_TogglePin>
	}

}
     eee:	cf 91       	pop	r28
     ef0:	df 91       	pop	r29
     ef2:	08 95       	ret

00000ef4 <DIO_setPortDirection>:


/* APIs IMPLEMENTATION */

/* API to Set Port Direction */
DIO_ERROR_state_t DIO_setPortDirection(uint8_t PortID, uint8_t PortDirection) {
     ef4:	df 93       	push	r29
     ef6:	cf 93       	push	r28
     ef8:	00 d0       	rcall	.+0      	; 0xefa <DIO_setPortDirection+0x6>
     efa:	00 d0       	rcall	.+0      	; 0xefc <DIO_setPortDirection+0x8>
     efc:	0f 92       	push	r0
     efe:	cd b7       	in	r28, 0x3d	; 61
     f00:	de b7       	in	r29, 0x3e	; 62
     f02:	89 83       	std	Y+1, r24	; 0x01
     f04:	6a 83       	std	Y+2, r22	; 0x02
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA )) {
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	84 30       	cpi	r24, 0x04	; 4
     f0a:	a0 f5       	brcc	.+104    	; 0xf74 <DIO_setPortDirection+0x80>
		switch (PortID) {
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	3d 83       	std	Y+5, r19	; 0x05
     f14:	2c 83       	std	Y+4, r18	; 0x04
     f16:	8c 81       	ldd	r24, Y+4	; 0x04
     f18:	9d 81       	ldd	r25, Y+5	; 0x05
     f1a:	81 30       	cpi	r24, 0x01	; 1
     f1c:	91 05       	cpc	r25, r1
     f1e:	d1 f0       	breq	.+52     	; 0xf54 <DIO_setPortDirection+0x60>
     f20:	2c 81       	ldd	r18, Y+4	; 0x04
     f22:	3d 81       	ldd	r19, Y+5	; 0x05
     f24:	22 30       	cpi	r18, 0x02	; 2
     f26:	31 05       	cpc	r19, r1
     f28:	2c f4       	brge	.+10     	; 0xf34 <DIO_setPortDirection+0x40>
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	9d 81       	ldd	r25, Y+5	; 0x05
     f2e:	00 97       	sbiw	r24, 0x00	; 0
     f30:	61 f0       	breq	.+24     	; 0xf4a <DIO_setPortDirection+0x56>
     f32:	1e c0       	rjmp	.+60     	; 0xf70 <DIO_setPortDirection+0x7c>
     f34:	2c 81       	ldd	r18, Y+4	; 0x04
     f36:	3d 81       	ldd	r19, Y+5	; 0x05
     f38:	22 30       	cpi	r18, 0x02	; 2
     f3a:	31 05       	cpc	r19, r1
     f3c:	81 f0       	breq	.+32     	; 0xf5e <DIO_setPortDirection+0x6a>
     f3e:	8c 81       	ldd	r24, Y+4	; 0x04
     f40:	9d 81       	ldd	r25, Y+5	; 0x05
     f42:	83 30       	cpi	r24, 0x03	; 3
     f44:	91 05       	cpc	r25, r1
     f46:	81 f0       	breq	.+32     	; 0xf68 <DIO_setPortDirection+0x74>
     f48:	13 c0       	rjmp	.+38     	; 0xf70 <DIO_setPortDirection+0x7c>
		case PORTA :
			PORTA_DIR = PortDirection;
     f4a:	ea e3       	ldi	r30, 0x3A	; 58
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	8a 81       	ldd	r24, Y+2	; 0x02
     f50:	80 83       	st	Z, r24
     f52:	0e c0       	rjmp	.+28     	; 0xf70 <DIO_setPortDirection+0x7c>
			break;
		case PORTB :
			PORTB_DIR = PortDirection;
     f54:	e7 e3       	ldi	r30, 0x37	; 55
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	80 83       	st	Z, r24
     f5c:	09 c0       	rjmp	.+18     	; 0xf70 <DIO_setPortDirection+0x7c>
			break;
		case PORTC :
			PORTC_DIR = PortDirection;
     f5e:	e4 e3       	ldi	r30, 0x34	; 52
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	8a 81       	ldd	r24, Y+2	; 0x02
     f64:	80 83       	st	Z, r24
     f66:	04 c0       	rjmp	.+8      	; 0xf70 <DIO_setPortDirection+0x7c>
			break;
		case PORTD :
			PORTD_DIR = PortDirection;
     f68:	e1 e3       	ldi	r30, 0x31	; 49
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	8a 81       	ldd	r24, Y+2	; 0x02
     f6e:	80 83       	st	Z, r24
			break;

		} //END of SWITCH
		return E_DIO_SUCCESS ;
     f70:	1b 82       	std	Y+3, r1	; 0x03
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <DIO_setPortDirection+0x84>
	}	  //END of IF
	else {
		return E_DIO_INVALID_PORT_NUMBER ;
     f74:	91 e0       	ldi	r25, 0x01	; 1
     f76:	9b 83       	std	Y+3, r25	; 0x03
     f78:	8b 81       	ldd	r24, Y+3	; 0x03

	}	  //END of ELSE
}	  //END DIO_setPortDirection
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	0f 90       	pop	r0
     f84:	cf 91       	pop	r28
     f86:	df 91       	pop	r29
     f88:	08 95       	ret

00000f8a <DIO_setPinDirection>:

/* API to Set Pin Direction */
DIO_ERROR_state_t DIO_setPinDirection(uint8_t PortID, uint8_t PinNumber,
		uint8_t PinDirection) {
     f8a:	df 93       	push	r29
     f8c:	cf 93       	push	r28
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
     f92:	28 97       	sbiw	r28, 0x08	; 8
     f94:	0f b6       	in	r0, 0x3f	; 63
     f96:	f8 94       	cli
     f98:	de bf       	out	0x3e, r29	; 62
     f9a:	0f be       	out	0x3f, r0	; 63
     f9c:	cd bf       	out	0x3d, r28	; 61
     f9e:	89 83       	std	Y+1, r24	; 0x01
     fa0:	6a 83       	std	Y+2, r22	; 0x02
     fa2:	4b 83       	std	Y+3, r20	; 0x03
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA ) && (PinNumber >= PIN0 )
     fa4:	89 81       	ldd	r24, Y+1	; 0x01
     fa6:	84 30       	cpi	r24, 0x04	; 4
     fa8:	08 f0       	brcs	.+2      	; 0xfac <DIO_setPinDirection+0x22>
     faa:	f4 c0       	rjmp	.+488    	; 0x1194 <DIO_setPinDirection+0x20a>
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	88 30       	cpi	r24, 0x08	; 8
     fb0:	08 f0       	brcs	.+2      	; 0xfb4 <DIO_setPinDirection+0x2a>
     fb2:	f0 c0       	rjmp	.+480    	; 0x1194 <DIO_setPinDirection+0x20a>
			&& (PinNumber <= PIN7 )) {
		if (PinDirection == PIN_OUTPUT) {
     fb4:	8b 81       	ldd	r24, Y+3	; 0x03
     fb6:	81 30       	cpi	r24, 0x01	; 1
     fb8:	09 f0       	breq	.+2      	; 0xfbc <DIO_setPinDirection+0x32>
     fba:	70 c0       	rjmp	.+224    	; 0x109c <DIO_setPinDirection+0x112>
			switch (PortID) {
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	38 87       	std	Y+8, r19	; 0x08
     fc4:	2f 83       	std	Y+7, r18	; 0x07
     fc6:	8f 81       	ldd	r24, Y+7	; 0x07
     fc8:	98 85       	ldd	r25, Y+8	; 0x08
     fca:	81 30       	cpi	r24, 0x01	; 1
     fcc:	91 05       	cpc	r25, r1
     fce:	49 f1       	breq	.+82     	; 0x1022 <DIO_setPinDirection+0x98>
     fd0:	2f 81       	ldd	r18, Y+7	; 0x07
     fd2:	38 85       	ldd	r19, Y+8	; 0x08
     fd4:	22 30       	cpi	r18, 0x02	; 2
     fd6:	31 05       	cpc	r19, r1
     fd8:	2c f4       	brge	.+10     	; 0xfe4 <DIO_setPinDirection+0x5a>
     fda:	8f 81       	ldd	r24, Y+7	; 0x07
     fdc:	98 85       	ldd	r25, Y+8	; 0x08
     fde:	00 97       	sbiw	r24, 0x00	; 0
     fe0:	61 f0       	breq	.+24     	; 0xffa <DIO_setPinDirection+0x70>
     fe2:	5a c0       	rjmp	.+180    	; 0x1098 <DIO_setPinDirection+0x10e>
     fe4:	2f 81       	ldd	r18, Y+7	; 0x07
     fe6:	38 85       	ldd	r19, Y+8	; 0x08
     fe8:	22 30       	cpi	r18, 0x02	; 2
     fea:	31 05       	cpc	r19, r1
     fec:	71 f1       	breq	.+92     	; 0x104a <DIO_setPinDirection+0xc0>
     fee:	8f 81       	ldd	r24, Y+7	; 0x07
     ff0:	98 85       	ldd	r25, Y+8	; 0x08
     ff2:	83 30       	cpi	r24, 0x03	; 3
     ff4:	91 05       	cpc	r25, r1
     ff6:	e9 f1       	breq	.+122    	; 0x1072 <DIO_setPinDirection+0xe8>
     ff8:	4f c0       	rjmp	.+158    	; 0x1098 <DIO_setPinDirection+0x10e>
			case PORTA :
				Set_Bit(PORTA_DIR, PinNumber);
     ffa:	aa e3       	ldi	r26, 0x3A	; 58
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	ea e3       	ldi	r30, 0x3A	; 58
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	48 2f       	mov	r20, r24
    1006:	8a 81       	ldd	r24, Y+2	; 0x02
    1008:	28 2f       	mov	r18, r24
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	02 2e       	mov	r0, r18
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <DIO_setPinDirection+0x8e>
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	0a 94       	dec	r0
    101a:	e2 f7       	brpl	.-8      	; 0x1014 <DIO_setPinDirection+0x8a>
    101c:	84 2b       	or	r24, r20
    101e:	8c 93       	st	X, r24
    1020:	3b c0       	rjmp	.+118    	; 0x1098 <DIO_setPinDirection+0x10e>
				break;
			case PORTB :
				Set_Bit(PORTB_DIR, PinNumber);
    1022:	a7 e3       	ldi	r26, 0x37	; 55
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e7 e3       	ldi	r30, 0x37	; 55
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	48 2f       	mov	r20, r24
    102e:	8a 81       	ldd	r24, Y+2	; 0x02
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	02 2e       	mov	r0, r18
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <DIO_setPinDirection+0xb6>
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	0a 94       	dec	r0
    1042:	e2 f7       	brpl	.-8      	; 0x103c <DIO_setPinDirection+0xb2>
    1044:	84 2b       	or	r24, r20
    1046:	8c 93       	st	X, r24
    1048:	27 c0       	rjmp	.+78     	; 0x1098 <DIO_setPinDirection+0x10e>
				break;
			case PORTC :
				Set_Bit(PORTC_DIR, PinNumber);
    104a:	a4 e3       	ldi	r26, 0x34	; 52
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e4 e3       	ldi	r30, 0x34	; 52
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	48 2f       	mov	r20, r24
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	02 2e       	mov	r0, r18
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <DIO_setPinDirection+0xde>
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	0a 94       	dec	r0
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <DIO_setPinDirection+0xda>
    106c:	84 2b       	or	r24, r20
    106e:	8c 93       	st	X, r24
    1070:	13 c0       	rjmp	.+38     	; 0x1098 <DIO_setPinDirection+0x10e>
				break;
			case PORTD :
				Set_Bit(PORTD_DIR, PinNumber);
    1072:	a1 e3       	ldi	r26, 0x31	; 49
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e1 e3       	ldi	r30, 0x31	; 49
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	48 2f       	mov	r20, r24
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	02 2e       	mov	r0, r18
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <DIO_setPinDirection+0x106>
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	0a 94       	dec	r0
    1092:	e2 f7       	brpl	.-8      	; 0x108c <DIO_setPinDirection+0x102>
    1094:	84 2b       	or	r24, r20
    1096:	8c 93       	st	X, r24
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
    1098:	1e 82       	std	Y+6, r1	; 0x06
    109a:	7e c0       	rjmp	.+252    	; 0x1198 <DIO_setPinDirection+0x20e>
		} // END of IF that check for the direction if it is INPUT
		else if (PinDirection == PIN_INPUT) {
    109c:	8b 81       	ldd	r24, Y+3	; 0x03
    109e:	88 23       	and	r24, r24
    10a0:	09 f0       	breq	.+2      	; 0x10a4 <DIO_setPinDirection+0x11a>
    10a2:	75 c0       	rjmp	.+234    	; 0x118e <DIO_setPinDirection+0x204>
			switch (PortID) {
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	3d 83       	std	Y+5, r19	; 0x05
    10ac:	2c 83       	std	Y+4, r18	; 0x04
    10ae:	8c 81       	ldd	r24, Y+4	; 0x04
    10b0:	9d 81       	ldd	r25, Y+5	; 0x05
    10b2:	81 30       	cpi	r24, 0x01	; 1
    10b4:	91 05       	cpc	r25, r1
    10b6:	59 f1       	breq	.+86     	; 0x110e <DIO_setPinDirection+0x184>
    10b8:	2c 81       	ldd	r18, Y+4	; 0x04
    10ba:	3d 81       	ldd	r19, Y+5	; 0x05
    10bc:	22 30       	cpi	r18, 0x02	; 2
    10be:	31 05       	cpc	r19, r1
    10c0:	2c f4       	brge	.+10     	; 0x10cc <DIO_setPinDirection+0x142>
    10c2:	8c 81       	ldd	r24, Y+4	; 0x04
    10c4:	9d 81       	ldd	r25, Y+5	; 0x05
    10c6:	00 97       	sbiw	r24, 0x00	; 0
    10c8:	69 f0       	breq	.+26     	; 0x10e4 <DIO_setPinDirection+0x15a>
    10ca:	5f c0       	rjmp	.+190    	; 0x118a <DIO_setPinDirection+0x200>
    10cc:	2c 81       	ldd	r18, Y+4	; 0x04
    10ce:	3d 81       	ldd	r19, Y+5	; 0x05
    10d0:	22 30       	cpi	r18, 0x02	; 2
    10d2:	31 05       	cpc	r19, r1
    10d4:	89 f1       	breq	.+98     	; 0x1138 <DIO_setPinDirection+0x1ae>
    10d6:	8c 81       	ldd	r24, Y+4	; 0x04
    10d8:	9d 81       	ldd	r25, Y+5	; 0x05
    10da:	83 30       	cpi	r24, 0x03	; 3
    10dc:	91 05       	cpc	r25, r1
    10de:	09 f4       	brne	.+2      	; 0x10e2 <DIO_setPinDirection+0x158>
    10e0:	40 c0       	rjmp	.+128    	; 0x1162 <DIO_setPinDirection+0x1d8>
    10e2:	53 c0       	rjmp	.+166    	; 0x118a <DIO_setPinDirection+0x200>
			case PORTA :
				Clr_Bit(PORTA_DIR, PinNumber);
    10e4:	aa e3       	ldi	r26, 0x3A	; 58
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	ea e3       	ldi	r30, 0x3A	; 58
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <DIO_setPinDirection+0x178>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <DIO_setPinDirection+0x174>
    1106:	80 95       	com	r24
    1108:	84 23       	and	r24, r20
    110a:	8c 93       	st	X, r24
    110c:	3e c0       	rjmp	.+124    	; 0x118a <DIO_setPinDirection+0x200>
				break;
			case PORTB :
				Clr_Bit(PORTB_DIR, PinNumber);
    110e:	a7 e3       	ldi	r26, 0x37	; 55
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	e7 e3       	ldi	r30, 0x37	; 55
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	48 2f       	mov	r20, r24
    111a:	8a 81       	ldd	r24, Y+2	; 0x02
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	02 2e       	mov	r0, r18
    1126:	02 c0       	rjmp	.+4      	; 0x112c <DIO_setPinDirection+0x1a2>
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	0a 94       	dec	r0
    112e:	e2 f7       	brpl	.-8      	; 0x1128 <DIO_setPinDirection+0x19e>
    1130:	80 95       	com	r24
    1132:	84 23       	and	r24, r20
    1134:	8c 93       	st	X, r24
    1136:	29 c0       	rjmp	.+82     	; 0x118a <DIO_setPinDirection+0x200>
				break;
			case PORTC :
				Clr_Bit(PORTC_DIR, PinNumber);
    1138:	a4 e3       	ldi	r26, 0x34	; 52
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e4 e3       	ldi	r30, 0x34	; 52
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	48 2f       	mov	r20, r24
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	02 2e       	mov	r0, r18
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <DIO_setPinDirection+0x1cc>
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	0a 94       	dec	r0
    1158:	e2 f7       	brpl	.-8      	; 0x1152 <DIO_setPinDirection+0x1c8>
    115a:	80 95       	com	r24
    115c:	84 23       	and	r24, r20
    115e:	8c 93       	st	X, r24
    1160:	14 c0       	rjmp	.+40     	; 0x118a <DIO_setPinDirection+0x200>
				break;
			case PORTD :
				Clr_Bit(PORTD_DIR, PinNumber);
    1162:	a1 e3       	ldi	r26, 0x31	; 49
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e1 e3       	ldi	r30, 0x31	; 49
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	48 2f       	mov	r20, r24
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	02 2e       	mov	r0, r18
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <DIO_setPinDirection+0x1f6>
    117c:	88 0f       	add	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	0a 94       	dec	r0
    1182:	e2 f7       	brpl	.-8      	; 0x117c <DIO_setPinDirection+0x1f2>
    1184:	80 95       	com	r24
    1186:	84 23       	and	r24, r20
    1188:	8c 93       	st	X, r24
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
    118a:	1e 82       	std	Y+6, r1	; 0x06
    118c:	05 c0       	rjmp	.+10     	; 0x1198 <DIO_setPinDirection+0x20e>
		} // END of ELSE IF that check for the direction if it is INPUT
		else {
			return E_DIO_INVALID_PIN_DIRECTION ;
    118e:	92 e0       	ldi	r25, 0x02	; 2
    1190:	9e 83       	std	Y+6, r25	; 0x06
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <DIO_setPinDirection+0x20e>
		} //END OF ELSE

	}	  //END of IF That checking the port and pin number

	else {
		return E_DIO_INVALID_PORT_NUMBER ;
    1194:	21 e0       	ldi	r18, 0x01	; 1
    1196:	2e 83       	std	Y+6, r18	; 0x06
    1198:	8e 81       	ldd	r24, Y+6	; 0x06

	}	  //END of ELSE
}	  //END DIO_setPinDirection
    119a:	28 96       	adiw	r28, 0x08	; 8
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	f8 94       	cli
    11a0:	de bf       	out	0x3e, r29	; 62
    11a2:	0f be       	out	0x3f, r0	; 63
    11a4:	cd bf       	out	0x3d, r28	; 61
    11a6:	cf 91       	pop	r28
    11a8:	df 91       	pop	r29
    11aa:	08 95       	ret

000011ac <DIO_writePortValue>:

/* API to Write Port  Value */
DIO_ERROR_state_t DIO_writePortValue(uint8_t PortID, uint8_t PortValue) {
    11ac:	df 93       	push	r29
    11ae:	cf 93       	push	r28
    11b0:	00 d0       	rcall	.+0      	; 0x11b2 <DIO_writePortValue+0x6>
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <DIO_writePortValue+0x8>
    11b4:	0f 92       	push	r0
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	89 83       	std	Y+1, r24	; 0x01
    11bc:	6a 83       	std	Y+2, r22	; 0x02
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA )) {
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	84 30       	cpi	r24, 0x04	; 4
    11c2:	a0 f5       	brcc	.+104    	; 0x122c <DIO_writePortValue+0x80>
		switch (PortID) {
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	3d 83       	std	Y+5, r19	; 0x05
    11cc:	2c 83       	std	Y+4, r18	; 0x04
    11ce:	8c 81       	ldd	r24, Y+4	; 0x04
    11d0:	9d 81       	ldd	r25, Y+5	; 0x05
    11d2:	81 30       	cpi	r24, 0x01	; 1
    11d4:	91 05       	cpc	r25, r1
    11d6:	d1 f0       	breq	.+52     	; 0x120c <DIO_writePortValue+0x60>
    11d8:	2c 81       	ldd	r18, Y+4	; 0x04
    11da:	3d 81       	ldd	r19, Y+5	; 0x05
    11dc:	22 30       	cpi	r18, 0x02	; 2
    11de:	31 05       	cpc	r19, r1
    11e0:	2c f4       	brge	.+10     	; 0x11ec <DIO_writePortValue+0x40>
    11e2:	8c 81       	ldd	r24, Y+4	; 0x04
    11e4:	9d 81       	ldd	r25, Y+5	; 0x05
    11e6:	00 97       	sbiw	r24, 0x00	; 0
    11e8:	61 f0       	breq	.+24     	; 0x1202 <DIO_writePortValue+0x56>
    11ea:	1e c0       	rjmp	.+60     	; 0x1228 <DIO_writePortValue+0x7c>
    11ec:	2c 81       	ldd	r18, Y+4	; 0x04
    11ee:	3d 81       	ldd	r19, Y+5	; 0x05
    11f0:	22 30       	cpi	r18, 0x02	; 2
    11f2:	31 05       	cpc	r19, r1
    11f4:	81 f0       	breq	.+32     	; 0x1216 <DIO_writePortValue+0x6a>
    11f6:	8c 81       	ldd	r24, Y+4	; 0x04
    11f8:	9d 81       	ldd	r25, Y+5	; 0x05
    11fa:	83 30       	cpi	r24, 0x03	; 3
    11fc:	91 05       	cpc	r25, r1
    11fe:	81 f0       	breq	.+32     	; 0x1220 <DIO_writePortValue+0x74>
    1200:	13 c0       	rjmp	.+38     	; 0x1228 <DIO_writePortValue+0x7c>
		case PORTA :
			PORTA_DATA = PortValue;
    1202:	eb e3       	ldi	r30, 0x3B	; 59
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	80 83       	st	Z, r24
    120a:	0e c0       	rjmp	.+28     	; 0x1228 <DIO_writePortValue+0x7c>
			break;
		case PORTB :
			PORTB_DATA = PortValue;
    120c:	e8 e3       	ldi	r30, 0x38	; 56
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	8a 81       	ldd	r24, Y+2	; 0x02
    1212:	80 83       	st	Z, r24
    1214:	09 c0       	rjmp	.+18     	; 0x1228 <DIO_writePortValue+0x7c>
			break;
		case PORTC :
			PORTC_DATA = PortValue;
    1216:	e5 e3       	ldi	r30, 0x35	; 53
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	8a 81       	ldd	r24, Y+2	; 0x02
    121c:	80 83       	st	Z, r24
    121e:	04 c0       	rjmp	.+8      	; 0x1228 <DIO_writePortValue+0x7c>
			break;
		case PORTD :
			PORTD_DATA = PortValue;
    1220:	e2 e3       	ldi	r30, 0x32	; 50
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	8a 81       	ldd	r24, Y+2	; 0x02
    1226:	80 83       	st	Z, r24
			break;

		} //END of SWITCH
		return E_DIO_SUCCESS ;
    1228:	1b 82       	std	Y+3, r1	; 0x03
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <DIO_writePortValue+0x84>
	}	  //END of IF
	else {
		return E_DIO_INVALID_PORT_NUMBER ;
    122c:	91 e0       	ldi	r25, 0x01	; 1
    122e:	9b 83       	std	Y+3, r25	; 0x03
    1230:	8b 81       	ldd	r24, Y+3	; 0x03

	}	  //END of ELSE
}	  //END DIO_writePortValue
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	0f 90       	pop	r0
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	cf 91       	pop	r28
    123e:	df 91       	pop	r29
    1240:	08 95       	ret

00001242 <DIO_writePinValue>:

/* API to Write Pin  Value */
DIO_ERROR_state_t DIO_writePinValue(uint8_t PortID, uint8_t PinNumber,
		uint8_t PinDirection) {
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
    124a:	28 97       	sbiw	r28, 0x08	; 8
    124c:	0f b6       	in	r0, 0x3f	; 63
    124e:	f8 94       	cli
    1250:	de bf       	out	0x3e, r29	; 62
    1252:	0f be       	out	0x3f, r0	; 63
    1254:	cd bf       	out	0x3d, r28	; 61
    1256:	89 83       	std	Y+1, r24	; 0x01
    1258:	6a 83       	std	Y+2, r22	; 0x02
    125a:	4b 83       	std	Y+3, r20	; 0x03
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA ) && (PinNumber >= PIN0 )
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	84 30       	cpi	r24, 0x04	; 4
    1260:	08 f0       	brcs	.+2      	; 0x1264 <DIO_writePinValue+0x22>
    1262:	f4 c0       	rjmp	.+488    	; 0x144c <DIO_writePinValue+0x20a>
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	88 30       	cpi	r24, 0x08	; 8
    1268:	08 f0       	brcs	.+2      	; 0x126c <DIO_writePinValue+0x2a>
    126a:	f0 c0       	rjmp	.+480    	; 0x144c <DIO_writePinValue+0x20a>
			&& (PinNumber <= PIN7 )) {
		if (PinDirection == PIN_HIGH) {
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	81 30       	cpi	r24, 0x01	; 1
    1270:	09 f0       	breq	.+2      	; 0x1274 <DIO_writePinValue+0x32>
    1272:	70 c0       	rjmp	.+224    	; 0x1354 <DIO_writePinValue+0x112>
			switch (PortID) {
    1274:	89 81       	ldd	r24, Y+1	; 0x01
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	38 87       	std	Y+8, r19	; 0x08
    127c:	2f 83       	std	Y+7, r18	; 0x07
    127e:	8f 81       	ldd	r24, Y+7	; 0x07
    1280:	98 85       	ldd	r25, Y+8	; 0x08
    1282:	81 30       	cpi	r24, 0x01	; 1
    1284:	91 05       	cpc	r25, r1
    1286:	49 f1       	breq	.+82     	; 0x12da <DIO_writePinValue+0x98>
    1288:	2f 81       	ldd	r18, Y+7	; 0x07
    128a:	38 85       	ldd	r19, Y+8	; 0x08
    128c:	22 30       	cpi	r18, 0x02	; 2
    128e:	31 05       	cpc	r19, r1
    1290:	2c f4       	brge	.+10     	; 0x129c <DIO_writePinValue+0x5a>
    1292:	8f 81       	ldd	r24, Y+7	; 0x07
    1294:	98 85       	ldd	r25, Y+8	; 0x08
    1296:	00 97       	sbiw	r24, 0x00	; 0
    1298:	61 f0       	breq	.+24     	; 0x12b2 <DIO_writePinValue+0x70>
    129a:	5a c0       	rjmp	.+180    	; 0x1350 <DIO_writePinValue+0x10e>
    129c:	2f 81       	ldd	r18, Y+7	; 0x07
    129e:	38 85       	ldd	r19, Y+8	; 0x08
    12a0:	22 30       	cpi	r18, 0x02	; 2
    12a2:	31 05       	cpc	r19, r1
    12a4:	71 f1       	breq	.+92     	; 0x1302 <DIO_writePinValue+0xc0>
    12a6:	8f 81       	ldd	r24, Y+7	; 0x07
    12a8:	98 85       	ldd	r25, Y+8	; 0x08
    12aa:	83 30       	cpi	r24, 0x03	; 3
    12ac:	91 05       	cpc	r25, r1
    12ae:	e9 f1       	breq	.+122    	; 0x132a <DIO_writePinValue+0xe8>
    12b0:	4f c0       	rjmp	.+158    	; 0x1350 <DIO_writePinValue+0x10e>
			case PORTA :
				Set_Bit(PORTA_DATA, PinNumber);
    12b2:	ab e3       	ldi	r26, 0x3B	; 59
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	eb e3       	ldi	r30, 0x3B	; 59
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	48 2f       	mov	r20, r24
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	28 2f       	mov	r18, r24
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	02 2e       	mov	r0, r18
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <DIO_writePinValue+0x8e>
    12cc:	88 0f       	add	r24, r24
    12ce:	99 1f       	adc	r25, r25
    12d0:	0a 94       	dec	r0
    12d2:	e2 f7       	brpl	.-8      	; 0x12cc <DIO_writePinValue+0x8a>
    12d4:	84 2b       	or	r24, r20
    12d6:	8c 93       	st	X, r24
    12d8:	3b c0       	rjmp	.+118    	; 0x1350 <DIO_writePinValue+0x10e>
				break;
			case PORTB :
				Set_Bit(PORTB_DATA, PinNumber);
    12da:	a8 e3       	ldi	r26, 0x38	; 56
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	e8 e3       	ldi	r30, 0x38	; 56
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	48 2f       	mov	r20, r24
    12e6:	8a 81       	ldd	r24, Y+2	; 0x02
    12e8:	28 2f       	mov	r18, r24
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	02 2e       	mov	r0, r18
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <DIO_writePinValue+0xb6>
    12f4:	88 0f       	add	r24, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	0a 94       	dec	r0
    12fa:	e2 f7       	brpl	.-8      	; 0x12f4 <DIO_writePinValue+0xb2>
    12fc:	84 2b       	or	r24, r20
    12fe:	8c 93       	st	X, r24
    1300:	27 c0       	rjmp	.+78     	; 0x1350 <DIO_writePinValue+0x10e>
				break;
			case PORTC :
				Set_Bit(PORTC_DATA, PinNumber);
    1302:	a5 e3       	ldi	r26, 0x35	; 53
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	e5 e3       	ldi	r30, 0x35	; 53
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	48 2f       	mov	r20, r24
    130e:	8a 81       	ldd	r24, Y+2	; 0x02
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	02 2e       	mov	r0, r18
    131a:	02 c0       	rjmp	.+4      	; 0x1320 <DIO_writePinValue+0xde>
    131c:	88 0f       	add	r24, r24
    131e:	99 1f       	adc	r25, r25
    1320:	0a 94       	dec	r0
    1322:	e2 f7       	brpl	.-8      	; 0x131c <DIO_writePinValue+0xda>
    1324:	84 2b       	or	r24, r20
    1326:	8c 93       	st	X, r24
    1328:	13 c0       	rjmp	.+38     	; 0x1350 <DIO_writePinValue+0x10e>
				break;
			case PORTD :
				Set_Bit(PORTD_DATA, PinNumber);
    132a:	a2 e3       	ldi	r26, 0x32	; 50
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	e2 e3       	ldi	r30, 0x32	; 50
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	48 2f       	mov	r20, r24
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	28 2f       	mov	r18, r24
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	02 2e       	mov	r0, r18
    1342:	02 c0       	rjmp	.+4      	; 0x1348 <DIO_writePinValue+0x106>
    1344:	88 0f       	add	r24, r24
    1346:	99 1f       	adc	r25, r25
    1348:	0a 94       	dec	r0
    134a:	e2 f7       	brpl	.-8      	; 0x1344 <DIO_writePinValue+0x102>
    134c:	84 2b       	or	r24, r20
    134e:	8c 93       	st	X, r24
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
    1350:	1e 82       	std	Y+6, r1	; 0x06
    1352:	7e c0       	rjmp	.+252    	; 0x1450 <DIO_writePinValue+0x20e>
		} // END of IF that check for the direction if it is INPUT
		else if (PinDirection == PIN_LOW) {
    1354:	8b 81       	ldd	r24, Y+3	; 0x03
    1356:	88 23       	and	r24, r24
    1358:	09 f0       	breq	.+2      	; 0x135c <DIO_writePinValue+0x11a>
    135a:	75 c0       	rjmp	.+234    	; 0x1446 <DIO_writePinValue+0x204>
			switch (PortID) {
    135c:	89 81       	ldd	r24, Y+1	; 0x01
    135e:	28 2f       	mov	r18, r24
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	3d 83       	std	Y+5, r19	; 0x05
    1364:	2c 83       	std	Y+4, r18	; 0x04
    1366:	8c 81       	ldd	r24, Y+4	; 0x04
    1368:	9d 81       	ldd	r25, Y+5	; 0x05
    136a:	81 30       	cpi	r24, 0x01	; 1
    136c:	91 05       	cpc	r25, r1
    136e:	59 f1       	breq	.+86     	; 0x13c6 <DIO_writePinValue+0x184>
    1370:	2c 81       	ldd	r18, Y+4	; 0x04
    1372:	3d 81       	ldd	r19, Y+5	; 0x05
    1374:	22 30       	cpi	r18, 0x02	; 2
    1376:	31 05       	cpc	r19, r1
    1378:	2c f4       	brge	.+10     	; 0x1384 <DIO_writePinValue+0x142>
    137a:	8c 81       	ldd	r24, Y+4	; 0x04
    137c:	9d 81       	ldd	r25, Y+5	; 0x05
    137e:	00 97       	sbiw	r24, 0x00	; 0
    1380:	69 f0       	breq	.+26     	; 0x139c <DIO_writePinValue+0x15a>
    1382:	5f c0       	rjmp	.+190    	; 0x1442 <DIO_writePinValue+0x200>
    1384:	2c 81       	ldd	r18, Y+4	; 0x04
    1386:	3d 81       	ldd	r19, Y+5	; 0x05
    1388:	22 30       	cpi	r18, 0x02	; 2
    138a:	31 05       	cpc	r19, r1
    138c:	89 f1       	breq	.+98     	; 0x13f0 <DIO_writePinValue+0x1ae>
    138e:	8c 81       	ldd	r24, Y+4	; 0x04
    1390:	9d 81       	ldd	r25, Y+5	; 0x05
    1392:	83 30       	cpi	r24, 0x03	; 3
    1394:	91 05       	cpc	r25, r1
    1396:	09 f4       	brne	.+2      	; 0x139a <DIO_writePinValue+0x158>
    1398:	40 c0       	rjmp	.+128    	; 0x141a <DIO_writePinValue+0x1d8>
    139a:	53 c0       	rjmp	.+166    	; 0x1442 <DIO_writePinValue+0x200>
			case PORTA :
				Clr_Bit(PORTA_DATA, PinNumber);
    139c:	ab e3       	ldi	r26, 0x3B	; 59
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	eb e3       	ldi	r30, 0x3B	; 59
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	48 2f       	mov	r20, r24
    13a8:	8a 81       	ldd	r24, Y+2	; 0x02
    13aa:	28 2f       	mov	r18, r24
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	02 2e       	mov	r0, r18
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <DIO_writePinValue+0x178>
    13b6:	88 0f       	add	r24, r24
    13b8:	99 1f       	adc	r25, r25
    13ba:	0a 94       	dec	r0
    13bc:	e2 f7       	brpl	.-8      	; 0x13b6 <DIO_writePinValue+0x174>
    13be:	80 95       	com	r24
    13c0:	84 23       	and	r24, r20
    13c2:	8c 93       	st	X, r24
    13c4:	3e c0       	rjmp	.+124    	; 0x1442 <DIO_writePinValue+0x200>
				break;
			case PORTB :
				Clr_Bit(PORTB_DATA, PinNumber);
    13c6:	a8 e3       	ldi	r26, 0x38	; 56
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	e8 e3       	ldi	r30, 0x38	; 56
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	48 2f       	mov	r20, r24
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	28 2f       	mov	r18, r24
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	02 2e       	mov	r0, r18
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <DIO_writePinValue+0x1a2>
    13e0:	88 0f       	add	r24, r24
    13e2:	99 1f       	adc	r25, r25
    13e4:	0a 94       	dec	r0
    13e6:	e2 f7       	brpl	.-8      	; 0x13e0 <DIO_writePinValue+0x19e>
    13e8:	80 95       	com	r24
    13ea:	84 23       	and	r24, r20
    13ec:	8c 93       	st	X, r24
    13ee:	29 c0       	rjmp	.+82     	; 0x1442 <DIO_writePinValue+0x200>
				break;
			case PORTC :
				Clr_Bit(PORTC_DATA, PinNumber);
    13f0:	a5 e3       	ldi	r26, 0x35	; 53
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	e5 e3       	ldi	r30, 0x35	; 53
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	48 2f       	mov	r20, r24
    13fc:	8a 81       	ldd	r24, Y+2	; 0x02
    13fe:	28 2f       	mov	r18, r24
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	02 2e       	mov	r0, r18
    1408:	02 c0       	rjmp	.+4      	; 0x140e <DIO_writePinValue+0x1cc>
    140a:	88 0f       	add	r24, r24
    140c:	99 1f       	adc	r25, r25
    140e:	0a 94       	dec	r0
    1410:	e2 f7       	brpl	.-8      	; 0x140a <DIO_writePinValue+0x1c8>
    1412:	80 95       	com	r24
    1414:	84 23       	and	r24, r20
    1416:	8c 93       	st	X, r24
    1418:	14 c0       	rjmp	.+40     	; 0x1442 <DIO_writePinValue+0x200>
				break;
			case PORTD :
				Clr_Bit(PORTD_DATA, PinNumber);
    141a:	a2 e3       	ldi	r26, 0x32	; 50
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e2 e3       	ldi	r30, 0x32	; 50
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	48 2f       	mov	r20, r24
    1426:	8a 81       	ldd	r24, Y+2	; 0x02
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	02 2e       	mov	r0, r18
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <DIO_writePinValue+0x1f6>
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	0a 94       	dec	r0
    143a:	e2 f7       	brpl	.-8      	; 0x1434 <DIO_writePinValue+0x1f2>
    143c:	80 95       	com	r24
    143e:	84 23       	and	r24, r20
    1440:	8c 93       	st	X, r24
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
    1442:	1e 82       	std	Y+6, r1	; 0x06
    1444:	05 c0       	rjmp	.+10     	; 0x1450 <DIO_writePinValue+0x20e>
		} // END of ELSE IF that check for the direction if it is INPUT
		else {
			return E_DIO_INVALID_PIN_DIRECTION ;
    1446:	92 e0       	ldi	r25, 0x02	; 2
    1448:	9e 83       	std	Y+6, r25	; 0x06
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <DIO_writePinValue+0x20e>
		} //END OF ELSE

	}	  //END of IF That checking the port and pin number

	else {
		return E_DIO_INVALID_PORT_NUMBER ;
    144c:	21 e0       	ldi	r18, 0x01	; 1
    144e:	2e 83       	std	Y+6, r18	; 0x06
    1450:	8e 81       	ldd	r24, Y+6	; 0x06

	}	  //END of ELSE
}	  //END of DIO_writePinValue
    1452:	28 96       	adiw	r28, 0x08	; 8
    1454:	0f b6       	in	r0, 0x3f	; 63
    1456:	f8 94       	cli
    1458:	de bf       	out	0x3e, r29	; 62
    145a:	0f be       	out	0x3f, r0	; 63
    145c:	cd bf       	out	0x3d, r28	; 61
    145e:	cf 91       	pop	r28
    1460:	df 91       	pop	r29
    1462:	08 95       	ret

00001464 <DIO_readPort>:

/* API to Read Port  Value */
DIO_ERROR_state_t DIO_readPort(uint8_t PortID, uint8_t* PortState) {
    1464:	df 93       	push	r29
    1466:	cf 93       	push	r28
    1468:	00 d0       	rcall	.+0      	; 0x146a <DIO_readPort+0x6>
    146a:	00 d0       	rcall	.+0      	; 0x146c <DIO_readPort+0x8>
    146c:	00 d0       	rcall	.+0      	; 0x146e <DIO_readPort+0xa>
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
    1472:	89 83       	std	Y+1, r24	; 0x01
    1474:	7b 83       	std	Y+3, r23	; 0x03
    1476:	6a 83       	std	Y+2, r22	; 0x02
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA )) {
    1478:	89 81       	ldd	r24, Y+1	; 0x01
    147a:	84 30       	cpi	r24, 0x04	; 4
    147c:	e0 f5       	brcc	.+120    	; 0x14f6 <DIO_readPort+0x92>
		switch (PortID) {
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	28 2f       	mov	r18, r24
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	3e 83       	std	Y+6, r19	; 0x06
    1486:	2d 83       	std	Y+5, r18	; 0x05
    1488:	8d 81       	ldd	r24, Y+5	; 0x05
    148a:	9e 81       	ldd	r25, Y+6	; 0x06
    148c:	81 30       	cpi	r24, 0x01	; 1
    148e:	91 05       	cpc	r25, r1
    1490:	e1 f0       	breq	.+56     	; 0x14ca <DIO_readPort+0x66>
    1492:	2d 81       	ldd	r18, Y+5	; 0x05
    1494:	3e 81       	ldd	r19, Y+6	; 0x06
    1496:	22 30       	cpi	r18, 0x02	; 2
    1498:	31 05       	cpc	r19, r1
    149a:	2c f4       	brge	.+10     	; 0x14a6 <DIO_readPort+0x42>
    149c:	8d 81       	ldd	r24, Y+5	; 0x05
    149e:	9e 81       	ldd	r25, Y+6	; 0x06
    14a0:	00 97       	sbiw	r24, 0x00	; 0
    14a2:	61 f0       	breq	.+24     	; 0x14bc <DIO_readPort+0x58>
    14a4:	26 c0       	rjmp	.+76     	; 0x14f2 <DIO_readPort+0x8e>
    14a6:	2d 81       	ldd	r18, Y+5	; 0x05
    14a8:	3e 81       	ldd	r19, Y+6	; 0x06
    14aa:	22 30       	cpi	r18, 0x02	; 2
    14ac:	31 05       	cpc	r19, r1
    14ae:	a1 f0       	breq	.+40     	; 0x14d8 <DIO_readPort+0x74>
    14b0:	8d 81       	ldd	r24, Y+5	; 0x05
    14b2:	9e 81       	ldd	r25, Y+6	; 0x06
    14b4:	83 30       	cpi	r24, 0x03	; 3
    14b6:	91 05       	cpc	r25, r1
    14b8:	b1 f0       	breq	.+44     	; 0x14e6 <DIO_readPort+0x82>
    14ba:	1b c0       	rjmp	.+54     	; 0x14f2 <DIO_readPort+0x8e>
		case PORTA :
			*(PortState) = PORTA_STAT;
    14bc:	e9 e3       	ldi	r30, 0x39	; 57
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	ea 81       	ldd	r30, Y+2	; 0x02
    14c4:	fb 81       	ldd	r31, Y+3	; 0x03
    14c6:	80 83       	st	Z, r24
    14c8:	14 c0       	rjmp	.+40     	; 0x14f2 <DIO_readPort+0x8e>
			break;
		case PORTB :
			*(PortState) = PORTB_STAT;
    14ca:	e6 e3       	ldi	r30, 0x36	; 54
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	ea 81       	ldd	r30, Y+2	; 0x02
    14d2:	fb 81       	ldd	r31, Y+3	; 0x03
    14d4:	80 83       	st	Z, r24
    14d6:	0d c0       	rjmp	.+26     	; 0x14f2 <DIO_readPort+0x8e>
			break;
		case PORTC :
			*(PortState) = PORTC_STAT;
    14d8:	e3 e3       	ldi	r30, 0x33	; 51
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	ea 81       	ldd	r30, Y+2	; 0x02
    14e0:	fb 81       	ldd	r31, Y+3	; 0x03
    14e2:	80 83       	st	Z, r24
    14e4:	06 c0       	rjmp	.+12     	; 0x14f2 <DIO_readPort+0x8e>
			break;
		case PORTD :
			*(PortState) = PORTD_STAT;
    14e6:	e0 e3       	ldi	r30, 0x30	; 48
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	ea 81       	ldd	r30, Y+2	; 0x02
    14ee:	fb 81       	ldd	r31, Y+3	; 0x03
    14f0:	80 83       	st	Z, r24
			break;

		} //END of SWITCH
		return E_DIO_SUCCESS ;
    14f2:	1c 82       	std	Y+4, r1	; 0x04
    14f4:	02 c0       	rjmp	.+4      	; 0x14fa <DIO_readPort+0x96>
	}	  //END of IF
	else {
		return E_DIO_INVALID_PORT_NUMBER ;
    14f6:	91 e0       	ldi	r25, 0x01	; 1
    14f8:	9c 83       	std	Y+4, r25	; 0x04
    14fa:	8c 81       	ldd	r24, Y+4	; 0x04

	}	  //END of ELSE
}	  //END of DIO_readPort
    14fc:	26 96       	adiw	r28, 0x06	; 6
    14fe:	0f b6       	in	r0, 0x3f	; 63
    1500:	f8 94       	cli
    1502:	de bf       	out	0x3e, r29	; 62
    1504:	0f be       	out	0x3f, r0	; 63
    1506:	cd bf       	out	0x3d, r28	; 61
    1508:	cf 91       	pop	r28
    150a:	df 91       	pop	r29
    150c:	08 95       	ret

0000150e <DIO_readPin>:

/* API to Read Pin  Value */
DIO_ERROR_state_t DIO_readPin(uint8_t PortID, uint8_t PinNumber,
		uint8_t* PinState) {
    150e:	df 93       	push	r29
    1510:	cf 93       	push	r28
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62
    1516:	27 97       	sbiw	r28, 0x07	; 7
    1518:	0f b6       	in	r0, 0x3f	; 63
    151a:	f8 94       	cli
    151c:	de bf       	out	0x3e, r29	; 62
    151e:	0f be       	out	0x3f, r0	; 63
    1520:	cd bf       	out	0x3d, r28	; 61
    1522:	89 83       	std	Y+1, r24	; 0x01
    1524:	6a 83       	std	Y+2, r22	; 0x02
    1526:	5c 83       	std	Y+4, r21	; 0x04
    1528:	4b 83       	std	Y+3, r20	; 0x03
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA ) && (PinNumber >= PIN0 )
    152a:	89 81       	ldd	r24, Y+1	; 0x01
    152c:	84 30       	cpi	r24, 0x04	; 4
    152e:	08 f0       	brcs	.+2      	; 0x1532 <DIO_readPin+0x24>
    1530:	76 c0       	rjmp	.+236    	; 0x161e <DIO_readPin+0x110>
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	88 30       	cpi	r24, 0x08	; 8
    1536:	08 f0       	brcs	.+2      	; 0x153a <DIO_readPin+0x2c>
    1538:	72 c0       	rjmp	.+228    	; 0x161e <DIO_readPin+0x110>
			&& (PinNumber <= PIN7 )) {

		switch (PortID) {
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	28 2f       	mov	r18, r24
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	3f 83       	std	Y+7, r19	; 0x07
    1542:	2e 83       	std	Y+6, r18	; 0x06
    1544:	4e 81       	ldd	r20, Y+6	; 0x06
    1546:	5f 81       	ldd	r21, Y+7	; 0x07
    1548:	41 30       	cpi	r20, 0x01	; 1
    154a:	51 05       	cpc	r21, r1
    154c:	59 f1       	breq	.+86     	; 0x15a4 <DIO_readPin+0x96>
    154e:	8e 81       	ldd	r24, Y+6	; 0x06
    1550:	9f 81       	ldd	r25, Y+7	; 0x07
    1552:	82 30       	cpi	r24, 0x02	; 2
    1554:	91 05       	cpc	r25, r1
    1556:	34 f4       	brge	.+12     	; 0x1564 <DIO_readPin+0x56>
    1558:	2e 81       	ldd	r18, Y+6	; 0x06
    155a:	3f 81       	ldd	r19, Y+7	; 0x07
    155c:	21 15       	cp	r18, r1
    155e:	31 05       	cpc	r19, r1
    1560:	69 f0       	breq	.+26     	; 0x157c <DIO_readPin+0x6e>
    1562:	5b c0       	rjmp	.+182    	; 0x161a <DIO_readPin+0x10c>
    1564:	4e 81       	ldd	r20, Y+6	; 0x06
    1566:	5f 81       	ldd	r21, Y+7	; 0x07
    1568:	42 30       	cpi	r20, 0x02	; 2
    156a:	51 05       	cpc	r21, r1
    156c:	79 f1       	breq	.+94     	; 0x15cc <DIO_readPin+0xbe>
    156e:	8e 81       	ldd	r24, Y+6	; 0x06
    1570:	9f 81       	ldd	r25, Y+7	; 0x07
    1572:	83 30       	cpi	r24, 0x03	; 3
    1574:	91 05       	cpc	r25, r1
    1576:	09 f4       	brne	.+2      	; 0x157a <DIO_readPin+0x6c>
    1578:	3d c0       	rjmp	.+122    	; 0x15f4 <DIO_readPin+0xe6>
    157a:	4f c0       	rjmp	.+158    	; 0x161a <DIO_readPin+0x10c>
		case PORTA :
			*(PinState) = Get_Bit(PORTA_STAT, PinNumber);
    157c:	e9 e3       	ldi	r30, 0x39	; 57
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	28 2f       	mov	r18, r24
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	8a 81       	ldd	r24, Y+2	; 0x02
    1588:	88 2f       	mov	r24, r24
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	a9 01       	movw	r20, r18
    158e:	02 c0       	rjmp	.+4      	; 0x1594 <DIO_readPin+0x86>
    1590:	55 95       	asr	r21
    1592:	47 95       	ror	r20
    1594:	8a 95       	dec	r24
    1596:	e2 f7       	brpl	.-8      	; 0x1590 <DIO_readPin+0x82>
    1598:	ca 01       	movw	r24, r20
    159a:	81 70       	andi	r24, 0x01	; 1
    159c:	eb 81       	ldd	r30, Y+3	; 0x03
    159e:	fc 81       	ldd	r31, Y+4	; 0x04
    15a0:	80 83       	st	Z, r24
    15a2:	3b c0       	rjmp	.+118    	; 0x161a <DIO_readPin+0x10c>
			break;
		case PORTB :
			*(PinState) = Get_Bit(PORTB_STAT, PinNumber);
    15a4:	e6 e3       	ldi	r30, 0x36	; 54
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	28 2f       	mov	r18, r24
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	88 2f       	mov	r24, r24
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	a9 01       	movw	r20, r18
    15b6:	02 c0       	rjmp	.+4      	; 0x15bc <DIO_readPin+0xae>
    15b8:	55 95       	asr	r21
    15ba:	47 95       	ror	r20
    15bc:	8a 95       	dec	r24
    15be:	e2 f7       	brpl	.-8      	; 0x15b8 <DIO_readPin+0xaa>
    15c0:	ca 01       	movw	r24, r20
    15c2:	81 70       	andi	r24, 0x01	; 1
    15c4:	eb 81       	ldd	r30, Y+3	; 0x03
    15c6:	fc 81       	ldd	r31, Y+4	; 0x04
    15c8:	80 83       	st	Z, r24
    15ca:	27 c0       	rjmp	.+78     	; 0x161a <DIO_readPin+0x10c>
			break;
		case PORTC :
			*(PinState) = Get_Bit(PORTC_STAT, PinNumber);
    15cc:	e3 e3       	ldi	r30, 0x33	; 51
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	28 2f       	mov	r18, r24
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	8a 81       	ldd	r24, Y+2	; 0x02
    15d8:	88 2f       	mov	r24, r24
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	a9 01       	movw	r20, r18
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <DIO_readPin+0xd6>
    15e0:	55 95       	asr	r21
    15e2:	47 95       	ror	r20
    15e4:	8a 95       	dec	r24
    15e6:	e2 f7       	brpl	.-8      	; 0x15e0 <DIO_readPin+0xd2>
    15e8:	ca 01       	movw	r24, r20
    15ea:	81 70       	andi	r24, 0x01	; 1
    15ec:	eb 81       	ldd	r30, Y+3	; 0x03
    15ee:	fc 81       	ldd	r31, Y+4	; 0x04
    15f0:	80 83       	st	Z, r24
    15f2:	13 c0       	rjmp	.+38     	; 0x161a <DIO_readPin+0x10c>
			break;
		case PORTD :
			*(PinState) = Get_Bit(PORTD_STAT, PinNumber);
    15f4:	e0 e3       	ldi	r30, 0x30	; 48
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	28 2f       	mov	r18, r24
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1600:	88 2f       	mov	r24, r24
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	a9 01       	movw	r20, r18
    1606:	02 c0       	rjmp	.+4      	; 0x160c <DIO_readPin+0xfe>
    1608:	55 95       	asr	r21
    160a:	47 95       	ror	r20
    160c:	8a 95       	dec	r24
    160e:	e2 f7       	brpl	.-8      	; 0x1608 <DIO_readPin+0xfa>
    1610:	ca 01       	movw	r24, r20
    1612:	81 70       	andi	r24, 0x01	; 1
    1614:	eb 81       	ldd	r30, Y+3	; 0x03
    1616:	fc 81       	ldd	r31, Y+4	; 0x04
    1618:	80 83       	st	Z, r24
			break;

		} //END of SWITCH
		return E_DIO_SUCCESS ;
    161a:	1d 82       	std	Y+5, r1	; 0x05
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <DIO_readPin+0x114>

	}	  //END of IF That checking the port and pin number

	else {
		return E_DIO_INVALID_PORT_NUMBER ;
    161e:	51 e0       	ldi	r21, 0x01	; 1
    1620:	5d 83       	std	Y+5, r21	; 0x05
    1622:	8d 81       	ldd	r24, Y+5	; 0x05

	}	  //END of ELSE
}    //END of DIO_readPint
    1624:	27 96       	adiw	r28, 0x07	; 7
    1626:	0f b6       	in	r0, 0x3f	; 63
    1628:	f8 94       	cli
    162a:	de bf       	out	0x3e, r29	; 62
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	cd bf       	out	0x3d, r28	; 61
    1630:	cf 91       	pop	r28
    1632:	df 91       	pop	r29
    1634:	08 95       	ret

00001636 <DIO_TogglePin>:

/*
 * API to toggle pin
 * */
DIO_ERROR_state_t DIO_TogglePin(uint8_t PortID, uint8_t PinNumber){
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	00 d0       	rcall	.+0      	; 0x163c <DIO_TogglePin+0x6>
    163c:	00 d0       	rcall	.+0      	; 0x163e <DIO_TogglePin+0x8>
    163e:	0f 92       	push	r0
    1640:	cd b7       	in	r28, 0x3d	; 61
    1642:	de b7       	in	r29, 0x3e	; 62
    1644:	89 83       	std	Y+1, r24	; 0x01
    1646:	6a 83       	std	Y+2, r22	; 0x02
	//Check for the ports if it is between 0 to 3
		if ((PortID <= PORTD ) && (PortID >= PORTA ) && (PinNumber >= PIN0 )
    1648:	89 81       	ldd	r24, Y+1	; 0x01
    164a:	84 30       	cpi	r24, 0x04	; 4
    164c:	08 f0       	brcs	.+2      	; 0x1650 <DIO_TogglePin+0x1a>
    164e:	74 c0       	rjmp	.+232    	; 0x1738 <DIO_TogglePin+0x102>
    1650:	8a 81       	ldd	r24, Y+2	; 0x02
    1652:	88 30       	cpi	r24, 0x08	; 8
    1654:	08 f0       	brcs	.+2      	; 0x1658 <DIO_TogglePin+0x22>
    1656:	70 c0       	rjmp	.+224    	; 0x1738 <DIO_TogglePin+0x102>
				&& (PinNumber <= PIN7 )) {
			switch (PortID) {
    1658:	89 81       	ldd	r24, Y+1	; 0x01
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	3d 83       	std	Y+5, r19	; 0x05
    1660:	2c 83       	std	Y+4, r18	; 0x04
    1662:	8c 81       	ldd	r24, Y+4	; 0x04
    1664:	9d 81       	ldd	r25, Y+5	; 0x05
    1666:	81 30       	cpi	r24, 0x01	; 1
    1668:	91 05       	cpc	r25, r1
    166a:	49 f1       	breq	.+82     	; 0x16be <DIO_TogglePin+0x88>
    166c:	2c 81       	ldd	r18, Y+4	; 0x04
    166e:	3d 81       	ldd	r19, Y+5	; 0x05
    1670:	22 30       	cpi	r18, 0x02	; 2
    1672:	31 05       	cpc	r19, r1
    1674:	2c f4       	brge	.+10     	; 0x1680 <DIO_TogglePin+0x4a>
    1676:	8c 81       	ldd	r24, Y+4	; 0x04
    1678:	9d 81       	ldd	r25, Y+5	; 0x05
    167a:	00 97       	sbiw	r24, 0x00	; 0
    167c:	61 f0       	breq	.+24     	; 0x1696 <DIO_TogglePin+0x60>
    167e:	5a c0       	rjmp	.+180    	; 0x1734 <DIO_TogglePin+0xfe>
    1680:	2c 81       	ldd	r18, Y+4	; 0x04
    1682:	3d 81       	ldd	r19, Y+5	; 0x05
    1684:	22 30       	cpi	r18, 0x02	; 2
    1686:	31 05       	cpc	r19, r1
    1688:	71 f1       	breq	.+92     	; 0x16e6 <DIO_TogglePin+0xb0>
    168a:	8c 81       	ldd	r24, Y+4	; 0x04
    168c:	9d 81       	ldd	r25, Y+5	; 0x05
    168e:	83 30       	cpi	r24, 0x03	; 3
    1690:	91 05       	cpc	r25, r1
    1692:	e9 f1       	breq	.+122    	; 0x170e <DIO_TogglePin+0xd8>
    1694:	4f c0       	rjmp	.+158    	; 0x1734 <DIO_TogglePin+0xfe>
			case PORTA :
				Toggle_Bit(PORTA_DATA, PinNumber);
    1696:	ab e3       	ldi	r26, 0x3B	; 59
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	eb e3       	ldi	r30, 0x3B	; 59
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	48 2f       	mov	r20, r24
    16a2:	8a 81       	ldd	r24, Y+2	; 0x02
    16a4:	28 2f       	mov	r18, r24
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	02 2e       	mov	r0, r18
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <DIO_TogglePin+0x7e>
    16b0:	88 0f       	add	r24, r24
    16b2:	99 1f       	adc	r25, r25
    16b4:	0a 94       	dec	r0
    16b6:	e2 f7       	brpl	.-8      	; 0x16b0 <DIO_TogglePin+0x7a>
    16b8:	84 27       	eor	r24, r20
    16ba:	8c 93       	st	X, r24
    16bc:	3b c0       	rjmp	.+118    	; 0x1734 <DIO_TogglePin+0xfe>
				break;
			case PORTB :
				Toggle_Bit(PORTB_DATA, PinNumber);
    16be:	a8 e3       	ldi	r26, 0x38	; 56
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	e8 e3       	ldi	r30, 0x38	; 56
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	48 2f       	mov	r20, r24
    16ca:	8a 81       	ldd	r24, Y+2	; 0x02
    16cc:	28 2f       	mov	r18, r24
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	02 2e       	mov	r0, r18
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <DIO_TogglePin+0xa6>
    16d8:	88 0f       	add	r24, r24
    16da:	99 1f       	adc	r25, r25
    16dc:	0a 94       	dec	r0
    16de:	e2 f7       	brpl	.-8      	; 0x16d8 <DIO_TogglePin+0xa2>
    16e0:	84 27       	eor	r24, r20
    16e2:	8c 93       	st	X, r24
    16e4:	27 c0       	rjmp	.+78     	; 0x1734 <DIO_TogglePin+0xfe>
				break;
			case PORTC :
				Toggle_Bit(PORTC_DATA, PinNumber);
    16e6:	a5 e3       	ldi	r26, 0x35	; 53
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	e5 e3       	ldi	r30, 0x35	; 53
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	48 2f       	mov	r20, r24
    16f2:	8a 81       	ldd	r24, Y+2	; 0x02
    16f4:	28 2f       	mov	r18, r24
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	02 2e       	mov	r0, r18
    16fe:	02 c0       	rjmp	.+4      	; 0x1704 <DIO_TogglePin+0xce>
    1700:	88 0f       	add	r24, r24
    1702:	99 1f       	adc	r25, r25
    1704:	0a 94       	dec	r0
    1706:	e2 f7       	brpl	.-8      	; 0x1700 <DIO_TogglePin+0xca>
    1708:	84 27       	eor	r24, r20
    170a:	8c 93       	st	X, r24
    170c:	13 c0       	rjmp	.+38     	; 0x1734 <DIO_TogglePin+0xfe>
				break;
			case PORTD :
				Toggle_Bit(PORTD_DATA, PinNumber);
    170e:	a2 e3       	ldi	r26, 0x32	; 50
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	e2 e3       	ldi	r30, 0x32	; 50
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	48 2f       	mov	r20, r24
    171a:	8a 81       	ldd	r24, Y+2	; 0x02
    171c:	28 2f       	mov	r18, r24
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	02 2e       	mov	r0, r18
    1726:	02 c0       	rjmp	.+4      	; 0x172c <DIO_TogglePin+0xf6>
    1728:	88 0f       	add	r24, r24
    172a:	99 1f       	adc	r25, r25
    172c:	0a 94       	dec	r0
    172e:	e2 f7       	brpl	.-8      	; 0x1728 <DIO_TogglePin+0xf2>
    1730:	84 27       	eor	r24, r20
    1732:	8c 93       	st	X, r24
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
    1734:	1b 82       	std	Y+3, r1	; 0x03
    1736:	02 c0       	rjmp	.+4      	; 0x173c <DIO_TogglePin+0x106>

		}	  //END of IF That checking the port and pin number

		else {
			return E_DIO_INVALID_PORT_NUMBER ;
    1738:	91 e0       	ldi	r25, 0x01	; 1
    173a:	9b 83       	std	Y+3, r25	; 0x03
    173c:	8b 81       	ldd	r24, Y+3	; 0x03

		}	  //END of ELSE

}
    173e:	0f 90       	pop	r0
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	cf 91       	pop	r28
    174a:	df 91       	pop	r29
    174c:	08 95       	ret

0000174e <DIO_SetPullupRes>:
DIO_ERROR_state_t DIO_SetPullupRes(uint8_t PortID, uint8_t PinNumber){
    174e:	df 93       	push	r29
    1750:	cf 93       	push	r28
    1752:	00 d0       	rcall	.+0      	; 0x1754 <DIO_SetPullupRes+0x6>
    1754:	00 d0       	rcall	.+0      	; 0x1756 <DIO_SetPullupRes+0x8>
    1756:	0f 92       	push	r0
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
    175c:	89 83       	std	Y+1, r24	; 0x01
    175e:	6a 83       	std	Y+2, r22	; 0x02
	//Check for the ports if it is between 0 to 3
		if ((PortID <= PORTD ) && (PortID >= PORTA ) && (PinNumber >= PIN0 )
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	84 30       	cpi	r24, 0x04	; 4
    1764:	08 f0       	brcs	.+2      	; 0x1768 <DIO_SetPullupRes+0x1a>
    1766:	d1 c0       	rjmp	.+418    	; 0x190a <DIO_SetPullupRes+0x1bc>
    1768:	8a 81       	ldd	r24, Y+2	; 0x02
    176a:	88 30       	cpi	r24, 0x08	; 8
    176c:	08 f0       	brcs	.+2      	; 0x1770 <DIO_SetPullupRes+0x22>
    176e:	cd c0       	rjmp	.+410    	; 0x190a <DIO_SetPullupRes+0x1bc>
				&& (PinNumber <= PIN7 )) {
			switch (PortID) {
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	28 2f       	mov	r18, r24
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	3d 83       	std	Y+5, r19	; 0x05
    1778:	2c 83       	std	Y+4, r18	; 0x04
    177a:	4c 81       	ldd	r20, Y+4	; 0x04
    177c:	5d 81       	ldd	r21, Y+5	; 0x05
    177e:	41 30       	cpi	r20, 0x01	; 1
    1780:	51 05       	cpc	r21, r1
    1782:	09 f4       	brne	.+2      	; 0x1786 <DIO_SetPullupRes+0x38>
    1784:	42 c0       	rjmp	.+132    	; 0x180a <DIO_SetPullupRes+0xbc>
    1786:	8c 81       	ldd	r24, Y+4	; 0x04
    1788:	9d 81       	ldd	r25, Y+5	; 0x05
    178a:	82 30       	cpi	r24, 0x02	; 2
    178c:	91 05       	cpc	r25, r1
    178e:	34 f4       	brge	.+12     	; 0x179c <DIO_SetPullupRes+0x4e>
    1790:	2c 81       	ldd	r18, Y+4	; 0x04
    1792:	3d 81       	ldd	r19, Y+5	; 0x05
    1794:	21 15       	cp	r18, r1
    1796:	31 05       	cpc	r19, r1
    1798:	71 f0       	breq	.+28     	; 0x17b6 <DIO_SetPullupRes+0x68>
    179a:	b5 c0       	rjmp	.+362    	; 0x1906 <DIO_SetPullupRes+0x1b8>
    179c:	4c 81       	ldd	r20, Y+4	; 0x04
    179e:	5d 81       	ldd	r21, Y+5	; 0x05
    17a0:	42 30       	cpi	r20, 0x02	; 2
    17a2:	51 05       	cpc	r21, r1
    17a4:	09 f4       	brne	.+2      	; 0x17a8 <DIO_SetPullupRes+0x5a>
    17a6:	5b c0       	rjmp	.+182    	; 0x185e <DIO_SetPullupRes+0x110>
    17a8:	8c 81       	ldd	r24, Y+4	; 0x04
    17aa:	9d 81       	ldd	r25, Y+5	; 0x05
    17ac:	83 30       	cpi	r24, 0x03	; 3
    17ae:	91 05       	cpc	r25, r1
    17b0:	09 f4       	brne	.+2      	; 0x17b4 <DIO_SetPullupRes+0x66>
    17b2:	7f c0       	rjmp	.+254    	; 0x18b2 <DIO_SetPullupRes+0x164>
    17b4:	a8 c0       	rjmp	.+336    	; 0x1906 <DIO_SetPullupRes+0x1b8>
			case PORTA :
				if(Get_Bit(PORTA_DIR, PinNumber)==PIN_INPUT){
    17b6:	ea e3       	ldi	r30, 0x3A	; 58
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
    17bc:	28 2f       	mov	r18, r24
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	8a 81       	ldd	r24, Y+2	; 0x02
    17c2:	88 2f       	mov	r24, r24
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	a9 01       	movw	r20, r18
    17c8:	02 c0       	rjmp	.+4      	; 0x17ce <DIO_SetPullupRes+0x80>
    17ca:	55 95       	asr	r21
    17cc:	47 95       	ror	r20
    17ce:	8a 95       	dec	r24
    17d0:	e2 f7       	brpl	.-8      	; 0x17ca <DIO_SetPullupRes+0x7c>
    17d2:	ca 01       	movw	r24, r20
    17d4:	81 70       	andi	r24, 0x01	; 1
    17d6:	90 70       	andi	r25, 0x00	; 0
    17d8:	00 97       	sbiw	r24, 0x00	; 0
    17da:	a1 f4       	brne	.+40     	; 0x1804 <DIO_SetPullupRes+0xb6>
					Set_Bit(PORTA_DATA, PinNumber);
    17dc:	ab e3       	ldi	r26, 0x3B	; 59
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	eb e3       	ldi	r30, 0x3B	; 59
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	48 2f       	mov	r20, r24
    17e8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ea:	28 2f       	mov	r18, r24
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	02 2e       	mov	r0, r18
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <DIO_SetPullupRes+0xac>
    17f6:	88 0f       	add	r24, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	0a 94       	dec	r0
    17fc:	e2 f7       	brpl	.-8      	; 0x17f6 <DIO_SetPullupRes+0xa8>
    17fe:	84 2b       	or	r24, r20
    1800:	8c 93       	st	X, r24
    1802:	81 c0       	rjmp	.+258    	; 0x1906 <DIO_SetPullupRes+0x1b8>
				}// END of IF which checking if the  pin is INPUT
				else{
					return E_DIO_SET_TO_NON_INPUT;
    1804:	53 e0       	ldi	r21, 0x03	; 3
    1806:	5b 83       	std	Y+3, r21	; 0x03
    1808:	82 c0       	rjmp	.+260    	; 0x190e <DIO_SetPullupRes+0x1c0>
				}
				break;
			case PORTB :
				if(Get_Bit(PORTB_DIR, PinNumber)==PIN_INPUT){
    180a:	e7 e3       	ldi	r30, 0x37	; 55
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	28 2f       	mov	r18, r24
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	8a 81       	ldd	r24, Y+2	; 0x02
    1816:	88 2f       	mov	r24, r24
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	a9 01       	movw	r20, r18
    181c:	02 c0       	rjmp	.+4      	; 0x1822 <DIO_SetPullupRes+0xd4>
    181e:	55 95       	asr	r21
    1820:	47 95       	ror	r20
    1822:	8a 95       	dec	r24
    1824:	e2 f7       	brpl	.-8      	; 0x181e <DIO_SetPullupRes+0xd0>
    1826:	ca 01       	movw	r24, r20
    1828:	81 70       	andi	r24, 0x01	; 1
    182a:	90 70       	andi	r25, 0x00	; 0
    182c:	00 97       	sbiw	r24, 0x00	; 0
    182e:	a1 f4       	brne	.+40     	; 0x1858 <DIO_SetPullupRes+0x10a>
					Set_Bit(PORTB_DATA, PinNumber);
    1830:	a8 e3       	ldi	r26, 0x38	; 56
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	e8 e3       	ldi	r30, 0x38	; 56
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	48 2f       	mov	r20, r24
    183c:	8a 81       	ldd	r24, Y+2	; 0x02
    183e:	28 2f       	mov	r18, r24
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	02 2e       	mov	r0, r18
    1848:	02 c0       	rjmp	.+4      	; 0x184e <DIO_SetPullupRes+0x100>
    184a:	88 0f       	add	r24, r24
    184c:	99 1f       	adc	r25, r25
    184e:	0a 94       	dec	r0
    1850:	e2 f7       	brpl	.-8      	; 0x184a <DIO_SetPullupRes+0xfc>
    1852:	84 2b       	or	r24, r20
    1854:	8c 93       	st	X, r24
    1856:	57 c0       	rjmp	.+174    	; 0x1906 <DIO_SetPullupRes+0x1b8>
				}// END of IF which checking if the  pin is INPUT
				else{
					return E_DIO_SET_TO_NON_INPUT;
    1858:	53 e0       	ldi	r21, 0x03	; 3
    185a:	5b 83       	std	Y+3, r21	; 0x03
    185c:	58 c0       	rjmp	.+176    	; 0x190e <DIO_SetPullupRes+0x1c0>
				}
				break;
			case PORTC :
				if(Get_Bit(PORTC_DIR, PinNumber)==PIN_INPUT){
    185e:	e4 e3       	ldi	r30, 0x34	; 52
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	28 2f       	mov	r18, r24
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	8a 81       	ldd	r24, Y+2	; 0x02
    186a:	88 2f       	mov	r24, r24
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	a9 01       	movw	r20, r18
    1870:	02 c0       	rjmp	.+4      	; 0x1876 <DIO_SetPullupRes+0x128>
    1872:	55 95       	asr	r21
    1874:	47 95       	ror	r20
    1876:	8a 95       	dec	r24
    1878:	e2 f7       	brpl	.-8      	; 0x1872 <DIO_SetPullupRes+0x124>
    187a:	ca 01       	movw	r24, r20
    187c:	81 70       	andi	r24, 0x01	; 1
    187e:	90 70       	andi	r25, 0x00	; 0
    1880:	00 97       	sbiw	r24, 0x00	; 0
    1882:	a1 f4       	brne	.+40     	; 0x18ac <DIO_SetPullupRes+0x15e>
					Set_Bit(PORTC_DATA, PinNumber);
    1884:	a5 e3       	ldi	r26, 0x35	; 53
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	e5 e3       	ldi	r30, 0x35	; 53
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	48 2f       	mov	r20, r24
    1890:	8a 81       	ldd	r24, Y+2	; 0x02
    1892:	28 2f       	mov	r18, r24
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	02 2e       	mov	r0, r18
    189c:	02 c0       	rjmp	.+4      	; 0x18a2 <DIO_SetPullupRes+0x154>
    189e:	88 0f       	add	r24, r24
    18a0:	99 1f       	adc	r25, r25
    18a2:	0a 94       	dec	r0
    18a4:	e2 f7       	brpl	.-8      	; 0x189e <DIO_SetPullupRes+0x150>
    18a6:	84 2b       	or	r24, r20
    18a8:	8c 93       	st	X, r24
    18aa:	2d c0       	rjmp	.+90     	; 0x1906 <DIO_SetPullupRes+0x1b8>
				}// END of IF which checking if the  pin is INPUT
				else{
					return E_DIO_SET_TO_NON_INPUT;
    18ac:	53 e0       	ldi	r21, 0x03	; 3
    18ae:	5b 83       	std	Y+3, r21	; 0x03
    18b0:	2e c0       	rjmp	.+92     	; 0x190e <DIO_SetPullupRes+0x1c0>
				}
				break;
			case PORTD :
				if(Get_Bit(PORTD_DIR, PinNumber)==PIN_INPUT){
    18b2:	e1 e3       	ldi	r30, 0x31	; 49
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	28 2f       	mov	r18, r24
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	8a 81       	ldd	r24, Y+2	; 0x02
    18be:	88 2f       	mov	r24, r24
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	a9 01       	movw	r20, r18
    18c4:	02 c0       	rjmp	.+4      	; 0x18ca <DIO_SetPullupRes+0x17c>
    18c6:	55 95       	asr	r21
    18c8:	47 95       	ror	r20
    18ca:	8a 95       	dec	r24
    18cc:	e2 f7       	brpl	.-8      	; 0x18c6 <DIO_SetPullupRes+0x178>
    18ce:	ca 01       	movw	r24, r20
    18d0:	81 70       	andi	r24, 0x01	; 1
    18d2:	90 70       	andi	r25, 0x00	; 0
    18d4:	00 97       	sbiw	r24, 0x00	; 0
    18d6:	a1 f4       	brne	.+40     	; 0x1900 <DIO_SetPullupRes+0x1b2>
					Set_Bit(PORTD_DATA, PinNumber);
    18d8:	a2 e3       	ldi	r26, 0x32	; 50
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	e2 e3       	ldi	r30, 0x32	; 50
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	48 2f       	mov	r20, r24
    18e4:	8a 81       	ldd	r24, Y+2	; 0x02
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	02 2e       	mov	r0, r18
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <DIO_SetPullupRes+0x1a8>
    18f2:	88 0f       	add	r24, r24
    18f4:	99 1f       	adc	r25, r25
    18f6:	0a 94       	dec	r0
    18f8:	e2 f7       	brpl	.-8      	; 0x18f2 <DIO_SetPullupRes+0x1a4>
    18fa:	84 2b       	or	r24, r20
    18fc:	8c 93       	st	X, r24
    18fe:	03 c0       	rjmp	.+6      	; 0x1906 <DIO_SetPullupRes+0x1b8>
				}// END of IF which checking if the  pin is INPUT
				else{
					return E_DIO_SET_TO_NON_INPUT;
    1900:	53 e0       	ldi	r21, 0x03	; 3
    1902:	5b 83       	std	Y+3, r21	; 0x03
    1904:	04 c0       	rjmp	.+8      	; 0x190e <DIO_SetPullupRes+0x1c0>
				}
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
    1906:	1b 82       	std	Y+3, r1	; 0x03
    1908:	02 c0       	rjmp	.+4      	; 0x190e <DIO_SetPullupRes+0x1c0>

		}	  //END of IF That checking the port and pin number

		else {
			return E_DIO_INVALID_PORT_NUMBER ;
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	8b 83       	std	Y+3, r24	; 0x03
    190e:	8b 81       	ldd	r24, Y+3	; 0x03

		}	  //END of ELSE

}
    1910:	0f 90       	pop	r0
    1912:	0f 90       	pop	r0
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	0f 90       	pop	r0
    191a:	cf 91       	pop	r28
    191c:	df 91       	pop	r29
    191e:	08 95       	ret

00001920 <LED_Init>:
#include"DIO_REG.h"
#include"DIO_retval.h"
#include"DIO.h"


void LED_Init(uint8_t PortID, uint8_t PinNumber){
    1920:	df 93       	push	r29
    1922:	cf 93       	push	r28
    1924:	00 d0       	rcall	.+0      	; 0x1926 <LED_Init+0x6>
    1926:	0f 92       	push	r0
    1928:	cd b7       	in	r28, 0x3d	; 61
    192a:	de b7       	in	r29, 0x3e	; 62
    192c:	8a 83       	std	Y+2, r24	; 0x02
    192e:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t state=0;
    1930:	19 82       	std	Y+1, r1	; 0x01
	state=DIO_setPinDirection(PortID,PinNumber,PIN_OUTPUT);
    1932:	8a 81       	ldd	r24, Y+2	; 0x02
    1934:	6b 81       	ldd	r22, Y+3	; 0x03
    1936:	41 e0       	ldi	r20, 0x01	; 1
    1938:	0e 94 c5 07 	call	0xf8a	; 0xf8a <DIO_setPinDirection>
    193c:	89 83       	std	Y+1, r24	; 0x01
}
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
    1944:	cf 91       	pop	r28
    1946:	df 91       	pop	r29
    1948:	08 95       	ret

0000194a <LED_toggle>:
void LED_toggle(uint8_t PortID, uint8_t PinNumber){
    194a:	df 93       	push	r29
    194c:	cf 93       	push	r28
    194e:	00 d0       	rcall	.+0      	; 0x1950 <LED_toggle+0x6>
    1950:	0f 92       	push	r0
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
    1956:	8a 83       	std	Y+2, r24	; 0x02
    1958:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t state=0;
    195a:	19 82       	std	Y+1, r1	; 0x01
	state=DIO_TogglePin(PortID,PinNumber);
    195c:	8a 81       	ldd	r24, Y+2	; 0x02
    195e:	6b 81       	ldd	r22, Y+3	; 0x03
    1960:	0e 94 1b 0b 	call	0x1636	; 0x1636 <DIO_TogglePin>
    1964:	89 83       	std	Y+1, r24	; 0x01
}
    1966:	0f 90       	pop	r0
    1968:	0f 90       	pop	r0
    196a:	0f 90       	pop	r0
    196c:	cf 91       	pop	r28
    196e:	df 91       	pop	r29
    1970:	08 95       	ret

00001972 <PWM_init>:
#define TIMER_8B_REG_MAX  (uint8_t)256
#define HUNDRED_PERCNT    (uint8_t)100



void PWM_init(uint8_t pwm_no) {
    1972:	df 93       	push	r29
    1974:	cf 93       	push	r28
    1976:	00 d0       	rcall	.+0      	; 0x1978 <PWM_init+0x6>
    1978:	0f 92       	push	r0
    197a:	cd b7       	in	r28, 0x3d	; 61
    197c:	de b7       	in	r29, 0x3e	; 62
    197e:	89 83       	std	Y+1, r24	; 0x01
	if ((pwm_no >= PWM0 ) && (pwm_no <= PWM2 )) {
    1980:	89 81       	ldd	r24, Y+1	; 0x01
    1982:	83 30       	cpi	r24, 0x03	; 3
    1984:	d0 f4       	brcc	.+52     	; 0x19ba <PWM_init+0x48>
		switch (pwm_no) {
    1986:	89 81       	ldd	r24, Y+1	; 0x01
    1988:	28 2f       	mov	r18, r24
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	3b 83       	std	Y+3, r19	; 0x03
    198e:	2a 83       	std	Y+2, r18	; 0x02
    1990:	8a 81       	ldd	r24, Y+2	; 0x02
    1992:	9b 81       	ldd	r25, Y+3	; 0x03
    1994:	81 30       	cpi	r24, 0x01	; 1
    1996:	91 05       	cpc	r25, r1
    1998:	81 f0       	breq	.+32     	; 0x19ba <PWM_init+0x48>
    199a:	2a 81       	ldd	r18, Y+2	; 0x02
    199c:	3b 81       	ldd	r19, Y+3	; 0x03
    199e:	22 30       	cpi	r18, 0x02	; 2
    19a0:	31 05       	cpc	r19, r1
    19a2:	41 f0       	breq	.+16     	; 0x19b4 <PWM_init+0x42>
    19a4:	8a 81       	ldd	r24, Y+2	; 0x02
    19a6:	9b 81       	ldd	r25, Y+3	; 0x03
    19a8:	00 97       	sbiw	r24, 0x00	; 0
    19aa:	39 f4       	brne	.+14     	; 0x19ba <PWM_init+0x48>
		case PWM0 :
			TIMER_init(PWM0);
    19ac:	80 e0       	ldi	r24, 0x00	; 0
    19ae:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <TIMER_init>
    19b2:	03 c0       	rjmp	.+6      	; 0x19ba <PWM_init+0x48>
			break;
		case PWM1 :
			break;
		case PWM2 :
			TIMER_init(PWM2);
    19b4:	82 e0       	ldi	r24, 0x02	; 2
    19b6:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <TIMER_init>

			break;
		} //END of the SWITCH
	} //End of the IF
}
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	0f 90       	pop	r0
    19c0:	cf 91       	pop	r28
    19c2:	df 91       	pop	r29
    19c4:	08 95       	ret

000019c6 <PWM_dutyCycle>:

void PWM_dutyCycle(uint8_t pwm_no, uint8_t dutyCycle) {
    19c6:	0f 93       	push	r16
    19c8:	1f 93       	push	r17
    19ca:	df 93       	push	r29
    19cc:	cf 93       	push	r28
    19ce:	00 d0       	rcall	.+0      	; 0x19d0 <PWM_dutyCycle+0xa>
    19d0:	00 d0       	rcall	.+0      	; 0x19d2 <PWM_dutyCycle+0xc>
    19d2:	cd b7       	in	r28, 0x3d	; 61
    19d4:	de b7       	in	r29, 0x3e	; 62
    19d6:	89 83       	std	Y+1, r24	; 0x01
    19d8:	6a 83       	std	Y+2, r22	; 0x02
	if ((pwm_no >= PWM0 ) && (pwm_no <= PWM2 )) {
    19da:	89 81       	ldd	r24, Y+1	; 0x01
    19dc:	83 30       	cpi	r24, 0x03	; 3
    19de:	08 f0       	brcs	.+2      	; 0x19e2 <PWM_dutyCycle+0x1c>
    19e0:	4e c0       	rjmp	.+156    	; 0x1a7e <PWM_dutyCycle+0xb8>
		switch (pwm_no) {
    19e2:	89 81       	ldd	r24, Y+1	; 0x01
    19e4:	28 2f       	mov	r18, r24
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	3c 83       	std	Y+4, r19	; 0x04
    19ea:	2b 83       	std	Y+3, r18	; 0x03
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	9c 81       	ldd	r25, Y+4	; 0x04
    19f0:	81 30       	cpi	r24, 0x01	; 1
    19f2:	91 05       	cpc	r25, r1
    19f4:	09 f4       	brne	.+2      	; 0x19f8 <PWM_dutyCycle+0x32>
    19f6:	43 c0       	rjmp	.+134    	; 0x1a7e <PWM_dutyCycle+0xb8>
    19f8:	eb 81       	ldd	r30, Y+3	; 0x03
    19fa:	fc 81       	ldd	r31, Y+4	; 0x04
    19fc:	e2 30       	cpi	r30, 0x02	; 2
    19fe:	f1 05       	cpc	r31, r1
    1a00:	d9 f1       	breq	.+118    	; 0x1a78 <PWM_dutyCycle+0xb2>
    1a02:	2b 81       	ldd	r18, Y+3	; 0x03
    1a04:	3c 81       	ldd	r19, Y+4	; 0x04
    1a06:	21 15       	cp	r18, r1
    1a08:	31 05       	cpc	r19, r1
    1a0a:	c9 f5       	brne	.+114    	; 0x1a7e <PWM_dutyCycle+0xb8>
		case PWM0 :
			OCR0=(uint8_t)(((dutyCycle/100.0)*256)-1);//DUTY CYCLE IS A PERCENTAGE FROM 0% TO 100%
    1a0c:	0c e5       	ldi	r16, 0x5C	; 92
    1a0e:	10 e0       	ldi	r17, 0x00	; 0
    1a10:	8a 81       	ldd	r24, Y+2	; 0x02
    1a12:	88 2f       	mov	r24, r24
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	aa 27       	eor	r26, r26
    1a18:	97 fd       	sbrc	r25, 7
    1a1a:	a0 95       	com	r26
    1a1c:	ba 2f       	mov	r27, r26
    1a1e:	bc 01       	movw	r22, r24
    1a20:	cd 01       	movw	r24, r26
    1a22:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatsisf>
    1a26:	dc 01       	movw	r26, r24
    1a28:	cb 01       	movw	r24, r22
    1a2a:	bc 01       	movw	r22, r24
    1a2c:	cd 01       	movw	r24, r26
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	48 ec       	ldi	r20, 0xC8	; 200
    1a34:	52 e4       	ldi	r21, 0x42	; 66
    1a36:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	bc 01       	movw	r22, r24
    1a40:	cd 01       	movw	r24, r26
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	40 e8       	ldi	r20, 0x80	; 128
    1a48:	53 e4       	ldi	r21, 0x43	; 67
    1a4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	bc 01       	movw	r22, r24
    1a54:	cd 01       	movw	r24, r26
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	40 e8       	ldi	r20, 0x80	; 128
    1a5c:	5f e3       	ldi	r21, 0x3F	; 63
    1a5e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	bc 01       	movw	r22, r24
    1a68:	cd 01       	movw	r24, r26
    1a6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a6e:	dc 01       	movw	r26, r24
    1a70:	cb 01       	movw	r24, r22
    1a72:	f8 01       	movw	r30, r16
    1a74:	80 83       	st	Z, r24
    1a76:	03 c0       	rjmp	.+6      	; 0x1a7e <PWM_dutyCycle+0xb8>
			break;
		case PWM1 :
			break;
		case PWM2 :
			OCR2=(dutyCycle/HUNDRED_PERCNT)*TIMER_8B_REG_MAX;//DUTY CYCLE IS A PERCENTAGE FROM 0% TO 100%
    1a78:	e3 e4       	ldi	r30, 0x43	; 67
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	10 82       	st	Z, r1
			break;
		} //END of the SWITCH
	} //End of the IF


}
    1a7e:	0f 90       	pop	r0
    1a80:	0f 90       	pop	r0
    1a82:	0f 90       	pop	r0
    1a84:	0f 90       	pop	r0
    1a86:	cf 91       	pop	r28
    1a88:	df 91       	pop	r29
    1a8a:	1f 91       	pop	r17
    1a8c:	0f 91       	pop	r16
    1a8e:	08 95       	ret

00001a90 <TIMER_init>:

#define I_BIT                   (uint8_t)7

/*TIMER APIs
 */
void TIMER_init(uint8_t timer_no) {
    1a90:	df 93       	push	r29
    1a92:	cf 93       	push	r28
    1a94:	00 d0       	rcall	.+0      	; 0x1a96 <TIMER_init+0x6>
    1a96:	00 d0       	rcall	.+0      	; 0x1a98 <TIMER_init+0x8>
    1a98:	00 d0       	rcall	.+0      	; 0x1a9a <TIMER_init+0xa>
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
    1a9e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t timer1_mode = TIMER1_MODE;
    1aa0:	85 e0       	ldi	r24, 0x05	; 5
    1aa2:	89 83       	std	Y+1, r24	; 0x01
	if ((timer_no >= TIMER0 ) && (timer_no <= TIMER2 )) {
    1aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa6:	83 30       	cpi	r24, 0x03	; 3
    1aa8:	08 f0       	brcs	.+2      	; 0x1aac <TIMER_init+0x1c>
    1aaa:	3a c2       	rjmp	.+1140   	; 0x1f20 <TIMER_init+0x490>
		switch (timer_no) {
    1aac:	8a 81       	ldd	r24, Y+2	; 0x02
    1aae:	28 2f       	mov	r18, r24
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	3e 83       	std	Y+6, r19	; 0x06
    1ab4:	2d 83       	std	Y+5, r18	; 0x05
    1ab6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aba:	81 30       	cpi	r24, 0x01	; 1
    1abc:	91 05       	cpc	r25, r1
    1abe:	99 f0       	breq	.+38     	; 0x1ae6 <TIMER_init+0x56>
    1ac0:	2d 81       	ldd	r18, Y+5	; 0x05
    1ac2:	3e 81       	ldd	r19, Y+6	; 0x06
    1ac4:	22 30       	cpi	r18, 0x02	; 2
    1ac6:	31 05       	cpc	r19, r1
    1ac8:	09 f4       	brne	.+2      	; 0x1acc <TIMER_init+0x3c>
    1aca:	24 c2       	rjmp	.+1096   	; 0x1f14 <TIMER_init+0x484>
    1acc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ace:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad0:	00 97       	sbiw	r24, 0x00	; 0
    1ad2:	09 f0       	breq	.+2      	; 0x1ad6 <TIMER_init+0x46>
    1ad4:	25 c2       	rjmp	.+1098   	; 0x1f20 <TIMER_init+0x490>
		case TIMER0 :
			TCCR0 |= TIMER0_MODE
    1ad6:	a3 e5       	ldi	r26, 0x53	; 83
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	e3 e5       	ldi	r30, 0x53	; 83
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	88 64       	ori	r24, 0x48	; 72
    1ae2:	8c 93       	st	X, r24
    1ae4:	1d c2       	rjmp	.+1082   	; 0x1f20 <TIMER_init+0x490>
			;
			break;
		case TIMER1 :

			switch (timer1_mode) {
    1ae6:	89 81       	ldd	r24, Y+1	; 0x01
    1ae8:	28 2f       	mov	r18, r24
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	3c 83       	std	Y+4, r19	; 0x04
    1aee:	2b 83       	std	Y+3, r18	; 0x03
    1af0:	8b 81       	ldd	r24, Y+3	; 0x03
    1af2:	9c 81       	ldd	r25, Y+4	; 0x04
    1af4:	87 30       	cpi	r24, 0x07	; 7
    1af6:	91 05       	cpc	r25, r1
    1af8:	09 f4       	brne	.+2      	; 0x1afc <TIMER_init+0x6c>
    1afa:	24 c1       	rjmp	.+584    	; 0x1d44 <TIMER_init+0x2b4>
    1afc:	2b 81       	ldd	r18, Y+3	; 0x03
    1afe:	3c 81       	ldd	r19, Y+4	; 0x04
    1b00:	28 30       	cpi	r18, 0x08	; 8
    1b02:	31 05       	cpc	r19, r1
    1b04:	4c f5       	brge	.+82     	; 0x1b58 <TIMER_init+0xc8>
    1b06:	8b 81       	ldd	r24, Y+3	; 0x03
    1b08:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0a:	83 30       	cpi	r24, 0x03	; 3
    1b0c:	91 05       	cpc	r25, r1
    1b0e:	09 f4       	brne	.+2      	; 0x1b12 <TIMER_init+0x82>
    1b10:	a5 c0       	rjmp	.+330    	; 0x1c5c <TIMER_init+0x1cc>
    1b12:	2b 81       	ldd	r18, Y+3	; 0x03
    1b14:	3c 81       	ldd	r19, Y+4	; 0x04
    1b16:	24 30       	cpi	r18, 0x04	; 4
    1b18:	31 05       	cpc	r19, r1
    1b1a:	8c f4       	brge	.+34     	; 0x1b3e <TIMER_init+0xae>
    1b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b20:	81 30       	cpi	r24, 0x01	; 1
    1b22:	91 05       	cpc	r25, r1
    1b24:	09 f4       	brne	.+2      	; 0x1b28 <TIMER_init+0x98>
    1b26:	60 c0       	rjmp	.+192    	; 0x1be8 <TIMER_init+0x158>
    1b28:	2b 81       	ldd	r18, Y+3	; 0x03
    1b2a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b2c:	22 30       	cpi	r18, 0x02	; 2
    1b2e:	31 05       	cpc	r19, r1
    1b30:	0c f0       	brlt	.+2      	; 0x1b34 <TIMER_init+0xa4>
    1b32:	77 c0       	rjmp	.+238    	; 0x1c22 <TIMER_init+0x192>
    1b34:	8b 81       	ldd	r24, Y+3	; 0x03
    1b36:	9c 81       	ldd	r25, Y+4	; 0x04
    1b38:	00 97       	sbiw	r24, 0x00	; 0
    1b3a:	c9 f1       	breq	.+114    	; 0x1bae <TIMER_init+0x11e>
    1b3c:	f1 c1       	rjmp	.+994    	; 0x1f20 <TIMER_init+0x490>
    1b3e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b40:	3c 81       	ldd	r19, Y+4	; 0x04
    1b42:	25 30       	cpi	r18, 0x05	; 5
    1b44:	31 05       	cpc	r19, r1
    1b46:	09 f4       	brne	.+2      	; 0x1b4a <TIMER_init+0xba>
    1b48:	c3 c0       	rjmp	.+390    	; 0x1cd0 <TIMER_init+0x240>
    1b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4e:	86 30       	cpi	r24, 0x06	; 6
    1b50:	91 05       	cpc	r25, r1
    1b52:	0c f0       	brlt	.+2      	; 0x1b56 <TIMER_init+0xc6>
    1b54:	da c0       	rjmp	.+436    	; 0x1d0a <TIMER_init+0x27a>
    1b56:	9f c0       	rjmp	.+318    	; 0x1c96 <TIMER_init+0x206>
    1b58:	2b 81       	ldd	r18, Y+3	; 0x03
    1b5a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b5c:	2b 30       	cpi	r18, 0x0B	; 11
    1b5e:	31 05       	cpc	r19, r1
    1b60:	09 f4       	brne	.+2      	; 0x1b64 <TIMER_init+0xd4>
    1b62:	64 c1       	rjmp	.+712    	; 0x1e2c <TIMER_init+0x39c>
    1b64:	8b 81       	ldd	r24, Y+3	; 0x03
    1b66:	9c 81       	ldd	r25, Y+4	; 0x04
    1b68:	8c 30       	cpi	r24, 0x0C	; 12
    1b6a:	91 05       	cpc	r25, r1
    1b6c:	6c f4       	brge	.+26     	; 0x1b88 <TIMER_init+0xf8>
    1b6e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b70:	3c 81       	ldd	r19, Y+4	; 0x04
    1b72:	29 30       	cpi	r18, 0x09	; 9
    1b74:	31 05       	cpc	r19, r1
    1b76:	09 f4       	brne	.+2      	; 0x1b7a <TIMER_init+0xea>
    1b78:	1f c1       	rjmp	.+574    	; 0x1db8 <TIMER_init+0x328>
    1b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b7e:	8a 30       	cpi	r24, 0x0A	; 10
    1b80:	91 05       	cpc	r25, r1
    1b82:	0c f0       	brlt	.+2      	; 0x1b86 <TIMER_init+0xf6>
    1b84:	36 c1       	rjmp	.+620    	; 0x1df2 <TIMER_init+0x362>
    1b86:	fb c0       	rjmp	.+502    	; 0x1d7e <TIMER_init+0x2ee>
    1b88:	2b 81       	ldd	r18, Y+3	; 0x03
    1b8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b8c:	2e 30       	cpi	r18, 0x0E	; 14
    1b8e:	31 05       	cpc	r19, r1
    1b90:	09 f4       	brne	.+2      	; 0x1b94 <TIMER_init+0x104>
    1b92:	86 c1       	rjmp	.+780    	; 0x1ea0 <TIMER_init+0x410>
    1b94:	8b 81       	ldd	r24, Y+3	; 0x03
    1b96:	9c 81       	ldd	r25, Y+4	; 0x04
    1b98:	8f 30       	cpi	r24, 0x0F	; 15
    1b9a:	91 05       	cpc	r25, r1
    1b9c:	09 f4       	brne	.+2      	; 0x1ba0 <TIMER_init+0x110>
    1b9e:	9d c1       	rjmp	.+826    	; 0x1eda <TIMER_init+0x44a>
    1ba0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ba2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ba4:	2c 30       	cpi	r18, 0x0C	; 12
    1ba6:	31 05       	cpc	r19, r1
    1ba8:	09 f4       	brne	.+2      	; 0x1bac <TIMER_init+0x11c>
    1baa:	5d c1       	rjmp	.+698    	; 0x1e66 <TIMER_init+0x3d6>
    1bac:	b9 c1       	rjmp	.+882    	; 0x1f20 <TIMER_init+0x490>
			case NormalMD :
				Clr_Bit(TCCR1A, WGM10);  //0000
    1bae:	af e4       	ldi	r26, 0x4F	; 79
    1bb0:	b0 e0       	ldi	r27, 0x00	; 0
    1bb2:	ef e4       	ldi	r30, 0x4F	; 79
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	80 81       	ld	r24, Z
    1bb8:	8e 7f       	andi	r24, 0xFE	; 254
    1bba:	8c 93       	st	X, r24
				Clr_Bit(TCCR1A, WGM11);
    1bbc:	af e4       	ldi	r26, 0x4F	; 79
    1bbe:	b0 e0       	ldi	r27, 0x00	; 0
    1bc0:	ef e4       	ldi	r30, 0x4F	; 79
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	80 81       	ld	r24, Z
    1bc6:	8d 7f       	andi	r24, 0xFD	; 253
    1bc8:	8c 93       	st	X, r24
				Clr_Bit(TCCR1B, WGM12);
    1bca:	ae e4       	ldi	r26, 0x4E	; 78
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	ee e4       	ldi	r30, 0x4E	; 78
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	87 7f       	andi	r24, 0xF7	; 247
    1bd6:	8c 93       	st	X, r24
				Clr_Bit(TCCR1B, WGM13);
    1bd8:	ae e4       	ldi	r26, 0x4E	; 78
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	ee e4       	ldi	r30, 0x4E	; 78
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	8f 7e       	andi	r24, 0xEF	; 239
    1be4:	8c 93       	st	X, r24
    1be6:	9c c1       	rjmp	.+824    	; 0x1f20 <TIMER_init+0x490>
				break;
			case PWM_PhaseCorrect_8B :
				Set_Bit(TCCR1A, WGM10);  //0001
    1be8:	af e4       	ldi	r26, 0x4F	; 79
    1bea:	b0 e0       	ldi	r27, 0x00	; 0
    1bec:	ef e4       	ldi	r30, 0x4F	; 79
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	81 60       	ori	r24, 0x01	; 1
    1bf4:	8c 93       	st	X, r24
				Clr_Bit(TCCR1A, WGM11);
    1bf6:	af e4       	ldi	r26, 0x4F	; 79
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	ef e4       	ldi	r30, 0x4F	; 79
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	8d 7f       	andi	r24, 0xFD	; 253
    1c02:	8c 93       	st	X, r24
				Clr_Bit(TCCR1B, WGM12);
    1c04:	ae e4       	ldi	r26, 0x4E	; 78
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	ee e4       	ldi	r30, 0x4E	; 78
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	87 7f       	andi	r24, 0xF7	; 247
    1c10:	8c 93       	st	X, r24
				Clr_Bit(TCCR1B, WGM13);
    1c12:	ae e4       	ldi	r26, 0x4E	; 78
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	ee e4       	ldi	r30, 0x4E	; 78
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	8f 7e       	andi	r24, 0xEF	; 239
    1c1e:	8c 93       	st	X, r24
    1c20:	7f c1       	rjmp	.+766    	; 0x1f20 <TIMER_init+0x490>
				break;
			case PWM_PhaseCorrect_9B :
				Clr_Bit(TCCR1A, WGM10);  //0010
    1c22:	af e4       	ldi	r26, 0x4F	; 79
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	ef e4       	ldi	r30, 0x4F	; 79
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	8e 7f       	andi	r24, 0xFE	; 254
    1c2e:	8c 93       	st	X, r24
				Set_Bit(TCCR1A, WGM11);
    1c30:	af e4       	ldi	r26, 0x4F	; 79
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	ef e4       	ldi	r30, 0x4F	; 79
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	82 60       	ori	r24, 0x02	; 2
    1c3c:	8c 93       	st	X, r24
				Clr_Bit(TCCR1B, WGM12);
    1c3e:	ae e4       	ldi	r26, 0x4E	; 78
    1c40:	b0 e0       	ldi	r27, 0x00	; 0
    1c42:	ee e4       	ldi	r30, 0x4E	; 78
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	80 81       	ld	r24, Z
    1c48:	87 7f       	andi	r24, 0xF7	; 247
    1c4a:	8c 93       	st	X, r24
				Clr_Bit(TCCR1B, WGM13);
    1c4c:	ae e4       	ldi	r26, 0x4E	; 78
    1c4e:	b0 e0       	ldi	r27, 0x00	; 0
    1c50:	ee e4       	ldi	r30, 0x4E	; 78
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	80 81       	ld	r24, Z
    1c56:	8f 7e       	andi	r24, 0xEF	; 239
    1c58:	8c 93       	st	X, r24
    1c5a:	62 c1       	rjmp	.+708    	; 0x1f20 <TIMER_init+0x490>
				break;
			case PWM_PhaseCorrect_10B :
				Set_Bit(TCCR1A, WGM10);  //0011
    1c5c:	af e4       	ldi	r26, 0x4F	; 79
    1c5e:	b0 e0       	ldi	r27, 0x00	; 0
    1c60:	ef e4       	ldi	r30, 0x4F	; 79
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	80 81       	ld	r24, Z
    1c66:	81 60       	ori	r24, 0x01	; 1
    1c68:	8c 93       	st	X, r24
				Set_Bit(TCCR1A, WGM11);
    1c6a:	af e4       	ldi	r26, 0x4F	; 79
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	ef e4       	ldi	r30, 0x4F	; 79
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	82 60       	ori	r24, 0x02	; 2
    1c76:	8c 93       	st	X, r24
				Clr_Bit(TCCR1B, WGM12);
    1c78:	ae e4       	ldi	r26, 0x4E	; 78
    1c7a:	b0 e0       	ldi	r27, 0x00	; 0
    1c7c:	ee e4       	ldi	r30, 0x4E	; 78
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	87 7f       	andi	r24, 0xF7	; 247
    1c84:	8c 93       	st	X, r24
				Clr_Bit(TCCR1B, WGM13);
    1c86:	ae e4       	ldi	r26, 0x4E	; 78
    1c88:	b0 e0       	ldi	r27, 0x00	; 0
    1c8a:	ee e4       	ldi	r30, 0x4E	; 78
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	80 81       	ld	r24, Z
    1c90:	8f 7e       	andi	r24, 0xEF	; 239
    1c92:	8c 93       	st	X, r24
    1c94:	45 c1       	rjmp	.+650    	; 0x1f20 <TIMER_init+0x490>
				break;
			case T1_CTC :
				Clr_Bit(TCCR1A, WGM10);  //0100
    1c96:	af e4       	ldi	r26, 0x4F	; 79
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	ef e4       	ldi	r30, 0x4F	; 79
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	8e 7f       	andi	r24, 0xFE	; 254
    1ca2:	8c 93       	st	X, r24
				Clr_Bit(TCCR1A, WGM11);
    1ca4:	af e4       	ldi	r26, 0x4F	; 79
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	ef e4       	ldi	r30, 0x4F	; 79
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	80 81       	ld	r24, Z
    1cae:	8d 7f       	andi	r24, 0xFD	; 253
    1cb0:	8c 93       	st	X, r24
				Set_Bit(TCCR1B, WGM12);
    1cb2:	ae e4       	ldi	r26, 0x4E	; 78
    1cb4:	b0 e0       	ldi	r27, 0x00	; 0
    1cb6:	ee e4       	ldi	r30, 0x4E	; 78
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	80 81       	ld	r24, Z
    1cbc:	88 60       	ori	r24, 0x08	; 8
    1cbe:	8c 93       	st	X, r24
				Clr_Bit(TCCR1B, WGM13);
    1cc0:	ae e4       	ldi	r26, 0x4E	; 78
    1cc2:	b0 e0       	ldi	r27, 0x00	; 0
    1cc4:	ee e4       	ldi	r30, 0x4E	; 78
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	8f 7e       	andi	r24, 0xEF	; 239
    1ccc:	8c 93       	st	X, r24
    1cce:	28 c1       	rjmp	.+592    	; 0x1f20 <TIMER_init+0x490>
				break;
			case FastPWM_8B :
				Set_Bit(TCCR1A, WGM10);  //0101
    1cd0:	af e4       	ldi	r26, 0x4F	; 79
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	ef e4       	ldi	r30, 0x4F	; 79
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	81 60       	ori	r24, 0x01	; 1
    1cdc:	8c 93       	st	X, r24
				Clr_Bit(TCCR1A, WGM11);
    1cde:	af e4       	ldi	r26, 0x4F	; 79
    1ce0:	b0 e0       	ldi	r27, 0x00	; 0
    1ce2:	ef e4       	ldi	r30, 0x4F	; 79
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	8d 7f       	andi	r24, 0xFD	; 253
    1cea:	8c 93       	st	X, r24
				Set_Bit(TCCR1B, WGM12);
    1cec:	ae e4       	ldi	r26, 0x4E	; 78
    1cee:	b0 e0       	ldi	r27, 0x00	; 0
    1cf0:	ee e4       	ldi	r30, 0x4E	; 78
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	80 81       	ld	r24, Z
    1cf6:	88 60       	ori	r24, 0x08	; 8
    1cf8:	8c 93       	st	X, r24
				Clr_Bit(TCCR1B, WGM13);
    1cfa:	ae e4       	ldi	r26, 0x4E	; 78
    1cfc:	b0 e0       	ldi	r27, 0x00	; 0
    1cfe:	ee e4       	ldi	r30, 0x4E	; 78
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	80 81       	ld	r24, Z
    1d04:	8f 7e       	andi	r24, 0xEF	; 239
    1d06:	8c 93       	st	X, r24
    1d08:	0b c1       	rjmp	.+534    	; 0x1f20 <TIMER_init+0x490>
				break;
			case FastPWM_9B :
				Clr_Bit(TCCR1A, WGM10);  //0110
    1d0a:	af e4       	ldi	r26, 0x4F	; 79
    1d0c:	b0 e0       	ldi	r27, 0x00	; 0
    1d0e:	ef e4       	ldi	r30, 0x4F	; 79
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	80 81       	ld	r24, Z
    1d14:	8e 7f       	andi	r24, 0xFE	; 254
    1d16:	8c 93       	st	X, r24
				Set_Bit(TCCR1A, WGM11);
    1d18:	af e4       	ldi	r26, 0x4F	; 79
    1d1a:	b0 e0       	ldi	r27, 0x00	; 0
    1d1c:	ef e4       	ldi	r30, 0x4F	; 79
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	80 81       	ld	r24, Z
    1d22:	82 60       	ori	r24, 0x02	; 2
    1d24:	8c 93       	st	X, r24
				Set_Bit(TCCR1B, WGM12);
    1d26:	ae e4       	ldi	r26, 0x4E	; 78
    1d28:	b0 e0       	ldi	r27, 0x00	; 0
    1d2a:	ee e4       	ldi	r30, 0x4E	; 78
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	88 60       	ori	r24, 0x08	; 8
    1d32:	8c 93       	st	X, r24
				Clr_Bit(TCCR1B, WGM13);
    1d34:	ae e4       	ldi	r26, 0x4E	; 78
    1d36:	b0 e0       	ldi	r27, 0x00	; 0
    1d38:	ee e4       	ldi	r30, 0x4E	; 78
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	80 81       	ld	r24, Z
    1d3e:	8f 7e       	andi	r24, 0xEF	; 239
    1d40:	8c 93       	st	X, r24
    1d42:	ee c0       	rjmp	.+476    	; 0x1f20 <TIMER_init+0x490>
				break;
			case FastPWM_10B :
				Set_Bit(TCCR1A, WGM10);  //0111
    1d44:	af e4       	ldi	r26, 0x4F	; 79
    1d46:	b0 e0       	ldi	r27, 0x00	; 0
    1d48:	ef e4       	ldi	r30, 0x4F	; 79
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	81 60       	ori	r24, 0x01	; 1
    1d50:	8c 93       	st	X, r24
				Set_Bit(TCCR1A, WGM11);
    1d52:	af e4       	ldi	r26, 0x4F	; 79
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	ef e4       	ldi	r30, 0x4F	; 79
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	82 60       	ori	r24, 0x02	; 2
    1d5e:	8c 93       	st	X, r24
				Set_Bit(TCCR1B, WGM12);
    1d60:	ae e4       	ldi	r26, 0x4E	; 78
    1d62:	b0 e0       	ldi	r27, 0x00	; 0
    1d64:	ee e4       	ldi	r30, 0x4E	; 78
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	80 81       	ld	r24, Z
    1d6a:	88 60       	ori	r24, 0x08	; 8
    1d6c:	8c 93       	st	X, r24
				Clr_Bit(TCCR1B, WGM13);
    1d6e:	ae e4       	ldi	r26, 0x4E	; 78
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	ee e4       	ldi	r30, 0x4E	; 78
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	8f 7e       	andi	r24, 0xEF	; 239
    1d7a:	8c 93       	st	X, r24
    1d7c:	d1 c0       	rjmp	.+418    	; 0x1f20 <TIMER_init+0x490>
				break;
			case PWM_PhFreqCorrect_ICR1 :
				Clr_Bit(TCCR1A, WGM10);  //1000
    1d7e:	af e4       	ldi	r26, 0x4F	; 79
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	ef e4       	ldi	r30, 0x4F	; 79
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	8e 7f       	andi	r24, 0xFE	; 254
    1d8a:	8c 93       	st	X, r24
				Clr_Bit(TCCR1A, WGM11);
    1d8c:	af e4       	ldi	r26, 0x4F	; 79
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	ef e4       	ldi	r30, 0x4F	; 79
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	8d 7f       	andi	r24, 0xFD	; 253
    1d98:	8c 93       	st	X, r24
				Clr_Bit(TCCR1B, WGM12);
    1d9a:	ae e4       	ldi	r26, 0x4E	; 78
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	ee e4       	ldi	r30, 0x4E	; 78
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	87 7f       	andi	r24, 0xF7	; 247
    1da6:	8c 93       	st	X, r24
				Set_Bit(TCCR1B, WGM13);
    1da8:	ae e4       	ldi	r26, 0x4E	; 78
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	ee e4       	ldi	r30, 0x4E	; 78
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	80 61       	ori	r24, 0x10	; 16
    1db4:	8c 93       	st	X, r24
    1db6:	b4 c0       	rjmp	.+360    	; 0x1f20 <TIMER_init+0x490>
				break;
			case PWM_PhFreqCorrect_OCR1A :
				Set_Bit(TCCR1A, WGM10);  //1001
    1db8:	af e4       	ldi	r26, 0x4F	; 79
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	ef e4       	ldi	r30, 0x4F	; 79
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	81 60       	ori	r24, 0x01	; 1
    1dc4:	8c 93       	st	X, r24
				Clr_Bit(TCCR1A, WGM11);
    1dc6:	af e4       	ldi	r26, 0x4F	; 79
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	ef e4       	ldi	r30, 0x4F	; 79
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	8d 7f       	andi	r24, 0xFD	; 253
    1dd2:	8c 93       	st	X, r24
				Clr_Bit(TCCR1B, WGM12);
    1dd4:	ae e4       	ldi	r26, 0x4E	; 78
    1dd6:	b0 e0       	ldi	r27, 0x00	; 0
    1dd8:	ee e4       	ldi	r30, 0x4E	; 78
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	87 7f       	andi	r24, 0xF7	; 247
    1de0:	8c 93       	st	X, r24
				Set_Bit(TCCR1B, WGM13);
    1de2:	ae e4       	ldi	r26, 0x4E	; 78
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	ee e4       	ldi	r30, 0x4E	; 78
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	80 61       	ori	r24, 0x10	; 16
    1dee:	8c 93       	st	X, r24
    1df0:	97 c0       	rjmp	.+302    	; 0x1f20 <TIMER_init+0x490>
				break;
			case PWM_PhaseCorrect_ICR1 :
				Clr_Bit(TCCR1A, WGM10);  //1010
    1df2:	af e4       	ldi	r26, 0x4F	; 79
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	ef e4       	ldi	r30, 0x4F	; 79
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	80 81       	ld	r24, Z
    1dfc:	8e 7f       	andi	r24, 0xFE	; 254
    1dfe:	8c 93       	st	X, r24
				Set_Bit(TCCR1A, WGM11);
    1e00:	af e4       	ldi	r26, 0x4F	; 79
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	ef e4       	ldi	r30, 0x4F	; 79
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 81       	ld	r24, Z
    1e0a:	82 60       	ori	r24, 0x02	; 2
    1e0c:	8c 93       	st	X, r24
				Clr_Bit(TCCR1B, WGM12);
    1e0e:	ae e4       	ldi	r26, 0x4E	; 78
    1e10:	b0 e0       	ldi	r27, 0x00	; 0
    1e12:	ee e4       	ldi	r30, 0x4E	; 78
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	80 81       	ld	r24, Z
    1e18:	87 7f       	andi	r24, 0xF7	; 247
    1e1a:	8c 93       	st	X, r24
				Set_Bit(TCCR1B, WGM13);
    1e1c:	ae e4       	ldi	r26, 0x4E	; 78
    1e1e:	b0 e0       	ldi	r27, 0x00	; 0
    1e20:	ee e4       	ldi	r30, 0x4E	; 78
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	80 61       	ori	r24, 0x10	; 16
    1e28:	8c 93       	st	X, r24
    1e2a:	7a c0       	rjmp	.+244    	; 0x1f20 <TIMER_init+0x490>
				break;
			case PWM_PhaseCorrect_OCR1A :
				Set_Bit(TCCR1A, WGM10);  //1011
    1e2c:	af e4       	ldi	r26, 0x4F	; 79
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	ef e4       	ldi	r30, 0x4F	; 79
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	81 60       	ori	r24, 0x01	; 1
    1e38:	8c 93       	st	X, r24
				Set_Bit(TCCR1A, WGM11);
    1e3a:	af e4       	ldi	r26, 0x4F	; 79
    1e3c:	b0 e0       	ldi	r27, 0x00	; 0
    1e3e:	ef e4       	ldi	r30, 0x4F	; 79
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	80 81       	ld	r24, Z
    1e44:	82 60       	ori	r24, 0x02	; 2
    1e46:	8c 93       	st	X, r24
				Clr_Bit(TCCR1B, WGM12);
    1e48:	ae e4       	ldi	r26, 0x4E	; 78
    1e4a:	b0 e0       	ldi	r27, 0x00	; 0
    1e4c:	ee e4       	ldi	r30, 0x4E	; 78
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	80 81       	ld	r24, Z
    1e52:	87 7f       	andi	r24, 0xF7	; 247
    1e54:	8c 93       	st	X, r24
				Set_Bit(TCCR1B, WGM13);
    1e56:	ae e4       	ldi	r26, 0x4E	; 78
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	ee e4       	ldi	r30, 0x4E	; 78
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	80 81       	ld	r24, Z
    1e60:	80 61       	ori	r24, 0x10	; 16
    1e62:	8c 93       	st	X, r24
    1e64:	5d c0       	rjmp	.+186    	; 0x1f20 <TIMER_init+0x490>
				break;
			case CTC_ICR1 :
				Clr_Bit(TCCR1A, WGM10);  //1100
    1e66:	af e4       	ldi	r26, 0x4F	; 79
    1e68:	b0 e0       	ldi	r27, 0x00	; 0
    1e6a:	ef e4       	ldi	r30, 0x4F	; 79
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	80 81       	ld	r24, Z
    1e70:	8e 7f       	andi	r24, 0xFE	; 254
    1e72:	8c 93       	st	X, r24
				Clr_Bit(TCCR1A, WGM11);
    1e74:	af e4       	ldi	r26, 0x4F	; 79
    1e76:	b0 e0       	ldi	r27, 0x00	; 0
    1e78:	ef e4       	ldi	r30, 0x4F	; 79
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 81       	ld	r24, Z
    1e7e:	8d 7f       	andi	r24, 0xFD	; 253
    1e80:	8c 93       	st	X, r24
				Set_Bit(TCCR1B, WGM12);
    1e82:	ae e4       	ldi	r26, 0x4E	; 78
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	ee e4       	ldi	r30, 0x4E	; 78
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	88 60       	ori	r24, 0x08	; 8
    1e8e:	8c 93       	st	X, r24
				Set_Bit(TCCR1B, WGM13);
    1e90:	ae e4       	ldi	r26, 0x4E	; 78
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	ee e4       	ldi	r30, 0x4E	; 78
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	80 61       	ori	r24, 0x10	; 16
    1e9c:	8c 93       	st	X, r24
    1e9e:	40 c0       	rjmp	.+128    	; 0x1f20 <TIMER_init+0x490>
				break;
			case FastPWM_ICR1 :
				Clr_Bit(TCCR1A, WGM10);  //1110
    1ea0:	af e4       	ldi	r26, 0x4F	; 79
    1ea2:	b0 e0       	ldi	r27, 0x00	; 0
    1ea4:	ef e4       	ldi	r30, 0x4F	; 79
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	80 81       	ld	r24, Z
    1eaa:	8e 7f       	andi	r24, 0xFE	; 254
    1eac:	8c 93       	st	X, r24
				Set_Bit(TCCR1A, WGM11);
    1eae:	af e4       	ldi	r26, 0x4F	; 79
    1eb0:	b0 e0       	ldi	r27, 0x00	; 0
    1eb2:	ef e4       	ldi	r30, 0x4F	; 79
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	80 81       	ld	r24, Z
    1eb8:	82 60       	ori	r24, 0x02	; 2
    1eba:	8c 93       	st	X, r24
				Set_Bit(TCCR1B, WGM12);
    1ebc:	ae e4       	ldi	r26, 0x4E	; 78
    1ebe:	b0 e0       	ldi	r27, 0x00	; 0
    1ec0:	ee e4       	ldi	r30, 0x4E	; 78
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	80 81       	ld	r24, Z
    1ec6:	88 60       	ori	r24, 0x08	; 8
    1ec8:	8c 93       	st	X, r24
				Set_Bit(TCCR1B, WGM13);
    1eca:	ae e4       	ldi	r26, 0x4E	; 78
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	ee e4       	ldi	r30, 0x4E	; 78
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	80 81       	ld	r24, Z
    1ed4:	80 61       	ori	r24, 0x10	; 16
    1ed6:	8c 93       	st	X, r24
    1ed8:	23 c0       	rjmp	.+70     	; 0x1f20 <TIMER_init+0x490>
				break;
			case FastPWM_OCR1A :
				Set_Bit(TCCR1A, WGM10);  //1111
    1eda:	af e4       	ldi	r26, 0x4F	; 79
    1edc:	b0 e0       	ldi	r27, 0x00	; 0
    1ede:	ef e4       	ldi	r30, 0x4F	; 79
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	80 81       	ld	r24, Z
    1ee4:	81 60       	ori	r24, 0x01	; 1
    1ee6:	8c 93       	st	X, r24
				Set_Bit(TCCR1A, WGM11);
    1ee8:	af e4       	ldi	r26, 0x4F	; 79
    1eea:	b0 e0       	ldi	r27, 0x00	; 0
    1eec:	ef e4       	ldi	r30, 0x4F	; 79
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	80 81       	ld	r24, Z
    1ef2:	82 60       	ori	r24, 0x02	; 2
    1ef4:	8c 93       	st	X, r24
				Set_Bit(TCCR1B, WGM12);
    1ef6:	ae e4       	ldi	r26, 0x4E	; 78
    1ef8:	b0 e0       	ldi	r27, 0x00	; 0
    1efa:	ee e4       	ldi	r30, 0x4E	; 78
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	80 81       	ld	r24, Z
    1f00:	88 60       	ori	r24, 0x08	; 8
    1f02:	8c 93       	st	X, r24
				Set_Bit(TCCR1B, WGM13);
    1f04:	ae e4       	ldi	r26, 0x4E	; 78
    1f06:	b0 e0       	ldi	r27, 0x00	; 0
    1f08:	ee e4       	ldi	r30, 0x4E	; 78
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	80 81       	ld	r24, Z
    1f0e:	80 61       	ori	r24, 0x10	; 16
    1f10:	8c 93       	st	X, r24
    1f12:	06 c0       	rjmp	.+12     	; 0x1f20 <TIMER_init+0x490>
				break;
			}

			break;
		case TIMER2 :
			TCCR2 |= TIMER2_MODE;
    1f14:	e5 e4       	ldi	r30, 0x45	; 69
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	a5 e4       	ldi	r26, 0x45	; 69
    1f1a:	b0 e0       	ldi	r27, 0x00	; 0
    1f1c:	8c 91       	ld	r24, X
    1f1e:	80 83       	st	Z, r24
			break;
		} //END of the SWITCH
	} //End of the IF

}
    1f20:	26 96       	adiw	r28, 0x06	; 6
    1f22:	0f b6       	in	r0, 0x3f	; 63
    1f24:	f8 94       	cli
    1f26:	de bf       	out	0x3e, r29	; 62
    1f28:	0f be       	out	0x3f, r0	; 63
    1f2a:	cd bf       	out	0x3d, r28	; 61
    1f2c:	cf 91       	pop	r28
    1f2e:	df 91       	pop	r29
    1f30:	08 95       	ret

00001f32 <TIMER_start>:
void TIMER_start(uint8_t timer_no) {
    1f32:	df 93       	push	r29
    1f34:	cf 93       	push	r28
    1f36:	00 d0       	rcall	.+0      	; 0x1f38 <TIMER_start+0x6>
    1f38:	0f 92       	push	r0
    1f3a:	cd b7       	in	r28, 0x3d	; 61
    1f3c:	de b7       	in	r29, 0x3e	; 62
    1f3e:	89 83       	std	Y+1, r24	; 0x01
	if ((timer_no >= TIMER0 ) && (timer_no <= TIMER2 )) {
    1f40:	89 81       	ldd	r24, Y+1	; 0x01
    1f42:	83 30       	cpi	r24, 0x03	; 3
    1f44:	50 f5       	brcc	.+84     	; 0x1f9a <TIMER_start+0x68>
		switch (timer_no) {
    1f46:	89 81       	ldd	r24, Y+1	; 0x01
    1f48:	28 2f       	mov	r18, r24
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	3b 83       	std	Y+3, r19	; 0x03
    1f4e:	2a 83       	std	Y+2, r18	; 0x02
    1f50:	8a 81       	ldd	r24, Y+2	; 0x02
    1f52:	9b 81       	ldd	r25, Y+3	; 0x03
    1f54:	81 30       	cpi	r24, 0x01	; 1
    1f56:	91 05       	cpc	r25, r1
    1f58:	89 f0       	breq	.+34     	; 0x1f7c <TIMER_start+0x4a>
    1f5a:	2a 81       	ldd	r18, Y+2	; 0x02
    1f5c:	3b 81       	ldd	r19, Y+3	; 0x03
    1f5e:	22 30       	cpi	r18, 0x02	; 2
    1f60:	31 05       	cpc	r19, r1
    1f62:	a1 f0       	breq	.+40     	; 0x1f8c <TIMER_start+0x5a>
    1f64:	8a 81       	ldd	r24, Y+2	; 0x02
    1f66:	9b 81       	ldd	r25, Y+3	; 0x03
    1f68:	00 97       	sbiw	r24, 0x00	; 0
    1f6a:	b9 f4       	brne	.+46     	; 0x1f9a <TIMER_start+0x68>
		case TIMER0 :
			TCCR0 |= TIMER0_PRESCALER;
    1f6c:	a3 e5       	ldi	r26, 0x53	; 83
    1f6e:	b0 e0       	ldi	r27, 0x00	; 0
    1f70:	e3 e5       	ldi	r30, 0x53	; 83
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	80 81       	ld	r24, Z
    1f76:	82 60       	ori	r24, 0x02	; 2
    1f78:	8c 93       	st	X, r24
    1f7a:	0f c0       	rjmp	.+30     	; 0x1f9a <TIMER_start+0x68>
			break;
		case TIMER1 :
			TCCR1B |= TIMER1_PRESCALER;
    1f7c:	ae e4       	ldi	r26, 0x4E	; 78
    1f7e:	b0 e0       	ldi	r27, 0x00	; 0
    1f80:	ee e4       	ldi	r30, 0x4E	; 78
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	80 81       	ld	r24, Z
    1f86:	82 60       	ori	r24, 0x02	; 2
    1f88:	8c 93       	st	X, r24
    1f8a:	07 c0       	rjmp	.+14     	; 0x1f9a <TIMER_start+0x68>
			break;
		case TIMER2 :
			TCCR0 |= TIMER2_PRESCALER;
    1f8c:	a3 e5       	ldi	r26, 0x53	; 83
    1f8e:	b0 e0       	ldi	r27, 0x00	; 0
    1f90:	e3 e5       	ldi	r30, 0x53	; 83
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	80 81       	ld	r24, Z
    1f96:	82 60       	ori	r24, 0x02	; 2
    1f98:	8c 93       	st	X, r24
			break;
		} //END of the SWITCH
	} //End of the IF
}
    1f9a:	0f 90       	pop	r0
    1f9c:	0f 90       	pop	r0
    1f9e:	0f 90       	pop	r0
    1fa0:	cf 91       	pop	r28
    1fa2:	df 91       	pop	r29
    1fa4:	08 95       	ret

00001fa6 <TIMER_callBackFunc>:
void TIMER_callBackFunc(uint8_t interrupt_ch, void (*PTR_FUNC)(void)) {
    1fa6:	df 93       	push	r29
    1fa8:	cf 93       	push	r28
    1faa:	00 d0       	rcall	.+0      	; 0x1fac <TIMER_callBackFunc+0x6>
    1fac:	00 d0       	rcall	.+0      	; 0x1fae <TIMER_callBackFunc+0x8>
    1fae:	0f 92       	push	r0
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
    1fb4:	89 83       	std	Y+1, r24	; 0x01
    1fb6:	7b 83       	std	Y+3, r23	; 0x03
    1fb8:	6a 83       	std	Y+2, r22	; 0x02
	switch (interrupt_ch) {
    1fba:	89 81       	ldd	r24, Y+1	; 0x01
    1fbc:	28 2f       	mov	r18, r24
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	3d 83       	std	Y+5, r19	; 0x05
    1fc2:	2c 83       	std	Y+4, r18	; 0x04
    1fc4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc6:	9d 81       	ldd	r25, Y+5	; 0x05
    1fc8:	88 30       	cpi	r24, 0x08	; 8
    1fca:	91 05       	cpc	r25, r1
    1fcc:	09 f4       	brne	.+2      	; 0x1fd0 <TIMER_callBackFunc+0x2a>
    1fce:	45 c0       	rjmp	.+138    	; 0x205a <TIMER_callBackFunc+0xb4>
    1fd0:	2c 81       	ldd	r18, Y+4	; 0x04
    1fd2:	3d 81       	ldd	r19, Y+5	; 0x05
    1fd4:	29 30       	cpi	r18, 0x09	; 9
    1fd6:	31 05       	cpc	r19, r1
    1fd8:	84 f4       	brge	.+32     	; 0x1ffa <TIMER_callBackFunc+0x54>
    1fda:	8c 81       	ldd	r24, Y+4	; 0x04
    1fdc:	9d 81       	ldd	r25, Y+5	; 0x05
    1fde:	82 30       	cpi	r24, 0x02	; 2
    1fe0:	91 05       	cpc	r25, r1
    1fe2:	69 f1       	breq	.+90     	; 0x203e <TIMER_callBackFunc+0x98>
    1fe4:	2c 81       	ldd	r18, Y+4	; 0x04
    1fe6:	3d 81       	ldd	r19, Y+5	; 0x05
    1fe8:	24 30       	cpi	r18, 0x04	; 4
    1fea:	31 05       	cpc	r19, r1
    1fec:	79 f1       	breq	.+94     	; 0x204c <TIMER_callBackFunc+0xa6>
    1fee:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ff2:	81 30       	cpi	r24, 0x01	; 1
    1ff4:	91 05       	cpc	r25, r1
    1ff6:	e1 f0       	breq	.+56     	; 0x2030 <TIMER_callBackFunc+0x8a>
    1ff8:	52 c0       	rjmp	.+164    	; 0x209e <TIMER_callBackFunc+0xf8>
    1ffa:	2c 81       	ldd	r18, Y+4	; 0x04
    1ffc:	3d 81       	ldd	r19, Y+5	; 0x05
    1ffe:	20 32       	cpi	r18, 0x20	; 32
    2000:	31 05       	cpc	r19, r1
    2002:	c9 f1       	breq	.+114    	; 0x2076 <TIMER_callBackFunc+0xd0>
    2004:	8c 81       	ldd	r24, Y+4	; 0x04
    2006:	9d 81       	ldd	r25, Y+5	; 0x05
    2008:	81 32       	cpi	r24, 0x21	; 33
    200a:	91 05       	cpc	r25, r1
    200c:	34 f4       	brge	.+12     	; 0x201a <TIMER_callBackFunc+0x74>
    200e:	2c 81       	ldd	r18, Y+4	; 0x04
    2010:	3d 81       	ldd	r19, Y+5	; 0x05
    2012:	20 31       	cpi	r18, 0x10	; 16
    2014:	31 05       	cpc	r19, r1
    2016:	41 f1       	breq	.+80     	; 0x2068 <TIMER_callBackFunc+0xc2>
    2018:	42 c0       	rjmp	.+132    	; 0x209e <TIMER_callBackFunc+0xf8>
    201a:	8c 81       	ldd	r24, Y+4	; 0x04
    201c:	9d 81       	ldd	r25, Y+5	; 0x05
    201e:	80 34       	cpi	r24, 0x40	; 64
    2020:	91 05       	cpc	r25, r1
    2022:	81 f1       	breq	.+96     	; 0x2084 <TIMER_callBackFunc+0xde>
    2024:	2c 81       	ldd	r18, Y+4	; 0x04
    2026:	3d 81       	ldd	r19, Y+5	; 0x05
    2028:	20 38       	cpi	r18, 0x80	; 128
    202a:	31 05       	cpc	r19, r1
    202c:	91 f1       	breq	.+100    	; 0x2092 <TIMER_callBackFunc+0xec>
    202e:	37 c0       	rjmp	.+110    	; 0x209e <TIMER_callBackFunc+0xf8>
	case OV0_INTERRUPT :
		Gptr_OV0INT = PTR_FUNC;
    2030:	8a 81       	ldd	r24, Y+2	; 0x02
    2032:	9b 81       	ldd	r25, Y+3	; 0x03
    2034:	90 93 75 01 	sts	0x0175, r25
    2038:	80 93 74 01 	sts	0x0174, r24
    203c:	30 c0       	rjmp	.+96     	; 0x209e <TIMER_callBackFunc+0xf8>
		break;
	case CTC0_INTERRUPT :
		Gptr_CTC0INT = PTR_FUNC;
    203e:	8a 81       	ldd	r24, Y+2	; 0x02
    2040:	9b 81       	ldd	r25, Y+3	; 0x03
    2042:	90 93 7f 01 	sts	0x017F, r25
    2046:	80 93 7e 01 	sts	0x017E, r24
    204a:	29 c0       	rjmp	.+82     	; 0x209e <TIMER_callBackFunc+0xf8>
		break;
	case IPCAP1_INTERRUPT :
		Gptr_IPCAP1 = PTR_FUNC;
    204c:	8a 81       	ldd	r24, Y+2	; 0x02
    204e:	9b 81       	ldd	r25, Y+3	; 0x03
    2050:	90 93 79 01 	sts	0x0179, r25
    2054:	80 93 78 01 	sts	0x0178, r24
    2058:	22 c0       	rjmp	.+68     	; 0x209e <TIMER_callBackFunc+0xf8>
		break;
	case CTC1A_INTERRUPT :
		Gptr_CTC1A = PTR_FUNC;
    205a:	8a 81       	ldd	r24, Y+2	; 0x02
    205c:	9b 81       	ldd	r25, Y+3	; 0x03
    205e:	90 93 77 01 	sts	0x0177, r25
    2062:	80 93 76 01 	sts	0x0176, r24
    2066:	1b c0       	rjmp	.+54     	; 0x209e <TIMER_callBackFunc+0xf8>
		break;
	case CTC1B_INTERRUPT :
		Gptr_CTC1B = PTR_FUNC;
    2068:	8a 81       	ldd	r24, Y+2	; 0x02
    206a:	9b 81       	ldd	r25, Y+3	; 0x03
    206c:	90 93 7b 01 	sts	0x017B, r25
    2070:	80 93 7a 01 	sts	0x017A, r24
    2074:	14 c0       	rjmp	.+40     	; 0x209e <TIMER_callBackFunc+0xf8>
		break;
	case OV1_INTERRUPT :
		Gptr_OV1INT = PTR_FUNC;
    2076:	8a 81       	ldd	r24, Y+2	; 0x02
    2078:	9b 81       	ldd	r25, Y+3	; 0x03
    207a:	90 93 71 01 	sts	0x0171, r25
    207e:	80 93 70 01 	sts	0x0170, r24
    2082:	0d c0       	rjmp	.+26     	; 0x209e <TIMER_callBackFunc+0xf8>
		break;
	case OV2_INTERRUPT :
		Gptr_OV2INT = PTR_FUNC;
    2084:	8a 81       	ldd	r24, Y+2	; 0x02
    2086:	9b 81       	ldd	r25, Y+3	; 0x03
    2088:	90 93 7d 01 	sts	0x017D, r25
    208c:	80 93 7c 01 	sts	0x017C, r24
    2090:	06 c0       	rjmp	.+12     	; 0x209e <TIMER_callBackFunc+0xf8>
		break;
	case CTC2_INTERRUPT :
		Gptr_CTC2INT = PTR_FUNC;
    2092:	8a 81       	ldd	r24, Y+2	; 0x02
    2094:	9b 81       	ldd	r25, Y+3	; 0x03
    2096:	90 93 73 01 	sts	0x0173, r25
    209a:	80 93 72 01 	sts	0x0172, r24
		break;

	} //END of the SWITCH
} //End of the IF
    209e:	0f 90       	pop	r0
    20a0:	0f 90       	pop	r0
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	0f 90       	pop	r0
    20a8:	cf 91       	pop	r28
    20aa:	df 91       	pop	r29
    20ac:	08 95       	ret

000020ae <TIMER_stop>:

void TIMER_stop(uint8_t timer_no) {
    20ae:	df 93       	push	r29
    20b0:	cf 93       	push	r28
    20b2:	00 d0       	rcall	.+0      	; 0x20b4 <TIMER_stop+0x6>
    20b4:	0f 92       	push	r0
    20b6:	cd b7       	in	r28, 0x3d	; 61
    20b8:	de b7       	in	r29, 0x3e	; 62
    20ba:	89 83       	std	Y+1, r24	; 0x01
	if ((timer_no >= TIMER0 ) && (timer_no <= TIMER2 )) {
    20bc:	89 81       	ldd	r24, Y+1	; 0x01
    20be:	83 30       	cpi	r24, 0x03	; 3
    20c0:	50 f5       	brcc	.+84     	; 0x2116 <TIMER_stop+0x68>
		switch (timer_no) {
    20c2:	89 81       	ldd	r24, Y+1	; 0x01
    20c4:	28 2f       	mov	r18, r24
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	3b 83       	std	Y+3, r19	; 0x03
    20ca:	2a 83       	std	Y+2, r18	; 0x02
    20cc:	8a 81       	ldd	r24, Y+2	; 0x02
    20ce:	9b 81       	ldd	r25, Y+3	; 0x03
    20d0:	81 30       	cpi	r24, 0x01	; 1
    20d2:	91 05       	cpc	r25, r1
    20d4:	89 f0       	breq	.+34     	; 0x20f8 <TIMER_stop+0x4a>
    20d6:	2a 81       	ldd	r18, Y+2	; 0x02
    20d8:	3b 81       	ldd	r19, Y+3	; 0x03
    20da:	22 30       	cpi	r18, 0x02	; 2
    20dc:	31 05       	cpc	r19, r1
    20de:	a1 f0       	breq	.+40     	; 0x2108 <TIMER_stop+0x5a>
    20e0:	8a 81       	ldd	r24, Y+2	; 0x02
    20e2:	9b 81       	ldd	r25, Y+3	; 0x03
    20e4:	00 97       	sbiw	r24, 0x00	; 0
    20e6:	b9 f4       	brne	.+46     	; 0x2116 <TIMER_stop+0x68>
		case TIMER0 :
			TCCR0 &= ~(TIMER0_PRESCALER );
    20e8:	a3 e5       	ldi	r26, 0x53	; 83
    20ea:	b0 e0       	ldi	r27, 0x00	; 0
    20ec:	e3 e5       	ldi	r30, 0x53	; 83
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	80 81       	ld	r24, Z
    20f2:	8d 7f       	andi	r24, 0xFD	; 253
    20f4:	8c 93       	st	X, r24
    20f6:	0f c0       	rjmp	.+30     	; 0x2116 <TIMER_stop+0x68>
			break;
		case TIMER1 :
			TCCR1B &= ~(TIMER1_PRESCALER );
    20f8:	ae e4       	ldi	r26, 0x4E	; 78
    20fa:	b0 e0       	ldi	r27, 0x00	; 0
    20fc:	ee e4       	ldi	r30, 0x4E	; 78
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	80 81       	ld	r24, Z
    2102:	8d 7f       	andi	r24, 0xFD	; 253
    2104:	8c 93       	st	X, r24
    2106:	07 c0       	rjmp	.+14     	; 0x2116 <TIMER_stop+0x68>
			break;
		case TIMER2 :
			TCCR2 &= ~(TIMER2_PRESCALER );
    2108:	a5 e4       	ldi	r26, 0x45	; 69
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	e5 e4       	ldi	r30, 0x45	; 69
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	8d 7f       	andi	r24, 0xFD	; 253
    2114:	8c 93       	st	X, r24
			break;
		} //END of the SWITCH
	} //End of the IF
}
    2116:	0f 90       	pop	r0
    2118:	0f 90       	pop	r0
    211a:	0f 90       	pop	r0
    211c:	cf 91       	pop	r28
    211e:	df 91       	pop	r29
    2120:	08 95       	ret

00002122 <TIMER_EN_Interrupt>:
void TIMER_EN_Interrupt(uint8_t timer_interrupt_no) {
    2122:	df 93       	push	r29
    2124:	cf 93       	push	r28
    2126:	0f 92       	push	r0
    2128:	cd b7       	in	r28, 0x3d	; 61
    212a:	de b7       	in	r29, 0x3e	; 62
    212c:	89 83       	std	Y+1, r24	; 0x01
	if ((timer_interrupt_no >= OV0_INTERRUPT )
    212e:	89 81       	ldd	r24, Y+1	; 0x01
    2130:	88 23       	and	r24, r24
    2132:	d1 f0       	breq	.+52     	; 0x2168 <TIMER_EN_Interrupt+0x46>
    2134:	89 81       	ldd	r24, Y+1	; 0x01
    2136:	81 38       	cpi	r24, 0x81	; 129
    2138:	b8 f4       	brcc	.+46     	; 0x2168 <TIMER_EN_Interrupt+0x46>
			&& (timer_interrupt_no <= CTC2_INTERRUPT )) {
		TIMSK |= timer_interrupt_no;
    213a:	a9 e5       	ldi	r26, 0x59	; 89
    213c:	b0 e0       	ldi	r27, 0x00	; 0
    213e:	e9 e5       	ldi	r30, 0x59	; 89
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	90 81       	ld	r25, Z
    2144:	89 81       	ldd	r24, Y+1	; 0x01
    2146:	89 2b       	or	r24, r25
    2148:	8c 93       	st	X, r24
		if (Get_Bit(SREG_REGISTER,I_BIT) != 1) {
    214a:	ef e5       	ldi	r30, 0x5F	; 95
    214c:	f0 e0       	ldi	r31, 0x00	; 0
    214e:	80 81       	ld	r24, Z
    2150:	88 1f       	adc	r24, r24
    2152:	88 27       	eor	r24, r24
    2154:	88 1f       	adc	r24, r24
    2156:	81 30       	cpi	r24, 0x01	; 1
    2158:	39 f0       	breq	.+14     	; 0x2168 <TIMER_EN_Interrupt+0x46>
			Set_Bit(SREG_REGISTER, I_BIT);
    215a:	af e5       	ldi	r26, 0x5F	; 95
    215c:	b0 e0       	ldi	r27, 0x00	; 0
    215e:	ef e5       	ldi	r30, 0x5F	; 95
    2160:	f0 e0       	ldi	r31, 0x00	; 0
    2162:	80 81       	ld	r24, Z
    2164:	80 68       	ori	r24, 0x80	; 128
    2166:	8c 93       	st	X, r24
		}
	} //End of the IF
}
    2168:	0f 90       	pop	r0
    216a:	cf 91       	pop	r28
    216c:	df 91       	pop	r29
    216e:	08 95       	ret

00002170 <TIMER_DIS_Interrupt>:
void TIMER_DIS_Interrupt(uint8_t timer_interrupt_no) {
    2170:	df 93       	push	r29
    2172:	cf 93       	push	r28
    2174:	0f 92       	push	r0
    2176:	cd b7       	in	r28, 0x3d	; 61
    2178:	de b7       	in	r29, 0x3e	; 62
    217a:	89 83       	std	Y+1, r24	; 0x01
	if ((timer_interrupt_no >= OV0_INTERRUPT )
    217c:	89 81       	ldd	r24, Y+1	; 0x01
    217e:	88 23       	and	r24, r24
    2180:	69 f0       	breq	.+26     	; 0x219c <TIMER_DIS_Interrupt+0x2c>
    2182:	89 81       	ldd	r24, Y+1	; 0x01
    2184:	81 38       	cpi	r24, 0x81	; 129
    2186:	50 f4       	brcc	.+20     	; 0x219c <TIMER_DIS_Interrupt+0x2c>
			&& (timer_interrupt_no <= CTC2_INTERRUPT )) {
		TIMSK &= ~(timer_interrupt_no);
    2188:	a9 e5       	ldi	r26, 0x59	; 89
    218a:	b0 e0       	ldi	r27, 0x00	; 0
    218c:	e9 e5       	ldi	r30, 0x59	; 89
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	80 81       	ld	r24, Z
    2192:	98 2f       	mov	r25, r24
    2194:	89 81       	ldd	r24, Y+1	; 0x01
    2196:	80 95       	com	r24
    2198:	89 23       	and	r24, r25
    219a:	8c 93       	st	X, r24
	} //End of the IF
}
    219c:	0f 90       	pop	r0
    219e:	cf 91       	pop	r28
    21a0:	df 91       	pop	r29
    21a2:	08 95       	ret

000021a4 <TIMER_pinConnect>:
void TIMER_pinConnect(uint8_t timer_pin) {
    21a4:	df 93       	push	r29
    21a6:	cf 93       	push	r28
    21a8:	00 d0       	rcall	.+0      	; 0x21aa <TIMER_pinConnect+0x6>
    21aa:	0f 92       	push	r0
    21ac:	cd b7       	in	r28, 0x3d	; 61
    21ae:	de b7       	in	r29, 0x3e	; 62
    21b0:	89 83       	std	Y+1, r24	; 0x01

	if ((timer_pin >= TIMER0_OC0 ) && (timer_pin <= TIMER2_OC2 )) {
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
    21b4:	84 30       	cpi	r24, 0x04	; 4
    21b6:	08 f0       	brcs	.+2      	; 0x21ba <TIMER_pinConnect+0x16>
    21b8:	3e c0       	rjmp	.+124    	; 0x2236 <TIMER_pinConnect+0x92>
		switch (timer_pin) {
    21ba:	89 81       	ldd	r24, Y+1	; 0x01
    21bc:	28 2f       	mov	r18, r24
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	3b 83       	std	Y+3, r19	; 0x03
    21c2:	2a 83       	std	Y+2, r18	; 0x02
    21c4:	8a 81       	ldd	r24, Y+2	; 0x02
    21c6:	9b 81       	ldd	r25, Y+3	; 0x03
    21c8:	81 30       	cpi	r24, 0x01	; 1
    21ca:	91 05       	cpc	r25, r1
    21cc:	e9 f0       	breq	.+58     	; 0x2208 <TIMER_pinConnect+0x64>
    21ce:	2a 81       	ldd	r18, Y+2	; 0x02
    21d0:	3b 81       	ldd	r19, Y+3	; 0x03
    21d2:	22 30       	cpi	r18, 0x02	; 2
    21d4:	31 05       	cpc	r19, r1
    21d6:	2c f4       	brge	.+10     	; 0x21e2 <TIMER_pinConnect+0x3e>
    21d8:	8a 81       	ldd	r24, Y+2	; 0x02
    21da:	9b 81       	ldd	r25, Y+3	; 0x03
    21dc:	00 97       	sbiw	r24, 0x00	; 0
    21de:	61 f0       	breq	.+24     	; 0x21f8 <TIMER_pinConnect+0x54>
    21e0:	2a c0       	rjmp	.+84     	; 0x2236 <TIMER_pinConnect+0x92>
    21e2:	2a 81       	ldd	r18, Y+2	; 0x02
    21e4:	3b 81       	ldd	r19, Y+3	; 0x03
    21e6:	22 30       	cpi	r18, 0x02	; 2
    21e8:	31 05       	cpc	r19, r1
    21ea:	b1 f0       	breq	.+44     	; 0x2218 <TIMER_pinConnect+0x74>
    21ec:	8a 81       	ldd	r24, Y+2	; 0x02
    21ee:	9b 81       	ldd	r25, Y+3	; 0x03
    21f0:	83 30       	cpi	r24, 0x03	; 3
    21f2:	91 05       	cpc	r25, r1
    21f4:	c9 f0       	breq	.+50     	; 0x2228 <TIMER_pinConnect+0x84>
    21f6:	1f c0       	rjmp	.+62     	; 0x2236 <TIMER_pinConnect+0x92>
		case TIMER0_OC0 :
			TCCR0 |= OC0_OUTPUT; //0b0010 0000
    21f8:	a3 e5       	ldi	r26, 0x53	; 83
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	e3 e5       	ldi	r30, 0x53	; 83
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	80 62       	ori	r24, 0x20	; 32
    2204:	8c 93       	st	X, r24
    2206:	17 c0       	rjmp	.+46     	; 0x2236 <TIMER_pinConnect+0x92>
			break;
		case TIMER1_OC1A :
			TCCR1A |= OC1A_OUTPUT; //0b0010 0000
    2208:	af e4       	ldi	r26, 0x4F	; 79
    220a:	b0 e0       	ldi	r27, 0x00	; 0
    220c:	ef e4       	ldi	r30, 0x4F	; 79
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	80 81       	ld	r24, Z
    2212:	80 64       	ori	r24, 0x40	; 64
    2214:	8c 93       	st	X, r24
    2216:	0f c0       	rjmp	.+30     	; 0x2236 <TIMER_pinConnect+0x92>
			break;
		case TIMER1_OC1B :
			TCCR1A |= OC1B_OUTPUT; //0b0010 0000
    2218:	af e4       	ldi	r26, 0x4F	; 79
    221a:	b0 e0       	ldi	r27, 0x00	; 0
    221c:	ef e4       	ldi	r30, 0x4F	; 79
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	80 81       	ld	r24, Z
    2222:	80 61       	ori	r24, 0x10	; 16
    2224:	8c 93       	st	X, r24
    2226:	07 c0       	rjmp	.+14     	; 0x2236 <TIMER_pinConnect+0x92>
			break;
		case TIMER2_OC2 :
			TCCR2 |= OC2_OUTPUT; //0b0010 0000
    2228:	a5 e4       	ldi	r26, 0x45	; 69
    222a:	b0 e0       	ldi	r27, 0x00	; 0
    222c:	e5 e4       	ldi	r30, 0x45	; 69
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	80 81       	ld	r24, Z
    2232:	80 62       	ori	r24, 0x20	; 32
    2234:	8c 93       	st	X, r24
			break;
		} //END of the SWITCH
	} //End of the IF
}
    2236:	0f 90       	pop	r0
    2238:	0f 90       	pop	r0
    223a:	0f 90       	pop	r0
    223c:	cf 91       	pop	r28
    223e:	df 91       	pop	r29
    2240:	08 95       	ret

00002242 <TIMER_pinDisconnect>:
void TIMER_pinDisconnect(uint8_t timer_pin) {
    2242:	df 93       	push	r29
    2244:	cf 93       	push	r28
    2246:	00 d0       	rcall	.+0      	; 0x2248 <TIMER_pinDisconnect+0x6>
    2248:	0f 92       	push	r0
    224a:	cd b7       	in	r28, 0x3d	; 61
    224c:	de b7       	in	r29, 0x3e	; 62
    224e:	89 83       	std	Y+1, r24	; 0x01
	if ((timer_pin >= TIMER0_OC0 ) && (timer_pin <= TIMER2_OC2 )) {
    2250:	89 81       	ldd	r24, Y+1	; 0x01
    2252:	84 30       	cpi	r24, 0x04	; 4
    2254:	08 f0       	brcs	.+2      	; 0x2258 <TIMER_pinDisconnect+0x16>
    2256:	3e c0       	rjmp	.+124    	; 0x22d4 <TIMER_pinDisconnect+0x92>
		switch (timer_pin) {
    2258:	89 81       	ldd	r24, Y+1	; 0x01
    225a:	28 2f       	mov	r18, r24
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	3b 83       	std	Y+3, r19	; 0x03
    2260:	2a 83       	std	Y+2, r18	; 0x02
    2262:	8a 81       	ldd	r24, Y+2	; 0x02
    2264:	9b 81       	ldd	r25, Y+3	; 0x03
    2266:	81 30       	cpi	r24, 0x01	; 1
    2268:	91 05       	cpc	r25, r1
    226a:	e9 f0       	breq	.+58     	; 0x22a6 <TIMER_pinDisconnect+0x64>
    226c:	2a 81       	ldd	r18, Y+2	; 0x02
    226e:	3b 81       	ldd	r19, Y+3	; 0x03
    2270:	22 30       	cpi	r18, 0x02	; 2
    2272:	31 05       	cpc	r19, r1
    2274:	2c f4       	brge	.+10     	; 0x2280 <TIMER_pinDisconnect+0x3e>
    2276:	8a 81       	ldd	r24, Y+2	; 0x02
    2278:	9b 81       	ldd	r25, Y+3	; 0x03
    227a:	00 97       	sbiw	r24, 0x00	; 0
    227c:	61 f0       	breq	.+24     	; 0x2296 <TIMER_pinDisconnect+0x54>
    227e:	2a c0       	rjmp	.+84     	; 0x22d4 <TIMER_pinDisconnect+0x92>
    2280:	2a 81       	ldd	r18, Y+2	; 0x02
    2282:	3b 81       	ldd	r19, Y+3	; 0x03
    2284:	22 30       	cpi	r18, 0x02	; 2
    2286:	31 05       	cpc	r19, r1
    2288:	b1 f0       	breq	.+44     	; 0x22b6 <TIMER_pinDisconnect+0x74>
    228a:	8a 81       	ldd	r24, Y+2	; 0x02
    228c:	9b 81       	ldd	r25, Y+3	; 0x03
    228e:	83 30       	cpi	r24, 0x03	; 3
    2290:	91 05       	cpc	r25, r1
    2292:	c9 f0       	breq	.+50     	; 0x22c6 <TIMER_pinDisconnect+0x84>
    2294:	1f c0       	rjmp	.+62     	; 0x22d4 <TIMER_pinDisconnect+0x92>
		case TIMER0_OC0 :
			TCCR0 &= ~(OC0_OUTPUT );
    2296:	a3 e5       	ldi	r26, 0x53	; 83
    2298:	b0 e0       	ldi	r27, 0x00	; 0
    229a:	e3 e5       	ldi	r30, 0x53	; 83
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	80 81       	ld	r24, Z
    22a0:	8f 7d       	andi	r24, 0xDF	; 223
    22a2:	8c 93       	st	X, r24
    22a4:	17 c0       	rjmp	.+46     	; 0x22d4 <TIMER_pinDisconnect+0x92>
			break;
		case TIMER1_OC1A :
			TCCR1A &= ~(OC1A_OUTPUT );
    22a6:	af e4       	ldi	r26, 0x4F	; 79
    22a8:	b0 e0       	ldi	r27, 0x00	; 0
    22aa:	ef e4       	ldi	r30, 0x4F	; 79
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	80 81       	ld	r24, Z
    22b0:	8f 7b       	andi	r24, 0xBF	; 191
    22b2:	8c 93       	st	X, r24
    22b4:	0f c0       	rjmp	.+30     	; 0x22d4 <TIMER_pinDisconnect+0x92>
			break;
		case TIMER1_OC1B :
			TCCR1A &= ~(OC1B_OUTPUT );
    22b6:	af e4       	ldi	r26, 0x4F	; 79
    22b8:	b0 e0       	ldi	r27, 0x00	; 0
    22ba:	ef e4       	ldi	r30, 0x4F	; 79
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	80 81       	ld	r24, Z
    22c0:	8f 7e       	andi	r24, 0xEF	; 239
    22c2:	8c 93       	st	X, r24
    22c4:	07 c0       	rjmp	.+14     	; 0x22d4 <TIMER_pinDisconnect+0x92>
			break;
		case TIMER2_OC2 :
			TCCR2 &= ~(OC2_OUTPUT );
    22c6:	a5 e4       	ldi	r26, 0x45	; 69
    22c8:	b0 e0       	ldi	r27, 0x00	; 0
    22ca:	e5 e4       	ldi	r30, 0x45	; 69
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	80 81       	ld	r24, Z
    22d0:	8f 7d       	andi	r24, 0xDF	; 223
    22d2:	8c 93       	st	X, r24
			break;
		} //END of the SWITCH
	} //End of the IF
}
    22d4:	0f 90       	pop	r0
    22d6:	0f 90       	pop	r0
    22d8:	0f 90       	pop	r0
    22da:	cf 91       	pop	r28
    22dc:	df 91       	pop	r29
    22de:	08 95       	ret

000022e0 <TIMER_cmprValue>:
void TIMER_cmprValue(uint8_t timer_cmpReg, uint16_t value) {
    22e0:	df 93       	push	r29
    22e2:	cf 93       	push	r28
    22e4:	00 d0       	rcall	.+0      	; 0x22e6 <TIMER_cmprValue+0x6>
    22e6:	00 d0       	rcall	.+0      	; 0x22e8 <TIMER_cmprValue+0x8>
    22e8:	0f 92       	push	r0
    22ea:	cd b7       	in	r28, 0x3d	; 61
    22ec:	de b7       	in	r29, 0x3e	; 62
    22ee:	89 83       	std	Y+1, r24	; 0x01
    22f0:	7b 83       	std	Y+3, r23	; 0x03
    22f2:	6a 83       	std	Y+2, r22	; 0x02
	if ((timer_cmpReg >= TIMER0_OCR0 ) && (timer_cmpReg <= TIMER2_OCR2 )) {
    22f4:	89 81       	ldd	r24, Y+1	; 0x01
    22f6:	84 30       	cpi	r24, 0x04	; 4
    22f8:	b0 f5       	brcc	.+108    	; 0x2366 <TIMER_cmprValue+0x86>
		switch (timer_cmpReg) {
    22fa:	89 81       	ldd	r24, Y+1	; 0x01
    22fc:	28 2f       	mov	r18, r24
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	3d 83       	std	Y+5, r19	; 0x05
    2302:	2c 83       	std	Y+4, r18	; 0x04
    2304:	8c 81       	ldd	r24, Y+4	; 0x04
    2306:	9d 81       	ldd	r25, Y+5	; 0x05
    2308:	81 30       	cpi	r24, 0x01	; 1
    230a:	91 05       	cpc	r25, r1
    230c:	d1 f0       	breq	.+52     	; 0x2342 <TIMER_cmprValue+0x62>
    230e:	2c 81       	ldd	r18, Y+4	; 0x04
    2310:	3d 81       	ldd	r19, Y+5	; 0x05
    2312:	22 30       	cpi	r18, 0x02	; 2
    2314:	31 05       	cpc	r19, r1
    2316:	2c f4       	brge	.+10     	; 0x2322 <TIMER_cmprValue+0x42>
    2318:	8c 81       	ldd	r24, Y+4	; 0x04
    231a:	9d 81       	ldd	r25, Y+5	; 0x05
    231c:	00 97       	sbiw	r24, 0x00	; 0
    231e:	61 f0       	breq	.+24     	; 0x2338 <TIMER_cmprValue+0x58>
    2320:	22 c0       	rjmp	.+68     	; 0x2366 <TIMER_cmprValue+0x86>
    2322:	2c 81       	ldd	r18, Y+4	; 0x04
    2324:	3d 81       	ldd	r19, Y+5	; 0x05
    2326:	22 30       	cpi	r18, 0x02	; 2
    2328:	31 05       	cpc	r19, r1
    232a:	91 f0       	breq	.+36     	; 0x2350 <TIMER_cmprValue+0x70>
    232c:	8c 81       	ldd	r24, Y+4	; 0x04
    232e:	9d 81       	ldd	r25, Y+5	; 0x05
    2330:	83 30       	cpi	r24, 0x03	; 3
    2332:	91 05       	cpc	r25, r1
    2334:	a1 f0       	breq	.+40     	; 0x235e <TIMER_cmprValue+0x7e>
    2336:	17 c0       	rjmp	.+46     	; 0x2366 <TIMER_cmprValue+0x86>
		case TIMER0_OCR0 :
			OCR0 = value;
    2338:	ec e5       	ldi	r30, 0x5C	; 92
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	8a 81       	ldd	r24, Y+2	; 0x02
    233e:	80 83       	st	Z, r24
    2340:	12 c0       	rjmp	.+36     	; 0x2366 <TIMER_cmprValue+0x86>
			break;
		case TIMER1_OCR1A :
			OCR1A = value;
    2342:	ea e4       	ldi	r30, 0x4A	; 74
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	8a 81       	ldd	r24, Y+2	; 0x02
    2348:	9b 81       	ldd	r25, Y+3	; 0x03
    234a:	91 83       	std	Z+1, r25	; 0x01
    234c:	80 83       	st	Z, r24
    234e:	0b c0       	rjmp	.+22     	; 0x2366 <TIMER_cmprValue+0x86>
			break;
		case TIMER1_OCR1B :
			OCR1B = value;
    2350:	e8 e4       	ldi	r30, 0x48	; 72
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	8a 81       	ldd	r24, Y+2	; 0x02
    2356:	9b 81       	ldd	r25, Y+3	; 0x03
    2358:	91 83       	std	Z+1, r25	; 0x01
    235a:	80 83       	st	Z, r24
    235c:	04 c0       	rjmp	.+8      	; 0x2366 <TIMER_cmprValue+0x86>
			break;
		case TIMER2_OCR2 :
			OCR2 = value;
    235e:	e3 e4       	ldi	r30, 0x43	; 67
    2360:	f0 e0       	ldi	r31, 0x00	; 0
    2362:	8a 81       	ldd	r24, Y+2	; 0x02
    2364:	80 83       	st	Z, r24
			break;
		} //END of the SWITCH
	} //End of the IF

}
    2366:	0f 90       	pop	r0
    2368:	0f 90       	pop	r0
    236a:	0f 90       	pop	r0
    236c:	0f 90       	pop	r0
    236e:	0f 90       	pop	r0
    2370:	cf 91       	pop	r28
    2372:	df 91       	pop	r29
    2374:	08 95       	ret

00002376 <TIMER_preload>:
void TIMER_preload(uint8_t timer_no, uint16_t value) {
    2376:	df 93       	push	r29
    2378:	cf 93       	push	r28
    237a:	00 d0       	rcall	.+0      	; 0x237c <TIMER_preload+0x6>
    237c:	00 d0       	rcall	.+0      	; 0x237e <TIMER_preload+0x8>
    237e:	0f 92       	push	r0
    2380:	cd b7       	in	r28, 0x3d	; 61
    2382:	de b7       	in	r29, 0x3e	; 62
    2384:	89 83       	std	Y+1, r24	; 0x01
    2386:	7b 83       	std	Y+3, r23	; 0x03
    2388:	6a 83       	std	Y+2, r22	; 0x02
	if ((timer_no >= TIMER0 ) && (timer_no <= TIMER2 )) {
    238a:	89 81       	ldd	r24, Y+1	; 0x01
    238c:	83 30       	cpi	r24, 0x03	; 3
    238e:	18 f5       	brcc	.+70     	; 0x23d6 <TIMER_preload+0x60>
		switch (timer_no) {
    2390:	89 81       	ldd	r24, Y+1	; 0x01
    2392:	28 2f       	mov	r18, r24
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	3d 83       	std	Y+5, r19	; 0x05
    2398:	2c 83       	std	Y+4, r18	; 0x04
    239a:	8c 81       	ldd	r24, Y+4	; 0x04
    239c:	9d 81       	ldd	r25, Y+5	; 0x05
    239e:	81 30       	cpi	r24, 0x01	; 1
    23a0:	91 05       	cpc	r25, r1
    23a2:	71 f0       	breq	.+28     	; 0x23c0 <TIMER_preload+0x4a>
    23a4:	2c 81       	ldd	r18, Y+4	; 0x04
    23a6:	3d 81       	ldd	r19, Y+5	; 0x05
    23a8:	22 30       	cpi	r18, 0x02	; 2
    23aa:	31 05       	cpc	r19, r1
    23ac:	81 f0       	breq	.+32     	; 0x23ce <TIMER_preload+0x58>
    23ae:	8c 81       	ldd	r24, Y+4	; 0x04
    23b0:	9d 81       	ldd	r25, Y+5	; 0x05
    23b2:	00 97       	sbiw	r24, 0x00	; 0
    23b4:	81 f4       	brne	.+32     	; 0x23d6 <TIMER_preload+0x60>
		case TIMER0 :
			TCNT0 = value;
    23b6:	e2 e5       	ldi	r30, 0x52	; 82
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	8a 81       	ldd	r24, Y+2	; 0x02
    23bc:	80 83       	st	Z, r24
    23be:	0b c0       	rjmp	.+22     	; 0x23d6 <TIMER_preload+0x60>
			break;
		case TIMER1 :
			TCNT1 = value;
    23c0:	ec e4       	ldi	r30, 0x4C	; 76
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	8a 81       	ldd	r24, Y+2	; 0x02
    23c6:	9b 81       	ldd	r25, Y+3	; 0x03
    23c8:	91 83       	std	Z+1, r25	; 0x01
    23ca:	80 83       	st	Z, r24
    23cc:	04 c0       	rjmp	.+8      	; 0x23d6 <TIMER_preload+0x60>
			break;
		case TIMER2 :
			TCNT2 = value;
    23ce:	e4 e4       	ldi	r30, 0x44	; 68
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	8a 81       	ldd	r24, Y+2	; 0x02
    23d4:	80 83       	st	Z, r24
			break;
		} //END of the SWITCH
	} //End of the IF
}
    23d6:	0f 90       	pop	r0
    23d8:	0f 90       	pop	r0
    23da:	0f 90       	pop	r0
    23dc:	0f 90       	pop	r0
    23de:	0f 90       	pop	r0
    23e0:	cf 91       	pop	r28
    23e2:	df 91       	pop	r29
    23e4:	08 95       	ret

000023e6 <__vector_11>:

void __vector_11(void) __attribute__((signal)); // Overflow Interrupt for timer/counter 0
void __vector_11(void) {
    23e6:	1f 92       	push	r1
    23e8:	0f 92       	push	r0
    23ea:	0f b6       	in	r0, 0x3f	; 63
    23ec:	0f 92       	push	r0
    23ee:	11 24       	eor	r1, r1
    23f0:	2f 93       	push	r18
    23f2:	3f 93       	push	r19
    23f4:	4f 93       	push	r20
    23f6:	5f 93       	push	r21
    23f8:	6f 93       	push	r22
    23fa:	7f 93       	push	r23
    23fc:	8f 93       	push	r24
    23fe:	9f 93       	push	r25
    2400:	af 93       	push	r26
    2402:	bf 93       	push	r27
    2404:	ef 93       	push	r30
    2406:	ff 93       	push	r31
    2408:	df 93       	push	r29
    240a:	cf 93       	push	r28
    240c:	cd b7       	in	r28, 0x3d	; 61
    240e:	de b7       	in	r29, 0x3e	; 62
	Gptr_OV0INT();
    2410:	e0 91 74 01 	lds	r30, 0x0174
    2414:	f0 91 75 01 	lds	r31, 0x0175
    2418:	09 95       	icall
}
    241a:	cf 91       	pop	r28
    241c:	df 91       	pop	r29
    241e:	ff 91       	pop	r31
    2420:	ef 91       	pop	r30
    2422:	bf 91       	pop	r27
    2424:	af 91       	pop	r26
    2426:	9f 91       	pop	r25
    2428:	8f 91       	pop	r24
    242a:	7f 91       	pop	r23
    242c:	6f 91       	pop	r22
    242e:	5f 91       	pop	r21
    2430:	4f 91       	pop	r20
    2432:	3f 91       	pop	r19
    2434:	2f 91       	pop	r18
    2436:	0f 90       	pop	r0
    2438:	0f be       	out	0x3f, r0	; 63
    243a:	0f 90       	pop	r0
    243c:	1f 90       	pop	r1
    243e:	18 95       	reti

00002440 <__vector_10>:
void __vector_10(void) __attribute__((signal)); //Compare Interrupt for timer/counter 0
void __vector_10(void) {
    2440:	1f 92       	push	r1
    2442:	0f 92       	push	r0
    2444:	0f b6       	in	r0, 0x3f	; 63
    2446:	0f 92       	push	r0
    2448:	11 24       	eor	r1, r1
    244a:	2f 93       	push	r18
    244c:	3f 93       	push	r19
    244e:	4f 93       	push	r20
    2450:	5f 93       	push	r21
    2452:	6f 93       	push	r22
    2454:	7f 93       	push	r23
    2456:	8f 93       	push	r24
    2458:	9f 93       	push	r25
    245a:	af 93       	push	r26
    245c:	bf 93       	push	r27
    245e:	ef 93       	push	r30
    2460:	ff 93       	push	r31
    2462:	df 93       	push	r29
    2464:	cf 93       	push	r28
    2466:	cd b7       	in	r28, 0x3d	; 61
    2468:	de b7       	in	r29, 0x3e	; 62
	Gptr_CTC0INT();
    246a:	e0 91 7e 01 	lds	r30, 0x017E
    246e:	f0 91 7f 01 	lds	r31, 0x017F
    2472:	09 95       	icall
}
    2474:	cf 91       	pop	r28
    2476:	df 91       	pop	r29
    2478:	ff 91       	pop	r31
    247a:	ef 91       	pop	r30
    247c:	bf 91       	pop	r27
    247e:	af 91       	pop	r26
    2480:	9f 91       	pop	r25
    2482:	8f 91       	pop	r24
    2484:	7f 91       	pop	r23
    2486:	6f 91       	pop	r22
    2488:	5f 91       	pop	r21
    248a:	4f 91       	pop	r20
    248c:	3f 91       	pop	r19
    248e:	2f 91       	pop	r18
    2490:	0f 90       	pop	r0
    2492:	0f be       	out	0x3f, r0	; 63
    2494:	0f 90       	pop	r0
    2496:	1f 90       	pop	r1
    2498:	18 95       	reti

0000249a <__vector_9>:
void __vector_9(void) __attribute__((signal)); // Overflow Interrupt for timer/counter 1
void __vector_9(void) {
    249a:	1f 92       	push	r1
    249c:	0f 92       	push	r0
    249e:	0f b6       	in	r0, 0x3f	; 63
    24a0:	0f 92       	push	r0
    24a2:	11 24       	eor	r1, r1
    24a4:	2f 93       	push	r18
    24a6:	3f 93       	push	r19
    24a8:	4f 93       	push	r20
    24aa:	5f 93       	push	r21
    24ac:	6f 93       	push	r22
    24ae:	7f 93       	push	r23
    24b0:	8f 93       	push	r24
    24b2:	9f 93       	push	r25
    24b4:	af 93       	push	r26
    24b6:	bf 93       	push	r27
    24b8:	ef 93       	push	r30
    24ba:	ff 93       	push	r31
    24bc:	df 93       	push	r29
    24be:	cf 93       	push	r28
    24c0:	cd b7       	in	r28, 0x3d	; 61
    24c2:	de b7       	in	r29, 0x3e	; 62
	Gptr_OV1INT();
    24c4:	e0 91 70 01 	lds	r30, 0x0170
    24c8:	f0 91 71 01 	lds	r31, 0x0171
    24cc:	09 95       	icall
}
    24ce:	cf 91       	pop	r28
    24d0:	df 91       	pop	r29
    24d2:	ff 91       	pop	r31
    24d4:	ef 91       	pop	r30
    24d6:	bf 91       	pop	r27
    24d8:	af 91       	pop	r26
    24da:	9f 91       	pop	r25
    24dc:	8f 91       	pop	r24
    24de:	7f 91       	pop	r23
    24e0:	6f 91       	pop	r22
    24e2:	5f 91       	pop	r21
    24e4:	4f 91       	pop	r20
    24e6:	3f 91       	pop	r19
    24e8:	2f 91       	pop	r18
    24ea:	0f 90       	pop	r0
    24ec:	0f be       	out	0x3f, r0	; 63
    24ee:	0f 90       	pop	r0
    24f0:	1f 90       	pop	r1
    24f2:	18 95       	reti

000024f4 <__vector_8>:
void __vector_8(void) __attribute__((signal)); //CompareB Interrupt for timer/counter 1
void __vector_8(void) {
    24f4:	1f 92       	push	r1
    24f6:	0f 92       	push	r0
    24f8:	0f b6       	in	r0, 0x3f	; 63
    24fa:	0f 92       	push	r0
    24fc:	11 24       	eor	r1, r1
    24fe:	2f 93       	push	r18
    2500:	3f 93       	push	r19
    2502:	4f 93       	push	r20
    2504:	5f 93       	push	r21
    2506:	6f 93       	push	r22
    2508:	7f 93       	push	r23
    250a:	8f 93       	push	r24
    250c:	9f 93       	push	r25
    250e:	af 93       	push	r26
    2510:	bf 93       	push	r27
    2512:	ef 93       	push	r30
    2514:	ff 93       	push	r31
    2516:	df 93       	push	r29
    2518:	cf 93       	push	r28
    251a:	cd b7       	in	r28, 0x3d	; 61
    251c:	de b7       	in	r29, 0x3e	; 62
	Gptr_CTC1A();
    251e:	e0 91 76 01 	lds	r30, 0x0176
    2522:	f0 91 77 01 	lds	r31, 0x0177
    2526:	09 95       	icall
}
    2528:	cf 91       	pop	r28
    252a:	df 91       	pop	r29
    252c:	ff 91       	pop	r31
    252e:	ef 91       	pop	r30
    2530:	bf 91       	pop	r27
    2532:	af 91       	pop	r26
    2534:	9f 91       	pop	r25
    2536:	8f 91       	pop	r24
    2538:	7f 91       	pop	r23
    253a:	6f 91       	pop	r22
    253c:	5f 91       	pop	r21
    253e:	4f 91       	pop	r20
    2540:	3f 91       	pop	r19
    2542:	2f 91       	pop	r18
    2544:	0f 90       	pop	r0
    2546:	0f be       	out	0x3f, r0	; 63
    2548:	0f 90       	pop	r0
    254a:	1f 90       	pop	r1
    254c:	18 95       	reti

0000254e <__vector_7>:

void __vector_7(void) __attribute__((signal)); //CompareA Interrupt for timer/counter 1
void __vector_7(void) {
    254e:	1f 92       	push	r1
    2550:	0f 92       	push	r0
    2552:	0f b6       	in	r0, 0x3f	; 63
    2554:	0f 92       	push	r0
    2556:	11 24       	eor	r1, r1
    2558:	2f 93       	push	r18
    255a:	3f 93       	push	r19
    255c:	4f 93       	push	r20
    255e:	5f 93       	push	r21
    2560:	6f 93       	push	r22
    2562:	7f 93       	push	r23
    2564:	8f 93       	push	r24
    2566:	9f 93       	push	r25
    2568:	af 93       	push	r26
    256a:	bf 93       	push	r27
    256c:	ef 93       	push	r30
    256e:	ff 93       	push	r31
    2570:	df 93       	push	r29
    2572:	cf 93       	push	r28
    2574:	cd b7       	in	r28, 0x3d	; 61
    2576:	de b7       	in	r29, 0x3e	; 62
	Gptr_CTC1B();
    2578:	e0 91 7a 01 	lds	r30, 0x017A
    257c:	f0 91 7b 01 	lds	r31, 0x017B
    2580:	09 95       	icall
}
    2582:	cf 91       	pop	r28
    2584:	df 91       	pop	r29
    2586:	ff 91       	pop	r31
    2588:	ef 91       	pop	r30
    258a:	bf 91       	pop	r27
    258c:	af 91       	pop	r26
    258e:	9f 91       	pop	r25
    2590:	8f 91       	pop	r24
    2592:	7f 91       	pop	r23
    2594:	6f 91       	pop	r22
    2596:	5f 91       	pop	r21
    2598:	4f 91       	pop	r20
    259a:	3f 91       	pop	r19
    259c:	2f 91       	pop	r18
    259e:	0f 90       	pop	r0
    25a0:	0f be       	out	0x3f, r0	; 63
    25a2:	0f 90       	pop	r0
    25a4:	1f 90       	pop	r1
    25a6:	18 95       	reti

000025a8 <__vector_6>:

void __vector_6(void) __attribute__((signal)); //Capture Interrupt for timer/counter 1
void __vector_6(void) {
    25a8:	1f 92       	push	r1
    25aa:	0f 92       	push	r0
    25ac:	0f b6       	in	r0, 0x3f	; 63
    25ae:	0f 92       	push	r0
    25b0:	11 24       	eor	r1, r1
    25b2:	2f 93       	push	r18
    25b4:	3f 93       	push	r19
    25b6:	4f 93       	push	r20
    25b8:	5f 93       	push	r21
    25ba:	6f 93       	push	r22
    25bc:	7f 93       	push	r23
    25be:	8f 93       	push	r24
    25c0:	9f 93       	push	r25
    25c2:	af 93       	push	r26
    25c4:	bf 93       	push	r27
    25c6:	ef 93       	push	r30
    25c8:	ff 93       	push	r31
    25ca:	df 93       	push	r29
    25cc:	cf 93       	push	r28
    25ce:	cd b7       	in	r28, 0x3d	; 61
    25d0:	de b7       	in	r29, 0x3e	; 62
	Gptr_IPCAP1();
    25d2:	e0 91 78 01 	lds	r30, 0x0178
    25d6:	f0 91 79 01 	lds	r31, 0x0179
    25da:	09 95       	icall
}
    25dc:	cf 91       	pop	r28
    25de:	df 91       	pop	r29
    25e0:	ff 91       	pop	r31
    25e2:	ef 91       	pop	r30
    25e4:	bf 91       	pop	r27
    25e6:	af 91       	pop	r26
    25e8:	9f 91       	pop	r25
    25ea:	8f 91       	pop	r24
    25ec:	7f 91       	pop	r23
    25ee:	6f 91       	pop	r22
    25f0:	5f 91       	pop	r21
    25f2:	4f 91       	pop	r20
    25f4:	3f 91       	pop	r19
    25f6:	2f 91       	pop	r18
    25f8:	0f 90       	pop	r0
    25fa:	0f be       	out	0x3f, r0	; 63
    25fc:	0f 90       	pop	r0
    25fe:	1f 90       	pop	r1
    2600:	18 95       	reti

00002602 <__vector_5>:

void __vector_5(void) __attribute__((signal)); // Overflow Interrupt for timer/counter 2
void __vector_5(void) {
    2602:	1f 92       	push	r1
    2604:	0f 92       	push	r0
    2606:	0f b6       	in	r0, 0x3f	; 63
    2608:	0f 92       	push	r0
    260a:	11 24       	eor	r1, r1
    260c:	2f 93       	push	r18
    260e:	3f 93       	push	r19
    2610:	4f 93       	push	r20
    2612:	5f 93       	push	r21
    2614:	6f 93       	push	r22
    2616:	7f 93       	push	r23
    2618:	8f 93       	push	r24
    261a:	9f 93       	push	r25
    261c:	af 93       	push	r26
    261e:	bf 93       	push	r27
    2620:	ef 93       	push	r30
    2622:	ff 93       	push	r31
    2624:	df 93       	push	r29
    2626:	cf 93       	push	r28
    2628:	cd b7       	in	r28, 0x3d	; 61
    262a:	de b7       	in	r29, 0x3e	; 62
	Gptr_OV2INT();
    262c:	e0 91 7c 01 	lds	r30, 0x017C
    2630:	f0 91 7d 01 	lds	r31, 0x017D
    2634:	09 95       	icall
}
    2636:	cf 91       	pop	r28
    2638:	df 91       	pop	r29
    263a:	ff 91       	pop	r31
    263c:	ef 91       	pop	r30
    263e:	bf 91       	pop	r27
    2640:	af 91       	pop	r26
    2642:	9f 91       	pop	r25
    2644:	8f 91       	pop	r24
    2646:	7f 91       	pop	r23
    2648:	6f 91       	pop	r22
    264a:	5f 91       	pop	r21
    264c:	4f 91       	pop	r20
    264e:	3f 91       	pop	r19
    2650:	2f 91       	pop	r18
    2652:	0f 90       	pop	r0
    2654:	0f be       	out	0x3f, r0	; 63
    2656:	0f 90       	pop	r0
    2658:	1f 90       	pop	r1
    265a:	18 95       	reti

0000265c <__vector_4>:
void __vector_4(void) __attribute__((signal)); //Compare Interrupt for timer/counter 2
void __vector_4(void) {
    265c:	1f 92       	push	r1
    265e:	0f 92       	push	r0
    2660:	0f b6       	in	r0, 0x3f	; 63
    2662:	0f 92       	push	r0
    2664:	11 24       	eor	r1, r1
    2666:	2f 93       	push	r18
    2668:	3f 93       	push	r19
    266a:	4f 93       	push	r20
    266c:	5f 93       	push	r21
    266e:	6f 93       	push	r22
    2670:	7f 93       	push	r23
    2672:	8f 93       	push	r24
    2674:	9f 93       	push	r25
    2676:	af 93       	push	r26
    2678:	bf 93       	push	r27
    267a:	ef 93       	push	r30
    267c:	ff 93       	push	r31
    267e:	df 93       	push	r29
    2680:	cf 93       	push	r28
    2682:	cd b7       	in	r28, 0x3d	; 61
    2684:	de b7       	in	r29, 0x3e	; 62
	Gptr_CTC2INT();
    2686:	e0 91 72 01 	lds	r30, 0x0172
    268a:	f0 91 73 01 	lds	r31, 0x0173
    268e:	09 95       	icall
}
    2690:	cf 91       	pop	r28
    2692:	df 91       	pop	r29
    2694:	ff 91       	pop	r31
    2696:	ef 91       	pop	r30
    2698:	bf 91       	pop	r27
    269a:	af 91       	pop	r26
    269c:	9f 91       	pop	r25
    269e:	8f 91       	pop	r24
    26a0:	7f 91       	pop	r23
    26a2:	6f 91       	pop	r22
    26a4:	5f 91       	pop	r21
    26a6:	4f 91       	pop	r20
    26a8:	3f 91       	pop	r19
    26aa:	2f 91       	pop	r18
    26ac:	0f 90       	pop	r0
    26ae:	0f be       	out	0x3f, r0	; 63
    26b0:	0f 90       	pop	r0
    26b2:	1f 90       	pop	r1
    26b4:	18 95       	reti

000026b6 <__udivmodsi4>:
    26b6:	a1 e2       	ldi	r26, 0x21	; 33
    26b8:	1a 2e       	mov	r1, r26
    26ba:	aa 1b       	sub	r26, r26
    26bc:	bb 1b       	sub	r27, r27
    26be:	fd 01       	movw	r30, r26
    26c0:	0d c0       	rjmp	.+26     	; 0x26dc <__udivmodsi4_ep>

000026c2 <__udivmodsi4_loop>:
    26c2:	aa 1f       	adc	r26, r26
    26c4:	bb 1f       	adc	r27, r27
    26c6:	ee 1f       	adc	r30, r30
    26c8:	ff 1f       	adc	r31, r31
    26ca:	a2 17       	cp	r26, r18
    26cc:	b3 07       	cpc	r27, r19
    26ce:	e4 07       	cpc	r30, r20
    26d0:	f5 07       	cpc	r31, r21
    26d2:	20 f0       	brcs	.+8      	; 0x26dc <__udivmodsi4_ep>
    26d4:	a2 1b       	sub	r26, r18
    26d6:	b3 0b       	sbc	r27, r19
    26d8:	e4 0b       	sbc	r30, r20
    26da:	f5 0b       	sbc	r31, r21

000026dc <__udivmodsi4_ep>:
    26dc:	66 1f       	adc	r22, r22
    26de:	77 1f       	adc	r23, r23
    26e0:	88 1f       	adc	r24, r24
    26e2:	99 1f       	adc	r25, r25
    26e4:	1a 94       	dec	r1
    26e6:	69 f7       	brne	.-38     	; 0x26c2 <__udivmodsi4_loop>
    26e8:	60 95       	com	r22
    26ea:	70 95       	com	r23
    26ec:	80 95       	com	r24
    26ee:	90 95       	com	r25
    26f0:	9b 01       	movw	r18, r22
    26f2:	ac 01       	movw	r20, r24
    26f4:	bd 01       	movw	r22, r26
    26f6:	cf 01       	movw	r24, r30
    26f8:	08 95       	ret

000026fa <__prologue_saves__>:
    26fa:	2f 92       	push	r2
    26fc:	3f 92       	push	r3
    26fe:	4f 92       	push	r4
    2700:	5f 92       	push	r5
    2702:	6f 92       	push	r6
    2704:	7f 92       	push	r7
    2706:	8f 92       	push	r8
    2708:	9f 92       	push	r9
    270a:	af 92       	push	r10
    270c:	bf 92       	push	r11
    270e:	cf 92       	push	r12
    2710:	df 92       	push	r13
    2712:	ef 92       	push	r14
    2714:	ff 92       	push	r15
    2716:	0f 93       	push	r16
    2718:	1f 93       	push	r17
    271a:	cf 93       	push	r28
    271c:	df 93       	push	r29
    271e:	cd b7       	in	r28, 0x3d	; 61
    2720:	de b7       	in	r29, 0x3e	; 62
    2722:	ca 1b       	sub	r28, r26
    2724:	db 0b       	sbc	r29, r27
    2726:	0f b6       	in	r0, 0x3f	; 63
    2728:	f8 94       	cli
    272a:	de bf       	out	0x3e, r29	; 62
    272c:	0f be       	out	0x3f, r0	; 63
    272e:	cd bf       	out	0x3d, r28	; 61
    2730:	09 94       	ijmp

00002732 <__epilogue_restores__>:
    2732:	2a 88       	ldd	r2, Y+18	; 0x12
    2734:	39 88       	ldd	r3, Y+17	; 0x11
    2736:	48 88       	ldd	r4, Y+16	; 0x10
    2738:	5f 84       	ldd	r5, Y+15	; 0x0f
    273a:	6e 84       	ldd	r6, Y+14	; 0x0e
    273c:	7d 84       	ldd	r7, Y+13	; 0x0d
    273e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2740:	9b 84       	ldd	r9, Y+11	; 0x0b
    2742:	aa 84       	ldd	r10, Y+10	; 0x0a
    2744:	b9 84       	ldd	r11, Y+9	; 0x09
    2746:	c8 84       	ldd	r12, Y+8	; 0x08
    2748:	df 80       	ldd	r13, Y+7	; 0x07
    274a:	ee 80       	ldd	r14, Y+6	; 0x06
    274c:	fd 80       	ldd	r15, Y+5	; 0x05
    274e:	0c 81       	ldd	r16, Y+4	; 0x04
    2750:	1b 81       	ldd	r17, Y+3	; 0x03
    2752:	aa 81       	ldd	r26, Y+2	; 0x02
    2754:	b9 81       	ldd	r27, Y+1	; 0x01
    2756:	ce 0f       	add	r28, r30
    2758:	d1 1d       	adc	r29, r1
    275a:	0f b6       	in	r0, 0x3f	; 63
    275c:	f8 94       	cli
    275e:	de bf       	out	0x3e, r29	; 62
    2760:	0f be       	out	0x3f, r0	; 63
    2762:	cd bf       	out	0x3d, r28	; 61
    2764:	ed 01       	movw	r28, r26
    2766:	08 95       	ret

00002768 <_exit>:
    2768:	f8 94       	cli

0000276a <__stop_program>:
    276a:	ff cf       	rjmp	.-2      	; 0x276a <__stop_program>
