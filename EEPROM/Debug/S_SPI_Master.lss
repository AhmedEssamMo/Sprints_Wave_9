
S_SPI_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000105  00800060  00800060  00001364  2**0
                  ALLOC
  2 .stab         00001d34  00000000  00000000  00001364  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000da0  00000000  00000000  00003098  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a5 36       	cpi	r26, 0x65	; 101
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 6d 09 	call	0x12da	; 0x12da <main>
      74:	0c 94 76 09 	jmp	0x12ec	; 0x12ec <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <UART_Init>:
Ptr_VoidFuncVoid_t Gptr_uartDataEmptyRegInt;
Ptr_VoidFuncVoid_t Gptr_uartTxInt;

/*APIs IMPLEMENTATION
 -------------------------*/
uint8_t UART_Init(uint8_t UartNumber) {
      7c:	df 93       	push	r29
      7e:	cf 93       	push	r28
      80:	0f 92       	push	r0
      82:	cd b7       	in	r28, 0x3d	; 61
      84:	de b7       	in	r29, 0x3e	; 62
      86:	89 83       	std	Y+1, r24	; 0x01
#if RECEIVEING
	Set_Bit(UCSRB, RXEN);
      88:	aa e2       	ldi	r26, 0x2A	; 42
      8a:	b0 e0       	ldi	r27, 0x00	; 0
      8c:	ea e2       	ldi	r30, 0x2A	; 42
      8e:	f0 e0       	ldi	r31, 0x00	; 0
      90:	80 81       	ld	r24, Z
      92:	80 61       	ori	r24, 0x10	; 16
      94:	8c 93       	st	X, r24
#else
	Clr_Bit(UCSRB,RXEN);
#endif
#if TRANSMITTING
	Set_Bit(UCSRB, TXEN);
      96:	aa e2       	ldi	r26, 0x2A	; 42
      98:	b0 e0       	ldi	r27, 0x00	; 0
      9a:	ea e2       	ldi	r30, 0x2A	; 42
      9c:	f0 e0       	ldi	r31, 0x00	; 0
      9e:	80 81       	ld	r24, Z
      a0:	88 60       	ori	r24, 0x08	; 8
      a2:	8c 93       	st	X, r24
	Clr_Bit(UCSRB,TXEN);
#endif
#if SPEED
	Set_Bit(UCSRA,U2X);
#else
	Clr_Bit(UCSRA, U2X);
      a4:	ab e2       	ldi	r26, 0x2B	; 43
      a6:	b0 e0       	ldi	r27, 0x00	; 0
      a8:	eb e2       	ldi	r30, 0x2B	; 43
      aa:	f0 e0       	ldi	r31, 0x00	; 0
      ac:	80 81       	ld	r24, Z
      ae:	8d 7f       	andi	r24, 0xFD	; 253
      b0:	8c 93       	st	X, r24
#endif
#if NINE_BIT
	Set_Bit(UCSRB, UCSZ2);
#else
	Clr_Bit(UCSRB, UCSZ2);
      b2:	aa e2       	ldi	r26, 0x2A	; 42
      b4:	b0 e0       	ldi	r27, 0x00	; 0
      b6:	ea e2       	ldi	r30, 0x2A	; 42
      b8:	f0 e0       	ldi	r31, 0x00	; 0
      ba:	80 81       	ld	r24, Z
      bc:	8b 7f       	andi	r24, 0xFB	; 251
      be:	8c 93       	st	X, r24
#endif
	UCSRC |= ((SYNCHRONIZATION ) & (STOP_BITS ) & (CHARACTER_SIZE )
      c0:	a0 e4       	ldi	r26, 0x40	; 64
      c2:	b0 e0       	ldi	r27, 0x00	; 0
      c4:	e0 e4       	ldi	r30, 0x40	; 64
      c6:	f0 e0       	ldi	r31, 0x00	; 0
      c8:	80 81       	ld	r24, Z
      ca:	86 68       	ori	r24, 0x86	; 134
      cc:	8c 93       	st	X, r24
			& (PARITY_MODE ) & (CLOCK_POLARITY ));
	UBRRL = BUAD_RATE;
      ce:	e9 e2       	ldi	r30, 0x29	; 41
      d0:	f0 e0       	ldi	r31, 0x00	; 0
      d2:	83 e3       	ldi	r24, 0x33	; 51
      d4:	80 83       	st	Z, r24
	return 0;
      d6:	80 e0       	ldi	r24, 0x00	; 0
}
      d8:	0f 90       	pop	r0
      da:	cf 91       	pop	r28
      dc:	df 91       	pop	r29
      de:	08 95       	ret

000000e0 <UART_TransmitChar>:
uint8_t UART_TransmitChar(uint8_t UartNumber, uint8_t TxChar) {
      e0:	df 93       	push	r29
      e2:	cf 93       	push	r28
      e4:	00 d0       	rcall	.+0      	; 0xe6 <UART_TransmitChar+0x6>
      e6:	cd b7       	in	r28, 0x3d	; 61
      e8:	de b7       	in	r29, 0x3e	; 62
      ea:	89 83       	std	Y+1, r24	; 0x01
      ec:	6a 83       	std	Y+2, r22	; 0x02
	UDR = TxChar;
      ee:	ec e2       	ldi	r30, 0x2C	; 44
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	8a 81       	ldd	r24, Y+2	; 0x02
      f4:	80 83       	st	Z, r24
	while ((Get_Bit(UCSRA, UDRE)) != 1) {
      f6:	eb e2       	ldi	r30, 0x2B	; 43
      f8:	f0 e0       	ldi	r31, 0x00	; 0
      fa:	80 81       	ld	r24, Z
      fc:	82 95       	swap	r24
      fe:	86 95       	lsr	r24
     100:	87 70       	andi	r24, 0x07	; 7
     102:	88 2f       	mov	r24, r24
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	81 70       	andi	r24, 0x01	; 1
     108:	90 70       	andi	r25, 0x00	; 0
     10a:	00 97       	sbiw	r24, 0x00	; 0
     10c:	a1 f3       	breq	.-24     	; 0xf6 <UART_TransmitChar+0x16>
	}
	return 0;
     10e:	80 e0       	ldi	r24, 0x00	; 0
}
     110:	0f 90       	pop	r0
     112:	0f 90       	pop	r0
     114:	cf 91       	pop	r28
     116:	df 91       	pop	r29
     118:	08 95       	ret

0000011a <UART_TransmitString>:
uint8_t UART_TransmitString(uint8_t UartNumber, ptr_uint8_t TxString) {
     11a:	df 93       	push	r29
     11c:	cf 93       	push	r28
     11e:	00 d0       	rcall	.+0      	; 0x120 <UART_TransmitString+0x6>
     120:	00 d0       	rcall	.+0      	; 0x122 <UART_TransmitString+0x8>
     122:	cd b7       	in	r28, 0x3d	; 61
     124:	de b7       	in	r29, 0x3e	; 62
     126:	8a 83       	std	Y+2, r24	; 0x02
     128:	7c 83       	std	Y+4, r23	; 0x04
     12a:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t counter = 0;
     12c:	19 82       	std	Y+1, r1	; 0x01
     12e:	1b c0       	rjmp	.+54     	; 0x166 <UART_TransmitString+0x4c>
	while ((*(TxString + counter)) != NULL_TERMINATOR) {
		UDR = *(TxString + counter);//TxString[counter]
     130:	ac e2       	ldi	r26, 0x2C	; 44
     132:	b0 e0       	ldi	r27, 0x00	; 0
     134:	89 81       	ldd	r24, Y+1	; 0x01
     136:	28 2f       	mov	r18, r24
     138:	30 e0       	ldi	r19, 0x00	; 0
     13a:	8b 81       	ldd	r24, Y+3	; 0x03
     13c:	9c 81       	ldd	r25, Y+4	; 0x04
     13e:	fc 01       	movw	r30, r24
     140:	e2 0f       	add	r30, r18
     142:	f3 1f       	adc	r31, r19
     144:	80 81       	ld	r24, Z
     146:	8c 93       	st	X, r24
		while ((Get_Bit(UCSRA, UDRE)) != 1) ;
     148:	eb e2       	ldi	r30, 0x2B	; 43
     14a:	f0 e0       	ldi	r31, 0x00	; 0
     14c:	80 81       	ld	r24, Z
     14e:	82 95       	swap	r24
     150:	86 95       	lsr	r24
     152:	87 70       	andi	r24, 0x07	; 7
     154:	88 2f       	mov	r24, r24
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	81 70       	andi	r24, 0x01	; 1
     15a:	90 70       	andi	r25, 0x00	; 0
     15c:	00 97       	sbiw	r24, 0x00	; 0
     15e:	a1 f3       	breq	.-24     	; 0x148 <UART_TransmitString+0x2e>
		counter++;
     160:	89 81       	ldd	r24, Y+1	; 0x01
     162:	8f 5f       	subi	r24, 0xFF	; 255
     164:	89 83       	std	Y+1, r24	; 0x01
	}
	return 0;
}
uint8_t UART_TransmitString(uint8_t UartNumber, ptr_uint8_t TxString) {
	uint8_t counter = 0;
	while ((*(TxString + counter)) != NULL_TERMINATOR) {
     166:	89 81       	ldd	r24, Y+1	; 0x01
     168:	28 2f       	mov	r18, r24
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	8b 81       	ldd	r24, Y+3	; 0x03
     16e:	9c 81       	ldd	r25, Y+4	; 0x04
     170:	fc 01       	movw	r30, r24
     172:	e2 0f       	add	r30, r18
     174:	f3 1f       	adc	r31, r19
     176:	80 81       	ld	r24, Z
     178:	88 23       	and	r24, r24
     17a:	d1 f6       	brne	.-76     	; 0x130 <UART_TransmitString+0x16>
		UDR = *(TxString + counter);//TxString[counter]
		while ((Get_Bit(UCSRA, UDRE)) != 1) ;
		counter++;
	}
	UDR ='\r';//TxString[counter]
     17c:	ec e2       	ldi	r30, 0x2C	; 44
     17e:	f0 e0       	ldi	r31, 0x00	; 0
     180:	8d e0       	ldi	r24, 0x0D	; 13
     182:	80 83       	st	Z, r24
	while ((Get_Bit(UCSRA, UDRE)) != 1) ;
     184:	eb e2       	ldi	r30, 0x2B	; 43
     186:	f0 e0       	ldi	r31, 0x00	; 0
     188:	80 81       	ld	r24, Z
     18a:	82 95       	swap	r24
     18c:	86 95       	lsr	r24
     18e:	87 70       	andi	r24, 0x07	; 7
     190:	88 2f       	mov	r24, r24
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	81 70       	andi	r24, 0x01	; 1
     196:	90 70       	andi	r25, 0x00	; 0
     198:	00 97       	sbiw	r24, 0x00	; 0
     19a:	a1 f3       	breq	.-24     	; 0x184 <UART_TransmitString+0x6a>
	return 0;
     19c:	80 e0       	ldi	r24, 0x00	; 0
}
     19e:	0f 90       	pop	r0
     1a0:	0f 90       	pop	r0
     1a2:	0f 90       	pop	r0
     1a4:	0f 90       	pop	r0
     1a6:	cf 91       	pop	r28
     1a8:	df 91       	pop	r29
     1aa:	08 95       	ret

000001ac <UART_ReceiveChar>:
uint8_t UART_ReceiveChar(uint8_t UartNumber, ptr_uint8_t RxChar) {
     1ac:	df 93       	push	r29
     1ae:	cf 93       	push	r28
     1b0:	00 d0       	rcall	.+0      	; 0x1b2 <UART_ReceiveChar+0x6>
     1b2:	0f 92       	push	r0
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	89 83       	std	Y+1, r24	; 0x01
     1ba:	7b 83       	std	Y+3, r23	; 0x03
     1bc:	6a 83       	std	Y+2, r22	; 0x02

	while ( !(UCSRA & (1<<RXC)) );
     1be:	eb e2       	ldi	r30, 0x2B	; 43
     1c0:	f0 e0       	ldi	r31, 0x00	; 0
     1c2:	80 81       	ld	r24, Z
     1c4:	88 23       	and	r24, r24
     1c6:	dc f7       	brge	.-10     	; 0x1be <UART_ReceiveChar+0x12>
	*(RxChar) = (uint8_t)UDR;
     1c8:	ec e2       	ldi	r30, 0x2C	; 44
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	80 81       	ld	r24, Z
     1ce:	ea 81       	ldd	r30, Y+2	; 0x02
     1d0:	fb 81       	ldd	r31, Y+3	; 0x03
     1d2:	80 83       	st	Z, r24
	return 0;
     1d4:	80 e0       	ldi	r24, 0x00	; 0
}
     1d6:	0f 90       	pop	r0
     1d8:	0f 90       	pop	r0
     1da:	0f 90       	pop	r0
     1dc:	cf 91       	pop	r28
     1de:	df 91       	pop	r29
     1e0:	08 95       	ret

000001e2 <UART_ReceiveString>:
uint8_t UART_ReceiveString(uint8_t UartNumber, ptr_uint8_t RxString) {
     1e2:	df 93       	push	r29
     1e4:	cf 93       	push	r28
     1e6:	00 d0       	rcall	.+0      	; 0x1e8 <UART_ReceiveString+0x6>
     1e8:	00 d0       	rcall	.+0      	; 0x1ea <UART_ReceiveString+0x8>
     1ea:	cd b7       	in	r28, 0x3d	; 61
     1ec:	de b7       	in	r29, 0x3e	; 62
     1ee:	8a 83       	std	Y+2, r24	; 0x02
     1f0:	7c 83       	std	Y+4, r23	; 0x04
     1f2:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t counter = 0;
     1f4:	19 82       	std	Y+1, r1	; 0x01

	while (1) {
		while ( !(UCSRA & (1<<RXC)) );
     1f6:	eb e2       	ldi	r30, 0x2B	; 43
     1f8:	f0 e0       	ldi	r31, 0x00	; 0
     1fa:	80 81       	ld	r24, Z
     1fc:	88 23       	and	r24, r24
     1fe:	dc f7       	brge	.-10     	; 0x1f6 <UART_ReceiveString+0x14>
		RxString[counter] = (uint8_t)UDR;
     200:	89 81       	ldd	r24, Y+1	; 0x01
     202:	28 2f       	mov	r18, r24
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	8b 81       	ldd	r24, Y+3	; 0x03
     208:	9c 81       	ldd	r25, Y+4	; 0x04
     20a:	dc 01       	movw	r26, r24
     20c:	a2 0f       	add	r26, r18
     20e:	b3 1f       	adc	r27, r19
     210:	ec e2       	ldi	r30, 0x2C	; 44
     212:	f0 e0       	ldi	r31, 0x00	; 0
     214:	80 81       	ld	r24, Z
     216:	8c 93       	st	X, r24
		UART_TransmitChar(UART_1,RxString[counter]);
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	28 2f       	mov	r18, r24
     21c:	30 e0       	ldi	r19, 0x00	; 0
     21e:	8b 81       	ldd	r24, Y+3	; 0x03
     220:	9c 81       	ldd	r25, Y+4	; 0x04
     222:	fc 01       	movw	r30, r24
     224:	e2 0f       	add	r30, r18
     226:	f3 1f       	adc	r31, r19
     228:	90 81       	ld	r25, Z
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	69 2f       	mov	r22, r25
     22e:	0e 94 70 00 	call	0xe0	; 0xe0 <UART_TransmitChar>
		counter++;
     232:	89 81       	ldd	r24, Y+1	; 0x01
     234:	8f 5f       	subi	r24, 0xFF	; 255
     236:	89 83       	std	Y+1, r24	; 0x01
		if((UDR)==(NEW_LINE)){
     238:	ec e2       	ldi	r30, 0x2C	; 44
     23a:	f0 e0       	ldi	r31, 0x00	; 0
     23c:	80 81       	ld	r24, Z
     23e:	8d 30       	cpi	r24, 0x0D	; 13
     240:	a1 f4       	brne	.+40     	; 0x26a <UART_ReceiveString+0x88>
			RxString[counter-1]=NULL_TERMINATOR;
     242:	89 81       	ldd	r24, Y+1	; 0x01
     244:	88 2f       	mov	r24, r24
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	9c 01       	movw	r18, r24
     24a:	21 50       	subi	r18, 0x01	; 1
     24c:	30 40       	sbci	r19, 0x00	; 0
     24e:	8b 81       	ldd	r24, Y+3	; 0x03
     250:	9c 81       	ldd	r25, Y+4	; 0x04
     252:	fc 01       	movw	r30, r24
     254:	e2 0f       	add	r30, r18
     256:	f3 1f       	adc	r31, r19
     258:	10 82       	st	Z, r1



	}
	//*(RxString+counter)='\n';
	return 0;
     25a:	80 e0       	ldi	r24, 0x00	; 0
}
     25c:	0f 90       	pop	r0
     25e:	0f 90       	pop	r0
     260:	0f 90       	pop	r0
     262:	0f 90       	pop	r0
     264:	cf 91       	pop	r28
     266:	df 91       	pop	r29
     268:	08 95       	ret
		counter++;
		if((UDR)==(NEW_LINE)){
			RxString[counter-1]=NULL_TERMINATOR;
			break;
		}
		else if(((UDR)==(BACKSPACE))&&counter>1){
     26a:	ec e2       	ldi	r30, 0x2C	; 44
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	80 81       	ld	r24, Z
     270:	88 30       	cpi	r24, 0x08	; 8
     272:	39 f4       	brne	.+14     	; 0x282 <UART_ReceiveString+0xa0>
     274:	89 81       	ldd	r24, Y+1	; 0x01
     276:	82 30       	cpi	r24, 0x02	; 2
     278:	20 f0       	brcs	.+8      	; 0x282 <UART_ReceiveString+0xa0>
			counter=counter-2;
     27a:	89 81       	ldd	r24, Y+1	; 0x01
     27c:	82 50       	subi	r24, 0x02	; 2
     27e:	89 83       	std	Y+1, r24	; 0x01
     280:	ba cf       	rjmp	.-140    	; 0x1f6 <UART_ReceiveString+0x14>
		}
		else if(((UDR)==(BACKSPACE))&&counter<=1){
     282:	ec e2       	ldi	r30, 0x2C	; 44
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	80 81       	ld	r24, Z
     288:	88 30       	cpi	r24, 0x08	; 8
     28a:	09 f0       	breq	.+2      	; 0x28e <UART_ReceiveString+0xac>
     28c:	b4 cf       	rjmp	.-152    	; 0x1f6 <UART_ReceiveString+0x14>
     28e:	89 81       	ldd	r24, Y+1	; 0x01
     290:	82 30       	cpi	r24, 0x02	; 2
     292:	08 f0       	brcs	.+2      	; 0x296 <UART_ReceiveString+0xb4>
     294:	b0 cf       	rjmp	.-160    	; 0x1f6 <UART_ReceiveString+0x14>
			counter=0;
     296:	19 82       	std	Y+1, r1	; 0x01
     298:	ae cf       	rjmp	.-164    	; 0x1f6 <UART_ReceiveString+0x14>

0000029a <UART_EnableInterrupt>:

	}
	//*(RxString+counter)='\n';
	return 0;
}
uint8_t UART_EnableInterrupt(uint8_t UartNumber, uint8_t UartInterruptType) {
     29a:	df 93       	push	r29
     29c:	cf 93       	push	r28
     29e:	00 d0       	rcall	.+0      	; 0x2a0 <UART_EnableInterrupt+0x6>
     2a0:	00 d0       	rcall	.+0      	; 0x2a2 <UART_EnableInterrupt+0x8>
     2a2:	cd b7       	in	r28, 0x3d	; 61
     2a4:	de b7       	in	r29, 0x3e	; 62
     2a6:	89 83       	std	Y+1, r24	; 0x01
     2a8:	6a 83       	std	Y+2, r22	; 0x02
	switch (UartNumber) {
     2aa:	89 81       	ldd	r24, Y+1	; 0x01
     2ac:	88 2f       	mov	r24, r24
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	00 97       	sbiw	r24, 0x00	; 0
     2b2:	51 f5       	brne	.+84     	; 0x308 <UART_EnableInterrupt+0x6e>
	case UART_1 :
		switch (UartInterruptType) {
     2b4:	8a 81       	ldd	r24, Y+2	; 0x02
     2b6:	28 2f       	mov	r18, r24
     2b8:	30 e0       	ldi	r19, 0x00	; 0
     2ba:	3c 83       	std	Y+4, r19	; 0x04
     2bc:	2b 83       	std	Y+3, r18	; 0x03
     2be:	8b 81       	ldd	r24, Y+3	; 0x03
     2c0:	9c 81       	ldd	r25, Y+4	; 0x04
     2c2:	81 30       	cpi	r24, 0x01	; 1
     2c4:	91 05       	cpc	r25, r1
     2c6:	89 f0       	breq	.+34     	; 0x2ea <UART_EnableInterrupt+0x50>
     2c8:	2b 81       	ldd	r18, Y+3	; 0x03
     2ca:	3c 81       	ldd	r19, Y+4	; 0x04
     2cc:	22 30       	cpi	r18, 0x02	; 2
     2ce:	31 05       	cpc	r19, r1
     2d0:	a1 f0       	breq	.+40     	; 0x2fa <UART_EnableInterrupt+0x60>
     2d2:	8b 81       	ldd	r24, Y+3	; 0x03
     2d4:	9c 81       	ldd	r25, Y+4	; 0x04
     2d6:	00 97       	sbiw	r24, 0x00	; 0
     2d8:	b9 f4       	brne	.+46     	; 0x308 <UART_EnableInterrupt+0x6e>
		case RECIVE_INT :
			Set_Bit(UCSRB, RXCIE);
     2da:	aa e2       	ldi	r26, 0x2A	; 42
     2dc:	b0 e0       	ldi	r27, 0x00	; 0
     2de:	ea e2       	ldi	r30, 0x2A	; 42
     2e0:	f0 e0       	ldi	r31, 0x00	; 0
     2e2:	80 81       	ld	r24, Z
     2e4:	80 68       	ori	r24, 0x80	; 128
     2e6:	8c 93       	st	X, r24
     2e8:	0f c0       	rjmp	.+30     	; 0x308 <UART_EnableInterrupt+0x6e>
			break;
		case TRANSMIT_INT :
			Set_Bit(UCSRB, TXCIE);
     2ea:	aa e2       	ldi	r26, 0x2A	; 42
     2ec:	b0 e0       	ldi	r27, 0x00	; 0
     2ee:	ea e2       	ldi	r30, 0x2A	; 42
     2f0:	f0 e0       	ldi	r31, 0x00	; 0
     2f2:	80 81       	ld	r24, Z
     2f4:	80 64       	ori	r24, 0x40	; 64
     2f6:	8c 93       	st	X, r24
     2f8:	07 c0       	rjmp	.+14     	; 0x308 <UART_EnableInterrupt+0x6e>
			break;
		case EMPTY_BUFFERR_INT :
			Set_Bit(UCSRB, UDRIE);
     2fa:	aa e2       	ldi	r26, 0x2A	; 42
     2fc:	b0 e0       	ldi	r27, 0x00	; 0
     2fe:	ea e2       	ldi	r30, 0x2A	; 42
     300:	f0 e0       	ldi	r31, 0x00	; 0
     302:	80 81       	ld	r24, Z
     304:	80 62       	ori	r24, 0x20	; 32
     306:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
	return 0;
     308:	80 e0       	ldi	r24, 0x00	; 0
}
     30a:	0f 90       	pop	r0
     30c:	0f 90       	pop	r0
     30e:	0f 90       	pop	r0
     310:	0f 90       	pop	r0
     312:	cf 91       	pop	r28
     314:	df 91       	pop	r29
     316:	08 95       	ret

00000318 <UART_DisableInterrupt>:
uint8_t UART_DisableInterrupt(uint8_t UartNumber, uint8_t UartInterruptType) {
     318:	df 93       	push	r29
     31a:	cf 93       	push	r28
     31c:	00 d0       	rcall	.+0      	; 0x31e <UART_DisableInterrupt+0x6>
     31e:	00 d0       	rcall	.+0      	; 0x320 <UART_DisableInterrupt+0x8>
     320:	cd b7       	in	r28, 0x3d	; 61
     322:	de b7       	in	r29, 0x3e	; 62
     324:	89 83       	std	Y+1, r24	; 0x01
     326:	6a 83       	std	Y+2, r22	; 0x02
	switch (UartNumber) {
     328:	89 81       	ldd	r24, Y+1	; 0x01
     32a:	88 2f       	mov	r24, r24
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	00 97       	sbiw	r24, 0x00	; 0
     330:	51 f5       	brne	.+84     	; 0x386 <UART_DisableInterrupt+0x6e>
	case UART_1 :
		switch (UartInterruptType) {
     332:	8a 81       	ldd	r24, Y+2	; 0x02
     334:	28 2f       	mov	r18, r24
     336:	30 e0       	ldi	r19, 0x00	; 0
     338:	3c 83       	std	Y+4, r19	; 0x04
     33a:	2b 83       	std	Y+3, r18	; 0x03
     33c:	8b 81       	ldd	r24, Y+3	; 0x03
     33e:	9c 81       	ldd	r25, Y+4	; 0x04
     340:	81 30       	cpi	r24, 0x01	; 1
     342:	91 05       	cpc	r25, r1
     344:	89 f0       	breq	.+34     	; 0x368 <UART_DisableInterrupt+0x50>
     346:	2b 81       	ldd	r18, Y+3	; 0x03
     348:	3c 81       	ldd	r19, Y+4	; 0x04
     34a:	22 30       	cpi	r18, 0x02	; 2
     34c:	31 05       	cpc	r19, r1
     34e:	a1 f0       	breq	.+40     	; 0x378 <UART_DisableInterrupt+0x60>
     350:	8b 81       	ldd	r24, Y+3	; 0x03
     352:	9c 81       	ldd	r25, Y+4	; 0x04
     354:	00 97       	sbiw	r24, 0x00	; 0
     356:	b9 f4       	brne	.+46     	; 0x386 <UART_DisableInterrupt+0x6e>
		case RECIVE_INT :
			Clr_Bit(UCSRB, RXCIE);
     358:	aa e2       	ldi	r26, 0x2A	; 42
     35a:	b0 e0       	ldi	r27, 0x00	; 0
     35c:	ea e2       	ldi	r30, 0x2A	; 42
     35e:	f0 e0       	ldi	r31, 0x00	; 0
     360:	80 81       	ld	r24, Z
     362:	8f 77       	andi	r24, 0x7F	; 127
     364:	8c 93       	st	X, r24
     366:	0f c0       	rjmp	.+30     	; 0x386 <UART_DisableInterrupt+0x6e>
			break;
		case TRANSMIT_INT :
			Clr_Bit(UCSRB, TXCIE);
     368:	aa e2       	ldi	r26, 0x2A	; 42
     36a:	b0 e0       	ldi	r27, 0x00	; 0
     36c:	ea e2       	ldi	r30, 0x2A	; 42
     36e:	f0 e0       	ldi	r31, 0x00	; 0
     370:	80 81       	ld	r24, Z
     372:	8f 7b       	andi	r24, 0xBF	; 191
     374:	8c 93       	st	X, r24
     376:	07 c0       	rjmp	.+14     	; 0x386 <UART_DisableInterrupt+0x6e>
			break;
		case EMPTY_BUFFERR_INT :
			Clr_Bit(UCSRB, UDRIE);
     378:	aa e2       	ldi	r26, 0x2A	; 42
     37a:	b0 e0       	ldi	r27, 0x00	; 0
     37c:	ea e2       	ldi	r30, 0x2A	; 42
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	80 81       	ld	r24, Z
     382:	8f 7d       	andi	r24, 0xDF	; 223
     384:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
	return 0;
     386:	80 e0       	ldi	r24, 0x00	; 0
}
     388:	0f 90       	pop	r0
     38a:	0f 90       	pop	r0
     38c:	0f 90       	pop	r0
     38e:	0f 90       	pop	r0
     390:	cf 91       	pop	r28
     392:	df 91       	pop	r29
     394:	08 95       	ret

00000396 <SPI_SlaveInit>:
#define CPOL (uint8_t)3
#define CPHA (uint8_t)2
#define SPR1 (uint8_t)1
#define SPR0 (uint8_t)0
#define SPI2X (uint8_t)0
#define SPIF (uint8_t)7
     396:	df 93       	push	r29
     398:	cf 93       	push	r28
     39a:	cd b7       	in	r28, 0x3d	; 61
     39c:	de b7       	in	r29, 0x3e	; 62

Ptr_VoidFuncVoid_t G_SPI_CALLBACK ;
#if MODE_MSRT_SLAVE
     39e:	80 e0       	ldi	r24, 0x00	; 0
     3a0:	60 e0       	ldi	r22, 0x00	; 0
     3a2:	41 e0       	ldi	r20, 0x01	; 1
     3a4:	0e 94 98 03 	call	0x730	; 0x730 <DIO_SetPinDirection>
static uint8_t SPI_SlaveInit(void);
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	60 e0       	ldi	r22, 0x00	; 0
     3ac:	41 e0       	ldi	r20, 0x01	; 1
     3ae:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <DIO_WritePin>
	DIO_SetPinDirection(SLAVE_7_PORT,SLAVE_7_PIN,PIN_OUTPUT);
	DIO_WritePin(SLAVE_7_PORT,SLAVE_7_PIN,PIN_HIGH);
#endif
#if SLAVE_8
	DIO_SetPinDirection(SLAVE_8_PORT,SLAVE_8_PIN,PIN_OUTPUT);
	DIO_WritePin(SLAVE_8_PORT,SLAVE_8_PIN,PIN_HIGH);
     3b2:	80 e0       	ldi	r24, 0x00	; 0
#endif
     3b4:	cf 91       	pop	r28
     3b6:	df 91       	pop	r29
     3b8:	08 95       	ret

000003ba <SPI_Init>:
#else
     3ba:	df 93       	push	r29
     3bc:	cf 93       	push	r28
     3be:	0f 92       	push	r0
     3c0:	cd b7       	in	r28, 0x3d	; 61
     3c2:	de b7       	in	r29, 0x3e	; 62
     3c4:	89 83       	std	Y+1, r24	; 0x01
#endif

     3c6:	ad e2       	ldi	r26, 0x2D	; 45
     3c8:	b0 e0       	ldi	r27, 0x00	; 0
     3ca:	ed e2       	ldi	r30, 0x2D	; 45
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	80 81       	ld	r24, Z
     3d0:	80 64       	ori	r24, 0x40	; 64
     3d2:	8c 93       	st	X, r24
	return 0;
     3d4:	ad e2       	ldi	r26, 0x2D	; 45
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	ed e2       	ldi	r30, 0x2D	; 45
     3da:	f0 e0       	ldi	r31, 0x00	; 0
     3dc:	80 81       	ld	r24, Z
     3de:	80 61       	ori	r24, 0x10	; 16
     3e0:	8c 93       	st	X, r24
}
     3e2:	ad e2       	ldi	r26, 0x2D	; 45
     3e4:	b0 e0       	ldi	r27, 0x00	; 0
     3e6:	ed e2       	ldi	r30, 0x2D	; 45
     3e8:	f0 e0       	ldi	r31, 0x00	; 0
     3ea:	80 81       	ld	r24, Z
     3ec:	81 60       	ori	r24, 0x01	; 1
     3ee:	8c 93       	st	X, r24
#endif
uint8_t SPI_Init(uint8_t SpiNumber) {
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	66 e0       	ldi	r22, 0x06	; 6
     3f4:	40 e0       	ldi	r20, 0x00	; 0
     3f6:	0e 94 98 03 	call	0x730	; 0x730 <DIO_SetPinDirection>
#if MODE_MSRT_SLAVE
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	65 e0       	ldi	r22, 0x05	; 5
     3fe:	41 e0       	ldi	r20, 0x01	; 1
     400:	0e 94 98 03 	call	0x730	; 0x730 <DIO_SetPinDirection>
	Set_Bit(SPCR, SPE);
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	67 e0       	ldi	r22, 0x07	; 7
     408:	41 e0       	ldi	r20, 0x01	; 1
     40a:	0e 94 98 03 	call	0x730	; 0x730 <DIO_SetPinDirection>
	Set_Bit(SPCR, MSTR);
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	64 e0       	ldi	r22, 0x04	; 4
     412:	40 e0       	ldi	r20, 0x00	; 0
     414:	0e 94 98 03 	call	0x730	; 0x730 <DIO_SetPinDirection>
	SPCR |= (CPOL_FUNCTIONALITY ) | (CLK_PHASE_BIT ) | (PRESCALER )
     418:	0e 94 cb 01 	call	0x396	; 0x396 <SPI_SlaveInit>
	| (DATA_ORDER );
	DIO_SetPinDirection(SPI_CH0_MISO_PORT, SPI_CH0_MISO_PIN, PIN_INPUT);
	DIO_SetPinDirection(SPI_CH0_MOSI_PORT, SPI_CH0_MOSI_PIN, PIN_OUTPUT);
	DIO_SetPinDirection(SPI_CH0_SCK_PORT, SPI_CH0_SCK_PIN, PIN_OUTPUT);
     41c:	ae e2       	ldi	r26, 0x2E	; 46
     41e:	b0 e0       	ldi	r27, 0x00	; 0
     420:	ee e2       	ldi	r30, 0x2E	; 46
     422:	f0 e0       	ldi	r31, 0x00	; 0
     424:	80 81       	ld	r24, Z
     426:	8e 7f       	andi	r24, 0xFE	; 254
     428:	8c 93       	st	X, r24
	Clr_Bit(SPSR, SPI2X);
#endif /*DOUBLE_SPEED*/

#else
	Clr_Bit(SPCR, MSTR);
	Set_Bit(SPCR, SPE);
     42a:	80 e0       	ldi	r24, 0x00	; 0
	DIO_SetPinDirection(SPI_CH0_MISO_PORT, SPI_CH0_MISO_PIN, PIN_OUTPUT);
     42c:	0f 90       	pop	r0
     42e:	cf 91       	pop	r28
     430:	df 91       	pop	r29
     432:	08 95       	ret

00000434 <SPI_TransmitChar>:
	DIO_SetPinDirection(SPI_CH0_MOSI_PORT, SPI_CH0_MOSI_PIN, PIN_INPUT);
	DIO_SetPinDirection(SPI_CH0_SCK_PORT, SPI_CH0_SCK_PIN, PIN_INPUT);
     434:	df 93       	push	r29
     436:	cf 93       	push	r28
     438:	00 d0       	rcall	.+0      	; 0x43a <SPI_TransmitChar+0x6>
     43a:	0f 92       	push	r0
     43c:	cd b7       	in	r28, 0x3d	; 61
     43e:	de b7       	in	r29, 0x3e	; 62
     440:	89 83       	std	Y+1, r24	; 0x01
     442:	6a 83       	std	Y+2, r22	; 0x02
     444:	4b 83       	std	Y+3, r20	; 0x03
	DIO_SetPinDirection(SPI_CH0_SS_PORT, SPI_CH0_SS_PIN, PIN_INPUT);
#endif/*MODE_MSRT_SLAVE*/
     446:	8b 81       	ldd	r24, Y+3	; 0x03
     448:	88 2f       	mov	r24, r24
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	00 97       	sbiw	r24, 0x00	; 0
     44e:	99 f4       	brne	.+38     	; 0x476 <__stack+0x17>
	return 0;
}
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	60 e0       	ldi	r22, 0x00	; 0
     454:	40 e0       	ldi	r20, 0x00	; 0
     456:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <DIO_WritePin>

     45a:	ef e2       	ldi	r30, 0x2F	; 47
     45c:	f0 e0       	ldi	r31, 0x00	; 0
     45e:	8a 81       	ldd	r24, Y+2	; 0x02
     460:	80 83       	st	Z, r24
uint8_t SPI_TransmitChar(uint8_t SpiNumber, uint8_t TxChar, uint8_t slave_CH) {
     462:	ee e2       	ldi	r30, 0x2E	; 46
     464:	f0 e0       	ldi	r31, 0x00	; 0
     466:	80 81       	ld	r24, Z
     468:	88 23       	and	r24, r24
     46a:	dc f7       	brge	.-10     	; 0x462 <__stack+0x3>
#if MODE_MSRT_SLAVE
	switch (slave_CH) {
		case SLAVE_CH1:
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	60 e0       	ldi	r22, 0x00	; 0
     470:	41 e0       	ldi	r20, 0x01	; 1
     472:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <DIO_WritePin>
		DIO_WritePin(SLAVE_1_PORT, SLAVE_1_PIN, PIN_HIGH);
		break;
		default:
		break;
	}
#else
     476:	80 e0       	ldi	r24, 0x00	; 0
	SPDR = TxChar;
     478:	0f 90       	pop	r0
     47a:	0f 90       	pop	r0
     47c:	0f 90       	pop	r0
     47e:	cf 91       	pop	r28
     480:	df 91       	pop	r29
     482:	08 95       	ret

00000484 <SPI_TransmitString>:
	//trigger an external interrupt in master MCU
	while (!(SPSR & (1 << SPIF )))
     484:	df 93       	push	r29
     486:	cf 93       	push	r28
     488:	00 d0       	rcall	.+0      	; 0x48a <SPI_TransmitString+0x6>
     48a:	00 d0       	rcall	.+0      	; 0x48c <SPI_TransmitString+0x8>
     48c:	0f 92       	push	r0
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
     492:	8a 83       	std	Y+2, r24	; 0x02
     494:	7c 83       	std	Y+4, r23	; 0x04
     496:	6b 83       	std	Y+3, r22	; 0x03
     498:	4d 83       	std	Y+5, r20	; 0x05
		;
#endif
     49a:	19 82       	std	Y+1, r1	; 0x01
	return 0;
}
uint8_t SPI_TransmitString(uint8_t SpiNumber, ptr_uint8_t TxString,
     49c:	8d 81       	ldd	r24, Y+5	; 0x05
     49e:	88 2f       	mov	r24, r24
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	00 97       	sbiw	r24, 0x00	; 0
     4a4:	e1 f5       	brne	.+120    	; 0x51e <SPI_TransmitString+0x9a>
		uint8_t slave_CH) {
	uint8_t counter = 0;
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	60 e0       	ldi	r22, 0x00	; 0
     4aa:	40 e0       	ldi	r20, 0x00	; 0
     4ac:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <DIO_WritePin>
#if MODE_MSRT_SLAVE

     4b0:	89 81       	ldd	r24, Y+1	; 0x01
     4b2:	28 2f       	mov	r18, r24
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	8b 81       	ldd	r24, Y+3	; 0x03
     4b8:	9c 81       	ldd	r25, Y+4	; 0x04
     4ba:	fc 01       	movw	r30, r24
     4bc:	e2 0f       	add	r30, r18
     4be:	f3 1f       	adc	r31, r19
     4c0:	80 81       	ld	r24, Z
     4c2:	88 23       	and	r24, r24
     4c4:	b9 f4       	brne	.+46     	; 0x4f4 <SPI_TransmitString+0x70>
	switch (slave_CH) {
     4c6:	af e2       	ldi	r26, 0x2F	; 47
     4c8:	b0 e0       	ldi	r27, 0x00	; 0
     4ca:	89 81       	ldd	r24, Y+1	; 0x01
     4cc:	28 2f       	mov	r18, r24
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	8b 81       	ldd	r24, Y+3	; 0x03
     4d2:	9c 81       	ldd	r25, Y+4	; 0x04
     4d4:	fc 01       	movw	r30, r24
     4d6:	e2 0f       	add	r30, r18
     4d8:	f3 1f       	adc	r31, r19
     4da:	80 81       	ld	r24, Z
     4dc:	8c 93       	st	X, r24
		case SLAVE_CH1:
     4de:	ee e2       	ldi	r30, 0x2E	; 46
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	80 81       	ld	r24, Z
     4e4:	88 23       	and	r24, r24
     4e6:	dc f7       	brge	.-10     	; 0x4de <SPI_TransmitString+0x5a>
			}
			SPDR = *(TxString + counter);
			counter++;
			while ((Get_Bit(SPSR, SPIF)) != 1)
			;
		}
     4e8:	80 e0       	ldi	r24, 0x00	; 0
     4ea:	60 e0       	ldi	r22, 0x00	; 0
     4ec:	41 e0       	ldi	r20, 0x01	; 1
     4ee:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <DIO_WritePin>
     4f2:	15 c0       	rjmp	.+42     	; 0x51e <SPI_TransmitString+0x9a>
	switch (slave_CH) {
		case SLAVE_CH1:
		DIO_WritePin(SLAVE_1_PORT, SLAVE_1_PIN, PIN_LOW);
		while (counter >= 255) {
			if ((*(TxString + counter)) == NULL_TERMINATOR) {
				break;
     4f4:	af e2       	ldi	r26, 0x2F	; 47
     4f6:	b0 e0       	ldi	r27, 0x00	; 0
     4f8:	89 81       	ldd	r24, Y+1	; 0x01
     4fa:	28 2f       	mov	r18, r24
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	8b 81       	ldd	r24, Y+3	; 0x03
     500:	9c 81       	ldd	r25, Y+4	; 0x04
     502:	fc 01       	movw	r30, r24
     504:	e2 0f       	add	r30, r18
     506:	f3 1f       	adc	r31, r19
     508:	80 81       	ld	r24, Z
     50a:	8c 93       	st	X, r24
			}
			SPDR = *(TxString + counter);
     50c:	89 81       	ldd	r24, Y+1	; 0x01
     50e:	8f 5f       	subi	r24, 0xFF	; 255
     510:	89 83       	std	Y+1, r24	; 0x01
			counter++;
     512:	ee e2       	ldi	r30, 0x2E	; 46
     514:	f0 e0       	ldi	r31, 0x00	; 0
     516:	80 81       	ld	r24, Z
     518:	88 23       	and	r24, r24
     51a:	dc f7       	brge	.-10     	; 0x512 <SPI_TransmitString+0x8e>
     51c:	c9 cf       	rjmp	.-110    	; 0x4b0 <SPI_TransmitString+0x2c>
		SPDR = *(TxString + counter);
		counter++;
		//trigger an external interrupt in master MCU
		while (!(SPSR & (1 << SPIF )))
			;
	}
     51e:	80 e0       	ldi	r24, 0x00	; 0
#endif
     520:	0f 90       	pop	r0
     522:	0f 90       	pop	r0
     524:	0f 90       	pop	r0
     526:	0f 90       	pop	r0
     528:	0f 90       	pop	r0
     52a:	cf 91       	pop	r28
     52c:	df 91       	pop	r29
     52e:	08 95       	ret

00000530 <SPI_ReceiveChar>:
	return 0;
}
     530:	df 93       	push	r29
     532:	cf 93       	push	r28
     534:	00 d0       	rcall	.+0      	; 0x536 <SPI_ReceiveChar+0x6>
     536:	00 d0       	rcall	.+0      	; 0x538 <SPI_ReceiveChar+0x8>
     538:	0f 92       	push	r0
     53a:	cd b7       	in	r28, 0x3d	; 61
     53c:	de b7       	in	r29, 0x3e	; 62
     53e:	8a 83       	std	Y+2, r24	; 0x02
     540:	7c 83       	std	Y+4, r23	; 0x04
     542:	6b 83       	std	Y+3, r22	; 0x03
     544:	4d 83       	std	Y+5, r20	; 0x05

uint8_t SPI_ReceiveChar(uint8_t SpiNumber, ptr_uint8_t RxData, uint8_t slave_CH) {
     546:	19 82       	std	Y+1, r1	; 0x01

     548:	8d 81       	ldd	r24, Y+5	; 0x05
     54a:	88 2f       	mov	r24, r24
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	00 97       	sbiw	r24, 0x00	; 0
     550:	e9 f4       	brne	.+58     	; 0x58c <SPI_ReceiveChar+0x5c>
#if MODE_MSRT_SLAVE
	uint8_t Dummy_Data = 0;
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	60 e0       	ldi	r22, 0x00	; 0
     556:	40 e0       	ldi	r20, 0x00	; 0
     558:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <DIO_WritePin>
	switch (slave_CH) {
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	69 81       	ldd	r22, Y+1	; 0x01
     560:	40 e0       	ldi	r20, 0x00	; 0
     562:	0e 94 1a 02 	call	0x434	; 0x434 <SPI_TransmitChar>
		case SLAVE_CH1:
     566:	ee e2       	ldi	r30, 0x2E	; 46
     568:	f0 e0       	ldi	r31, 0x00	; 0
     56a:	80 81       	ld	r24, Z
     56c:	88 1f       	adc	r24, r24
     56e:	88 27       	eor	r24, r24
     570:	88 1f       	adc	r24, r24
     572:	81 30       	cpi	r24, 0x01	; 1
     574:	c1 f7       	brne	.-16     	; 0x566 <SPI_ReceiveChar+0x36>
		DIO_WritePin(SLAVE_1_PORT, SLAVE_1_PIN, PIN_LOW);
		SPI_TransmitChar(SPI_CH1, Dummy_Data, SLAVE_CH1);
     576:	ef e2       	ldi	r30, 0x2F	; 47
     578:	f0 e0       	ldi	r31, 0x00	; 0
     57a:	80 81       	ld	r24, Z
     57c:	eb 81       	ldd	r30, Y+3	; 0x03
     57e:	fc 81       	ldd	r31, Y+4	; 0x04
     580:	80 83       	st	Z, r24
		while ((Get_Bit(SPSR, SPIF)) != 1)
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	60 e0       	ldi	r22, 0x00	; 0
     586:	41 e0       	ldi	r20, 0x01	; 1
     588:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <DIO_WritePin>
		default:
		break;
	}
#else
	while (!(SPSR & (1 << SPIF )))
		;
     58c:	80 e0       	ldi	r24, 0x00	; 0
	*(RxData) = SPDR;
     58e:	0f 90       	pop	r0
     590:	0f 90       	pop	r0
     592:	0f 90       	pop	r0
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	cf 91       	pop	r28
     59a:	df 91       	pop	r29
     59c:	08 95       	ret

0000059e <SPI_ReceiveString>:
#endif
	return 0;
     59e:	df 93       	push	r29
     5a0:	cf 93       	push	r28
     5a2:	00 d0       	rcall	.+0      	; 0x5a4 <SPI_ReceiveString+0x6>
     5a4:	00 d0       	rcall	.+0      	; 0x5a6 <SPI_ReceiveString+0x8>
     5a6:	00 d0       	rcall	.+0      	; 0x5a8 <SPI_ReceiveString+0xa>
     5a8:	cd b7       	in	r28, 0x3d	; 61
     5aa:	de b7       	in	r29, 0x3e	; 62
     5ac:	8b 83       	std	Y+3, r24	; 0x03
     5ae:	7d 83       	std	Y+5, r23	; 0x05
     5b0:	6c 83       	std	Y+4, r22	; 0x04
     5b2:	4e 83       	std	Y+6, r20	; 0x06
}
     5b4:	1a 82       	std	Y+2, r1	; 0x02
uint8_t SPI_ReceiveString(uint8_t SpiNumber, ptr_uint8_t RxString,
		uint8_t slave_CH) {
     5b6:	19 82       	std	Y+1, r1	; 0x01
	uint8_t counter = 0;
     5b8:	8e 81       	ldd	r24, Y+6	; 0x06
     5ba:	88 2f       	mov	r24, r24
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	00 97       	sbiw	r24, 0x00	; 0
     5c0:	e1 f5       	brne	.+120    	; 0x63a <SPI_ReceiveString+0x9c>
#if MODE_MSRT_SLAVE
	uint8_t Dummy_Data = 0;
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	60 e0       	ldi	r22, 0x00	; 0
     5c6:	40 e0       	ldi	r20, 0x00	; 0
     5c8:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <DIO_WritePin>
	switch (slave_CH) {
		case SLAVE_CH1:
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	69 81       	ldd	r22, Y+1	; 0x01
     5d0:	40 e0       	ldi	r20, 0x00	; 0
     5d2:	0e 94 1a 02 	call	0x434	; 0x434 <SPI_TransmitChar>
		DIO_WritePin(SLAVE_1_PORT, SLAVE_1_PIN, PIN_LOW);
     5d6:	ee e2       	ldi	r30, 0x2E	; 46
     5d8:	f0 e0       	ldi	r31, 0x00	; 0
     5da:	80 81       	ld	r24, Z
     5dc:	88 1f       	adc	r24, r24
     5de:	88 27       	eor	r24, r24
     5e0:	88 1f       	adc	r24, r24
     5e2:	81 30       	cpi	r24, 0x01	; 1
     5e4:	c1 f7       	brne	.-16     	; 0x5d6 <SPI_ReceiveString+0x38>
		while (1) {
			SPI_TransmitChar(SPI_CH1,Dummy_Data,SLAVE_CH1);
     5e6:	8a 81       	ldd	r24, Y+2	; 0x02
     5e8:	28 2f       	mov	r18, r24
     5ea:	30 e0       	ldi	r19, 0x00	; 0
     5ec:	8c 81       	ldd	r24, Y+4	; 0x04
     5ee:	9d 81       	ldd	r25, Y+5	; 0x05
     5f0:	dc 01       	movw	r26, r24
     5f2:	a2 0f       	add	r26, r18
     5f4:	b3 1f       	adc	r27, r19
     5f6:	ef e2       	ldi	r30, 0x2F	; 47
     5f8:	f0 e0       	ldi	r31, 0x00	; 0
     5fa:	80 81       	ld	r24, Z
     5fc:	8c 93       	st	X, r24
			while ((Get_Bit(SPSR, SPIF)) != 1)
     5fe:	8a 81       	ldd	r24, Y+2	; 0x02
     600:	28 2f       	mov	r18, r24
     602:	30 e0       	ldi	r19, 0x00	; 0
     604:	8c 81       	ldd	r24, Y+4	; 0x04
     606:	9d 81       	ldd	r25, Y+5	; 0x05
     608:	fc 01       	movw	r30, r24
     60a:	e2 0f       	add	r30, r18
     60c:	f3 1f       	adc	r31, r19
     60e:	80 81       	ld	r24, Z
     610:	8d 30       	cpi	r24, 0x0D	; 13
     612:	79 f4       	brne	.+30     	; 0x632 <SPI_ReceiveString+0x94>
			;
     614:	8a 81       	ldd	r24, Y+2	; 0x02
     616:	28 2f       	mov	r18, r24
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	8c 81       	ldd	r24, Y+4	; 0x04
     61c:	9d 81       	ldd	r25, Y+5	; 0x05
     61e:	fc 01       	movw	r30, r24
     620:	e2 0f       	add	r30, r18
     622:	f3 1f       	adc	r31, r19
     624:	10 82       	st	Z, r1
			*(RxString+counter) = SPDR;
			if((*(RxString+counter))==NEW_LINE) {
				*(RxString+counter)=NULL_TERMINATOR;
				break;
			}
			counter++;
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	60 e0       	ldi	r22, 0x00	; 0
     62a:	41 e0       	ldi	r20, 0x01	; 1
     62c:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <DIO_WritePin>
     630:	04 c0       	rjmp	.+8      	; 0x63a <SPI_ReceiveString+0x9c>
			SPI_TransmitChar(SPI_CH1,Dummy_Data,SLAVE_CH1);
			while ((Get_Bit(SPSR, SPIF)) != 1)
			;
			*(RxString+counter) = SPDR;
			if((*(RxString+counter))==NEW_LINE) {
				*(RxString+counter)=NULL_TERMINATOR;
     632:	8a 81       	ldd	r24, Y+2	; 0x02
     634:	8f 5f       	subi	r24, 0xFF	; 255
     636:	8a 83       	std	Y+2, r24	; 0x02
     638:	c9 cf       	rjmp	.-110    	; 0x5cc <SPI_ReceiveString+0x2e>
	return 0;
}

uint8_t SPI_EnableInterrupt(uint8_t SpiNumber) {
	Set_Bit(SPCR, SPIE);
	return 0;
     63a:	80 e0       	ldi	r24, 0x00	; 0
}
     63c:	26 96       	adiw	r28, 0x06	; 6
     63e:	0f b6       	in	r0, 0x3f	; 63
     640:	f8 94       	cli
     642:	de bf       	out	0x3e, r29	; 62
     644:	0f be       	out	0x3f, r0	; 63
     646:	cd bf       	out	0x3d, r28	; 61
     648:	cf 91       	pop	r28
     64a:	df 91       	pop	r29
     64c:	08 95       	ret

0000064e <SPI_EnableInterrupt>:
uint8_t SPI_DisableInterrupt(uint8_t SpiNumber) {
	Clr_Bit(SPCR, SPIE);
     64e:	df 93       	push	r29
     650:	cf 93       	push	r28
     652:	0f 92       	push	r0
     654:	cd b7       	in	r28, 0x3d	; 61
     656:	de b7       	in	r29, 0x3e	; 62
     658:	89 83       	std	Y+1, r24	; 0x01
	return 0;
     65a:	80 e0       	ldi	r24, 0x00	; 0
}
     65c:	0f 90       	pop	r0
     65e:	cf 91       	pop	r28
     660:	df 91       	pop	r29
     662:	08 95       	ret

00000664 <SPI_DisableInterrupt>:

     664:	df 93       	push	r29
     666:	cf 93       	push	r28
     668:	0f 92       	push	r0
     66a:	cd b7       	in	r28, 0x3d	; 61
     66c:	de b7       	in	r29, 0x3e	; 62
     66e:	89 83       	std	Y+1, r24	; 0x01
uint8_t SPI_SetCallback(uint8_t SpiNumber, Ptr_VoidFuncVoid_t Callback) {
     670:	80 e0       	ldi	r24, 0x00	; 0
	G_SPI_CALLBACK=Callback;
     672:	0f 90       	pop	r0
     674:	cf 91       	pop	r28
     676:	df 91       	pop	r29
     678:	08 95       	ret

0000067a <SPI_SetCallback>:
	return 0;
}
     67a:	df 93       	push	r29
     67c:	cf 93       	push	r28
     67e:	00 d0       	rcall	.+0      	; 0x680 <SPI_SetCallback+0x6>
     680:	0f 92       	push	r0
     682:	cd b7       	in	r28, 0x3d	; 61
     684:	de b7       	in	r29, 0x3e	; 62
     686:	89 83       	std	Y+1, r24	; 0x01
     688:	7b 83       	std	Y+3, r23	; 0x03
     68a:	6a 83       	std	Y+2, r22	; 0x02

     68c:	80 e0       	ldi	r24, 0x00	; 0
void __vector_12(void) __attribute__((signal)); // Serial Transfer Complete
     68e:	0f 90       	pop	r0
     690:	0f 90       	pop	r0
     692:	0f 90       	pop	r0
     694:	cf 91       	pop	r28
     696:	df 91       	pop	r29
     698:	08 95       	ret

0000069a <DIO_setPortDirection>:


/* APIs IMPLEMENTATION */

/* API to Set Port Direction */
DIO_ERROR_state_t DIO_setPortDirection(uint8_t PortID, uint8_t PortDirection) {
     69a:	df 93       	push	r29
     69c:	cf 93       	push	r28
     69e:	00 d0       	rcall	.+0      	; 0x6a0 <DIO_setPortDirection+0x6>
     6a0:	00 d0       	rcall	.+0      	; 0x6a2 <DIO_setPortDirection+0x8>
     6a2:	0f 92       	push	r0
     6a4:	cd b7       	in	r28, 0x3d	; 61
     6a6:	de b7       	in	r29, 0x3e	; 62
     6a8:	89 83       	std	Y+1, r24	; 0x01
     6aa:	6a 83       	std	Y+2, r22	; 0x02
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA )) {
     6ac:	89 81       	ldd	r24, Y+1	; 0x01
     6ae:	84 30       	cpi	r24, 0x04	; 4
     6b0:	a0 f5       	brcc	.+104    	; 0x71a <DIO_setPortDirection+0x80>
		switch (PortID) {
     6b2:	89 81       	ldd	r24, Y+1	; 0x01
     6b4:	28 2f       	mov	r18, r24
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	3d 83       	std	Y+5, r19	; 0x05
     6ba:	2c 83       	std	Y+4, r18	; 0x04
     6bc:	8c 81       	ldd	r24, Y+4	; 0x04
     6be:	9d 81       	ldd	r25, Y+5	; 0x05
     6c0:	81 30       	cpi	r24, 0x01	; 1
     6c2:	91 05       	cpc	r25, r1
     6c4:	d1 f0       	breq	.+52     	; 0x6fa <DIO_setPortDirection+0x60>
     6c6:	2c 81       	ldd	r18, Y+4	; 0x04
     6c8:	3d 81       	ldd	r19, Y+5	; 0x05
     6ca:	22 30       	cpi	r18, 0x02	; 2
     6cc:	31 05       	cpc	r19, r1
     6ce:	2c f4       	brge	.+10     	; 0x6da <DIO_setPortDirection+0x40>
     6d0:	8c 81       	ldd	r24, Y+4	; 0x04
     6d2:	9d 81       	ldd	r25, Y+5	; 0x05
     6d4:	00 97       	sbiw	r24, 0x00	; 0
     6d6:	61 f0       	breq	.+24     	; 0x6f0 <DIO_setPortDirection+0x56>
     6d8:	1e c0       	rjmp	.+60     	; 0x716 <DIO_setPortDirection+0x7c>
     6da:	2c 81       	ldd	r18, Y+4	; 0x04
     6dc:	3d 81       	ldd	r19, Y+5	; 0x05
     6de:	22 30       	cpi	r18, 0x02	; 2
     6e0:	31 05       	cpc	r19, r1
     6e2:	81 f0       	breq	.+32     	; 0x704 <DIO_setPortDirection+0x6a>
     6e4:	8c 81       	ldd	r24, Y+4	; 0x04
     6e6:	9d 81       	ldd	r25, Y+5	; 0x05
     6e8:	83 30       	cpi	r24, 0x03	; 3
     6ea:	91 05       	cpc	r25, r1
     6ec:	81 f0       	breq	.+32     	; 0x70e <DIO_setPortDirection+0x74>
     6ee:	13 c0       	rjmp	.+38     	; 0x716 <DIO_setPortDirection+0x7c>
		case PORTA :
			PORTA_DIR = PortDirection;
     6f0:	ea e3       	ldi	r30, 0x3A	; 58
     6f2:	f0 e0       	ldi	r31, 0x00	; 0
     6f4:	8a 81       	ldd	r24, Y+2	; 0x02
     6f6:	80 83       	st	Z, r24
     6f8:	0e c0       	rjmp	.+28     	; 0x716 <DIO_setPortDirection+0x7c>
			break;
		case PORTB :
			PORTB_DIR = PortDirection;
     6fa:	e7 e3       	ldi	r30, 0x37	; 55
     6fc:	f0 e0       	ldi	r31, 0x00	; 0
     6fe:	8a 81       	ldd	r24, Y+2	; 0x02
     700:	80 83       	st	Z, r24
     702:	09 c0       	rjmp	.+18     	; 0x716 <DIO_setPortDirection+0x7c>
			break;
		case PORTC :
			PORTC_DIR = PortDirection;
     704:	e4 e3       	ldi	r30, 0x34	; 52
     706:	f0 e0       	ldi	r31, 0x00	; 0
     708:	8a 81       	ldd	r24, Y+2	; 0x02
     70a:	80 83       	st	Z, r24
     70c:	04 c0       	rjmp	.+8      	; 0x716 <DIO_setPortDirection+0x7c>
			break;
		case PORTD :
			PORTD_DIR = PortDirection;
     70e:	e1 e3       	ldi	r30, 0x31	; 49
     710:	f0 e0       	ldi	r31, 0x00	; 0
     712:	8a 81       	ldd	r24, Y+2	; 0x02
     714:	80 83       	st	Z, r24
			break;
		} //END of SWITCH
		return E_DIO_SUCCESS ;
     716:	1b 82       	std	Y+3, r1	; 0x03
     718:	02 c0       	rjmp	.+4      	; 0x71e <DIO_setPortDirection+0x84>
	}	  //END of IF
	else {
		return E_DIO_INVALID_PORT_NUMBER ;
     71a:	91 e0       	ldi	r25, 0x01	; 1
     71c:	9b 83       	std	Y+3, r25	; 0x03
     71e:	8b 81       	ldd	r24, Y+3	; 0x03

	}	  //END of ELSE
}	  //END DIO_setPortDirection
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
     724:	0f 90       	pop	r0
     726:	0f 90       	pop	r0
     728:	0f 90       	pop	r0
     72a:	cf 91       	pop	r28
     72c:	df 91       	pop	r29
     72e:	08 95       	ret

00000730 <DIO_SetPinDirection>:

/* API to Set Pin Direction */
DIO_ERROR_state_t DIO_SetPinDirection(uint8_t PortID, uint8_t PinNumber,
		uint8_t PinDirection) {
     730:	df 93       	push	r29
     732:	cf 93       	push	r28
     734:	cd b7       	in	r28, 0x3d	; 61
     736:	de b7       	in	r29, 0x3e	; 62
     738:	28 97       	sbiw	r28, 0x08	; 8
     73a:	0f b6       	in	r0, 0x3f	; 63
     73c:	f8 94       	cli
     73e:	de bf       	out	0x3e, r29	; 62
     740:	0f be       	out	0x3f, r0	; 63
     742:	cd bf       	out	0x3d, r28	; 61
     744:	89 83       	std	Y+1, r24	; 0x01
     746:	6a 83       	std	Y+2, r22	; 0x02
     748:	4b 83       	std	Y+3, r20	; 0x03
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA ) && (PinNumber >= PIN0 )
     74a:	89 81       	ldd	r24, Y+1	; 0x01
     74c:	84 30       	cpi	r24, 0x04	; 4
     74e:	08 f0       	brcs	.+2      	; 0x752 <DIO_SetPinDirection+0x22>
     750:	f4 c0       	rjmp	.+488    	; 0x93a <DIO_SetPinDirection+0x20a>
     752:	8a 81       	ldd	r24, Y+2	; 0x02
     754:	88 30       	cpi	r24, 0x08	; 8
     756:	08 f0       	brcs	.+2      	; 0x75a <DIO_SetPinDirection+0x2a>
     758:	f0 c0       	rjmp	.+480    	; 0x93a <DIO_SetPinDirection+0x20a>
			&& (PinNumber <= PIN7 )) {
		if (PinDirection == PIN_OUTPUT) {
     75a:	8b 81       	ldd	r24, Y+3	; 0x03
     75c:	81 30       	cpi	r24, 0x01	; 1
     75e:	09 f0       	breq	.+2      	; 0x762 <DIO_SetPinDirection+0x32>
     760:	70 c0       	rjmp	.+224    	; 0x842 <DIO_SetPinDirection+0x112>
			switch (PortID) {
     762:	89 81       	ldd	r24, Y+1	; 0x01
     764:	28 2f       	mov	r18, r24
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	38 87       	std	Y+8, r19	; 0x08
     76a:	2f 83       	std	Y+7, r18	; 0x07
     76c:	8f 81       	ldd	r24, Y+7	; 0x07
     76e:	98 85       	ldd	r25, Y+8	; 0x08
     770:	81 30       	cpi	r24, 0x01	; 1
     772:	91 05       	cpc	r25, r1
     774:	49 f1       	breq	.+82     	; 0x7c8 <DIO_SetPinDirection+0x98>
     776:	2f 81       	ldd	r18, Y+7	; 0x07
     778:	38 85       	ldd	r19, Y+8	; 0x08
     77a:	22 30       	cpi	r18, 0x02	; 2
     77c:	31 05       	cpc	r19, r1
     77e:	2c f4       	brge	.+10     	; 0x78a <DIO_SetPinDirection+0x5a>
     780:	8f 81       	ldd	r24, Y+7	; 0x07
     782:	98 85       	ldd	r25, Y+8	; 0x08
     784:	00 97       	sbiw	r24, 0x00	; 0
     786:	61 f0       	breq	.+24     	; 0x7a0 <DIO_SetPinDirection+0x70>
     788:	5a c0       	rjmp	.+180    	; 0x83e <DIO_SetPinDirection+0x10e>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	22 30       	cpi	r18, 0x02	; 2
     790:	31 05       	cpc	r19, r1
     792:	71 f1       	breq	.+92     	; 0x7f0 <DIO_SetPinDirection+0xc0>
     794:	8f 81       	ldd	r24, Y+7	; 0x07
     796:	98 85       	ldd	r25, Y+8	; 0x08
     798:	83 30       	cpi	r24, 0x03	; 3
     79a:	91 05       	cpc	r25, r1
     79c:	e9 f1       	breq	.+122    	; 0x818 <DIO_SetPinDirection+0xe8>
     79e:	4f c0       	rjmp	.+158    	; 0x83e <DIO_SetPinDirection+0x10e>
			case PORTA :
				Set_Bit(PORTA_DIR, PinNumber);
     7a0:	aa e3       	ldi	r26, 0x3A	; 58
     7a2:	b0 e0       	ldi	r27, 0x00	; 0
     7a4:	ea e3       	ldi	r30, 0x3A	; 58
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
     7a8:	80 81       	ld	r24, Z
     7aa:	48 2f       	mov	r20, r24
     7ac:	8a 81       	ldd	r24, Y+2	; 0x02
     7ae:	28 2f       	mov	r18, r24
     7b0:	30 e0       	ldi	r19, 0x00	; 0
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	02 2e       	mov	r0, r18
     7b8:	02 c0       	rjmp	.+4      	; 0x7be <DIO_SetPinDirection+0x8e>
     7ba:	88 0f       	add	r24, r24
     7bc:	99 1f       	adc	r25, r25
     7be:	0a 94       	dec	r0
     7c0:	e2 f7       	brpl	.-8      	; 0x7ba <DIO_SetPinDirection+0x8a>
     7c2:	84 2b       	or	r24, r20
     7c4:	8c 93       	st	X, r24
     7c6:	3b c0       	rjmp	.+118    	; 0x83e <DIO_SetPinDirection+0x10e>
				break;
			case PORTB :
				Set_Bit(PORTB_DIR, PinNumber);
     7c8:	a7 e3       	ldi	r26, 0x37	; 55
     7ca:	b0 e0       	ldi	r27, 0x00	; 0
     7cc:	e7 e3       	ldi	r30, 0x37	; 55
     7ce:	f0 e0       	ldi	r31, 0x00	; 0
     7d0:	80 81       	ld	r24, Z
     7d2:	48 2f       	mov	r20, r24
     7d4:	8a 81       	ldd	r24, Y+2	; 0x02
     7d6:	28 2f       	mov	r18, r24
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	81 e0       	ldi	r24, 0x01	; 1
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	02 2e       	mov	r0, r18
     7e0:	02 c0       	rjmp	.+4      	; 0x7e6 <DIO_SetPinDirection+0xb6>
     7e2:	88 0f       	add	r24, r24
     7e4:	99 1f       	adc	r25, r25
     7e6:	0a 94       	dec	r0
     7e8:	e2 f7       	brpl	.-8      	; 0x7e2 <DIO_SetPinDirection+0xb2>
     7ea:	84 2b       	or	r24, r20
     7ec:	8c 93       	st	X, r24
     7ee:	27 c0       	rjmp	.+78     	; 0x83e <DIO_SetPinDirection+0x10e>
				break;
			case PORTC :
				Set_Bit(PORTC_DIR, PinNumber);
     7f0:	a4 e3       	ldi	r26, 0x34	; 52
     7f2:	b0 e0       	ldi	r27, 0x00	; 0
     7f4:	e4 e3       	ldi	r30, 0x34	; 52
     7f6:	f0 e0       	ldi	r31, 0x00	; 0
     7f8:	80 81       	ld	r24, Z
     7fa:	48 2f       	mov	r20, r24
     7fc:	8a 81       	ldd	r24, Y+2	; 0x02
     7fe:	28 2f       	mov	r18, r24
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	02 2e       	mov	r0, r18
     808:	02 c0       	rjmp	.+4      	; 0x80e <DIO_SetPinDirection+0xde>
     80a:	88 0f       	add	r24, r24
     80c:	99 1f       	adc	r25, r25
     80e:	0a 94       	dec	r0
     810:	e2 f7       	brpl	.-8      	; 0x80a <DIO_SetPinDirection+0xda>
     812:	84 2b       	or	r24, r20
     814:	8c 93       	st	X, r24
     816:	13 c0       	rjmp	.+38     	; 0x83e <DIO_SetPinDirection+0x10e>
				break;
			case PORTD :
				Set_Bit(PORTD_DIR, PinNumber);
     818:	a1 e3       	ldi	r26, 0x31	; 49
     81a:	b0 e0       	ldi	r27, 0x00	; 0
     81c:	e1 e3       	ldi	r30, 0x31	; 49
     81e:	f0 e0       	ldi	r31, 0x00	; 0
     820:	80 81       	ld	r24, Z
     822:	48 2f       	mov	r20, r24
     824:	8a 81       	ldd	r24, Y+2	; 0x02
     826:	28 2f       	mov	r18, r24
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	02 2e       	mov	r0, r18
     830:	02 c0       	rjmp	.+4      	; 0x836 <DIO_SetPinDirection+0x106>
     832:	88 0f       	add	r24, r24
     834:	99 1f       	adc	r25, r25
     836:	0a 94       	dec	r0
     838:	e2 f7       	brpl	.-8      	; 0x832 <DIO_SetPinDirection+0x102>
     83a:	84 2b       	or	r24, r20
     83c:	8c 93       	st	X, r24
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
     83e:	1e 82       	std	Y+6, r1	; 0x06
     840:	7e c0       	rjmp	.+252    	; 0x93e <DIO_SetPinDirection+0x20e>
		} // END of IF that check for the direction if it is INPUT
		else if (PinDirection == PIN_INPUT) {
     842:	8b 81       	ldd	r24, Y+3	; 0x03
     844:	88 23       	and	r24, r24
     846:	09 f0       	breq	.+2      	; 0x84a <DIO_SetPinDirection+0x11a>
     848:	75 c0       	rjmp	.+234    	; 0x934 <DIO_SetPinDirection+0x204>
			switch (PortID) {
     84a:	89 81       	ldd	r24, Y+1	; 0x01
     84c:	28 2f       	mov	r18, r24
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	3d 83       	std	Y+5, r19	; 0x05
     852:	2c 83       	std	Y+4, r18	; 0x04
     854:	8c 81       	ldd	r24, Y+4	; 0x04
     856:	9d 81       	ldd	r25, Y+5	; 0x05
     858:	81 30       	cpi	r24, 0x01	; 1
     85a:	91 05       	cpc	r25, r1
     85c:	59 f1       	breq	.+86     	; 0x8b4 <DIO_SetPinDirection+0x184>
     85e:	2c 81       	ldd	r18, Y+4	; 0x04
     860:	3d 81       	ldd	r19, Y+5	; 0x05
     862:	22 30       	cpi	r18, 0x02	; 2
     864:	31 05       	cpc	r19, r1
     866:	2c f4       	brge	.+10     	; 0x872 <DIO_SetPinDirection+0x142>
     868:	8c 81       	ldd	r24, Y+4	; 0x04
     86a:	9d 81       	ldd	r25, Y+5	; 0x05
     86c:	00 97       	sbiw	r24, 0x00	; 0
     86e:	69 f0       	breq	.+26     	; 0x88a <DIO_SetPinDirection+0x15a>
     870:	5f c0       	rjmp	.+190    	; 0x930 <DIO_SetPinDirection+0x200>
     872:	2c 81       	ldd	r18, Y+4	; 0x04
     874:	3d 81       	ldd	r19, Y+5	; 0x05
     876:	22 30       	cpi	r18, 0x02	; 2
     878:	31 05       	cpc	r19, r1
     87a:	89 f1       	breq	.+98     	; 0x8de <DIO_SetPinDirection+0x1ae>
     87c:	8c 81       	ldd	r24, Y+4	; 0x04
     87e:	9d 81       	ldd	r25, Y+5	; 0x05
     880:	83 30       	cpi	r24, 0x03	; 3
     882:	91 05       	cpc	r25, r1
     884:	09 f4       	brne	.+2      	; 0x888 <DIO_SetPinDirection+0x158>
     886:	40 c0       	rjmp	.+128    	; 0x908 <DIO_SetPinDirection+0x1d8>
     888:	53 c0       	rjmp	.+166    	; 0x930 <DIO_SetPinDirection+0x200>
			case PORTA :
				Clr_Bit(PORTA_DIR, PinNumber);
     88a:	aa e3       	ldi	r26, 0x3A	; 58
     88c:	b0 e0       	ldi	r27, 0x00	; 0
     88e:	ea e3       	ldi	r30, 0x3A	; 58
     890:	f0 e0       	ldi	r31, 0x00	; 0
     892:	80 81       	ld	r24, Z
     894:	48 2f       	mov	r20, r24
     896:	8a 81       	ldd	r24, Y+2	; 0x02
     898:	28 2f       	mov	r18, r24
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	02 2e       	mov	r0, r18
     8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <DIO_SetPinDirection+0x178>
     8a4:	88 0f       	add	r24, r24
     8a6:	99 1f       	adc	r25, r25
     8a8:	0a 94       	dec	r0
     8aa:	e2 f7       	brpl	.-8      	; 0x8a4 <DIO_SetPinDirection+0x174>
     8ac:	80 95       	com	r24
     8ae:	84 23       	and	r24, r20
     8b0:	8c 93       	st	X, r24
     8b2:	3e c0       	rjmp	.+124    	; 0x930 <DIO_SetPinDirection+0x200>
				break;
			case PORTB :
				Clr_Bit(PORTB_DIR, PinNumber);
     8b4:	a7 e3       	ldi	r26, 0x37	; 55
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	e7 e3       	ldi	r30, 0x37	; 55
     8ba:	f0 e0       	ldi	r31, 0x00	; 0
     8bc:	80 81       	ld	r24, Z
     8be:	48 2f       	mov	r20, r24
     8c0:	8a 81       	ldd	r24, Y+2	; 0x02
     8c2:	28 2f       	mov	r18, r24
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	02 2e       	mov	r0, r18
     8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <DIO_SetPinDirection+0x1a2>
     8ce:	88 0f       	add	r24, r24
     8d0:	99 1f       	adc	r25, r25
     8d2:	0a 94       	dec	r0
     8d4:	e2 f7       	brpl	.-8      	; 0x8ce <DIO_SetPinDirection+0x19e>
     8d6:	80 95       	com	r24
     8d8:	84 23       	and	r24, r20
     8da:	8c 93       	st	X, r24
     8dc:	29 c0       	rjmp	.+82     	; 0x930 <DIO_SetPinDirection+0x200>
				break;
			case PORTC :
				Clr_Bit(PORTC_DIR, PinNumber);
     8de:	a4 e3       	ldi	r26, 0x34	; 52
     8e0:	b0 e0       	ldi	r27, 0x00	; 0
     8e2:	e4 e3       	ldi	r30, 0x34	; 52
     8e4:	f0 e0       	ldi	r31, 0x00	; 0
     8e6:	80 81       	ld	r24, Z
     8e8:	48 2f       	mov	r20, r24
     8ea:	8a 81       	ldd	r24, Y+2	; 0x02
     8ec:	28 2f       	mov	r18, r24
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	02 2e       	mov	r0, r18
     8f6:	02 c0       	rjmp	.+4      	; 0x8fc <DIO_SetPinDirection+0x1cc>
     8f8:	88 0f       	add	r24, r24
     8fa:	99 1f       	adc	r25, r25
     8fc:	0a 94       	dec	r0
     8fe:	e2 f7       	brpl	.-8      	; 0x8f8 <DIO_SetPinDirection+0x1c8>
     900:	80 95       	com	r24
     902:	84 23       	and	r24, r20
     904:	8c 93       	st	X, r24
     906:	14 c0       	rjmp	.+40     	; 0x930 <DIO_SetPinDirection+0x200>
				break;
			case PORTD :
				Clr_Bit(PORTD_DIR, PinNumber);
     908:	a1 e3       	ldi	r26, 0x31	; 49
     90a:	b0 e0       	ldi	r27, 0x00	; 0
     90c:	e1 e3       	ldi	r30, 0x31	; 49
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	80 81       	ld	r24, Z
     912:	48 2f       	mov	r20, r24
     914:	8a 81       	ldd	r24, Y+2	; 0x02
     916:	28 2f       	mov	r18, r24
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	02 2e       	mov	r0, r18
     920:	02 c0       	rjmp	.+4      	; 0x926 <DIO_SetPinDirection+0x1f6>
     922:	88 0f       	add	r24, r24
     924:	99 1f       	adc	r25, r25
     926:	0a 94       	dec	r0
     928:	e2 f7       	brpl	.-8      	; 0x922 <DIO_SetPinDirection+0x1f2>
     92a:	80 95       	com	r24
     92c:	84 23       	and	r24, r20
     92e:	8c 93       	st	X, r24
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
     930:	1e 82       	std	Y+6, r1	; 0x06
     932:	05 c0       	rjmp	.+10     	; 0x93e <DIO_SetPinDirection+0x20e>
		} // END of ELSE IF that check for the direction if it is INPUT
		else {
			return E_DIO_INVALID_PIN_DIRECTION ;
     934:	92 e0       	ldi	r25, 0x02	; 2
     936:	9e 83       	std	Y+6, r25	; 0x06
     938:	02 c0       	rjmp	.+4      	; 0x93e <DIO_SetPinDirection+0x20e>
		} //END OF ELSE

	}	  //END of IF That checking the port and pin number

	else {
		return E_DIO_INVALID_PORT_NUMBER ;
     93a:	21 e0       	ldi	r18, 0x01	; 1
     93c:	2e 83       	std	Y+6, r18	; 0x06
     93e:	8e 81       	ldd	r24, Y+6	; 0x06

	}	  //END of ELSE
}	  //END DIO_setPinDirection
     940:	28 96       	adiw	r28, 0x08	; 8
     942:	0f b6       	in	r0, 0x3f	; 63
     944:	f8 94       	cli
     946:	de bf       	out	0x3e, r29	; 62
     948:	0f be       	out	0x3f, r0	; 63
     94a:	cd bf       	out	0x3d, r28	; 61
     94c:	cf 91       	pop	r28
     94e:	df 91       	pop	r29
     950:	08 95       	ret

00000952 <DIO_writePort>:

/* API to Write Port  Value */
DIO_ERROR_state_t DIO_writePort(uint8_t PortID, uint8_t PortValue) {
     952:	df 93       	push	r29
     954:	cf 93       	push	r28
     956:	00 d0       	rcall	.+0      	; 0x958 <DIO_writePort+0x6>
     958:	00 d0       	rcall	.+0      	; 0x95a <DIO_writePort+0x8>
     95a:	0f 92       	push	r0
     95c:	cd b7       	in	r28, 0x3d	; 61
     95e:	de b7       	in	r29, 0x3e	; 62
     960:	89 83       	std	Y+1, r24	; 0x01
     962:	6a 83       	std	Y+2, r22	; 0x02
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA )) {
     964:	89 81       	ldd	r24, Y+1	; 0x01
     966:	84 30       	cpi	r24, 0x04	; 4
     968:	a0 f5       	brcc	.+104    	; 0x9d2 <DIO_writePort+0x80>
		switch (PortID) {
     96a:	89 81       	ldd	r24, Y+1	; 0x01
     96c:	28 2f       	mov	r18, r24
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	3d 83       	std	Y+5, r19	; 0x05
     972:	2c 83       	std	Y+4, r18	; 0x04
     974:	8c 81       	ldd	r24, Y+4	; 0x04
     976:	9d 81       	ldd	r25, Y+5	; 0x05
     978:	81 30       	cpi	r24, 0x01	; 1
     97a:	91 05       	cpc	r25, r1
     97c:	d1 f0       	breq	.+52     	; 0x9b2 <DIO_writePort+0x60>
     97e:	2c 81       	ldd	r18, Y+4	; 0x04
     980:	3d 81       	ldd	r19, Y+5	; 0x05
     982:	22 30       	cpi	r18, 0x02	; 2
     984:	31 05       	cpc	r19, r1
     986:	2c f4       	brge	.+10     	; 0x992 <DIO_writePort+0x40>
     988:	8c 81       	ldd	r24, Y+4	; 0x04
     98a:	9d 81       	ldd	r25, Y+5	; 0x05
     98c:	00 97       	sbiw	r24, 0x00	; 0
     98e:	61 f0       	breq	.+24     	; 0x9a8 <DIO_writePort+0x56>
     990:	1e c0       	rjmp	.+60     	; 0x9ce <DIO_writePort+0x7c>
     992:	2c 81       	ldd	r18, Y+4	; 0x04
     994:	3d 81       	ldd	r19, Y+5	; 0x05
     996:	22 30       	cpi	r18, 0x02	; 2
     998:	31 05       	cpc	r19, r1
     99a:	81 f0       	breq	.+32     	; 0x9bc <DIO_writePort+0x6a>
     99c:	8c 81       	ldd	r24, Y+4	; 0x04
     99e:	9d 81       	ldd	r25, Y+5	; 0x05
     9a0:	83 30       	cpi	r24, 0x03	; 3
     9a2:	91 05       	cpc	r25, r1
     9a4:	81 f0       	breq	.+32     	; 0x9c6 <DIO_writePort+0x74>
     9a6:	13 c0       	rjmp	.+38     	; 0x9ce <DIO_writePort+0x7c>
		case PORTA :
			PORTA_DATA = PortValue;
     9a8:	eb e3       	ldi	r30, 0x3B	; 59
     9aa:	f0 e0       	ldi	r31, 0x00	; 0
     9ac:	8a 81       	ldd	r24, Y+2	; 0x02
     9ae:	80 83       	st	Z, r24
     9b0:	0e c0       	rjmp	.+28     	; 0x9ce <DIO_writePort+0x7c>
			break;
		case PORTB :
			PORTB_DATA = PortValue;
     9b2:	e8 e3       	ldi	r30, 0x38	; 56
     9b4:	f0 e0       	ldi	r31, 0x00	; 0
     9b6:	8a 81       	ldd	r24, Y+2	; 0x02
     9b8:	80 83       	st	Z, r24
     9ba:	09 c0       	rjmp	.+18     	; 0x9ce <DIO_writePort+0x7c>
			break;
		case PORTC :
			PORTC_DATA = PortValue;
     9bc:	e5 e3       	ldi	r30, 0x35	; 53
     9be:	f0 e0       	ldi	r31, 0x00	; 0
     9c0:	8a 81       	ldd	r24, Y+2	; 0x02
     9c2:	80 83       	st	Z, r24
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <DIO_writePort+0x7c>
			break;
		case PORTD :
			PORTD_DATA = PortValue;
     9c6:	e2 e3       	ldi	r30, 0x32	; 50
     9c8:	f0 e0       	ldi	r31, 0x00	; 0
     9ca:	8a 81       	ldd	r24, Y+2	; 0x02
     9cc:	80 83       	st	Z, r24
			break;

		} //END of SWITCH
		return E_DIO_SUCCESS ;
     9ce:	1b 82       	std	Y+3, r1	; 0x03
     9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <DIO_writePort+0x84>
	}	  //END of IF
	else {
		return E_DIO_INVALID_PORT_NUMBER ;
     9d2:	91 e0       	ldi	r25, 0x01	; 1
     9d4:	9b 83       	std	Y+3, r25	; 0x03
     9d6:	8b 81       	ldd	r24, Y+3	; 0x03

	}	  //END of ELSE
}	  //END DIO_writePortValue
     9d8:	0f 90       	pop	r0
     9da:	0f 90       	pop	r0
     9dc:	0f 90       	pop	r0
     9de:	0f 90       	pop	r0
     9e0:	0f 90       	pop	r0
     9e2:	cf 91       	pop	r28
     9e4:	df 91       	pop	r29
     9e6:	08 95       	ret

000009e8 <DIO_WritePin>:

/* API to Write Pin  Value */
DIO_ERROR_state_t DIO_WritePin(uint8_t PortID, uint8_t PinNumber,
		uint8_t PinDirection) {
     9e8:	df 93       	push	r29
     9ea:	cf 93       	push	r28
     9ec:	cd b7       	in	r28, 0x3d	; 61
     9ee:	de b7       	in	r29, 0x3e	; 62
     9f0:	28 97       	sbiw	r28, 0x08	; 8
     9f2:	0f b6       	in	r0, 0x3f	; 63
     9f4:	f8 94       	cli
     9f6:	de bf       	out	0x3e, r29	; 62
     9f8:	0f be       	out	0x3f, r0	; 63
     9fa:	cd bf       	out	0x3d, r28	; 61
     9fc:	89 83       	std	Y+1, r24	; 0x01
     9fe:	6a 83       	std	Y+2, r22	; 0x02
     a00:	4b 83       	std	Y+3, r20	; 0x03
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA ) && (PinNumber >= PIN0 )
     a02:	89 81       	ldd	r24, Y+1	; 0x01
     a04:	84 30       	cpi	r24, 0x04	; 4
     a06:	08 f0       	brcs	.+2      	; 0xa0a <DIO_WritePin+0x22>
     a08:	f4 c0       	rjmp	.+488    	; 0xbf2 <DIO_WritePin+0x20a>
     a0a:	8a 81       	ldd	r24, Y+2	; 0x02
     a0c:	88 30       	cpi	r24, 0x08	; 8
     a0e:	08 f0       	brcs	.+2      	; 0xa12 <DIO_WritePin+0x2a>
     a10:	f0 c0       	rjmp	.+480    	; 0xbf2 <DIO_WritePin+0x20a>
			&& (PinNumber <= PIN7 )) {
		if (PinDirection == PIN_HIGH) {
     a12:	8b 81       	ldd	r24, Y+3	; 0x03
     a14:	81 30       	cpi	r24, 0x01	; 1
     a16:	09 f0       	breq	.+2      	; 0xa1a <DIO_WritePin+0x32>
     a18:	70 c0       	rjmp	.+224    	; 0xafa <DIO_WritePin+0x112>
			switch (PortID) {
     a1a:	89 81       	ldd	r24, Y+1	; 0x01
     a1c:	28 2f       	mov	r18, r24
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	38 87       	std	Y+8, r19	; 0x08
     a22:	2f 83       	std	Y+7, r18	; 0x07
     a24:	8f 81       	ldd	r24, Y+7	; 0x07
     a26:	98 85       	ldd	r25, Y+8	; 0x08
     a28:	81 30       	cpi	r24, 0x01	; 1
     a2a:	91 05       	cpc	r25, r1
     a2c:	49 f1       	breq	.+82     	; 0xa80 <DIO_WritePin+0x98>
     a2e:	2f 81       	ldd	r18, Y+7	; 0x07
     a30:	38 85       	ldd	r19, Y+8	; 0x08
     a32:	22 30       	cpi	r18, 0x02	; 2
     a34:	31 05       	cpc	r19, r1
     a36:	2c f4       	brge	.+10     	; 0xa42 <DIO_WritePin+0x5a>
     a38:	8f 81       	ldd	r24, Y+7	; 0x07
     a3a:	98 85       	ldd	r25, Y+8	; 0x08
     a3c:	00 97       	sbiw	r24, 0x00	; 0
     a3e:	61 f0       	breq	.+24     	; 0xa58 <DIO_WritePin+0x70>
     a40:	5a c0       	rjmp	.+180    	; 0xaf6 <DIO_WritePin+0x10e>
     a42:	2f 81       	ldd	r18, Y+7	; 0x07
     a44:	38 85       	ldd	r19, Y+8	; 0x08
     a46:	22 30       	cpi	r18, 0x02	; 2
     a48:	31 05       	cpc	r19, r1
     a4a:	71 f1       	breq	.+92     	; 0xaa8 <DIO_WritePin+0xc0>
     a4c:	8f 81       	ldd	r24, Y+7	; 0x07
     a4e:	98 85       	ldd	r25, Y+8	; 0x08
     a50:	83 30       	cpi	r24, 0x03	; 3
     a52:	91 05       	cpc	r25, r1
     a54:	e9 f1       	breq	.+122    	; 0xad0 <DIO_WritePin+0xe8>
     a56:	4f c0       	rjmp	.+158    	; 0xaf6 <DIO_WritePin+0x10e>
			case PORTA :
				Set_Bit(PORTA_DATA, PinNumber);
     a58:	ab e3       	ldi	r26, 0x3B	; 59
     a5a:	b0 e0       	ldi	r27, 0x00	; 0
     a5c:	eb e3       	ldi	r30, 0x3B	; 59
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	80 81       	ld	r24, Z
     a62:	48 2f       	mov	r20, r24
     a64:	8a 81       	ldd	r24, Y+2	; 0x02
     a66:	28 2f       	mov	r18, r24
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	02 2e       	mov	r0, r18
     a70:	02 c0       	rjmp	.+4      	; 0xa76 <DIO_WritePin+0x8e>
     a72:	88 0f       	add	r24, r24
     a74:	99 1f       	adc	r25, r25
     a76:	0a 94       	dec	r0
     a78:	e2 f7       	brpl	.-8      	; 0xa72 <DIO_WritePin+0x8a>
     a7a:	84 2b       	or	r24, r20
     a7c:	8c 93       	st	X, r24
     a7e:	3b c0       	rjmp	.+118    	; 0xaf6 <DIO_WritePin+0x10e>
				break;
			case PORTB :
				Set_Bit(PORTB_DATA, PinNumber);
     a80:	a8 e3       	ldi	r26, 0x38	; 56
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	e8 e3       	ldi	r30, 0x38	; 56
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	80 81       	ld	r24, Z
     a8a:	48 2f       	mov	r20, r24
     a8c:	8a 81       	ldd	r24, Y+2	; 0x02
     a8e:	28 2f       	mov	r18, r24
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	02 2e       	mov	r0, r18
     a98:	02 c0       	rjmp	.+4      	; 0xa9e <DIO_WritePin+0xb6>
     a9a:	88 0f       	add	r24, r24
     a9c:	99 1f       	adc	r25, r25
     a9e:	0a 94       	dec	r0
     aa0:	e2 f7       	brpl	.-8      	; 0xa9a <DIO_WritePin+0xb2>
     aa2:	84 2b       	or	r24, r20
     aa4:	8c 93       	st	X, r24
     aa6:	27 c0       	rjmp	.+78     	; 0xaf6 <DIO_WritePin+0x10e>
				break;
			case PORTC :
				Set_Bit(PORTC_DATA, PinNumber);
     aa8:	a5 e3       	ldi	r26, 0x35	; 53
     aaa:	b0 e0       	ldi	r27, 0x00	; 0
     aac:	e5 e3       	ldi	r30, 0x35	; 53
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	80 81       	ld	r24, Z
     ab2:	48 2f       	mov	r20, r24
     ab4:	8a 81       	ldd	r24, Y+2	; 0x02
     ab6:	28 2f       	mov	r18, r24
     ab8:	30 e0       	ldi	r19, 0x00	; 0
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	02 2e       	mov	r0, r18
     ac0:	02 c0       	rjmp	.+4      	; 0xac6 <DIO_WritePin+0xde>
     ac2:	88 0f       	add	r24, r24
     ac4:	99 1f       	adc	r25, r25
     ac6:	0a 94       	dec	r0
     ac8:	e2 f7       	brpl	.-8      	; 0xac2 <DIO_WritePin+0xda>
     aca:	84 2b       	or	r24, r20
     acc:	8c 93       	st	X, r24
     ace:	13 c0       	rjmp	.+38     	; 0xaf6 <DIO_WritePin+0x10e>
				break;
			case PORTD :
				Set_Bit(PORTD_DATA, PinNumber);
     ad0:	a2 e3       	ldi	r26, 0x32	; 50
     ad2:	b0 e0       	ldi	r27, 0x00	; 0
     ad4:	e2 e3       	ldi	r30, 0x32	; 50
     ad6:	f0 e0       	ldi	r31, 0x00	; 0
     ad8:	80 81       	ld	r24, Z
     ada:	48 2f       	mov	r20, r24
     adc:	8a 81       	ldd	r24, Y+2	; 0x02
     ade:	28 2f       	mov	r18, r24
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	02 2e       	mov	r0, r18
     ae8:	02 c0       	rjmp	.+4      	; 0xaee <DIO_WritePin+0x106>
     aea:	88 0f       	add	r24, r24
     aec:	99 1f       	adc	r25, r25
     aee:	0a 94       	dec	r0
     af0:	e2 f7       	brpl	.-8      	; 0xaea <DIO_WritePin+0x102>
     af2:	84 2b       	or	r24, r20
     af4:	8c 93       	st	X, r24
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
     af6:	1e 82       	std	Y+6, r1	; 0x06
     af8:	7e c0       	rjmp	.+252    	; 0xbf6 <DIO_WritePin+0x20e>
		} // END of IF that check for the direction if it is INPUT
		else if (PinDirection == PIN_LOW) {
     afa:	8b 81       	ldd	r24, Y+3	; 0x03
     afc:	88 23       	and	r24, r24
     afe:	09 f0       	breq	.+2      	; 0xb02 <DIO_WritePin+0x11a>
     b00:	75 c0       	rjmp	.+234    	; 0xbec <DIO_WritePin+0x204>
			switch (PortID) {
     b02:	89 81       	ldd	r24, Y+1	; 0x01
     b04:	28 2f       	mov	r18, r24
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	3d 83       	std	Y+5, r19	; 0x05
     b0a:	2c 83       	std	Y+4, r18	; 0x04
     b0c:	8c 81       	ldd	r24, Y+4	; 0x04
     b0e:	9d 81       	ldd	r25, Y+5	; 0x05
     b10:	81 30       	cpi	r24, 0x01	; 1
     b12:	91 05       	cpc	r25, r1
     b14:	59 f1       	breq	.+86     	; 0xb6c <DIO_WritePin+0x184>
     b16:	2c 81       	ldd	r18, Y+4	; 0x04
     b18:	3d 81       	ldd	r19, Y+5	; 0x05
     b1a:	22 30       	cpi	r18, 0x02	; 2
     b1c:	31 05       	cpc	r19, r1
     b1e:	2c f4       	brge	.+10     	; 0xb2a <DIO_WritePin+0x142>
     b20:	8c 81       	ldd	r24, Y+4	; 0x04
     b22:	9d 81       	ldd	r25, Y+5	; 0x05
     b24:	00 97       	sbiw	r24, 0x00	; 0
     b26:	69 f0       	breq	.+26     	; 0xb42 <DIO_WritePin+0x15a>
     b28:	5f c0       	rjmp	.+190    	; 0xbe8 <DIO_WritePin+0x200>
     b2a:	2c 81       	ldd	r18, Y+4	; 0x04
     b2c:	3d 81       	ldd	r19, Y+5	; 0x05
     b2e:	22 30       	cpi	r18, 0x02	; 2
     b30:	31 05       	cpc	r19, r1
     b32:	89 f1       	breq	.+98     	; 0xb96 <DIO_WritePin+0x1ae>
     b34:	8c 81       	ldd	r24, Y+4	; 0x04
     b36:	9d 81       	ldd	r25, Y+5	; 0x05
     b38:	83 30       	cpi	r24, 0x03	; 3
     b3a:	91 05       	cpc	r25, r1
     b3c:	09 f4       	brne	.+2      	; 0xb40 <DIO_WritePin+0x158>
     b3e:	40 c0       	rjmp	.+128    	; 0xbc0 <DIO_WritePin+0x1d8>
     b40:	53 c0       	rjmp	.+166    	; 0xbe8 <DIO_WritePin+0x200>
			case PORTA :
				Clr_Bit(PORTA_DATA, PinNumber);
     b42:	ab e3       	ldi	r26, 0x3B	; 59
     b44:	b0 e0       	ldi	r27, 0x00	; 0
     b46:	eb e3       	ldi	r30, 0x3B	; 59
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	80 81       	ld	r24, Z
     b4c:	48 2f       	mov	r20, r24
     b4e:	8a 81       	ldd	r24, Y+2	; 0x02
     b50:	28 2f       	mov	r18, r24
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	02 2e       	mov	r0, r18
     b5a:	02 c0       	rjmp	.+4      	; 0xb60 <DIO_WritePin+0x178>
     b5c:	88 0f       	add	r24, r24
     b5e:	99 1f       	adc	r25, r25
     b60:	0a 94       	dec	r0
     b62:	e2 f7       	brpl	.-8      	; 0xb5c <DIO_WritePin+0x174>
     b64:	80 95       	com	r24
     b66:	84 23       	and	r24, r20
     b68:	8c 93       	st	X, r24
     b6a:	3e c0       	rjmp	.+124    	; 0xbe8 <DIO_WritePin+0x200>
				break;
			case PORTB :
				Clr_Bit(PORTB_DATA, PinNumber);
     b6c:	a8 e3       	ldi	r26, 0x38	; 56
     b6e:	b0 e0       	ldi	r27, 0x00	; 0
     b70:	e8 e3       	ldi	r30, 0x38	; 56
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	80 81       	ld	r24, Z
     b76:	48 2f       	mov	r20, r24
     b78:	8a 81       	ldd	r24, Y+2	; 0x02
     b7a:	28 2f       	mov	r18, r24
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	02 2e       	mov	r0, r18
     b84:	02 c0       	rjmp	.+4      	; 0xb8a <DIO_WritePin+0x1a2>
     b86:	88 0f       	add	r24, r24
     b88:	99 1f       	adc	r25, r25
     b8a:	0a 94       	dec	r0
     b8c:	e2 f7       	brpl	.-8      	; 0xb86 <DIO_WritePin+0x19e>
     b8e:	80 95       	com	r24
     b90:	84 23       	and	r24, r20
     b92:	8c 93       	st	X, r24
     b94:	29 c0       	rjmp	.+82     	; 0xbe8 <DIO_WritePin+0x200>
				break;
			case PORTC :
				Clr_Bit(PORTC_DATA, PinNumber);
     b96:	a5 e3       	ldi	r26, 0x35	; 53
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	e5 e3       	ldi	r30, 0x35	; 53
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	48 2f       	mov	r20, r24
     ba2:	8a 81       	ldd	r24, Y+2	; 0x02
     ba4:	28 2f       	mov	r18, r24
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	02 2e       	mov	r0, r18
     bae:	02 c0       	rjmp	.+4      	; 0xbb4 <DIO_WritePin+0x1cc>
     bb0:	88 0f       	add	r24, r24
     bb2:	99 1f       	adc	r25, r25
     bb4:	0a 94       	dec	r0
     bb6:	e2 f7       	brpl	.-8      	; 0xbb0 <DIO_WritePin+0x1c8>
     bb8:	80 95       	com	r24
     bba:	84 23       	and	r24, r20
     bbc:	8c 93       	st	X, r24
     bbe:	14 c0       	rjmp	.+40     	; 0xbe8 <DIO_WritePin+0x200>
				break;
			case PORTD :
				Clr_Bit(PORTD_DATA, PinNumber);
     bc0:	a2 e3       	ldi	r26, 0x32	; 50
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	e2 e3       	ldi	r30, 0x32	; 50
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	48 2f       	mov	r20, r24
     bcc:	8a 81       	ldd	r24, Y+2	; 0x02
     bce:	28 2f       	mov	r18, r24
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	02 2e       	mov	r0, r18
     bd8:	02 c0       	rjmp	.+4      	; 0xbde <DIO_WritePin+0x1f6>
     bda:	88 0f       	add	r24, r24
     bdc:	99 1f       	adc	r25, r25
     bde:	0a 94       	dec	r0
     be0:	e2 f7       	brpl	.-8      	; 0xbda <DIO_WritePin+0x1f2>
     be2:	80 95       	com	r24
     be4:	84 23       	and	r24, r20
     be6:	8c 93       	st	X, r24
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
     be8:	1e 82       	std	Y+6, r1	; 0x06
     bea:	05 c0       	rjmp	.+10     	; 0xbf6 <DIO_WritePin+0x20e>
		} // END of ELSE IF that check for the direction if it is INPUT
		else {
			return E_DIO_INVALID_PIN_DIRECTION ;
     bec:	92 e0       	ldi	r25, 0x02	; 2
     bee:	9e 83       	std	Y+6, r25	; 0x06
     bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <DIO_WritePin+0x20e>
		} //END OF ELSE

	}	  //END of IF That checking the port and pin number

	else {
		return E_DIO_INVALID_PORT_NUMBER ;
     bf2:	21 e0       	ldi	r18, 0x01	; 1
     bf4:	2e 83       	std	Y+6, r18	; 0x06
     bf6:	8e 81       	ldd	r24, Y+6	; 0x06

	}	  //END of ELSE
}	  //END of DIO_writePinValue
     bf8:	28 96       	adiw	r28, 0x08	; 8
     bfa:	0f b6       	in	r0, 0x3f	; 63
     bfc:	f8 94       	cli
     bfe:	de bf       	out	0x3e, r29	; 62
     c00:	0f be       	out	0x3f, r0	; 63
     c02:	cd bf       	out	0x3d, r28	; 61
     c04:	cf 91       	pop	r28
     c06:	df 91       	pop	r29
     c08:	08 95       	ret

00000c0a <DIO_ReadPort>:

/* API to Read Port  Value */
DIO_ERROR_state_t DIO_ReadPort(uint8_t PortID, uint8_t* PortState) {
     c0a:	df 93       	push	r29
     c0c:	cf 93       	push	r28
     c0e:	00 d0       	rcall	.+0      	; 0xc10 <DIO_ReadPort+0x6>
     c10:	00 d0       	rcall	.+0      	; 0xc12 <DIO_ReadPort+0x8>
     c12:	00 d0       	rcall	.+0      	; 0xc14 <DIO_ReadPort+0xa>
     c14:	cd b7       	in	r28, 0x3d	; 61
     c16:	de b7       	in	r29, 0x3e	; 62
     c18:	89 83       	std	Y+1, r24	; 0x01
     c1a:	7b 83       	std	Y+3, r23	; 0x03
     c1c:	6a 83       	std	Y+2, r22	; 0x02
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA )) {
     c1e:	89 81       	ldd	r24, Y+1	; 0x01
     c20:	84 30       	cpi	r24, 0x04	; 4
     c22:	e0 f5       	brcc	.+120    	; 0xc9c <DIO_ReadPort+0x92>
		switch (PortID) {
     c24:	89 81       	ldd	r24, Y+1	; 0x01
     c26:	28 2f       	mov	r18, r24
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	3e 83       	std	Y+6, r19	; 0x06
     c2c:	2d 83       	std	Y+5, r18	; 0x05
     c2e:	8d 81       	ldd	r24, Y+5	; 0x05
     c30:	9e 81       	ldd	r25, Y+6	; 0x06
     c32:	81 30       	cpi	r24, 0x01	; 1
     c34:	91 05       	cpc	r25, r1
     c36:	e1 f0       	breq	.+56     	; 0xc70 <DIO_ReadPort+0x66>
     c38:	2d 81       	ldd	r18, Y+5	; 0x05
     c3a:	3e 81       	ldd	r19, Y+6	; 0x06
     c3c:	22 30       	cpi	r18, 0x02	; 2
     c3e:	31 05       	cpc	r19, r1
     c40:	2c f4       	brge	.+10     	; 0xc4c <DIO_ReadPort+0x42>
     c42:	8d 81       	ldd	r24, Y+5	; 0x05
     c44:	9e 81       	ldd	r25, Y+6	; 0x06
     c46:	00 97       	sbiw	r24, 0x00	; 0
     c48:	61 f0       	breq	.+24     	; 0xc62 <DIO_ReadPort+0x58>
     c4a:	26 c0       	rjmp	.+76     	; 0xc98 <DIO_ReadPort+0x8e>
     c4c:	2d 81       	ldd	r18, Y+5	; 0x05
     c4e:	3e 81       	ldd	r19, Y+6	; 0x06
     c50:	22 30       	cpi	r18, 0x02	; 2
     c52:	31 05       	cpc	r19, r1
     c54:	a1 f0       	breq	.+40     	; 0xc7e <DIO_ReadPort+0x74>
     c56:	8d 81       	ldd	r24, Y+5	; 0x05
     c58:	9e 81       	ldd	r25, Y+6	; 0x06
     c5a:	83 30       	cpi	r24, 0x03	; 3
     c5c:	91 05       	cpc	r25, r1
     c5e:	b1 f0       	breq	.+44     	; 0xc8c <DIO_ReadPort+0x82>
     c60:	1b c0       	rjmp	.+54     	; 0xc98 <DIO_ReadPort+0x8e>
		case PORTA :
			*(PortState) = PORTA_STAT;
     c62:	e9 e3       	ldi	r30, 0x39	; 57
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	80 81       	ld	r24, Z
     c68:	ea 81       	ldd	r30, Y+2	; 0x02
     c6a:	fb 81       	ldd	r31, Y+3	; 0x03
     c6c:	80 83       	st	Z, r24
     c6e:	14 c0       	rjmp	.+40     	; 0xc98 <DIO_ReadPort+0x8e>
			break;
		case PORTB :
			*(PortState) = PORTB_STAT;
     c70:	e6 e3       	ldi	r30, 0x36	; 54
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	80 81       	ld	r24, Z
     c76:	ea 81       	ldd	r30, Y+2	; 0x02
     c78:	fb 81       	ldd	r31, Y+3	; 0x03
     c7a:	80 83       	st	Z, r24
     c7c:	0d c0       	rjmp	.+26     	; 0xc98 <DIO_ReadPort+0x8e>
			break;
		case PORTC :
			*(PortState) = PORTC_STAT;
     c7e:	e3 e3       	ldi	r30, 0x33	; 51
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	80 81       	ld	r24, Z
     c84:	ea 81       	ldd	r30, Y+2	; 0x02
     c86:	fb 81       	ldd	r31, Y+3	; 0x03
     c88:	80 83       	st	Z, r24
     c8a:	06 c0       	rjmp	.+12     	; 0xc98 <DIO_ReadPort+0x8e>
			break;
		case PORTD :
			*(PortState) = PORTD_STAT;
     c8c:	e0 e3       	ldi	r30, 0x30	; 48
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	ea 81       	ldd	r30, Y+2	; 0x02
     c94:	fb 81       	ldd	r31, Y+3	; 0x03
     c96:	80 83       	st	Z, r24
			break;

		} //END of SWITCH
		return E_DIO_SUCCESS ;
     c98:	1c 82       	std	Y+4, r1	; 0x04
     c9a:	02 c0       	rjmp	.+4      	; 0xca0 <DIO_ReadPort+0x96>
	}	  //END of IF
	else {
		return E_DIO_INVALID_PORT_NUMBER ;
     c9c:	91 e0       	ldi	r25, 0x01	; 1
     c9e:	9c 83       	std	Y+4, r25	; 0x04
     ca0:	8c 81       	ldd	r24, Y+4	; 0x04

	}	  //END of ELSE
}	  //END of DIO_readPort
     ca2:	26 96       	adiw	r28, 0x06	; 6
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	f8 94       	cli
     ca8:	de bf       	out	0x3e, r29	; 62
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	cd bf       	out	0x3d, r28	; 61
     cae:	cf 91       	pop	r28
     cb0:	df 91       	pop	r29
     cb2:	08 95       	ret

00000cb4 <DIO_ReadPin>:

/* API to Read Pin  Value */
DIO_ERROR_state_t DIO_ReadPin(uint8_t PortID, uint8_t PinNumber,
		uint8_t* PinState) {
     cb4:	df 93       	push	r29
     cb6:	cf 93       	push	r28
     cb8:	cd b7       	in	r28, 0x3d	; 61
     cba:	de b7       	in	r29, 0x3e	; 62
     cbc:	27 97       	sbiw	r28, 0x07	; 7
     cbe:	0f b6       	in	r0, 0x3f	; 63
     cc0:	f8 94       	cli
     cc2:	de bf       	out	0x3e, r29	; 62
     cc4:	0f be       	out	0x3f, r0	; 63
     cc6:	cd bf       	out	0x3d, r28	; 61
     cc8:	89 83       	std	Y+1, r24	; 0x01
     cca:	6a 83       	std	Y+2, r22	; 0x02
     ccc:	5c 83       	std	Y+4, r21	; 0x04
     cce:	4b 83       	std	Y+3, r20	; 0x03
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA ) && (PinNumber >= PIN0 )
     cd0:	89 81       	ldd	r24, Y+1	; 0x01
     cd2:	84 30       	cpi	r24, 0x04	; 4
     cd4:	08 f0       	brcs	.+2      	; 0xcd8 <DIO_ReadPin+0x24>
     cd6:	76 c0       	rjmp	.+236    	; 0xdc4 <DIO_ReadPin+0x110>
     cd8:	8a 81       	ldd	r24, Y+2	; 0x02
     cda:	88 30       	cpi	r24, 0x08	; 8
     cdc:	08 f0       	brcs	.+2      	; 0xce0 <DIO_ReadPin+0x2c>
     cde:	72 c0       	rjmp	.+228    	; 0xdc4 <DIO_ReadPin+0x110>
			&& (PinNumber <= PIN7 )) {

		switch (PortID) {
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	28 2f       	mov	r18, r24
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	3f 83       	std	Y+7, r19	; 0x07
     ce8:	2e 83       	std	Y+6, r18	; 0x06
     cea:	4e 81       	ldd	r20, Y+6	; 0x06
     cec:	5f 81       	ldd	r21, Y+7	; 0x07
     cee:	41 30       	cpi	r20, 0x01	; 1
     cf0:	51 05       	cpc	r21, r1
     cf2:	59 f1       	breq	.+86     	; 0xd4a <DIO_ReadPin+0x96>
     cf4:	8e 81       	ldd	r24, Y+6	; 0x06
     cf6:	9f 81       	ldd	r25, Y+7	; 0x07
     cf8:	82 30       	cpi	r24, 0x02	; 2
     cfa:	91 05       	cpc	r25, r1
     cfc:	34 f4       	brge	.+12     	; 0xd0a <DIO_ReadPin+0x56>
     cfe:	2e 81       	ldd	r18, Y+6	; 0x06
     d00:	3f 81       	ldd	r19, Y+7	; 0x07
     d02:	21 15       	cp	r18, r1
     d04:	31 05       	cpc	r19, r1
     d06:	69 f0       	breq	.+26     	; 0xd22 <DIO_ReadPin+0x6e>
     d08:	5b c0       	rjmp	.+182    	; 0xdc0 <DIO_ReadPin+0x10c>
     d0a:	4e 81       	ldd	r20, Y+6	; 0x06
     d0c:	5f 81       	ldd	r21, Y+7	; 0x07
     d0e:	42 30       	cpi	r20, 0x02	; 2
     d10:	51 05       	cpc	r21, r1
     d12:	79 f1       	breq	.+94     	; 0xd72 <DIO_ReadPin+0xbe>
     d14:	8e 81       	ldd	r24, Y+6	; 0x06
     d16:	9f 81       	ldd	r25, Y+7	; 0x07
     d18:	83 30       	cpi	r24, 0x03	; 3
     d1a:	91 05       	cpc	r25, r1
     d1c:	09 f4       	brne	.+2      	; 0xd20 <DIO_ReadPin+0x6c>
     d1e:	3d c0       	rjmp	.+122    	; 0xd9a <DIO_ReadPin+0xe6>
     d20:	4f c0       	rjmp	.+158    	; 0xdc0 <DIO_ReadPin+0x10c>
		case PORTA :
			*(PinState) = Get_Bit(PORTA_STAT, PinNumber);
     d22:	e9 e3       	ldi	r30, 0x39	; 57
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	28 2f       	mov	r18, r24
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	8a 81       	ldd	r24, Y+2	; 0x02
     d2e:	88 2f       	mov	r24, r24
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	a9 01       	movw	r20, r18
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <DIO_ReadPin+0x86>
     d36:	55 95       	asr	r21
     d38:	47 95       	ror	r20
     d3a:	8a 95       	dec	r24
     d3c:	e2 f7       	brpl	.-8      	; 0xd36 <DIO_ReadPin+0x82>
     d3e:	ca 01       	movw	r24, r20
     d40:	81 70       	andi	r24, 0x01	; 1
     d42:	eb 81       	ldd	r30, Y+3	; 0x03
     d44:	fc 81       	ldd	r31, Y+4	; 0x04
     d46:	80 83       	st	Z, r24
     d48:	3b c0       	rjmp	.+118    	; 0xdc0 <DIO_ReadPin+0x10c>
			break;
		case PORTB :
			*(PinState) = Get_Bit(PORTB_STAT, PinNumber);
     d4a:	e6 e3       	ldi	r30, 0x36	; 54
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	28 2f       	mov	r18, r24
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	8a 81       	ldd	r24, Y+2	; 0x02
     d56:	88 2f       	mov	r24, r24
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	a9 01       	movw	r20, r18
     d5c:	02 c0       	rjmp	.+4      	; 0xd62 <DIO_ReadPin+0xae>
     d5e:	55 95       	asr	r21
     d60:	47 95       	ror	r20
     d62:	8a 95       	dec	r24
     d64:	e2 f7       	brpl	.-8      	; 0xd5e <DIO_ReadPin+0xaa>
     d66:	ca 01       	movw	r24, r20
     d68:	81 70       	andi	r24, 0x01	; 1
     d6a:	eb 81       	ldd	r30, Y+3	; 0x03
     d6c:	fc 81       	ldd	r31, Y+4	; 0x04
     d6e:	80 83       	st	Z, r24
     d70:	27 c0       	rjmp	.+78     	; 0xdc0 <DIO_ReadPin+0x10c>
			break;
		case PORTC :
			*(PinState) = Get_Bit(PORTC_STAT, PinNumber);
     d72:	e3 e3       	ldi	r30, 0x33	; 51
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	28 2f       	mov	r18, r24
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	8a 81       	ldd	r24, Y+2	; 0x02
     d7e:	88 2f       	mov	r24, r24
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	a9 01       	movw	r20, r18
     d84:	02 c0       	rjmp	.+4      	; 0xd8a <DIO_ReadPin+0xd6>
     d86:	55 95       	asr	r21
     d88:	47 95       	ror	r20
     d8a:	8a 95       	dec	r24
     d8c:	e2 f7       	brpl	.-8      	; 0xd86 <DIO_ReadPin+0xd2>
     d8e:	ca 01       	movw	r24, r20
     d90:	81 70       	andi	r24, 0x01	; 1
     d92:	eb 81       	ldd	r30, Y+3	; 0x03
     d94:	fc 81       	ldd	r31, Y+4	; 0x04
     d96:	80 83       	st	Z, r24
     d98:	13 c0       	rjmp	.+38     	; 0xdc0 <DIO_ReadPin+0x10c>
			break;
		case PORTD :
			*(PinState) = Get_Bit(PORTD_STAT, PinNumber);
     d9a:	e0 e3       	ldi	r30, 0x30	; 48
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	28 2f       	mov	r18, r24
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	8a 81       	ldd	r24, Y+2	; 0x02
     da6:	88 2f       	mov	r24, r24
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	a9 01       	movw	r20, r18
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <DIO_ReadPin+0xfe>
     dae:	55 95       	asr	r21
     db0:	47 95       	ror	r20
     db2:	8a 95       	dec	r24
     db4:	e2 f7       	brpl	.-8      	; 0xdae <DIO_ReadPin+0xfa>
     db6:	ca 01       	movw	r24, r20
     db8:	81 70       	andi	r24, 0x01	; 1
     dba:	eb 81       	ldd	r30, Y+3	; 0x03
     dbc:	fc 81       	ldd	r31, Y+4	; 0x04
     dbe:	80 83       	st	Z, r24
			break;

		} //END of SWITCH
		return E_DIO_SUCCESS ;
     dc0:	1d 82       	std	Y+5, r1	; 0x05
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <DIO_ReadPin+0x114>

	}	  //END of IF That checking the port and pin number

	else {
		return E_DIO_INVALID_PORT_NUMBER ;
     dc4:	51 e0       	ldi	r21, 0x01	; 1
     dc6:	5d 83       	std	Y+5, r21	; 0x05
     dc8:	8d 81       	ldd	r24, Y+5	; 0x05

	}	  //END of ELSE
}    //END of DIO_readPint
     dca:	27 96       	adiw	r28, 0x07	; 7
     dcc:	0f b6       	in	r0, 0x3f	; 63
     dce:	f8 94       	cli
     dd0:	de bf       	out	0x3e, r29	; 62
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	cd bf       	out	0x3d, r28	; 61
     dd6:	cf 91       	pop	r28
     dd8:	df 91       	pop	r29
     dda:	08 95       	ret

00000ddc <DIO_TogglePin>:

/* API to toggle pin*/
DIO_ERROR_state_t DIO_TogglePin(uint8_t PortID, uint8_t PinNumber){
     ddc:	df 93       	push	r29
     dde:	cf 93       	push	r28
     de0:	00 d0       	rcall	.+0      	; 0xde2 <DIO_TogglePin+0x6>
     de2:	00 d0       	rcall	.+0      	; 0xde4 <DIO_TogglePin+0x8>
     de4:	0f 92       	push	r0
     de6:	cd b7       	in	r28, 0x3d	; 61
     de8:	de b7       	in	r29, 0x3e	; 62
     dea:	89 83       	std	Y+1, r24	; 0x01
     dec:	6a 83       	std	Y+2, r22	; 0x02
	//Check for the ports if it is between 0 to 3
		if ((PortID <= PORTD ) && (PortID >= PORTA ) && (PinNumber >= PIN0 )
     dee:	89 81       	ldd	r24, Y+1	; 0x01
     df0:	84 30       	cpi	r24, 0x04	; 4
     df2:	08 f0       	brcs	.+2      	; 0xdf6 <DIO_TogglePin+0x1a>
     df4:	74 c0       	rjmp	.+232    	; 0xede <DIO_TogglePin+0x102>
     df6:	8a 81       	ldd	r24, Y+2	; 0x02
     df8:	88 30       	cpi	r24, 0x08	; 8
     dfa:	08 f0       	brcs	.+2      	; 0xdfe <DIO_TogglePin+0x22>
     dfc:	70 c0       	rjmp	.+224    	; 0xede <DIO_TogglePin+0x102>
				&& (PinNumber <= PIN7 )) {
			switch (PortID) {
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
     e00:	28 2f       	mov	r18, r24
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	3d 83       	std	Y+5, r19	; 0x05
     e06:	2c 83       	std	Y+4, r18	; 0x04
     e08:	8c 81       	ldd	r24, Y+4	; 0x04
     e0a:	9d 81       	ldd	r25, Y+5	; 0x05
     e0c:	81 30       	cpi	r24, 0x01	; 1
     e0e:	91 05       	cpc	r25, r1
     e10:	49 f1       	breq	.+82     	; 0xe64 <DIO_TogglePin+0x88>
     e12:	2c 81       	ldd	r18, Y+4	; 0x04
     e14:	3d 81       	ldd	r19, Y+5	; 0x05
     e16:	22 30       	cpi	r18, 0x02	; 2
     e18:	31 05       	cpc	r19, r1
     e1a:	2c f4       	brge	.+10     	; 0xe26 <DIO_TogglePin+0x4a>
     e1c:	8c 81       	ldd	r24, Y+4	; 0x04
     e1e:	9d 81       	ldd	r25, Y+5	; 0x05
     e20:	00 97       	sbiw	r24, 0x00	; 0
     e22:	61 f0       	breq	.+24     	; 0xe3c <DIO_TogglePin+0x60>
     e24:	5a c0       	rjmp	.+180    	; 0xeda <DIO_TogglePin+0xfe>
     e26:	2c 81       	ldd	r18, Y+4	; 0x04
     e28:	3d 81       	ldd	r19, Y+5	; 0x05
     e2a:	22 30       	cpi	r18, 0x02	; 2
     e2c:	31 05       	cpc	r19, r1
     e2e:	71 f1       	breq	.+92     	; 0xe8c <DIO_TogglePin+0xb0>
     e30:	8c 81       	ldd	r24, Y+4	; 0x04
     e32:	9d 81       	ldd	r25, Y+5	; 0x05
     e34:	83 30       	cpi	r24, 0x03	; 3
     e36:	91 05       	cpc	r25, r1
     e38:	e9 f1       	breq	.+122    	; 0xeb4 <DIO_TogglePin+0xd8>
     e3a:	4f c0       	rjmp	.+158    	; 0xeda <DIO_TogglePin+0xfe>
			case PORTA :
				Toggle_Bit(PORTA_DATA, PinNumber);
     e3c:	ab e3       	ldi	r26, 0x3B	; 59
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	eb e3       	ldi	r30, 0x3B	; 59
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	48 2f       	mov	r20, r24
     e48:	8a 81       	ldd	r24, Y+2	; 0x02
     e4a:	28 2f       	mov	r18, r24
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	02 2e       	mov	r0, r18
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <DIO_TogglePin+0x7e>
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	0a 94       	dec	r0
     e5c:	e2 f7       	brpl	.-8      	; 0xe56 <DIO_TogglePin+0x7a>
     e5e:	84 27       	eor	r24, r20
     e60:	8c 93       	st	X, r24
     e62:	3b c0       	rjmp	.+118    	; 0xeda <DIO_TogglePin+0xfe>
				break;
			case PORTB :
				Toggle_Bit(PORTB_DATA, PinNumber);
     e64:	a8 e3       	ldi	r26, 0x38	; 56
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e8 e3       	ldi	r30, 0x38	; 56
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	48 2f       	mov	r20, r24
     e70:	8a 81       	ldd	r24, Y+2	; 0x02
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 2e       	mov	r0, r18
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <DIO_TogglePin+0xa6>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <DIO_TogglePin+0xa2>
     e86:	84 27       	eor	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	27 c0       	rjmp	.+78     	; 0xeda <DIO_TogglePin+0xfe>
				break;
			case PORTC :
				Toggle_Bit(PORTC_DATA, PinNumber);
     e8c:	a5 e3       	ldi	r26, 0x35	; 53
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e5 e3       	ldi	r30, 0x35	; 53
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	48 2f       	mov	r20, r24
     e98:	8a 81       	ldd	r24, Y+2	; 0x02
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	02 2e       	mov	r0, r18
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <DIO_TogglePin+0xce>
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	0a 94       	dec	r0
     eac:	e2 f7       	brpl	.-8      	; 0xea6 <DIO_TogglePin+0xca>
     eae:	84 27       	eor	r24, r20
     eb0:	8c 93       	st	X, r24
     eb2:	13 c0       	rjmp	.+38     	; 0xeda <DIO_TogglePin+0xfe>
				break;
			case PORTD :
				Toggle_Bit(PORTD_DATA, PinNumber);
     eb4:	a2 e3       	ldi	r26, 0x32	; 50
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e2 e3       	ldi	r30, 0x32	; 50
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	48 2f       	mov	r20, r24
     ec0:	8a 81       	ldd	r24, Y+2	; 0x02
     ec2:	28 2f       	mov	r18, r24
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	02 2e       	mov	r0, r18
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <DIO_TogglePin+0xf6>
     ece:	88 0f       	add	r24, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	0a 94       	dec	r0
     ed4:	e2 f7       	brpl	.-8      	; 0xece <DIO_TogglePin+0xf2>
     ed6:	84 27       	eor	r24, r20
     ed8:	8c 93       	st	X, r24
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
     eda:	1b 82       	std	Y+3, r1	; 0x03
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <DIO_TogglePin+0x106>

		}	  //END of IF That checking the port and pin number

		else {
			return E_DIO_INVALID_PORT_NUMBER ;
     ede:	91 e0       	ldi	r25, 0x01	; 1
     ee0:	9b 83       	std	Y+3, r25	; 0x03
     ee2:	8b 81       	ldd	r24, Y+3	; 0x03

		}	  //END of ELSE

}
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	cf 91       	pop	r28
     ef0:	df 91       	pop	r29
     ef2:	08 95       	ret

00000ef4 <DIO_EnablePinPullup>:
DIO_ERROR_state_t DIO_EnablePinPullup(uint8_t PortID, uint8_t PinNumber){
     ef4:	df 93       	push	r29
     ef6:	cf 93       	push	r28
     ef8:	00 d0       	rcall	.+0      	; 0xefa <DIO_EnablePinPullup+0x6>
     efa:	00 d0       	rcall	.+0      	; 0xefc <DIO_EnablePinPullup+0x8>
     efc:	0f 92       	push	r0
     efe:	cd b7       	in	r28, 0x3d	; 61
     f00:	de b7       	in	r29, 0x3e	; 62
     f02:	89 83       	std	Y+1, r24	; 0x01
     f04:	6a 83       	std	Y+2, r22	; 0x02
	//Check for the ports if it is between 0 to 3
		if ((PortID <= PORTD ) && (PortID >= PORTA ) && (PinNumber >= PIN0 )
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	84 30       	cpi	r24, 0x04	; 4
     f0a:	08 f0       	brcs	.+2      	; 0xf0e <DIO_EnablePinPullup+0x1a>
     f0c:	d1 c0       	rjmp	.+418    	; 0x10b0 <DIO_EnablePinPullup+0x1bc>
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	88 30       	cpi	r24, 0x08	; 8
     f12:	08 f0       	brcs	.+2      	; 0xf16 <DIO_EnablePinPullup+0x22>
     f14:	cd c0       	rjmp	.+410    	; 0x10b0 <DIO_EnablePinPullup+0x1bc>
				&& (PinNumber <= PIN7 )) {
			switch (PortID) {
     f16:	89 81       	ldd	r24, Y+1	; 0x01
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	3d 83       	std	Y+5, r19	; 0x05
     f1e:	2c 83       	std	Y+4, r18	; 0x04
     f20:	4c 81       	ldd	r20, Y+4	; 0x04
     f22:	5d 81       	ldd	r21, Y+5	; 0x05
     f24:	41 30       	cpi	r20, 0x01	; 1
     f26:	51 05       	cpc	r21, r1
     f28:	09 f4       	brne	.+2      	; 0xf2c <DIO_EnablePinPullup+0x38>
     f2a:	42 c0       	rjmp	.+132    	; 0xfb0 <DIO_EnablePinPullup+0xbc>
     f2c:	8c 81       	ldd	r24, Y+4	; 0x04
     f2e:	9d 81       	ldd	r25, Y+5	; 0x05
     f30:	82 30       	cpi	r24, 0x02	; 2
     f32:	91 05       	cpc	r25, r1
     f34:	34 f4       	brge	.+12     	; 0xf42 <DIO_EnablePinPullup+0x4e>
     f36:	2c 81       	ldd	r18, Y+4	; 0x04
     f38:	3d 81       	ldd	r19, Y+5	; 0x05
     f3a:	21 15       	cp	r18, r1
     f3c:	31 05       	cpc	r19, r1
     f3e:	71 f0       	breq	.+28     	; 0xf5c <DIO_EnablePinPullup+0x68>
     f40:	b5 c0       	rjmp	.+362    	; 0x10ac <DIO_EnablePinPullup+0x1b8>
     f42:	4c 81       	ldd	r20, Y+4	; 0x04
     f44:	5d 81       	ldd	r21, Y+5	; 0x05
     f46:	42 30       	cpi	r20, 0x02	; 2
     f48:	51 05       	cpc	r21, r1
     f4a:	09 f4       	brne	.+2      	; 0xf4e <DIO_EnablePinPullup+0x5a>
     f4c:	5b c0       	rjmp	.+182    	; 0x1004 <DIO_EnablePinPullup+0x110>
     f4e:	8c 81       	ldd	r24, Y+4	; 0x04
     f50:	9d 81       	ldd	r25, Y+5	; 0x05
     f52:	83 30       	cpi	r24, 0x03	; 3
     f54:	91 05       	cpc	r25, r1
     f56:	09 f4       	brne	.+2      	; 0xf5a <DIO_EnablePinPullup+0x66>
     f58:	7f c0       	rjmp	.+254    	; 0x1058 <DIO_EnablePinPullup+0x164>
     f5a:	a8 c0       	rjmp	.+336    	; 0x10ac <DIO_EnablePinPullup+0x1b8>
			case PORTA :
				if(Get_Bit(PORTA_DIR, PinNumber)==PIN_INPUT){
     f5c:	ea e3       	ldi	r30, 0x3A	; 58
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	8a 81       	ldd	r24, Y+2	; 0x02
     f68:	88 2f       	mov	r24, r24
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	a9 01       	movw	r20, r18
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <DIO_EnablePinPullup+0x80>
     f70:	55 95       	asr	r21
     f72:	47 95       	ror	r20
     f74:	8a 95       	dec	r24
     f76:	e2 f7       	brpl	.-8      	; 0xf70 <DIO_EnablePinPullup+0x7c>
     f78:	ca 01       	movw	r24, r20
     f7a:	81 70       	andi	r24, 0x01	; 1
     f7c:	90 70       	andi	r25, 0x00	; 0
     f7e:	00 97       	sbiw	r24, 0x00	; 0
     f80:	a1 f4       	brne	.+40     	; 0xfaa <DIO_EnablePinPullup+0xb6>
					Set_Bit(PORTA_DATA, PinNumber);
     f82:	ab e3       	ldi	r26, 0x3B	; 59
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	eb e3       	ldi	r30, 0x3B	; 59
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	48 2f       	mov	r20, r24
     f8e:	8a 81       	ldd	r24, Y+2	; 0x02
     f90:	28 2f       	mov	r18, r24
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	02 2e       	mov	r0, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <DIO_EnablePinPullup+0xac>
     f9c:	88 0f       	add	r24, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	0a 94       	dec	r0
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <DIO_EnablePinPullup+0xa8>
     fa4:	84 2b       	or	r24, r20
     fa6:	8c 93       	st	X, r24
     fa8:	81 c0       	rjmp	.+258    	; 0x10ac <DIO_EnablePinPullup+0x1b8>
				}// END of IF which checking if the  pin is INPUT
				else{
					return E_DIO_SET_TO_NON_INPUT;
     faa:	53 e0       	ldi	r21, 0x03	; 3
     fac:	5b 83       	std	Y+3, r21	; 0x03
     fae:	82 c0       	rjmp	.+260    	; 0x10b4 <DIO_EnablePinPullup+0x1c0>
				}
				break;
			case PORTB :
				if(Get_Bit(PORTB_DIR, PinNumber)==PIN_INPUT){
     fb0:	e7 e3       	ldi	r30, 0x37	; 55
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	8a 81       	ldd	r24, Y+2	; 0x02
     fbc:	88 2f       	mov	r24, r24
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	a9 01       	movw	r20, r18
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <DIO_EnablePinPullup+0xd4>
     fc4:	55 95       	asr	r21
     fc6:	47 95       	ror	r20
     fc8:	8a 95       	dec	r24
     fca:	e2 f7       	brpl	.-8      	; 0xfc4 <DIO_EnablePinPullup+0xd0>
     fcc:	ca 01       	movw	r24, r20
     fce:	81 70       	andi	r24, 0x01	; 1
     fd0:	90 70       	andi	r25, 0x00	; 0
     fd2:	00 97       	sbiw	r24, 0x00	; 0
     fd4:	a1 f4       	brne	.+40     	; 0xffe <DIO_EnablePinPullup+0x10a>
					Set_Bit(PORTB_DATA, PinNumber);
     fd6:	a8 e3       	ldi	r26, 0x38	; 56
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	e8 e3       	ldi	r30, 0x38	; 56
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	48 2f       	mov	r20, r24
     fe2:	8a 81       	ldd	r24, Y+2	; 0x02
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	02 2e       	mov	r0, r18
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <DIO_EnablePinPullup+0x100>
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	0a 94       	dec	r0
     ff6:	e2 f7       	brpl	.-8      	; 0xff0 <DIO_EnablePinPullup+0xfc>
     ff8:	84 2b       	or	r24, r20
     ffa:	8c 93       	st	X, r24
     ffc:	57 c0       	rjmp	.+174    	; 0x10ac <DIO_EnablePinPullup+0x1b8>
				}// END of IF which checking if the  pin is INPUT
				else{
					return E_DIO_SET_TO_NON_INPUT;
     ffe:	53 e0       	ldi	r21, 0x03	; 3
    1000:	5b 83       	std	Y+3, r21	; 0x03
    1002:	58 c0       	rjmp	.+176    	; 0x10b4 <DIO_EnablePinPullup+0x1c0>
				}
				break;
			case PORTC :
				if(Get_Bit(PORTC_DIR, PinNumber)==PIN_INPUT){
    1004:	e4 e3       	ldi	r30, 0x34	; 52
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	88 2f       	mov	r24, r24
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	a9 01       	movw	r20, r18
    1016:	02 c0       	rjmp	.+4      	; 0x101c <DIO_EnablePinPullup+0x128>
    1018:	55 95       	asr	r21
    101a:	47 95       	ror	r20
    101c:	8a 95       	dec	r24
    101e:	e2 f7       	brpl	.-8      	; 0x1018 <DIO_EnablePinPullup+0x124>
    1020:	ca 01       	movw	r24, r20
    1022:	81 70       	andi	r24, 0x01	; 1
    1024:	90 70       	andi	r25, 0x00	; 0
    1026:	00 97       	sbiw	r24, 0x00	; 0
    1028:	a1 f4       	brne	.+40     	; 0x1052 <DIO_EnablePinPullup+0x15e>
					Set_Bit(PORTC_DATA, PinNumber);
    102a:	a5 e3       	ldi	r26, 0x35	; 53
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	e5 e3       	ldi	r30, 0x35	; 53
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	48 2f       	mov	r20, r24
    1036:	8a 81       	ldd	r24, Y+2	; 0x02
    1038:	28 2f       	mov	r18, r24
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	02 2e       	mov	r0, r18
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <DIO_EnablePinPullup+0x154>
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	0a 94       	dec	r0
    104a:	e2 f7       	brpl	.-8      	; 0x1044 <DIO_EnablePinPullup+0x150>
    104c:	84 2b       	or	r24, r20
    104e:	8c 93       	st	X, r24
    1050:	2d c0       	rjmp	.+90     	; 0x10ac <DIO_EnablePinPullup+0x1b8>
				}// END of IF which checking if the  pin is INPUT
				else{
					return E_DIO_SET_TO_NON_INPUT;
    1052:	53 e0       	ldi	r21, 0x03	; 3
    1054:	5b 83       	std	Y+3, r21	; 0x03
    1056:	2e c0       	rjmp	.+92     	; 0x10b4 <DIO_EnablePinPullup+0x1c0>
				}
				break;
			case PORTD :
				if(Get_Bit(PORTD_DIR, PinNumber)==PIN_INPUT){
    1058:	e1 e3       	ldi	r30, 0x31	; 49
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	88 2f       	mov	r24, r24
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	a9 01       	movw	r20, r18
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <DIO_EnablePinPullup+0x17c>
    106c:	55 95       	asr	r21
    106e:	47 95       	ror	r20
    1070:	8a 95       	dec	r24
    1072:	e2 f7       	brpl	.-8      	; 0x106c <DIO_EnablePinPullup+0x178>
    1074:	ca 01       	movw	r24, r20
    1076:	81 70       	andi	r24, 0x01	; 1
    1078:	90 70       	andi	r25, 0x00	; 0
    107a:	00 97       	sbiw	r24, 0x00	; 0
    107c:	a1 f4       	brne	.+40     	; 0x10a6 <DIO_EnablePinPullup+0x1b2>
					Set_Bit(PORTD_DATA, PinNumber);
    107e:	a2 e3       	ldi	r26, 0x32	; 50
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	e2 e3       	ldi	r30, 0x32	; 50
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	48 2f       	mov	r20, r24
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	28 2f       	mov	r18, r24
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	02 2e       	mov	r0, r18
    1096:	02 c0       	rjmp	.+4      	; 0x109c <DIO_EnablePinPullup+0x1a8>
    1098:	88 0f       	add	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	0a 94       	dec	r0
    109e:	e2 f7       	brpl	.-8      	; 0x1098 <DIO_EnablePinPullup+0x1a4>
    10a0:	84 2b       	or	r24, r20
    10a2:	8c 93       	st	X, r24
    10a4:	03 c0       	rjmp	.+6      	; 0x10ac <DIO_EnablePinPullup+0x1b8>
				}// END of IF which checking if the  pin is INPUT
				else{
					return E_DIO_SET_TO_NON_INPUT;
    10a6:	53 e0       	ldi	r21, 0x03	; 3
    10a8:	5b 83       	std	Y+3, r21	; 0x03
    10aa:	04 c0       	rjmp	.+8      	; 0x10b4 <DIO_EnablePinPullup+0x1c0>
				}
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
    10ac:	1b 82       	std	Y+3, r1	; 0x03
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <DIO_EnablePinPullup+0x1c0>

		}	  //END of IF That checking the port and pin number

		else {
			return E_DIO_INVALID_PORT_NUMBER ;
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	8b 83       	std	Y+3, r24	; 0x03
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03

		}	  //END of ELSE

}
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	cf 91       	pop	r28
    10c2:	df 91       	pop	r29
    10c4:	08 95       	ret

000010c6 <LED_Init>:
#define PIN_LOW  (uint8_t)0




uint8_t LED_Init(void){
    10c6:	df 93       	push	r29
    10c8:	cf 93       	push	r28
    10ca:	cd b7       	in	r28, 0x3d	; 61
    10cc:	de b7       	in	r29, 0x3e	; 62
#if LED_1
	DIO_SetPinDirection(LED_1_PORT,LED_1_PIN,PIN_OUTPUT);
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	60 e0       	ldi	r22, 0x00	; 0
    10d2:	41 e0       	ldi	r20, 0x01	; 1
    10d4:	0e 94 98 03 	call	0x730	; 0x730 <DIO_SetPinDirection>
#endif
#if LED_2
	DIO_SetPinDirection(LED_2_PORT,LED_2_PIN,PIN_OUTPUT);
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	61 e0       	ldi	r22, 0x01	; 1
    10dc:	41 e0       	ldi	r20, 0x01	; 1
    10de:	0e 94 98 03 	call	0x730	; 0x730 <DIO_SetPinDirection>
#endif
#if LED_3
	DIO_SetPinDirection(LED_3_PORT,LED_3_PIN,PIN_OUTPUT);
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	62 e0       	ldi	r22, 0x02	; 2
    10e6:	41 e0       	ldi	r20, 0x01	; 1
    10e8:	0e 94 98 03 	call	0x730	; 0x730 <DIO_SetPinDirection>
#endif
	return 0;
    10ec:	80 e0       	ldi	r24, 0x00	; 0
}
    10ee:	cf 91       	pop	r28
    10f0:	df 91       	pop	r29
    10f2:	08 95       	ret

000010f4 <LED_On>:
uint8_t LED_On(uint8_t LedNumber){
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	00 d0       	rcall	.+0      	; 0x10fa <LED_On+0x6>
    10fa:	0f 92       	push	r0
    10fc:	cd b7       	in	r28, 0x3d	; 61
    10fe:	de b7       	in	r29, 0x3e	; 62
    1100:	89 83       	std	Y+1, r24	; 0x01
	switch (LedNumber){
    1102:	89 81       	ldd	r24, Y+1	; 0x01
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	3b 83       	std	Y+3, r19	; 0x03
    110a:	2a 83       	std	Y+2, r18	; 0x02
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	9b 81       	ldd	r25, Y+3	; 0x03
    1110:	82 30       	cpi	r24, 0x02	; 2
    1112:	91 05       	cpc	r25, r1
    1114:	81 f0       	breq	.+32     	; 0x1136 <LED_On+0x42>
    1116:	2a 81       	ldd	r18, Y+2	; 0x02
    1118:	3b 81       	ldd	r19, Y+3	; 0x03
    111a:	23 30       	cpi	r18, 0x03	; 3
    111c:	31 05       	cpc	r19, r1
    111e:	89 f0       	breq	.+34     	; 0x1142 <LED_On+0x4e>
    1120:	8a 81       	ldd	r24, Y+2	; 0x02
    1122:	9b 81       	ldd	r25, Y+3	; 0x03
    1124:	81 30       	cpi	r24, 0x01	; 1
    1126:	91 05       	cpc	r25, r1
    1128:	89 f4       	brne	.+34     	; 0x114c <LED_On+0x58>
	case LED_1:
		DIO_WritePin(LED_1_PORT,LED_1_PIN,PIN_HIGH);
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	60 e0       	ldi	r22, 0x00	; 0
    112e:	41 e0       	ldi	r20, 0x01	; 1
    1130:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <DIO_WritePin>
    1134:	0b c0       	rjmp	.+22     	; 0x114c <LED_On+0x58>
		break;
	case LED_2:
		DIO_WritePin(LED_2_PORT,LED_2_PIN,PIN_HIGH);
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	61 e0       	ldi	r22, 0x01	; 1
    113a:	41 e0       	ldi	r20, 0x01	; 1
    113c:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <DIO_WritePin>
    1140:	05 c0       	rjmp	.+10     	; 0x114c <LED_On+0x58>
		break;
	case LED_3:
		DIO_WritePin(LED_3_PORT,LED_3_PIN,PIN_HIGH);
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	62 e0       	ldi	r22, 0x02	; 2
    1146:	41 e0       	ldi	r20, 0x01	; 1
    1148:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <DIO_WritePin>
		break;
	}
	return 0;
    114c:	80 e0       	ldi	r24, 0x00	; 0

}
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	cf 91       	pop	r28
    1156:	df 91       	pop	r29
    1158:	08 95       	ret

0000115a <LED_Off>:
uint8_t LED_Off(uint8_t LedNumber){
    115a:	df 93       	push	r29
    115c:	cf 93       	push	r28
    115e:	00 d0       	rcall	.+0      	; 0x1160 <LED_Off+0x6>
    1160:	0f 92       	push	r0
    1162:	cd b7       	in	r28, 0x3d	; 61
    1164:	de b7       	in	r29, 0x3e	; 62
    1166:	89 83       	std	Y+1, r24	; 0x01
	switch (LedNumber){
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	3b 83       	std	Y+3, r19	; 0x03
    1170:	2a 83       	std	Y+2, r18	; 0x02
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	9b 81       	ldd	r25, Y+3	; 0x03
    1176:	82 30       	cpi	r24, 0x02	; 2
    1178:	91 05       	cpc	r25, r1
    117a:	81 f0       	breq	.+32     	; 0x119c <LED_Off+0x42>
    117c:	2a 81       	ldd	r18, Y+2	; 0x02
    117e:	3b 81       	ldd	r19, Y+3	; 0x03
    1180:	23 30       	cpi	r18, 0x03	; 3
    1182:	31 05       	cpc	r19, r1
    1184:	89 f0       	breq	.+34     	; 0x11a8 <LED_Off+0x4e>
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	9b 81       	ldd	r25, Y+3	; 0x03
    118a:	81 30       	cpi	r24, 0x01	; 1
    118c:	91 05       	cpc	r25, r1
    118e:	89 f4       	brne	.+34     	; 0x11b2 <LED_Off+0x58>
	case LED_1:
		DIO_WritePin(LED_1_PORT,LED_1_PIN,PIN_LOW);
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	60 e0       	ldi	r22, 0x00	; 0
    1194:	40 e0       	ldi	r20, 0x00	; 0
    1196:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <DIO_WritePin>
    119a:	0b c0       	rjmp	.+22     	; 0x11b2 <LED_Off+0x58>
		break;
	case LED_2:
		DIO_WritePin(LED_2_PORT,LED_2_PIN,PIN_LOW);
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	61 e0       	ldi	r22, 0x01	; 1
    11a0:	40 e0       	ldi	r20, 0x00	; 0
    11a2:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <DIO_WritePin>
    11a6:	05 c0       	rjmp	.+10     	; 0x11b2 <LED_Off+0x58>
		break;
	case LED_3:
		DIO_WritePin(LED_3_PORT,LED_3_PIN,PIN_LOW);
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	62 e0       	ldi	r22, 0x02	; 2
    11ac:	40 e0       	ldi	r20, 0x00	; 0
    11ae:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <DIO_WritePin>
		break;
	}

	return 0;
    11b2:	80 e0       	ldi	r24, 0x00	; 0
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	cf 91       	pop	r28
    11bc:	df 91       	pop	r29
    11be:	08 95       	ret

000011c0 <LED_Toggle>:
uint8_t LED_Toggle(uint8_t LedNumber){
    11c0:	df 93       	push	r29
    11c2:	cf 93       	push	r28
    11c4:	00 d0       	rcall	.+0      	; 0x11c6 <LED_Toggle+0x6>
    11c6:	0f 92       	push	r0
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
    11cc:	89 83       	std	Y+1, r24	; 0x01
	switch (LedNumber){
    11ce:	89 81       	ldd	r24, Y+1	; 0x01
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	3b 83       	std	Y+3, r19	; 0x03
    11d6:	2a 83       	std	Y+2, r18	; 0x02
    11d8:	8a 81       	ldd	r24, Y+2	; 0x02
    11da:	9b 81       	ldd	r25, Y+3	; 0x03
    11dc:	82 30       	cpi	r24, 0x02	; 2
    11de:	91 05       	cpc	r25, r1
    11e0:	79 f0       	breq	.+30     	; 0x1200 <LED_Toggle+0x40>
    11e2:	2a 81       	ldd	r18, Y+2	; 0x02
    11e4:	3b 81       	ldd	r19, Y+3	; 0x03
    11e6:	23 30       	cpi	r18, 0x03	; 3
    11e8:	31 05       	cpc	r19, r1
    11ea:	79 f0       	breq	.+30     	; 0x120a <LED_Toggle+0x4a>
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	9b 81       	ldd	r25, Y+3	; 0x03
    11f0:	81 30       	cpi	r24, 0x01	; 1
    11f2:	91 05       	cpc	r25, r1
    11f4:	71 f4       	brne	.+28     	; 0x1212 <LED_Toggle+0x52>
	case LED_1:
		DIO_TogglePin(LED_1_PORT,LED_1_PIN);
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	60 e0       	ldi	r22, 0x00	; 0
    11fa:	0e 94 ee 06 	call	0xddc	; 0xddc <DIO_TogglePin>
    11fe:	09 c0       	rjmp	.+18     	; 0x1212 <LED_Toggle+0x52>
		break;
	case LED_2:
		DIO_TogglePin(LED_2_PORT,LED_2_PIN);
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	61 e0       	ldi	r22, 0x01	; 1
    1204:	0e 94 ee 06 	call	0xddc	; 0xddc <DIO_TogglePin>
    1208:	04 c0       	rjmp	.+8      	; 0x1212 <LED_Toggle+0x52>
		break;
	case LED_3:
		DIO_TogglePin(LED_3_PORT,LED_3_PIN);
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	62 e0       	ldi	r22, 0x02	; 2
    120e:	0e 94 ee 06 	call	0xddc	; 0xddc <DIO_TogglePin>
		break;
	}
	return 0;
    1212:	80 e0       	ldi	r24, 0x00	; 0

}
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	0f 90       	pop	r0
    121a:	cf 91       	pop	r28
    121c:	df 91       	pop	r29
    121e:	08 95       	ret

00001220 <LED_Status>:
uint8_t LED_Status(uint8_t LedNumber, uint8_t* LedState){
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	00 d0       	rcall	.+0      	; 0x1226 <LED_Status+0x6>
    1226:	00 d0       	rcall	.+0      	; 0x1228 <LED_Status+0x8>
    1228:	0f 92       	push	r0
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
    122e:	89 83       	std	Y+1, r24	; 0x01
    1230:	7b 83       	std	Y+3, r23	; 0x03
    1232:	6a 83       	std	Y+2, r22	; 0x02
	switch (LedNumber){
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	3d 83       	std	Y+5, r19	; 0x05
    123c:	2c 83       	std	Y+4, r18	; 0x04
    123e:	8c 81       	ldd	r24, Y+4	; 0x04
    1240:	9d 81       	ldd	r25, Y+5	; 0x05
    1242:	82 30       	cpi	r24, 0x02	; 2
    1244:	91 05       	cpc	r25, r1
    1246:	91 f0       	breq	.+36     	; 0x126c <LED_Status+0x4c>
    1248:	2c 81       	ldd	r18, Y+4	; 0x04
    124a:	3d 81       	ldd	r19, Y+5	; 0x05
    124c:	23 30       	cpi	r18, 0x03	; 3
    124e:	31 05       	cpc	r19, r1
    1250:	a9 f0       	breq	.+42     	; 0x127c <LED_Status+0x5c>
    1252:	8c 81       	ldd	r24, Y+4	; 0x04
    1254:	9d 81       	ldd	r25, Y+5	; 0x05
    1256:	81 30       	cpi	r24, 0x01	; 1
    1258:	91 05       	cpc	r25, r1
    125a:	b9 f4       	brne	.+46     	; 0x128a <LED_Status+0x6a>
	case LED_1:
		DIO_ReadPin(LED_1_PORT,LED_1_PIN,LedState);
    125c:	2a 81       	ldd	r18, Y+2	; 0x02
    125e:	3b 81       	ldd	r19, Y+3	; 0x03
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	60 e0       	ldi	r22, 0x00	; 0
    1264:	a9 01       	movw	r20, r18
    1266:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <DIO_ReadPin>
    126a:	0f c0       	rjmp	.+30     	; 0x128a <LED_Status+0x6a>
		break;
	case LED_2:
		DIO_ReadPin(LED_2_PORT,LED_2_PIN,LedState);
    126c:	2a 81       	ldd	r18, Y+2	; 0x02
    126e:	3b 81       	ldd	r19, Y+3	; 0x03
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	61 e0       	ldi	r22, 0x01	; 1
    1274:	a9 01       	movw	r20, r18
    1276:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <DIO_ReadPin>
    127a:	07 c0       	rjmp	.+14     	; 0x128a <LED_Status+0x6a>
		break;
	case LED_3:
		DIO_ReadPin(LED_3_PORT,LED_3_PIN,LedState);
    127c:	2a 81       	ldd	r18, Y+2	; 0x02
    127e:	3b 81       	ldd	r19, Y+3	; 0x03
    1280:	80 e0       	ldi	r24, 0x00	; 0
    1282:	62 e0       	ldi	r22, 0x02	; 2
    1284:	a9 01       	movw	r20, r18
    1286:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <DIO_ReadPin>
		break;
	}
	return 0;
    128a:	80 e0       	ldi	r24, 0x00	; 0

}
    128c:	0f 90       	pop	r0
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	cf 91       	pop	r28
    1298:	df 91       	pop	r29
    129a:	08 95       	ret

0000129c <App_Init>:
 *  Created on: Jul 18, 2021
 *      Author: Ahmed
 */
#include "spi_master_app.h"
uint8_t buffer[255];
void App_Init(void){
    129c:	df 93       	push	r29
    129e:	cf 93       	push	r28
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
	UART_Init(UART_1);
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	0e 94 3e 00 	call	0x7c	; 0x7c <UART_Init>
	SPI_Init(SPI_CH1);
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	0e 94 dd 01 	call	0x3ba	; 0x3ba <SPI_Init>

}
    12b0:	cf 91       	pop	r28
    12b2:	df 91       	pop	r29
    12b4:	08 95       	ret

000012b6 <App_Update>:
void App_Update(void){
    12b6:	df 93       	push	r29
    12b8:	cf 93       	push	r28
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
	while(1){
	UART_ReceiveString(UART_1,buffer);
    12be:	26 e6       	ldi	r18, 0x66	; 102
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	b9 01       	movw	r22, r18
    12c6:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_ReceiveString>
	SPI_TransmitString(SPI_CH1,buffer,SLAVE_CH1);
    12ca:	26 e6       	ldi	r18, 0x66	; 102
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	b9 01       	movw	r22, r18
    12d2:	40 e0       	ldi	r20, 0x00	; 0
    12d4:	0e 94 42 02 	call	0x484	; 0x484 <SPI_TransmitString>
    12d8:	f2 cf       	rjmp	.-28     	; 0x12be <App_Update+0x8>

000012da <main>:
/*- INCLUDES 
-----------------------------------------------*/

#include "App/MASTER_APP/spi_master_app.h"

int main(){
    12da:	df 93       	push	r29
    12dc:	cf 93       	push	r28
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
	App_Init();
    12e2:	0e 94 4e 09 	call	0x129c	; 0x129c <App_Init>
	while(1){
	App_Update();
    12e6:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <App_Update>
    12ea:	fd cf       	rjmp	.-6      	; 0x12e6 <main+0xc>

000012ec <_exit>:
    12ec:	f8 94       	cli

000012ee <__stop_program>:
    12ee:	ff cf       	rjmp	.-2      	; 0x12ee <__stop_program>
