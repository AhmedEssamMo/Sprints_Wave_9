
EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000066  00800060  00001b4a  00001bde  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000007b  008000c6  008000c6  00001c44  2**0
                  ALLOC
  3 .stab         00002e80  00000000  00000000  00001c44  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000140e  00000000  00000000  00004ac4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 89 06 	jmp	0xd12	; 0xd12 <__vector_1>
       8:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 b0 03 	jmp	0x760	; 0x760 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e4       	ldi	r30, 0x4A	; 74
      68:	fb e1       	ldi	r31, 0x1B	; 27
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3c       	cpi	r26, 0xC6	; 198
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 ec       	ldi	r26, 0xC6	; 198
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 34       	cpi	r26, 0x41	; 65
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <main>
      8a:	0c 94 a3 0d 	jmp	0x1b46	; 0x1b46 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_Init>:
Ptr_VoidFuncVoid_t Gptr_uartDataEmptyRegInt;
Ptr_VoidFuncVoid_t Gptr_uartTxInt;

/*APIs IMPLEMENTATION
 -------------------------*/
uint8_t UART_Init(uint8_t UartNumber) {
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	0f 92       	push	r0
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
      9c:	89 83       	std	Y+1, r24	; 0x01
#if RECEIVEING
	Set_Bit(UCSRB, RXEN);
      9e:	aa e2       	ldi	r26, 0x2A	; 42
      a0:	b0 e0       	ldi	r27, 0x00	; 0
      a2:	ea e2       	ldi	r30, 0x2A	; 42
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	80 61       	ori	r24, 0x10	; 16
      aa:	8c 93       	st	X, r24
#else
	Clr_Bit(UCSRB,RXEN);
#endif
#if TRANSMITTING
	Set_Bit(UCSRB, TXEN);
      ac:	aa e2       	ldi	r26, 0x2A	; 42
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	ea e2       	ldi	r30, 0x2A	; 42
      b2:	f0 e0       	ldi	r31, 0x00	; 0
      b4:	80 81       	ld	r24, Z
      b6:	88 60       	ori	r24, 0x08	; 8
      b8:	8c 93       	st	X, r24
	Clr_Bit(UCSRB,TXEN);
#endif
#if SPEED
	Set_Bit(UCSRA,U2X);
#else
	Clr_Bit(UCSRA, U2X);
      ba:	ab e2       	ldi	r26, 0x2B	; 43
      bc:	b0 e0       	ldi	r27, 0x00	; 0
      be:	eb e2       	ldi	r30, 0x2B	; 43
      c0:	f0 e0       	ldi	r31, 0x00	; 0
      c2:	80 81       	ld	r24, Z
      c4:	8d 7f       	andi	r24, 0xFD	; 253
      c6:	8c 93       	st	X, r24
#endif
#if NINE_BIT
	Set_Bit(UCSRB, UCSZ2);
#else
	Clr_Bit(UCSRB, UCSZ2);
      c8:	aa e2       	ldi	r26, 0x2A	; 42
      ca:	b0 e0       	ldi	r27, 0x00	; 0
      cc:	ea e2       	ldi	r30, 0x2A	; 42
      ce:	f0 e0       	ldi	r31, 0x00	; 0
      d0:	80 81       	ld	r24, Z
      d2:	8b 7f       	andi	r24, 0xFB	; 251
      d4:	8c 93       	st	X, r24
#endif
	UCSRC |= ((SYNCHRONIZATION ) & (STOP_BITS ) & (CHARACTER_SIZE )
      d6:	a0 e4       	ldi	r26, 0x40	; 64
      d8:	b0 e0       	ldi	r27, 0x00	; 0
      da:	e0 e4       	ldi	r30, 0x40	; 64
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	80 81       	ld	r24, Z
      e0:	86 68       	ori	r24, 0x86	; 134
      e2:	8c 93       	st	X, r24
			& (PARITY_MODE ) & (CLOCK_POLARITY ));
	UBRRL = BUAD_RATE;
      e4:	e9 e2       	ldi	r30, 0x29	; 41
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	83 e3       	ldi	r24, 0x33	; 51
      ea:	80 83       	st	Z, r24
	return 0;
      ec:	80 e0       	ldi	r24, 0x00	; 0
}
      ee:	0f 90       	pop	r0
      f0:	cf 91       	pop	r28
      f2:	df 91       	pop	r29
      f4:	08 95       	ret

000000f6 <UART_TransmitChar>:
uint8_t UART_TransmitChar(uint8_t UartNumber, uint8_t TxChar) {
      f6:	df 93       	push	r29
      f8:	cf 93       	push	r28
      fa:	00 d0       	rcall	.+0      	; 0xfc <UART_TransmitChar+0x6>
      fc:	cd b7       	in	r28, 0x3d	; 61
      fe:	de b7       	in	r29, 0x3e	; 62
     100:	89 83       	std	Y+1, r24	; 0x01
     102:	6a 83       	std	Y+2, r22	; 0x02
	UDR = TxChar;
     104:	ec e2       	ldi	r30, 0x2C	; 44
     106:	f0 e0       	ldi	r31, 0x00	; 0
     108:	8a 81       	ldd	r24, Y+2	; 0x02
     10a:	80 83       	st	Z, r24
	while ((Get_Bit(UCSRA, UDRE)) != 1) {
     10c:	eb e2       	ldi	r30, 0x2B	; 43
     10e:	f0 e0       	ldi	r31, 0x00	; 0
     110:	80 81       	ld	r24, Z
     112:	82 95       	swap	r24
     114:	86 95       	lsr	r24
     116:	87 70       	andi	r24, 0x07	; 7
     118:	88 2f       	mov	r24, r24
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	81 70       	andi	r24, 0x01	; 1
     11e:	90 70       	andi	r25, 0x00	; 0
     120:	00 97       	sbiw	r24, 0x00	; 0
     122:	a1 f3       	breq	.-24     	; 0x10c <UART_TransmitChar+0x16>
	}
	return 0;
     124:	80 e0       	ldi	r24, 0x00	; 0
}
     126:	0f 90       	pop	r0
     128:	0f 90       	pop	r0
     12a:	cf 91       	pop	r28
     12c:	df 91       	pop	r29
     12e:	08 95       	ret

00000130 <UART_TransmitString>:
uint8_t UART_TransmitString(uint8_t UartNumber, ptr_uint8_t TxString) {
     130:	df 93       	push	r29
     132:	cf 93       	push	r28
     134:	00 d0       	rcall	.+0      	; 0x136 <UART_TransmitString+0x6>
     136:	00 d0       	rcall	.+0      	; 0x138 <UART_TransmitString+0x8>
     138:	cd b7       	in	r28, 0x3d	; 61
     13a:	de b7       	in	r29, 0x3e	; 62
     13c:	8a 83       	std	Y+2, r24	; 0x02
     13e:	7c 83       	std	Y+4, r23	; 0x04
     140:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t counter = 0;
     142:	19 82       	std	Y+1, r1	; 0x01
     144:	1b c0       	rjmp	.+54     	; 0x17c <UART_TransmitString+0x4c>
	while ((*(TxString + counter)) != NULL_TERMINATOR) {
		UDR = *(TxString + counter); //TxString[counter]
     146:	ac e2       	ldi	r26, 0x2C	; 44
     148:	b0 e0       	ldi	r27, 0x00	; 0
     14a:	89 81       	ldd	r24, Y+1	; 0x01
     14c:	28 2f       	mov	r18, r24
     14e:	30 e0       	ldi	r19, 0x00	; 0
     150:	8b 81       	ldd	r24, Y+3	; 0x03
     152:	9c 81       	ldd	r25, Y+4	; 0x04
     154:	fc 01       	movw	r30, r24
     156:	e2 0f       	add	r30, r18
     158:	f3 1f       	adc	r31, r19
     15a:	80 81       	ld	r24, Z
     15c:	8c 93       	st	X, r24
		while ((Get_Bit(UCSRA, UDRE)) != 1)
     15e:	eb e2       	ldi	r30, 0x2B	; 43
     160:	f0 e0       	ldi	r31, 0x00	; 0
     162:	80 81       	ld	r24, Z
     164:	82 95       	swap	r24
     166:	86 95       	lsr	r24
     168:	87 70       	andi	r24, 0x07	; 7
     16a:	88 2f       	mov	r24, r24
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	81 70       	andi	r24, 0x01	; 1
     170:	90 70       	andi	r25, 0x00	; 0
     172:	00 97       	sbiw	r24, 0x00	; 0
     174:	a1 f3       	breq	.-24     	; 0x15e <UART_TransmitString+0x2e>
			;
		counter++;
     176:	89 81       	ldd	r24, Y+1	; 0x01
     178:	8f 5f       	subi	r24, 0xFF	; 255
     17a:	89 83       	std	Y+1, r24	; 0x01
	}
	return 0;
}
uint8_t UART_TransmitString(uint8_t UartNumber, ptr_uint8_t TxString) {
	uint8_t counter = 0;
	while ((*(TxString + counter)) != NULL_TERMINATOR) {
     17c:	89 81       	ldd	r24, Y+1	; 0x01
     17e:	28 2f       	mov	r18, r24
     180:	30 e0       	ldi	r19, 0x00	; 0
     182:	8b 81       	ldd	r24, Y+3	; 0x03
     184:	9c 81       	ldd	r25, Y+4	; 0x04
     186:	fc 01       	movw	r30, r24
     188:	e2 0f       	add	r30, r18
     18a:	f3 1f       	adc	r31, r19
     18c:	80 81       	ld	r24, Z
     18e:	88 23       	and	r24, r24
     190:	d1 f6       	brne	.-76     	; 0x146 <UART_TransmitString+0x16>
		UDR = *(TxString + counter); //TxString[counter]
		while ((Get_Bit(UCSRA, UDRE)) != 1)
			;
		counter++;
	}
	UDR = '\r'; //TxString[counter]
     192:	ec e2       	ldi	r30, 0x2C	; 44
     194:	f0 e0       	ldi	r31, 0x00	; 0
     196:	8d e0       	ldi	r24, 0x0D	; 13
     198:	80 83       	st	Z, r24
	while ((Get_Bit(UCSRA, UDRE)) != 1)
     19a:	eb e2       	ldi	r30, 0x2B	; 43
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	80 81       	ld	r24, Z
     1a0:	82 95       	swap	r24
     1a2:	86 95       	lsr	r24
     1a4:	87 70       	andi	r24, 0x07	; 7
     1a6:	88 2f       	mov	r24, r24
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	81 70       	andi	r24, 0x01	; 1
     1ac:	90 70       	andi	r25, 0x00	; 0
     1ae:	00 97       	sbiw	r24, 0x00	; 0
     1b0:	a1 f3       	breq	.-24     	; 0x19a <UART_TransmitString+0x6a>
		;
	return 0;
     1b2:	80 e0       	ldi	r24, 0x00	; 0
}
     1b4:	0f 90       	pop	r0
     1b6:	0f 90       	pop	r0
     1b8:	0f 90       	pop	r0
     1ba:	0f 90       	pop	r0
     1bc:	cf 91       	pop	r28
     1be:	df 91       	pop	r29
     1c0:	08 95       	ret

000001c2 <UART_ReceiveChar>:
uint8_t UART_ReceiveChar(uint8_t UartNumber, ptr_uint8_t RxChar) {
     1c2:	df 93       	push	r29
     1c4:	cf 93       	push	r28
     1c6:	00 d0       	rcall	.+0      	; 0x1c8 <UART_ReceiveChar+0x6>
     1c8:	0f 92       	push	r0
     1ca:	cd b7       	in	r28, 0x3d	; 61
     1cc:	de b7       	in	r29, 0x3e	; 62
     1ce:	89 83       	std	Y+1, r24	; 0x01
     1d0:	7b 83       	std	Y+3, r23	; 0x03
     1d2:	6a 83       	std	Y+2, r22	; 0x02

	while (!(UCSRA & (1 << RXC )))
     1d4:	eb e2       	ldi	r30, 0x2B	; 43
     1d6:	f0 e0       	ldi	r31, 0x00	; 0
     1d8:	80 81       	ld	r24, Z
     1da:	88 23       	and	r24, r24
     1dc:	dc f7       	brge	.-10     	; 0x1d4 <UART_ReceiveChar+0x12>
		;
	*(RxChar) = (uint8_t) UDR;
     1de:	ec e2       	ldi	r30, 0x2C	; 44
     1e0:	f0 e0       	ldi	r31, 0x00	; 0
     1e2:	80 81       	ld	r24, Z
     1e4:	ea 81       	ldd	r30, Y+2	; 0x02
     1e6:	fb 81       	ldd	r31, Y+3	; 0x03
     1e8:	80 83       	st	Z, r24

	return 0;
     1ea:	80 e0       	ldi	r24, 0x00	; 0
}
     1ec:	0f 90       	pop	r0
     1ee:	0f 90       	pop	r0
     1f0:	0f 90       	pop	r0
     1f2:	cf 91       	pop	r28
     1f4:	df 91       	pop	r29
     1f6:	08 95       	ret

000001f8 <UART_ReceiveString>:
uint8_t UART_ReceiveString(uint8_t UartNumber, ptr_uint8_t RxString) {
     1f8:	df 93       	push	r29
     1fa:	cf 93       	push	r28
     1fc:	00 d0       	rcall	.+0      	; 0x1fe <UART_ReceiveString+0x6>
     1fe:	00 d0       	rcall	.+0      	; 0x200 <UART_ReceiveString+0x8>
     200:	cd b7       	in	r28, 0x3d	; 61
     202:	de b7       	in	r29, 0x3e	; 62
     204:	8a 83       	std	Y+2, r24	; 0x02
     206:	7c 83       	std	Y+4, r23	; 0x04
     208:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t counter = 0;
     20a:	19 82       	std	Y+1, r1	; 0x01
	while (1) {
		while (!(UCSRA & (1 << RXC )))
     20c:	eb e2       	ldi	r30, 0x2B	; 43
     20e:	f0 e0       	ldi	r31, 0x00	; 0
     210:	80 81       	ld	r24, Z
     212:	88 23       	and	r24, r24
     214:	dc f7       	brge	.-10     	; 0x20c <UART_ReceiveString+0x14>
			;
		RxString[counter] = UDR;
     216:	89 81       	ldd	r24, Y+1	; 0x01
     218:	28 2f       	mov	r18, r24
     21a:	30 e0       	ldi	r19, 0x00	; 0
     21c:	8b 81       	ldd	r24, Y+3	; 0x03
     21e:	9c 81       	ldd	r25, Y+4	; 0x04
     220:	dc 01       	movw	r26, r24
     222:	a2 0f       	add	r26, r18
     224:	b3 1f       	adc	r27, r19
     226:	ec e2       	ldi	r30, 0x2C	; 44
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	80 81       	ld	r24, Z
     22c:	8c 93       	st	X, r24
		if (RxString[counter] == (NEW_LINE)) {
     22e:	89 81       	ldd	r24, Y+1	; 0x01
     230:	28 2f       	mov	r18, r24
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	8b 81       	ldd	r24, Y+3	; 0x03
     236:	9c 81       	ldd	r25, Y+4	; 0x04
     238:	fc 01       	movw	r30, r24
     23a:	e2 0f       	add	r30, r18
     23c:	f3 1f       	adc	r31, r19
     23e:	80 81       	ld	r24, Z
     240:	8d 30       	cpi	r24, 0x0D	; 13
     242:	89 f4       	brne	.+34     	; 0x266 <UART_ReceiveString+0x6e>
			RxString[counter] = NULL_TERMINATOR;
     244:	89 81       	ldd	r24, Y+1	; 0x01
     246:	28 2f       	mov	r18, r24
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	8b 81       	ldd	r24, Y+3	; 0x03
     24c:	9c 81       	ldd	r25, Y+4	; 0x04
     24e:	fc 01       	movw	r30, r24
     250:	e2 0f       	add	r30, r18
     252:	f3 1f       	adc	r31, r19
     254:	10 82       	st	Z, r1
		}
		//UART_TransmitChar(UART_1,*(RxString+counter));
	}

	//*(RxString+counter)='\n';
	return 0;
     256:	80 e0       	ldi	r24, 0x00	; 0
}
     258:	0f 90       	pop	r0
     25a:	0f 90       	pop	r0
     25c:	0f 90       	pop	r0
     25e:	0f 90       	pop	r0
     260:	cf 91       	pop	r28
     262:	df 91       	pop	r29
     264:	08 95       	ret
		RxString[counter] = UDR;
		if (RxString[counter] == (NEW_LINE)) {
			RxString[counter] = NULL_TERMINATOR;
			break;
		}
		counter++;
     266:	89 81       	ldd	r24, Y+1	; 0x01
     268:	8f 5f       	subi	r24, 0xFF	; 255
     26a:	89 83       	std	Y+1, r24	; 0x01
		if ((RxString[counter-1] == (BACKSPACE)) && counter > 1) {
     26c:	89 81       	ldd	r24, Y+1	; 0x01
     26e:	88 2f       	mov	r24, r24
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	9c 01       	movw	r18, r24
     274:	21 50       	subi	r18, 0x01	; 1
     276:	30 40       	sbci	r19, 0x00	; 0
     278:	8b 81       	ldd	r24, Y+3	; 0x03
     27a:	9c 81       	ldd	r25, Y+4	; 0x04
     27c:	fc 01       	movw	r30, r24
     27e:	e2 0f       	add	r30, r18
     280:	f3 1f       	adc	r31, r19
     282:	80 81       	ld	r24, Z
     284:	88 30       	cpi	r24, 0x08	; 8
     286:	39 f4       	brne	.+14     	; 0x296 <UART_ReceiveString+0x9e>
     288:	89 81       	ldd	r24, Y+1	; 0x01
     28a:	82 30       	cpi	r24, 0x02	; 2
     28c:	20 f0       	brcs	.+8      	; 0x296 <UART_ReceiveString+0x9e>
			counter = counter - 2;
     28e:	89 81       	ldd	r24, Y+1	; 0x01
     290:	82 50       	subi	r24, 0x02	; 2
     292:	89 83       	std	Y+1, r24	; 0x01
     294:	bb cf       	rjmp	.-138    	; 0x20c <UART_ReceiveString+0x14>
		} else if ((RxString[counter-1] == (BACKSPACE)) && counter <= 1) {
     296:	89 81       	ldd	r24, Y+1	; 0x01
     298:	88 2f       	mov	r24, r24
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	9c 01       	movw	r18, r24
     29e:	21 50       	subi	r18, 0x01	; 1
     2a0:	30 40       	sbci	r19, 0x00	; 0
     2a2:	8b 81       	ldd	r24, Y+3	; 0x03
     2a4:	9c 81       	ldd	r25, Y+4	; 0x04
     2a6:	fc 01       	movw	r30, r24
     2a8:	e2 0f       	add	r30, r18
     2aa:	f3 1f       	adc	r31, r19
     2ac:	80 81       	ld	r24, Z
     2ae:	88 30       	cpi	r24, 0x08	; 8
     2b0:	09 f0       	breq	.+2      	; 0x2b4 <UART_ReceiveString+0xbc>
     2b2:	ac cf       	rjmp	.-168    	; 0x20c <UART_ReceiveString+0x14>
     2b4:	89 81       	ldd	r24, Y+1	; 0x01
     2b6:	82 30       	cpi	r24, 0x02	; 2
     2b8:	08 f0       	brcs	.+2      	; 0x2bc <UART_ReceiveString+0xc4>
     2ba:	a8 cf       	rjmp	.-176    	; 0x20c <UART_ReceiveString+0x14>
			counter = 0;
     2bc:	19 82       	std	Y+1, r1	; 0x01
     2be:	a6 cf       	rjmp	.-180    	; 0x20c <UART_ReceiveString+0x14>

000002c0 <UART_EnableInterrupt>:
	}

	//*(RxString+counter)='\n';
	return 0;
}
uint8_t UART_EnableInterrupt(uint8_t UartNumber, uint8_t UartInterruptType) {
     2c0:	df 93       	push	r29
     2c2:	cf 93       	push	r28
     2c4:	00 d0       	rcall	.+0      	; 0x2c6 <UART_EnableInterrupt+0x6>
     2c6:	00 d0       	rcall	.+0      	; 0x2c8 <UART_EnableInterrupt+0x8>
     2c8:	cd b7       	in	r28, 0x3d	; 61
     2ca:	de b7       	in	r29, 0x3e	; 62
     2cc:	89 83       	std	Y+1, r24	; 0x01
     2ce:	6a 83       	std	Y+2, r22	; 0x02
	switch (UartNumber) {
     2d0:	89 81       	ldd	r24, Y+1	; 0x01
     2d2:	88 2f       	mov	r24, r24
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	00 97       	sbiw	r24, 0x00	; 0
     2d8:	51 f5       	brne	.+84     	; 0x32e <UART_EnableInterrupt+0x6e>
	case UART_1 :
		switch (UartInterruptType) {
     2da:	8a 81       	ldd	r24, Y+2	; 0x02
     2dc:	28 2f       	mov	r18, r24
     2de:	30 e0       	ldi	r19, 0x00	; 0
     2e0:	3c 83       	std	Y+4, r19	; 0x04
     2e2:	2b 83       	std	Y+3, r18	; 0x03
     2e4:	8b 81       	ldd	r24, Y+3	; 0x03
     2e6:	9c 81       	ldd	r25, Y+4	; 0x04
     2e8:	81 30       	cpi	r24, 0x01	; 1
     2ea:	91 05       	cpc	r25, r1
     2ec:	89 f0       	breq	.+34     	; 0x310 <UART_EnableInterrupt+0x50>
     2ee:	2b 81       	ldd	r18, Y+3	; 0x03
     2f0:	3c 81       	ldd	r19, Y+4	; 0x04
     2f2:	22 30       	cpi	r18, 0x02	; 2
     2f4:	31 05       	cpc	r19, r1
     2f6:	a1 f0       	breq	.+40     	; 0x320 <UART_EnableInterrupt+0x60>
     2f8:	8b 81       	ldd	r24, Y+3	; 0x03
     2fa:	9c 81       	ldd	r25, Y+4	; 0x04
     2fc:	00 97       	sbiw	r24, 0x00	; 0
     2fe:	b9 f4       	brne	.+46     	; 0x32e <UART_EnableInterrupt+0x6e>
		case RECIVE_INT :
			Set_Bit(UCSRB, RXCIE);
     300:	aa e2       	ldi	r26, 0x2A	; 42
     302:	b0 e0       	ldi	r27, 0x00	; 0
     304:	ea e2       	ldi	r30, 0x2A	; 42
     306:	f0 e0       	ldi	r31, 0x00	; 0
     308:	80 81       	ld	r24, Z
     30a:	80 68       	ori	r24, 0x80	; 128
     30c:	8c 93       	st	X, r24
     30e:	0f c0       	rjmp	.+30     	; 0x32e <UART_EnableInterrupt+0x6e>
			break;
		case TRANSMIT_INT :
			Set_Bit(UCSRB, TXCIE);
     310:	aa e2       	ldi	r26, 0x2A	; 42
     312:	b0 e0       	ldi	r27, 0x00	; 0
     314:	ea e2       	ldi	r30, 0x2A	; 42
     316:	f0 e0       	ldi	r31, 0x00	; 0
     318:	80 81       	ld	r24, Z
     31a:	80 64       	ori	r24, 0x40	; 64
     31c:	8c 93       	st	X, r24
     31e:	07 c0       	rjmp	.+14     	; 0x32e <UART_EnableInterrupt+0x6e>
			break;
		case EMPTY_BUFFERR_INT :
			Set_Bit(UCSRB, UDRIE);
     320:	aa e2       	ldi	r26, 0x2A	; 42
     322:	b0 e0       	ldi	r27, 0x00	; 0
     324:	ea e2       	ldi	r30, 0x2A	; 42
     326:	f0 e0       	ldi	r31, 0x00	; 0
     328:	80 81       	ld	r24, Z
     32a:	80 62       	ori	r24, 0x20	; 32
     32c:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
	return 0;
     32e:	80 e0       	ldi	r24, 0x00	; 0
}
     330:	0f 90       	pop	r0
     332:	0f 90       	pop	r0
     334:	0f 90       	pop	r0
     336:	0f 90       	pop	r0
     338:	cf 91       	pop	r28
     33a:	df 91       	pop	r29
     33c:	08 95       	ret

0000033e <UART_DisableInterrupt>:
uint8_t UART_DisableInterrupt(uint8_t UartNumber, uint8_t UartInterruptType) {
     33e:	df 93       	push	r29
     340:	cf 93       	push	r28
     342:	00 d0       	rcall	.+0      	; 0x344 <UART_DisableInterrupt+0x6>
     344:	00 d0       	rcall	.+0      	; 0x346 <UART_DisableInterrupt+0x8>
     346:	cd b7       	in	r28, 0x3d	; 61
     348:	de b7       	in	r29, 0x3e	; 62
     34a:	89 83       	std	Y+1, r24	; 0x01
     34c:	6a 83       	std	Y+2, r22	; 0x02
	switch (UartNumber) {
     34e:	89 81       	ldd	r24, Y+1	; 0x01
     350:	88 2f       	mov	r24, r24
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	00 97       	sbiw	r24, 0x00	; 0
     356:	51 f5       	brne	.+84     	; 0x3ac <UART_DisableInterrupt+0x6e>
	case UART_1 :
		switch (UartInterruptType) {
     358:	8a 81       	ldd	r24, Y+2	; 0x02
     35a:	28 2f       	mov	r18, r24
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	3c 83       	std	Y+4, r19	; 0x04
     360:	2b 83       	std	Y+3, r18	; 0x03
     362:	8b 81       	ldd	r24, Y+3	; 0x03
     364:	9c 81       	ldd	r25, Y+4	; 0x04
     366:	81 30       	cpi	r24, 0x01	; 1
     368:	91 05       	cpc	r25, r1
     36a:	89 f0       	breq	.+34     	; 0x38e <UART_DisableInterrupt+0x50>
     36c:	2b 81       	ldd	r18, Y+3	; 0x03
     36e:	3c 81       	ldd	r19, Y+4	; 0x04
     370:	22 30       	cpi	r18, 0x02	; 2
     372:	31 05       	cpc	r19, r1
     374:	a1 f0       	breq	.+40     	; 0x39e <UART_DisableInterrupt+0x60>
     376:	8b 81       	ldd	r24, Y+3	; 0x03
     378:	9c 81       	ldd	r25, Y+4	; 0x04
     37a:	00 97       	sbiw	r24, 0x00	; 0
     37c:	b9 f4       	brne	.+46     	; 0x3ac <UART_DisableInterrupt+0x6e>
		case RECIVE_INT :
			Clr_Bit(UCSRB, RXCIE);
     37e:	aa e2       	ldi	r26, 0x2A	; 42
     380:	b0 e0       	ldi	r27, 0x00	; 0
     382:	ea e2       	ldi	r30, 0x2A	; 42
     384:	f0 e0       	ldi	r31, 0x00	; 0
     386:	80 81       	ld	r24, Z
     388:	8f 77       	andi	r24, 0x7F	; 127
     38a:	8c 93       	st	X, r24
     38c:	0f c0       	rjmp	.+30     	; 0x3ac <UART_DisableInterrupt+0x6e>
			break;
		case TRANSMIT_INT :
			Clr_Bit(UCSRB, TXCIE);
     38e:	aa e2       	ldi	r26, 0x2A	; 42
     390:	b0 e0       	ldi	r27, 0x00	; 0
     392:	ea e2       	ldi	r30, 0x2A	; 42
     394:	f0 e0       	ldi	r31, 0x00	; 0
     396:	80 81       	ld	r24, Z
     398:	8f 7b       	andi	r24, 0xBF	; 191
     39a:	8c 93       	st	X, r24
     39c:	07 c0       	rjmp	.+14     	; 0x3ac <UART_DisableInterrupt+0x6e>
			break;
		case EMPTY_BUFFERR_INT :
			Clr_Bit(UCSRB, UDRIE);
     39e:	aa e2       	ldi	r26, 0x2A	; 42
     3a0:	b0 e0       	ldi	r27, 0x00	; 0
     3a2:	ea e2       	ldi	r30, 0x2A	; 42
     3a4:	f0 e0       	ldi	r31, 0x00	; 0
     3a6:	80 81       	ld	r24, Z
     3a8:	8f 7d       	andi	r24, 0xDF	; 223
     3aa:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
	return 0;
     3ac:	80 e0       	ldi	r24, 0x00	; 0
}
     3ae:	0f 90       	pop	r0
     3b0:	0f 90       	pop	r0
     3b2:	0f 90       	pop	r0
     3b4:	0f 90       	pop	r0
     3b6:	cf 91       	pop	r28
     3b8:	df 91       	pop	r29
     3ba:	08 95       	ret

000003bc <TWI_SetSlaveAddress>:
#define SEND_START 0b00100000
#define SEND_ACK   0b01000000
#define CLR_FLAG   0b10000000

/*----APIs IMPLEMENTATION----*/
uint8_t TWI_SetSlaveAddress(uint8_t I2C_CH) {
     3bc:	df 93       	push	r29
     3be:	cf 93       	push	r28
     3c0:	0f 92       	push	r0
     3c2:	cd b7       	in	r28, 0x3d	; 61
     3c4:	de b7       	in	r29, 0x3e	; 62
     3c6:	89 83       	std	Y+1, r24	; 0x01
	TWI_Adress_REGISTER = (SlaveAddr << 1); //Shift the register left
     3c8:	e2 e2       	ldi	r30, 0x22	; 34
     3ca:	f0 e0       	ldi	r31, 0x00	; 0
     3cc:	80 e3       	ldi	r24, 0x30	; 48
     3ce:	80 83       	st	Z, r24
	return 0;
     3d0:	80 e0       	ldi	r24, 0x00	; 0
}
     3d2:	0f 90       	pop	r0
     3d4:	cf 91       	pop	r28
     3d6:	df 91       	pop	r29
     3d8:	08 95       	ret

000003da <TWI_Init>:
uint8_t TWI_Init(uint8_t I2C_CH) {
     3da:	df 93       	push	r29
     3dc:	cf 93       	push	r28
     3de:	0f 92       	push	r0
     3e0:	cd b7       	in	r28, 0x3d	; 61
     3e2:	de b7       	in	r29, 0x3e	; 62
     3e4:	89 83       	std	Y+1, r24	; 0x01
	/*-----SET ADDRESS IN CASE OF IT'S IN SLAVE MODE---- */
	TWI_SetSlaveAddress(I2C_CH);
     3e6:	89 81       	ldd	r24, Y+1	; 0x01
     3e8:	0e 94 de 01 	call	0x3bc	; 0x3bc <TWI_SetSlaveAddress>
	/*-----SETTING THE FREQ-----*/
	TWI_Bit_Rate_REGISTER = Bit_rate;
     3ec:	e0 e2       	ldi	r30, 0x20	; 32
     3ee:	f0 e0       	ldi	r31, 0x00	; 0
     3f0:	8e e1       	ldi	r24, 0x1E	; 30
     3f2:	80 83       	st	Z, r24
	TWI_Status_REGISTER &= Prescaler;
     3f4:	a1 e2       	ldi	r26, 0x21	; 33
     3f6:	b0 e0       	ldi	r27, 0x00	; 0
     3f8:	e1 e2       	ldi	r30, 0x21	; 33
     3fa:	f0 e0       	ldi	r31, 0x00	; 0
     3fc:	80 81       	ld	r24, Z
     3fe:	8c 7f       	andi	r24, 0xFC	; 252
     400:	8c 93       	st	X, r24
	/*Initial Value for TWI_Control_REGISTER is zeros so I set only what I need and ignore the rest*/
	/*-----ENABLE ACKNOWLEDGE----*/
	Set_Bit(TWI_Control_REGISTER, TWEA);
     402:	a6 e5       	ldi	r26, 0x56	; 86
     404:	b0 e0       	ldi	r27, 0x00	; 0
     406:	e6 e5       	ldi	r30, 0x56	; 86
     408:	f0 e0       	ldi	r31, 0x00	; 0
     40a:	80 81       	ld	r24, Z
     40c:	80 64       	ori	r24, 0x40	; 64
     40e:	8c 93       	st	X, r24
	/*-----ENABLE THE PREIPHERAL ITSELF-----*/
	Set_Bit(TWI_Control_REGISTER, TWEN);
     410:	a6 e5       	ldi	r26, 0x56	; 86
     412:	b0 e0       	ldi	r27, 0x00	; 0
     414:	e6 e5       	ldi	r30, 0x56	; 86
     416:	f0 e0       	ldi	r31, 0x00	; 0
     418:	80 81       	ld	r24, Z
     41a:	84 60       	ori	r24, 0x04	; 4
     41c:	8c 93       	st	X, r24
	return 0;
     41e:	80 e0       	ldi	r24, 0x00	; 0
}
     420:	0f 90       	pop	r0
     422:	cf 91       	pop	r28
     424:	df 91       	pop	r29
     426:	08 95       	ret

00000428 <TWI_SendStartCondition>:
uint8_t TWI_SendStartCondition(uint8_t I2C_CH) {
     428:	df 93       	push	r29
     42a:	cf 93       	push	r28
     42c:	00 d0       	rcall	.+0      	; 0x42e <TWI_SendStartCondition+0x6>
     42e:	0f 92       	push	r0
     430:	cd b7       	in	r28, 0x3d	; 61
     432:	de b7       	in	r29, 0x3e	; 62
     434:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t ErrStatus = 0;
     436:	19 82       	std	Y+1, r1	; 0x01
	TWI_Control_REGISTER = (EN_TWI | SEND_START | CLR_FLAG);
     438:	e6 e5       	ldi	r30, 0x56	; 86
     43a:	f0 e0       	ldi	r31, 0x00	; 0
     43c:	84 ea       	ldi	r24, 0xA4	; 164
     43e:	80 83       	st	Z, r24
	while ((Get_Bit(TWI_Control_REGISTER, TWINT)) != 1)
     440:	e6 e5       	ldi	r30, 0x56	; 86
     442:	f0 e0       	ldi	r31, 0x00	; 0
     444:	80 81       	ld	r24, Z
     446:	88 1f       	adc	r24, r24
     448:	88 27       	eor	r24, r24
     44a:	88 1f       	adc	r24, r24
     44c:	81 30       	cpi	r24, 0x01	; 1
     44e:	c1 f7       	brne	.-16     	; 0x440 <TWI_SendStartCondition+0x18>
		;/*Wait for TWINT Flag set.
		 This indicates that the START condition has been transmitted*/
	ErrStatus = (TWI_Status_REGISTER & 0xf8); //0b11111000
     450:	e1 e2       	ldi	r30, 0x21	; 33
     452:	f0 e0       	ldi	r31, 0x00	; 0
     454:	80 81       	ld	r24, Z
     456:	88 7f       	andi	r24, 0xF8	; 248
     458:	89 83       	std	Y+1, r24	; 0x01
	if (ErrStatus == ST_CONDITION) {
     45a:	89 81       	ldd	r24, Y+1	; 0x01
     45c:	88 30       	cpi	r24, 0x08	; 8
     45e:	11 f4       	brne	.+4      	; 0x464 <__stack+0x5>
//		UART_TransmitString(UART_1, "START CONDITION SENT\r");
		return 0; //STATR CONDITION HAS BEEN SENT
     460:	1b 82       	std	Y+3, r1	; 0x03
     462:	02 c0       	rjmp	.+4      	; 0x468 <__stack+0x9>
	} else {
//		UART_TransmitString(UART_1, "START CONDITION NOT SENT\r");
		return 1; //ERROR
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	8b 83       	std	Y+3, r24	; 0x03
     468:	8b 81       	ldd	r24, Y+3	; 0x03
	}

}
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
     46e:	0f 90       	pop	r0
     470:	cf 91       	pop	r28
     472:	df 91       	pop	r29
     474:	08 95       	ret

00000476 <TWI_SendStopCondition>:
uint8_t TWI_SendStopCondition(uint8_t I2C_CH) {
     476:	df 93       	push	r29
     478:	cf 93       	push	r28
     47a:	0f 92       	push	r0
     47c:	cd b7       	in	r28, 0x3d	; 61
     47e:	de b7       	in	r29, 0x3e	; 62
     480:	89 83       	std	Y+1, r24	; 0x01
	TWI_Control_REGISTER = (EN_TWI | CLR_FLAG | SEND_STOP);
     482:	e6 e5       	ldi	r30, 0x56	; 86
     484:	f0 e0       	ldi	r31, 0x00	; 0
     486:	84 e9       	ldi	r24, 0x94	; 148
     488:	80 83       	st	Z, r24
//	UART_TransmitString(UART_1, "STOP CONDITION SENT\r");
	return 0;
     48a:	80 e0       	ldi	r24, 0x00	; 0
}
     48c:	0f 90       	pop	r0
     48e:	cf 91       	pop	r28
     490:	df 91       	pop	r29
     492:	08 95       	ret

00000494 <TWI_SendSLAWrite>:
uint8_t TWI_SendSLAWrite(uint8_t I2C_CH, uint8_t SlvAdr) {
     494:	df 93       	push	r29
     496:	cf 93       	push	r28
     498:	00 d0       	rcall	.+0      	; 0x49a <TWI_SendSLAWrite+0x6>
     49a:	00 d0       	rcall	.+0      	; 0x49c <TWI_SendSLAWrite+0x8>
     49c:	cd b7       	in	r28, 0x3d	; 61
     49e:	de b7       	in	r29, 0x3e	; 62
     4a0:	8a 83       	std	Y+2, r24	; 0x02
     4a2:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrStatus = 0;
     4a4:	19 82       	std	Y+1, r1	; 0x01
	TWI_Data_REGISTER = ((SlvAdr << 1) | 0);
     4a6:	e3 e2       	ldi	r30, 0x23	; 35
     4a8:	f0 e0       	ldi	r31, 0x00	; 0
     4aa:	8b 81       	ldd	r24, Y+3	; 0x03
     4ac:	88 0f       	add	r24, r24
     4ae:	80 83       	st	Z, r24
	TWI_Control_REGISTER = (EN_TWI | CLR_FLAG);// CLEAR FLAG TO SEND DATA
     4b0:	e6 e5       	ldi	r30, 0x56	; 86
     4b2:	f0 e0       	ldi	r31, 0x00	; 0
     4b4:	84 e8       	ldi	r24, 0x84	; 132
     4b6:	80 83       	st	Z, r24
	while (Get_Bit(TWI_Control_REGISTER,TWINT) == 0)
     4b8:	e6 e5       	ldi	r30, 0x56	; 86
     4ba:	f0 e0       	ldi	r31, 0x00	; 0
     4bc:	80 81       	ld	r24, Z
     4be:	88 23       	and	r24, r24
     4c0:	dc f7       	brge	.-10     	; 0x4b8 <TWI_SendSLAWrite+0x24>
		;
	ErrStatus = (TWI_Status_REGISTER & 0xf8); //0b11111000
     4c2:	e1 e2       	ldi	r30, 0x21	; 33
     4c4:	f0 e0       	ldi	r31, 0x00	; 0
     4c6:	80 81       	ld	r24, Z
     4c8:	88 7f       	andi	r24, 0xF8	; 248
     4ca:	89 83       	std	Y+1, r24	; 0x01
	if (ErrStatus == SLA_W_ACK) {
     4cc:	89 81       	ldd	r24, Y+1	; 0x01
     4ce:	88 31       	cpi	r24, 0x18	; 24
     4d0:	11 f4       	brne	.+4      	; 0x4d6 <TWI_SendSLAWrite+0x42>
//		UART_TransmitString(UART_1, "SENT SLAVE ADDRESS WITH ACK\r");
		return 0;
     4d2:	1c 82       	std	Y+4, r1	; 0x04
     4d4:	08 c0       	rjmp	.+16     	; 0x4e6 <TWI_SendSLAWrite+0x52>
	} else if (ErrStatus == SLA_W_NACK) {
     4d6:	89 81       	ldd	r24, Y+1	; 0x01
     4d8:	80 32       	cpi	r24, 0x20	; 32
     4da:	19 f4       	brne	.+6      	; 0x4e2 <TWI_SendSLAWrite+0x4e>
//		UART_TransmitString(UART_1, "SENT SLAVE ADDRESS WITH NO ACK\r");
		return 2;
     4dc:	82 e0       	ldi	r24, 0x02	; 2
     4de:	8c 83       	std	Y+4, r24	; 0x04
     4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <TWI_SendSLAWrite+0x52>
	} else {
//		UART_TransmitString(UART_1, "ERROR\r");
		return 3;
     4e2:	83 e0       	ldi	r24, 0x03	; 3
     4e4:	8c 83       	std	Y+4, r24	; 0x04
     4e6:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
     4e8:	0f 90       	pop	r0
     4ea:	0f 90       	pop	r0
     4ec:	0f 90       	pop	r0
     4ee:	0f 90       	pop	r0
     4f0:	cf 91       	pop	r28
     4f2:	df 91       	pop	r29
     4f4:	08 95       	ret

000004f6 <TWI_SendSLARead>:
uint8_t TWI_SendSLARead(uint8_t I2C_CH, uint8_t SlvAdr) {
     4f6:	df 93       	push	r29
     4f8:	cf 93       	push	r28
     4fa:	00 d0       	rcall	.+0      	; 0x4fc <TWI_SendSLARead+0x6>
     4fc:	00 d0       	rcall	.+0      	; 0x4fe <TWI_SendSLARead+0x8>
     4fe:	cd b7       	in	r28, 0x3d	; 61
     500:	de b7       	in	r29, 0x3e	; 62
     502:	8a 83       	std	Y+2, r24	; 0x02
     504:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrStatus = 0;
     506:	19 82       	std	Y+1, r1	; 0x01
	TWI_Data_REGISTER = ((SlvAdr << 1) | 1);
     508:	e3 e2       	ldi	r30, 0x23	; 35
     50a:	f0 e0       	ldi	r31, 0x00	; 0
     50c:	8b 81       	ldd	r24, Y+3	; 0x03
     50e:	88 2f       	mov	r24, r24
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	88 0f       	add	r24, r24
     514:	99 1f       	adc	r25, r25
     516:	81 60       	ori	r24, 0x01	; 1
     518:	80 83       	st	Z, r24
	TWI_Control_REGISTER = (EN_TWI | CLR_FLAG);
     51a:	e6 e5       	ldi	r30, 0x56	; 86
     51c:	f0 e0       	ldi	r31, 0x00	; 0
     51e:	84 e8       	ldi	r24, 0x84	; 132
     520:	80 83       	st	Z, r24
	while (Get_Bit(TWI_Control_REGISTER,TWINT) == 0)
     522:	e6 e5       	ldi	r30, 0x56	; 86
     524:	f0 e0       	ldi	r31, 0x00	; 0
     526:	80 81       	ld	r24, Z
     528:	88 23       	and	r24, r24
     52a:	dc f7       	brge	.-10     	; 0x522 <TWI_SendSLARead+0x2c>
		;
	ErrStatus = (TWI_Status_REGISTER & 0xf8); //0b11111000
     52c:	e1 e2       	ldi	r30, 0x21	; 33
     52e:	f0 e0       	ldi	r31, 0x00	; 0
     530:	80 81       	ld	r24, Z
     532:	88 7f       	andi	r24, 0xF8	; 248
     534:	89 83       	std	Y+1, r24	; 0x01
	if (ErrStatus == SLA_R_ACK) {
     536:	89 81       	ldd	r24, Y+1	; 0x01
     538:	80 34       	cpi	r24, 0x40	; 64
     53a:	11 f4       	brne	.+4      	; 0x540 <TWI_SendSLARead+0x4a>
//		UART_TransmitString(UART_1, "SENT SLAVE ADDRESS WITH ACK\r");
		return 0;
     53c:	1c 82       	std	Y+4, r1	; 0x04
     53e:	08 c0       	rjmp	.+16     	; 0x550 <TWI_SendSLARead+0x5a>
	} else if (ErrStatus == SLA_R_NACK) {
     540:	89 81       	ldd	r24, Y+1	; 0x01
     542:	88 34       	cpi	r24, 0x48	; 72
     544:	19 f4       	brne	.+6      	; 0x54c <TWI_SendSLARead+0x56>
//		UART_TransmitString(UART_1, "SENT SLAVE ADDRESS WITH NO ACK\r");
		return 2;
     546:	82 e0       	ldi	r24, 0x02	; 2
     548:	8c 83       	std	Y+4, r24	; 0x04
     54a:	02 c0       	rjmp	.+4      	; 0x550 <TWI_SendSLARead+0x5a>
	} else {
//		UART_TransmitString(UART_1, "ERROR\r");
		return 3;
     54c:	83 e0       	ldi	r24, 0x03	; 3
     54e:	8c 83       	std	Y+4, r24	; 0x04
     550:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
     552:	0f 90       	pop	r0
     554:	0f 90       	pop	r0
     556:	0f 90       	pop	r0
     558:	0f 90       	pop	r0
     55a:	cf 91       	pop	r28
     55c:	df 91       	pop	r29
     55e:	08 95       	ret

00000560 <TWI_SendData>:
uint8_t TWI_SendData(uint8_t I2C_CH, uint8_t Data) {
     560:	df 93       	push	r29
     562:	cf 93       	push	r28
     564:	00 d0       	rcall	.+0      	; 0x566 <TWI_SendData+0x6>
     566:	00 d0       	rcall	.+0      	; 0x568 <TWI_SendData+0x8>
     568:	cd b7       	in	r28, 0x3d	; 61
     56a:	de b7       	in	r29, 0x3e	; 62
     56c:	8a 83       	std	Y+2, r24	; 0x02
     56e:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrStatus = 0;
     570:	19 82       	std	Y+1, r1	; 0x01
	TWI_Data_REGISTER = Data;
     572:	e3 e2       	ldi	r30, 0x23	; 35
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	8b 81       	ldd	r24, Y+3	; 0x03
     578:	80 83       	st	Z, r24
	TWI_Control_REGISTER = (EN_TWI | CLR_FLAG);
     57a:	e6 e5       	ldi	r30, 0x56	; 86
     57c:	f0 e0       	ldi	r31, 0x00	; 0
     57e:	84 e8       	ldi	r24, 0x84	; 132
     580:	80 83       	st	Z, r24
	while (Get_Bit(TWI_Control_REGISTER,TWINT) == 0)
     582:	e6 e5       	ldi	r30, 0x56	; 86
     584:	f0 e0       	ldi	r31, 0x00	; 0
     586:	80 81       	ld	r24, Z
     588:	88 23       	and	r24, r24
     58a:	dc f7       	brge	.-10     	; 0x582 <TWI_SendData+0x22>
		;
	ErrStatus = (TWI_Status_REGISTER & 0xf8); //MASKING THE PRE_SCALERS BITS
     58c:	e1 e2       	ldi	r30, 0x21	; 33
     58e:	f0 e0       	ldi	r31, 0x00	; 0
     590:	80 81       	ld	r24, Z
     592:	88 7f       	andi	r24, 0xF8	; 248
     594:	89 83       	std	Y+1, r24	; 0x01
	if (ErrStatus == DATA_TR_ACK) {
     596:	89 81       	ldd	r24, Y+1	; 0x01
     598:	88 32       	cpi	r24, 0x28	; 40
     59a:	11 f4       	brne	.+4      	; 0x5a0 <TWI_SendData+0x40>
//		UART_TransmitString(UART_1, "SENT DATA WITH ACK\r");
		return 0;
     59c:	1c 82       	std	Y+4, r1	; 0x04
     59e:	08 c0       	rjmp	.+16     	; 0x5b0 <TWI_SendData+0x50>
	} else if (ErrStatus == DATA_TR_NACK) {
     5a0:	89 81       	ldd	r24, Y+1	; 0x01
     5a2:	80 33       	cpi	r24, 0x30	; 48
     5a4:	19 f4       	brne	.+6      	; 0x5ac <TWI_SendData+0x4c>
//		UART_TransmitString(UART_1, "SENT DATA WITH NO ACK\r");
		return 6;
     5a6:	86 e0       	ldi	r24, 0x06	; 6
     5a8:	8c 83       	std	Y+4, r24	; 0x04
     5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <TWI_SendData+0x50>
	} else {
//		UART_TransmitString(UART_1, "ERROR\r");
		return 7;
     5ac:	87 e0       	ldi	r24, 0x07	; 7
     5ae:	8c 83       	std	Y+4, r24	; 0x04
     5b0:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
     5b2:	0f 90       	pop	r0
     5b4:	0f 90       	pop	r0
     5b6:	0f 90       	pop	r0
     5b8:	0f 90       	pop	r0
     5ba:	cf 91       	pop	r28
     5bc:	df 91       	pop	r29
     5be:	08 95       	ret

000005c0 <TWI_SendChar>:
uint8_t TWI_SendChar(uint8_t I2C_CH, uint8_t SlvAdr, uint8_t Data) {
     5c0:	df 93       	push	r29
     5c2:	cf 93       	push	r28
     5c4:	00 d0       	rcall	.+0      	; 0x5c6 <TWI_SendChar+0x6>
     5c6:	0f 92       	push	r0
     5c8:	cd b7       	in	r28, 0x3d	; 61
     5ca:	de b7       	in	r29, 0x3e	; 62
     5cc:	89 83       	std	Y+1, r24	; 0x01
     5ce:	6a 83       	std	Y+2, r22	; 0x02
     5d0:	4b 83       	std	Y+3, r20	; 0x03
	/*SENDING START CONDITION*/
	TWI_SendStartCondition(I2C_CH);
     5d2:	89 81       	ldd	r24, Y+1	; 0x01
     5d4:	0e 94 14 02 	call	0x428	; 0x428 <TWI_SendStartCondition>
	/*--SEND SALVE ADDRESS WITH WRITE OPERATION--*/
	TWI_SendSLAWrite(I2C_CH, SlvAdr);
     5d8:	89 81       	ldd	r24, Y+1	; 0x01
     5da:	6a 81       	ldd	r22, Y+2	; 0x02
     5dc:	0e 94 4a 02 	call	0x494	; 0x494 <TWI_SendSLAWrite>
	/*--SENDING DATA--*/
	TWI_SendData(I2C_CH, Data);
     5e0:	89 81       	ldd	r24, Y+1	; 0x01
     5e2:	6b 81       	ldd	r22, Y+3	; 0x03
     5e4:	0e 94 b0 02 	call	0x560	; 0x560 <TWI_SendData>
	/*--SENDING STOP CONDITION*/
	TWI_SendStopCondition(I2C_CH);
     5e8:	89 81       	ldd	r24, Y+1	; 0x01
     5ea:	0e 94 3b 02 	call	0x476	; 0x476 <TWI_SendStopCondition>
	return 0;
     5ee:	80 e0       	ldi	r24, 0x00	; 0
}
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
     5f4:	0f 90       	pop	r0
     5f6:	cf 91       	pop	r28
     5f8:	df 91       	pop	r29
     5fa:	08 95       	ret

000005fc <TWI_RecDataAck>:
uint8_t TWI_RecDataAck(uint8_t I2C_CH, uint8_t* data) {
     5fc:	df 93       	push	r29
     5fe:	cf 93       	push	r28
     600:	00 d0       	rcall	.+0      	; 0x602 <TWI_RecDataAck+0x6>
     602:	00 d0       	rcall	.+0      	; 0x604 <TWI_RecDataAck+0x8>
     604:	0f 92       	push	r0
     606:	cd b7       	in	r28, 0x3d	; 61
     608:	de b7       	in	r29, 0x3e	; 62
     60a:	8a 83       	std	Y+2, r24	; 0x02
     60c:	7c 83       	std	Y+4, r23	; 0x04
     60e:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrStatus = 0;
     610:	19 82       	std	Y+1, r1	; 0x01
	Set_Bit(TWI_Control_REGISTER, TWEA);
     612:	a6 e5       	ldi	r26, 0x56	; 86
     614:	b0 e0       	ldi	r27, 0x00	; 0
     616:	e6 e5       	ldi	r30, 0x56	; 86
     618:	f0 e0       	ldi	r31, 0x00	; 0
     61a:	80 81       	ld	r24, Z
     61c:	80 64       	ori	r24, 0x40	; 64
     61e:	8c 93       	st	X, r24
	Set_Bit(TWI_Control_REGISTER, TWINT);
     620:	a6 e5       	ldi	r26, 0x56	; 86
     622:	b0 e0       	ldi	r27, 0x00	; 0
     624:	e6 e5       	ldi	r30, 0x56	; 86
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	80 81       	ld	r24, Z
     62a:	80 68       	ori	r24, 0x80	; 128
     62c:	8c 93       	st	X, r24
	while (Get_Bit(TWI_Control_REGISTER,TWINT) == 0)
     62e:	e6 e5       	ldi	r30, 0x56	; 86
     630:	f0 e0       	ldi	r31, 0x00	; 0
     632:	80 81       	ld	r24, Z
     634:	88 23       	and	r24, r24
     636:	dc f7       	brge	.-10     	; 0x62e <TWI_RecDataAck+0x32>
		;
	*data = TWI_Data_REGISTER;
     638:	e3 e2       	ldi	r30, 0x23	; 35
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	80 81       	ld	r24, Z
     63e:	eb 81       	ldd	r30, Y+3	; 0x03
     640:	fc 81       	ldd	r31, Y+4	; 0x04
     642:	80 83       	st	Z, r24
	ErrStatus = (TWI_Status_REGISTER & 0xf8); //MASKING THE PRE_SCALERS BITS
     644:	e1 e2       	ldi	r30, 0x21	; 33
     646:	f0 e0       	ldi	r31, 0x00	; 0
     648:	80 81       	ld	r24, Z
     64a:	88 7f       	andi	r24, 0xF8	; 248
     64c:	89 83       	std	Y+1, r24	; 0x01
	if (ErrStatus == DATA_REC_ACK) {
     64e:	89 81       	ldd	r24, Y+1	; 0x01
     650:	80 35       	cpi	r24, 0x50	; 80
     652:	11 f4       	brne	.+4      	; 0x658 <TWI_RecDataAck+0x5c>
//		UART_TransmitString(UART_1, "RECEIVED DATA WITH ACK\r");
		return 0;
     654:	1d 82       	std	Y+5, r1	; 0x05
     656:	08 c0       	rjmp	.+16     	; 0x668 <TWI_RecDataAck+0x6c>
	} else if (ErrStatus == DATA_REC_NACK) {
     658:	89 81       	ldd	r24, Y+1	; 0x01
     65a:	88 35       	cpi	r24, 0x58	; 88
     65c:	19 f4       	brne	.+6      	; 0x664 <TWI_RecDataAck+0x68>
//		UART_TransmitString(UART_1, "RECEIVED DATA WITH NO ACK\r");
		return 6;
     65e:	86 e0       	ldi	r24, 0x06	; 6
     660:	8d 83       	std	Y+5, r24	; 0x05
     662:	02 c0       	rjmp	.+4      	; 0x668 <TWI_RecDataAck+0x6c>
	} else {

//		UART_TransmitString(UART_1, "ERROR\r");
		return 7;
     664:	87 e0       	ldi	r24, 0x07	; 7
     666:	8d 83       	std	Y+5, r24	; 0x05
     668:	8d 81       	ldd	r24, Y+5	; 0x05
	}
	return 0;
}
     66a:	0f 90       	pop	r0
     66c:	0f 90       	pop	r0
     66e:	0f 90       	pop	r0
     670:	0f 90       	pop	r0
     672:	0f 90       	pop	r0
     674:	cf 91       	pop	r28
     676:	df 91       	pop	r29
     678:	08 95       	ret

0000067a <TWI_RecChar>:
uint8_t TWI_RecChar(uint8_t I2C_CH, uint8_t SlvAdr, uint8_t* Data) {
     67a:	df 93       	push	r29
     67c:	cf 93       	push	r28
     67e:	00 d0       	rcall	.+0      	; 0x680 <TWI_RecChar+0x6>
     680:	00 d0       	rcall	.+0      	; 0x682 <TWI_RecChar+0x8>
     682:	cd b7       	in	r28, 0x3d	; 61
     684:	de b7       	in	r29, 0x3e	; 62
     686:	89 83       	std	Y+1, r24	; 0x01
     688:	6a 83       	std	Y+2, r22	; 0x02
     68a:	5c 83       	std	Y+4, r21	; 0x04
     68c:	4b 83       	std	Y+3, r20	; 0x03

	TWI_SendStartCondition(I2C_CH);
     68e:	89 81       	ldd	r24, Y+1	; 0x01
     690:	0e 94 14 02 	call	0x428	; 0x428 <TWI_SendStartCondition>
	TWI_SendSLARead(I2C_CH, SlvAdr);
     694:	89 81       	ldd	r24, Y+1	; 0x01
     696:	6a 81       	ldd	r22, Y+2	; 0x02
     698:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <TWI_SendSLARead>
	TWI_RecDataAck(I2C_CH, Data);
     69c:	2b 81       	ldd	r18, Y+3	; 0x03
     69e:	3c 81       	ldd	r19, Y+4	; 0x04
     6a0:	89 81       	ldd	r24, Y+1	; 0x01
     6a2:	b9 01       	movw	r22, r18
     6a4:	0e 94 fe 02 	call	0x5fc	; 0x5fc <TWI_RecDataAck>
	TWI_SendStopCondition(I2C_CH);
     6a8:	89 81       	ldd	r24, Y+1	; 0x01
     6aa:	0e 94 3b 02 	call	0x476	; 0x476 <TWI_SendStopCondition>
	return 0;
     6ae:	80 e0       	ldi	r24, 0x00	; 0
}
     6b0:	0f 90       	pop	r0
     6b2:	0f 90       	pop	r0
     6b4:	0f 90       	pop	r0
     6b6:	0f 90       	pop	r0
     6b8:	cf 91       	pop	r28
     6ba:	df 91       	pop	r29
     6bc:	08 95       	ret

000006be <TWI_EnableInterrupt>:
/*uint8_t TWI_Status(uint8_t I2C_CH, uint8_t * Status) {
	*(Status) = ((TWI_Status_REGISTER) & 0xf8);
	return 0;
}*/
uint8_t TWI_EnableInterrupt(uint8_t I2C_CH) {
     6be:	df 93       	push	r29
     6c0:	cf 93       	push	r28
     6c2:	0f 92       	push	r0
     6c4:	cd b7       	in	r28, 0x3d	; 61
     6c6:	de b7       	in	r29, 0x3e	; 62
     6c8:	89 83       	std	Y+1, r24	; 0x01
	Set_Bit(TWI_Control_REGISTER, TWIE); //Disable ISR for the TWI peripheral
     6ca:	a6 e5       	ldi	r26, 0x56	; 86
     6cc:	b0 e0       	ldi	r27, 0x00	; 0
     6ce:	e6 e5       	ldi	r30, 0x56	; 86
     6d0:	f0 e0       	ldi	r31, 0x00	; 0
     6d2:	80 81       	ld	r24, Z
     6d4:	81 60       	ori	r24, 0x01	; 1
     6d6:	8c 93       	st	X, r24
	return 0;
     6d8:	80 e0       	ldi	r24, 0x00	; 0

}
     6da:	0f 90       	pop	r0
     6dc:	cf 91       	pop	r28
     6de:	df 91       	pop	r29
     6e0:	08 95       	ret

000006e2 <TWI_DisableInterrupt>:
uint8_t TWI_DisableInterrupt(uint8_t I2C_CH) {
     6e2:	df 93       	push	r29
     6e4:	cf 93       	push	r28
     6e6:	0f 92       	push	r0
     6e8:	cd b7       	in	r28, 0x3d	; 61
     6ea:	de b7       	in	r29, 0x3e	; 62
     6ec:	89 83       	std	Y+1, r24	; 0x01
	Clr_Bit(TWI_Control_REGISTER, TWIE); //Disable ISR for the TWI peripheral
     6ee:	a6 e5       	ldi	r26, 0x56	; 86
     6f0:	b0 e0       	ldi	r27, 0x00	; 0
     6f2:	e6 e5       	ldi	r30, 0x56	; 86
     6f4:	f0 e0       	ldi	r31, 0x00	; 0
     6f6:	80 81       	ld	r24, Z
     6f8:	8e 7f       	andi	r24, 0xFE	; 254
     6fa:	8c 93       	st	X, r24
	return 0;
     6fc:	80 e0       	ldi	r24, 0x00	; 0

}
     6fe:	0f 90       	pop	r0
     700:	cf 91       	pop	r28
     702:	df 91       	pop	r29
     704:	08 95       	ret

00000706 <TWI_SlaOperDetermination>:
uint8_t TWI_SlaOperDetermination(uint8_t I2C_CH, uint8_t* Oper) {
     706:	df 93       	push	r29
     708:	cf 93       	push	r28
     70a:	00 d0       	rcall	.+0      	; 0x70c <TWI_SlaOperDetermination+0x6>
     70c:	0f 92       	push	r0
     70e:	cd b7       	in	r28, 0x3d	; 61
     710:	de b7       	in	r29, 0x3e	; 62
     712:	89 83       	std	Y+1, r24	; 0x01
     714:	7b 83       	std	Y+3, r23	; 0x03
     716:	6a 83       	std	Y+2, r22	; 0x02
	*Oper = Get_Bit(TWI_Data_REGISTER, 0);
     718:	e3 e2       	ldi	r30, 0x23	; 35
     71a:	f0 e0       	ldi	r31, 0x00	; 0
     71c:	80 81       	ld	r24, Z
     71e:	81 70       	andi	r24, 0x01	; 1
     720:	ea 81       	ldd	r30, Y+2	; 0x02
     722:	fb 81       	ldd	r31, Y+3	; 0x03
     724:	80 83       	st	Z, r24
	return 0;
     726:	80 e0       	ldi	r24, 0x00	; 0
}
     728:	0f 90       	pop	r0
     72a:	0f 90       	pop	r0
     72c:	0f 90       	pop	r0
     72e:	cf 91       	pop	r28
     730:	df 91       	pop	r29
     732:	08 95       	ret

00000734 <TWI_SetCallback>:
uint8_t TWI_SetCallback(uint8_t I2CNumber, Ptr_VoidFuncVoid_t Callback) {
     734:	df 93       	push	r29
     736:	cf 93       	push	r28
     738:	00 d0       	rcall	.+0      	; 0x73a <TWI_SetCallback+0x6>
     73a:	0f 92       	push	r0
     73c:	cd b7       	in	r28, 0x3d	; 61
     73e:	de b7       	in	r29, 0x3e	; 62
     740:	89 83       	std	Y+1, r24	; 0x01
     742:	7b 83       	std	Y+3, r23	; 0x03
     744:	6a 83       	std	Y+2, r22	; 0x02
	G_TWI_CALLBACK = Callback;
     746:	8a 81       	ldd	r24, Y+2	; 0x02
     748:	9b 81       	ldd	r25, Y+3	; 0x03
     74a:	90 93 3e 01 	sts	0x013E, r25
     74e:	80 93 3d 01 	sts	0x013D, r24
	return 0;
     752:	80 e0       	ldi	r24, 0x00	; 0
}
     754:	0f 90       	pop	r0
     756:	0f 90       	pop	r0
     758:	0f 90       	pop	r0
     75a:	cf 91       	pop	r28
     75c:	df 91       	pop	r29
     75e:	08 95       	ret

00000760 <__vector_19>:
void __vector_19(void) __attribute__((signal)); // Serial Transfer Complete
void __vector_19(void) {
     760:	1f 92       	push	r1
     762:	0f 92       	push	r0
     764:	0f b6       	in	r0, 0x3f	; 63
     766:	0f 92       	push	r0
     768:	11 24       	eor	r1, r1
     76a:	2f 93       	push	r18
     76c:	3f 93       	push	r19
     76e:	4f 93       	push	r20
     770:	5f 93       	push	r21
     772:	6f 93       	push	r22
     774:	7f 93       	push	r23
     776:	8f 93       	push	r24
     778:	9f 93       	push	r25
     77a:	af 93       	push	r26
     77c:	bf 93       	push	r27
     77e:	ef 93       	push	r30
     780:	ff 93       	push	r31
     782:	df 93       	push	r29
     784:	cf 93       	push	r28
     786:	cd b7       	in	r28, 0x3d	; 61
     788:	de b7       	in	r29, 0x3e	; 62
	G_TWI_CALLBACK();
     78a:	e0 91 3d 01 	lds	r30, 0x013D
     78e:	f0 91 3e 01 	lds	r31, 0x013E
     792:	09 95       	icall
}
     794:	cf 91       	pop	r28
     796:	df 91       	pop	r29
     798:	ff 91       	pop	r31
     79a:	ef 91       	pop	r30
     79c:	bf 91       	pop	r27
     79e:	af 91       	pop	r26
     7a0:	9f 91       	pop	r25
     7a2:	8f 91       	pop	r24
     7a4:	7f 91       	pop	r23
     7a6:	6f 91       	pop	r22
     7a8:	5f 91       	pop	r21
     7aa:	4f 91       	pop	r20
     7ac:	3f 91       	pop	r19
     7ae:	2f 91       	pop	r18
     7b0:	0f 90       	pop	r0
     7b2:	0f be       	out	0x3f, r0	; 63
     7b4:	0f 90       	pop	r0
     7b6:	1f 90       	pop	r1
     7b8:	18 95       	reti

000007ba <SPI_Init>:
#endif

	return 0;
}
#endif
uint8_t SPI_Init(uint8_t SpiNumber) {
     7ba:	df 93       	push	r29
     7bc:	cf 93       	push	r28
     7be:	0f 92       	push	r0
     7c0:	cd b7       	in	r28, 0x3d	; 61
     7c2:	de b7       	in	r29, 0x3e	; 62
     7c4:	89 83       	std	Y+1, r24	; 0x01
#else
	Clr_Bit(SPSR, SPI2X);
#endif /*DOUBLE_SPEED*/

#else
	Clr_Bit(SPCR, MSTR);
     7c6:	ad e2       	ldi	r26, 0x2D	; 45
     7c8:	b0 e0       	ldi	r27, 0x00	; 0
     7ca:	ed e2       	ldi	r30, 0x2D	; 45
     7cc:	f0 e0       	ldi	r31, 0x00	; 0
     7ce:	80 81       	ld	r24, Z
     7d0:	8f 7e       	andi	r24, 0xEF	; 239
     7d2:	8c 93       	st	X, r24
	Set_Bit(SPCR, SPE);
     7d4:	ad e2       	ldi	r26, 0x2D	; 45
     7d6:	b0 e0       	ldi	r27, 0x00	; 0
     7d8:	ed e2       	ldi	r30, 0x2D	; 45
     7da:	f0 e0       	ldi	r31, 0x00	; 0
     7dc:	80 81       	ld	r24, Z
     7de:	80 64       	ori	r24, 0x40	; 64
     7e0:	8c 93       	st	X, r24
	DIO_SetPinDirection(SPI_CH0_MISO_PORT, SPI_CH0_MISO_PIN, PIN_OUTPUT);
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	66 e0       	ldi	r22, 0x06	; 6
     7e6:	41 e0       	ldi	r20, 0x01	; 1
     7e8:	0e 94 f4 06 	call	0xde8	; 0xde8 <DIO_SetPinDirection>
	DIO_SetPinDirection(SPI_CH0_MOSI_PORT, SPI_CH0_MOSI_PIN, PIN_INPUT);
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	65 e0       	ldi	r22, 0x05	; 5
     7f0:	40 e0       	ldi	r20, 0x00	; 0
     7f2:	0e 94 f4 06 	call	0xde8	; 0xde8 <DIO_SetPinDirection>
	DIO_SetPinDirection(SPI_CH0_SCK_PORT, SPI_CH0_SCK_PIN, PIN_INPUT);
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	67 e0       	ldi	r22, 0x07	; 7
     7fa:	40 e0       	ldi	r20, 0x00	; 0
     7fc:	0e 94 f4 06 	call	0xde8	; 0xde8 <DIO_SetPinDirection>
	DIO_SetPinDirection(SPI_CH0_SS_PORT, SPI_CH0_SS_PIN, PIN_INPUT);
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	64 e0       	ldi	r22, 0x04	; 4
     804:	40 e0       	ldi	r20, 0x00	; 0
     806:	0e 94 f4 06 	call	0xde8	; 0xde8 <DIO_SetPinDirection>
#endif/*MODE_MSRT_SLAVE*/
	return 0;
     80a:	80 e0       	ldi	r24, 0x00	; 0
}
     80c:	0f 90       	pop	r0
     80e:	cf 91       	pop	r28
     810:	df 91       	pop	r29
     812:	08 95       	ret

00000814 <SPI_TransmitChar>:

uint8_t SPI_TransmitChar(uint8_t SpiNumber, uint8_t TxChar, uint8_t slave_CH) {
     814:	df 93       	push	r29
     816:	cf 93       	push	r28
     818:	00 d0       	rcall	.+0      	; 0x81a <SPI_TransmitChar+0x6>
     81a:	0f 92       	push	r0
     81c:	cd b7       	in	r28, 0x3d	; 61
     81e:	de b7       	in	r29, 0x3e	; 62
     820:	89 83       	std	Y+1, r24	; 0x01
     822:	6a 83       	std	Y+2, r22	; 0x02
     824:	4b 83       	std	Y+3, r20	; 0x03
		break;
		default:
		break;
	}
#else
	SPDR = TxChar;
     826:	ef e2       	ldi	r30, 0x2F	; 47
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	8a 81       	ldd	r24, Y+2	; 0x02
     82c:	80 83       	st	Z, r24
	//trigger an external interrupt in master MCU
	while (!(SPSR & (1 << SPIF )))
     82e:	ee e2       	ldi	r30, 0x2E	; 46
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	80 81       	ld	r24, Z
     834:	88 23       	and	r24, r24
     836:	dc f7       	brge	.-10     	; 0x82e <SPI_TransmitChar+0x1a>
		;
#endif
	return 0;
     838:	80 e0       	ldi	r24, 0x00	; 0
}
     83a:	0f 90       	pop	r0
     83c:	0f 90       	pop	r0
     83e:	0f 90       	pop	r0
     840:	cf 91       	pop	r28
     842:	df 91       	pop	r29
     844:	08 95       	ret

00000846 <SPI_TransmitString>:
uint8_t SPI_TransmitString(uint8_t SpiNumber, ptr_uint8_t TxString,
		uint8_t slave_CH) {
     846:	df 93       	push	r29
     848:	cf 93       	push	r28
     84a:	00 d0       	rcall	.+0      	; 0x84c <SPI_TransmitString+0x6>
     84c:	00 d0       	rcall	.+0      	; 0x84e <SPI_TransmitString+0x8>
     84e:	0f 92       	push	r0
     850:	cd b7       	in	r28, 0x3d	; 61
     852:	de b7       	in	r29, 0x3e	; 62
     854:	8a 83       	std	Y+2, r24	; 0x02
     856:	7c 83       	std	Y+4, r23	; 0x04
     858:	6b 83       	std	Y+3, r22	; 0x03
     85a:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t counter = 0;
     85c:	19 82       	std	Y+1, r1	; 0x01
     85e:	1f c0       	rjmp	.+62     	; 0x89e <SPI_TransmitString+0x58>
		default:
		break;
	}
#else
	while (counter >= 255) {
		if ((*(TxString + counter)) == NULL_TERMINATOR) {
     860:	89 81       	ldd	r24, Y+1	; 0x01
     862:	28 2f       	mov	r18, r24
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	8b 81       	ldd	r24, Y+3	; 0x03
     868:	9c 81       	ldd	r25, Y+4	; 0x04
     86a:	fc 01       	movw	r30, r24
     86c:	e2 0f       	add	r30, r18
     86e:	f3 1f       	adc	r31, r19
     870:	80 81       	ld	r24, Z
     872:	88 23       	and	r24, r24
     874:	b9 f0       	breq	.+46     	; 0x8a4 <SPI_TransmitString+0x5e>
			break;
		}
		SPDR = *(TxString + counter);
     876:	af e2       	ldi	r26, 0x2F	; 47
     878:	b0 e0       	ldi	r27, 0x00	; 0
     87a:	89 81       	ldd	r24, Y+1	; 0x01
     87c:	28 2f       	mov	r18, r24
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	8b 81       	ldd	r24, Y+3	; 0x03
     882:	9c 81       	ldd	r25, Y+4	; 0x04
     884:	fc 01       	movw	r30, r24
     886:	e2 0f       	add	r30, r18
     888:	f3 1f       	adc	r31, r19
     88a:	80 81       	ld	r24, Z
     88c:	8c 93       	st	X, r24
		counter++;
     88e:	89 81       	ldd	r24, Y+1	; 0x01
     890:	8f 5f       	subi	r24, 0xFF	; 255
     892:	89 83       	std	Y+1, r24	; 0x01
		//trigger an external interrupt in master MCU
		while (!(SPSR & (1 << SPIF )))
     894:	ee e2       	ldi	r30, 0x2E	; 46
     896:	f0 e0       	ldi	r31, 0x00	; 0
     898:	80 81       	ld	r24, Z
     89a:	88 23       	and	r24, r24
     89c:	dc f7       	brge	.-10     	; 0x894 <SPI_TransmitString+0x4e>
		break;
		default:
		break;
	}
#else
	while (counter >= 255) {
     89e:	89 81       	ldd	r24, Y+1	; 0x01
     8a0:	8f 3f       	cpi	r24, 0xFF	; 255
     8a2:	f1 f2       	breq	.-68     	; 0x860 <SPI_TransmitString+0x1a>
		//trigger an external interrupt in master MCU
		while (!(SPSR & (1 << SPIF )))
			;
	}
#endif
	return 0;
     8a4:	80 e0       	ldi	r24, 0x00	; 0
}
     8a6:	0f 90       	pop	r0
     8a8:	0f 90       	pop	r0
     8aa:	0f 90       	pop	r0
     8ac:	0f 90       	pop	r0
     8ae:	0f 90       	pop	r0
     8b0:	cf 91       	pop	r28
     8b2:	df 91       	pop	r29
     8b4:	08 95       	ret

000008b6 <SPI_ReceiveChar>:

uint8_t SPI_ReceiveChar(uint8_t SpiNumber, ptr_uint8_t RxData, uint8_t slave_CH) {
     8b6:	df 93       	push	r29
     8b8:	cf 93       	push	r28
     8ba:	00 d0       	rcall	.+0      	; 0x8bc <SPI_ReceiveChar+0x6>
     8bc:	00 d0       	rcall	.+0      	; 0x8be <SPI_ReceiveChar+0x8>
     8be:	cd b7       	in	r28, 0x3d	; 61
     8c0:	de b7       	in	r29, 0x3e	; 62
     8c2:	89 83       	std	Y+1, r24	; 0x01
     8c4:	7b 83       	std	Y+3, r23	; 0x03
     8c6:	6a 83       	std	Y+2, r22	; 0x02
     8c8:	4c 83       	std	Y+4, r20	; 0x04
		break;
		default:
		break;
	}
#else
	while (!(SPSR & (1 << SPIF )))
     8ca:	ee e2       	ldi	r30, 0x2E	; 46
     8cc:	f0 e0       	ldi	r31, 0x00	; 0
     8ce:	80 81       	ld	r24, Z
     8d0:	88 23       	and	r24, r24
     8d2:	dc f7       	brge	.-10     	; 0x8ca <SPI_ReceiveChar+0x14>
		;
	*(RxData) = SPDR;
     8d4:	ef e2       	ldi	r30, 0x2F	; 47
     8d6:	f0 e0       	ldi	r31, 0x00	; 0
     8d8:	80 81       	ld	r24, Z
     8da:	ea 81       	ldd	r30, Y+2	; 0x02
     8dc:	fb 81       	ldd	r31, Y+3	; 0x03
     8de:	80 83       	st	Z, r24
#endif
	return 0;
     8e0:	80 e0       	ldi	r24, 0x00	; 0
}
     8e2:	0f 90       	pop	r0
     8e4:	0f 90       	pop	r0
     8e6:	0f 90       	pop	r0
     8e8:	0f 90       	pop	r0
     8ea:	cf 91       	pop	r28
     8ec:	df 91       	pop	r29
     8ee:	08 95       	ret

000008f0 <SPI_ReceiveString>:
uint8_t SPI_ReceiveString(uint8_t SpiNumber, ptr_uint8_t RxString,
		uint8_t slave_CH) {
     8f0:	df 93       	push	r29
     8f2:	cf 93       	push	r28
     8f4:	00 d0       	rcall	.+0      	; 0x8f6 <SPI_ReceiveString+0x6>
     8f6:	00 d0       	rcall	.+0      	; 0x8f8 <SPI_ReceiveString+0x8>
     8f8:	0f 92       	push	r0
     8fa:	cd b7       	in	r28, 0x3d	; 61
     8fc:	de b7       	in	r29, 0x3e	; 62
     8fe:	8a 83       	std	Y+2, r24	; 0x02
     900:	7c 83       	std	Y+4, r23	; 0x04
     902:	6b 83       	std	Y+3, r22	; 0x03
     904:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t counter = 0;
     906:	19 82       	std	Y+1, r1	; 0x01
		default:
		break;
	}
#else
	while (1) {
		while ((Get_Bit(SPSR, SPIF)) != 1);
     908:	ee e2       	ldi	r30, 0x2E	; 46
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	80 81       	ld	r24, Z
     90e:	88 1f       	adc	r24, r24
     910:	88 27       	eor	r24, r24
     912:	88 1f       	adc	r24, r24
     914:	81 30       	cpi	r24, 0x01	; 1
     916:	c1 f7       	brne	.-16     	; 0x908 <SPI_ReceiveString+0x18>
		*(RxString + counter) = SPDR;
     918:	89 81       	ldd	r24, Y+1	; 0x01
     91a:	28 2f       	mov	r18, r24
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	8b 81       	ldd	r24, Y+3	; 0x03
     920:	9c 81       	ldd	r25, Y+4	; 0x04
     922:	dc 01       	movw	r26, r24
     924:	a2 0f       	add	r26, r18
     926:	b3 1f       	adc	r27, r19
     928:	ef e2       	ldi	r30, 0x2F	; 47
     92a:	f0 e0       	ldi	r31, 0x00	; 0
     92c:	80 81       	ld	r24, Z
     92e:	8c 93       	st	X, r24
		if ((*(RxString + counter)) == NULL_TERMINATOR) {
     930:	89 81       	ldd	r24, Y+1	; 0x01
     932:	28 2f       	mov	r18, r24
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	8b 81       	ldd	r24, Y+3	; 0x03
     938:	9c 81       	ldd	r25, Y+4	; 0x04
     93a:	fc 01       	movw	r30, r24
     93c:	e2 0f       	add	r30, r18
     93e:	f3 1f       	adc	r31, r19
     940:	80 81       	ld	r24, Z
     942:	88 23       	and	r24, r24
     944:	21 f0       	breq	.+8      	; 0x94e <SPI_ReceiveString+0x5e>
			break;
		}
		counter++;
     946:	89 81       	ldd	r24, Y+1	; 0x01
     948:	8f 5f       	subi	r24, 0xFF	; 255
     94a:	89 83       	std	Y+1, r24	; 0x01
     94c:	dd cf       	rjmp	.-70     	; 0x908 <SPI_ReceiveString+0x18>
	}
#endif
	return 0;
     94e:	80 e0       	ldi	r24, 0x00	; 0
}
     950:	0f 90       	pop	r0
     952:	0f 90       	pop	r0
     954:	0f 90       	pop	r0
     956:	0f 90       	pop	r0
     958:	0f 90       	pop	r0
     95a:	cf 91       	pop	r28
     95c:	df 91       	pop	r29
     95e:	08 95       	ret

00000960 <SPI_EnableInterrupt>:

uint8_t SPI_EnableInterrupt(uint8_t SpiNumber) {
     960:	df 93       	push	r29
     962:	cf 93       	push	r28
     964:	0f 92       	push	r0
     966:	cd b7       	in	r28, 0x3d	; 61
     968:	de b7       	in	r29, 0x3e	; 62
     96a:	89 83       	std	Y+1, r24	; 0x01
	Set_Bit(SPCR, SPIE);
     96c:	ad e2       	ldi	r26, 0x2D	; 45
     96e:	b0 e0       	ldi	r27, 0x00	; 0
     970:	ed e2       	ldi	r30, 0x2D	; 45
     972:	f0 e0       	ldi	r31, 0x00	; 0
     974:	80 81       	ld	r24, Z
     976:	80 68       	ori	r24, 0x80	; 128
     978:	8c 93       	st	X, r24
	return 0;
     97a:	80 e0       	ldi	r24, 0x00	; 0
}
     97c:	0f 90       	pop	r0
     97e:	cf 91       	pop	r28
     980:	df 91       	pop	r29
     982:	08 95       	ret

00000984 <SPI_DisableInterrupt>:
uint8_t SPI_DisableInterrupt(uint8_t SpiNumber) {
     984:	df 93       	push	r29
     986:	cf 93       	push	r28
     988:	0f 92       	push	r0
     98a:	cd b7       	in	r28, 0x3d	; 61
     98c:	de b7       	in	r29, 0x3e	; 62
     98e:	89 83       	std	Y+1, r24	; 0x01
	Clr_Bit(SPCR, SPIE);
     990:	ad e2       	ldi	r26, 0x2D	; 45
     992:	b0 e0       	ldi	r27, 0x00	; 0
     994:	ed e2       	ldi	r30, 0x2D	; 45
     996:	f0 e0       	ldi	r31, 0x00	; 0
     998:	80 81       	ld	r24, Z
     99a:	8f 77       	andi	r24, 0x7F	; 127
     99c:	8c 93       	st	X, r24
	return 0;
     99e:	80 e0       	ldi	r24, 0x00	; 0
}
     9a0:	0f 90       	pop	r0
     9a2:	cf 91       	pop	r28
     9a4:	df 91       	pop	r29
     9a6:	08 95       	ret

000009a8 <SPI_SetCallback>:

uint8_t SPI_SetCallback(uint8_t SpiNumber, Ptr_VoidFuncVoid_t Callback) {
     9a8:	df 93       	push	r29
     9aa:	cf 93       	push	r28
     9ac:	00 d0       	rcall	.+0      	; 0x9ae <SPI_SetCallback+0x6>
     9ae:	0f 92       	push	r0
     9b0:	cd b7       	in	r28, 0x3d	; 61
     9b2:	de b7       	in	r29, 0x3e	; 62
     9b4:	89 83       	std	Y+1, r24	; 0x01
     9b6:	7b 83       	std	Y+3, r23	; 0x03
     9b8:	6a 83       	std	Y+2, r22	; 0x02
	G_SPI_CALLBACK=Callback;
     9ba:	8a 81       	ldd	r24, Y+2	; 0x02
     9bc:	9b 81       	ldd	r25, Y+3	; 0x03
     9be:	90 93 40 01 	sts	0x0140, r25
     9c2:	80 93 3f 01 	sts	0x013F, r24
	return 0;
     9c6:	80 e0       	ldi	r24, 0x00	; 0
}
     9c8:	0f 90       	pop	r0
     9ca:	0f 90       	pop	r0
     9cc:	0f 90       	pop	r0
     9ce:	cf 91       	pop	r28
     9d0:	df 91       	pop	r29
     9d2:	08 95       	ret

000009d4 <__vector_12>:

void __vector_12(void) __attribute__((signal)); // Serial Transfer Complete
void __vector_12(void) {
     9d4:	1f 92       	push	r1
     9d6:	0f 92       	push	r0
     9d8:	0f b6       	in	r0, 0x3f	; 63
     9da:	0f 92       	push	r0
     9dc:	11 24       	eor	r1, r1
     9de:	2f 93       	push	r18
     9e0:	3f 93       	push	r19
     9e2:	4f 93       	push	r20
     9e4:	5f 93       	push	r21
     9e6:	6f 93       	push	r22
     9e8:	7f 93       	push	r23
     9ea:	8f 93       	push	r24
     9ec:	9f 93       	push	r25
     9ee:	af 93       	push	r26
     9f0:	bf 93       	push	r27
     9f2:	ef 93       	push	r30
     9f4:	ff 93       	push	r31
     9f6:	df 93       	push	r29
     9f8:	cf 93       	push	r28
     9fa:	cd b7       	in	r28, 0x3d	; 61
     9fc:	de b7       	in	r29, 0x3e	; 62
	G_SPI_CALLBACK();
     9fe:	e0 91 3f 01 	lds	r30, 0x013F
     a02:	f0 91 40 01 	lds	r31, 0x0140
     a06:	09 95       	icall
}
     a08:	cf 91       	pop	r28
     a0a:	df 91       	pop	r29
     a0c:	ff 91       	pop	r31
     a0e:	ef 91       	pop	r30
     a10:	bf 91       	pop	r27
     a12:	af 91       	pop	r26
     a14:	9f 91       	pop	r25
     a16:	8f 91       	pop	r24
     a18:	7f 91       	pop	r23
     a1a:	6f 91       	pop	r22
     a1c:	5f 91       	pop	r21
     a1e:	4f 91       	pop	r20
     a20:	3f 91       	pop	r19
     a22:	2f 91       	pop	r18
     a24:	0f 90       	pop	r0
     a26:	0f be       	out	0x3f, r0	; 63
     a28:	0f 90       	pop	r0
     a2a:	1f 90       	pop	r1
     a2c:	18 95       	reti

00000a2e <GI_EnableGI>:
 */
#include"globalInterruptReg.h"
#include"globalInterrupt.h"

void GI_EnableGI (void)
{
     a2e:	df 93       	push	r29
     a30:	cf 93       	push	r28
     a32:	cd b7       	in	r28, 0x3d	; 61
     a34:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(SREG_REGISTER,I_BIT);
     a36:	af e5       	ldi	r26, 0x5F	; 95
     a38:	b0 e0       	ldi	r27, 0x00	; 0
     a3a:	ef e5       	ldi	r30, 0x5F	; 95
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	80 81       	ld	r24, Z
     a40:	80 68       	ori	r24, 0x80	; 128
     a42:	8c 93       	st	X, r24
}
     a44:	cf 91       	pop	r28
     a46:	df 91       	pop	r29
     a48:	08 95       	ret

00000a4a <GI_DisableGI>:


void GI_DisableGI (void)
{
     a4a:	df 93       	push	r29
     a4c:	cf 93       	push	r28
     a4e:	cd b7       	in	r28, 0x3d	; 61
     a50:	de b7       	in	r29, 0x3e	; 62
	Clr_Bit(SREG_REGISTER, I_BIT);
     a52:	af e5       	ldi	r26, 0x5F	; 95
     a54:	b0 e0       	ldi	r27, 0x00	; 0
     a56:	ef e5       	ldi	r30, 0x5F	; 95
     a58:	f0 e0       	ldi	r31, 0x00	; 0
     a5a:	80 81       	ld	r24, Z
     a5c:	8f 77       	andi	r24, 0x7F	; 127
     a5e:	8c 93       	st	X, r24
}
     a60:	cf 91       	pop	r28
     a62:	df 91       	pop	r29
     a64:	08 95       	ret

00000a66 <EX_vdDisable>:
#include"externalInterruptReg.h"
#include"externalInterrupt.h"


void EX_vdDisable(uint8_t CopyInterrupt)
{
     a66:	df 93       	push	r29
     a68:	cf 93       	push	r28
     a6a:	00 d0       	rcall	.+0      	; 0xa6c <EX_vdDisable+0x6>
     a6c:	0f 92       	push	r0
     a6e:	cd b7       	in	r28, 0x3d	; 61
     a70:	de b7       	in	r29, 0x3e	; 62
     a72:	89 83       	std	Y+1, r24	; 0x01
	if(CopyInterrupt <= EX_INT2)
     a74:	89 81       	ldd	r24, Y+1	; 0x01
     a76:	83 30       	cpi	r24, 0x03	; 3
     a78:	50 f5       	brcc	.+84     	; 0xace <EX_vdDisable+0x68>
	{
		switch (CopyInterrupt)
     a7a:	89 81       	ldd	r24, Y+1	; 0x01
     a7c:	28 2f       	mov	r18, r24
     a7e:	30 e0       	ldi	r19, 0x00	; 0
     a80:	3b 83       	std	Y+3, r19	; 0x03
     a82:	2a 83       	std	Y+2, r18	; 0x02
     a84:	8a 81       	ldd	r24, Y+2	; 0x02
     a86:	9b 81       	ldd	r25, Y+3	; 0x03
     a88:	81 30       	cpi	r24, 0x01	; 1
     a8a:	91 05       	cpc	r25, r1
     a8c:	89 f0       	breq	.+34     	; 0xab0 <EX_vdDisable+0x4a>
     a8e:	2a 81       	ldd	r18, Y+2	; 0x02
     a90:	3b 81       	ldd	r19, Y+3	; 0x03
     a92:	22 30       	cpi	r18, 0x02	; 2
     a94:	31 05       	cpc	r19, r1
     a96:	a1 f0       	breq	.+40     	; 0xac0 <EX_vdDisable+0x5a>
     a98:	8a 81       	ldd	r24, Y+2	; 0x02
     a9a:	9b 81       	ldd	r25, Y+3	; 0x03
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	b9 f4       	brne	.+46     	; 0xace <EX_vdDisable+0x68>
		{
		case EX_INT0:
			Clr_Bit(GICR,6);
     aa0:	ab e5       	ldi	r26, 0x5B	; 91
     aa2:	b0 e0       	ldi	r27, 0x00	; 0
     aa4:	eb e5       	ldi	r30, 0x5B	; 91
     aa6:	f0 e0       	ldi	r31, 0x00	; 0
     aa8:	80 81       	ld	r24, Z
     aaa:	8f 7b       	andi	r24, 0xBF	; 191
     aac:	8c 93       	st	X, r24
     aae:	0f c0       	rjmp	.+30     	; 0xace <EX_vdDisable+0x68>
			break;
		case EX_INT1:
			Clr_Bit(GICR,7);
     ab0:	ab e5       	ldi	r26, 0x5B	; 91
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	eb e5       	ldi	r30, 0x5B	; 91
     ab6:	f0 e0       	ldi	r31, 0x00	; 0
     ab8:	80 81       	ld	r24, Z
     aba:	8f 77       	andi	r24, 0x7F	; 127
     abc:	8c 93       	st	X, r24
     abe:	07 c0       	rjmp	.+14     	; 0xace <EX_vdDisable+0x68>
			break;
		case EX_INT2:
			Clr_Bit(GICR,5);
     ac0:	ab e5       	ldi	r26, 0x5B	; 91
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	eb e5       	ldi	r30, 0x5B	; 91
     ac6:	f0 e0       	ldi	r31, 0x00	; 0
     ac8:	80 81       	ld	r24, Z
     aca:	8f 7d       	andi	r24, 0xDF	; 223
     acc:	8c 93       	st	X, r24
			break;
		default:
			break;
		}
	}
}
     ace:	0f 90       	pop	r0
     ad0:	0f 90       	pop	r0
     ad2:	0f 90       	pop	r0
     ad4:	cf 91       	pop	r28
     ad6:	df 91       	pop	r29
     ad8:	08 95       	ret

00000ada <EX_vdConfigInterrupt>:

void EX_vdConfigInterrupt(uint8_t CopyInterrupt , uint8_t CopyControlSense)
{
     ada:	df 93       	push	r29
     adc:	cf 93       	push	r28
     ade:	cd b7       	in	r28, 0x3d	; 61
     ae0:	de b7       	in	r29, 0x3e	; 62
     ae2:	2a 97       	sbiw	r28, 0x0a	; 10
     ae4:	0f b6       	in	r0, 0x3f	; 63
     ae6:	f8 94       	cli
     ae8:	de bf       	out	0x3e, r29	; 62
     aea:	0f be       	out	0x3f, r0	; 63
     aec:	cd bf       	out	0x3d, r28	; 61
     aee:	89 83       	std	Y+1, r24	; 0x01
     af0:	6a 83       	std	Y+2, r22	; 0x02
	if(CopyInterrupt <= EX_INT2 && CopyControlSense <= EX_SENSE_LOGIACL_CHANGE)
     af2:	89 81       	ldd	r24, Y+1	; 0x01
     af4:	83 30       	cpi	r24, 0x03	; 3
     af6:	08 f0       	brcs	.+2      	; 0xafa <EX_vdConfigInterrupt+0x20>
     af8:	03 c1       	rjmp	.+518    	; 0xd00 <EX_vdConfigInterrupt+0x226>
     afa:	8a 81       	ldd	r24, Y+2	; 0x02
     afc:	84 30       	cpi	r24, 0x04	; 4
     afe:	08 f0       	brcs	.+2      	; 0xb02 <EX_vdConfigInterrupt+0x28>
     b00:	ff c0       	rjmp	.+510    	; 0xd00 <EX_vdConfigInterrupt+0x226>
	{
		switch (CopyInterrupt)
     b02:	89 81       	ldd	r24, Y+1	; 0x01
     b04:	28 2f       	mov	r18, r24
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	3a 87       	std	Y+10, r19	; 0x0a
     b0a:	29 87       	std	Y+9, r18	; 0x09
     b0c:	89 85       	ldd	r24, Y+9	; 0x09
     b0e:	9a 85       	ldd	r25, Y+10	; 0x0a
     b10:	81 30       	cpi	r24, 0x01	; 1
     b12:	91 05       	cpc	r25, r1
     b14:	09 f4       	brne	.+2      	; 0xb18 <EX_vdConfigInterrupt+0x3e>
     b16:	6d c0       	rjmp	.+218    	; 0xbf2 <EX_vdConfigInterrupt+0x118>
     b18:	29 85       	ldd	r18, Y+9	; 0x09
     b1a:	3a 85       	ldd	r19, Y+10	; 0x0a
     b1c:	22 30       	cpi	r18, 0x02	; 2
     b1e:	31 05       	cpc	r19, r1
     b20:	09 f4       	brne	.+2      	; 0xb24 <EX_vdConfigInterrupt+0x4a>
     b22:	c9 c0       	rjmp	.+402    	; 0xcb6 <EX_vdConfigInterrupt+0x1dc>
     b24:	89 85       	ldd	r24, Y+9	; 0x09
     b26:	9a 85       	ldd	r25, Y+10	; 0x0a
     b28:	00 97       	sbiw	r24, 0x00	; 0
     b2a:	09 f0       	breq	.+2      	; 0xb2e <EX_vdConfigInterrupt+0x54>
     b2c:	e9 c0       	rjmp	.+466    	; 0xd00 <EX_vdConfigInterrupt+0x226>
		{
			case EX_INT0:
				Set_Bit(GICR,6);
     b2e:	ab e5       	ldi	r26, 0x5B	; 91
     b30:	b0 e0       	ldi	r27, 0x00	; 0
     b32:	eb e5       	ldi	r30, 0x5B	; 91
     b34:	f0 e0       	ldi	r31, 0x00	; 0
     b36:	80 81       	ld	r24, Z
     b38:	80 64       	ori	r24, 0x40	; 64
     b3a:	8c 93       	st	X, r24
				switch (CopyControlSense)
     b3c:	8a 81       	ldd	r24, Y+2	; 0x02
     b3e:	28 2f       	mov	r18, r24
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	38 87       	std	Y+8, r19	; 0x08
     b44:	2f 83       	std	Y+7, r18	; 0x07
     b46:	8f 81       	ldd	r24, Y+7	; 0x07
     b48:	98 85       	ldd	r25, Y+8	; 0x08
     b4a:	81 30       	cpi	r24, 0x01	; 1
     b4c:	91 05       	cpc	r25, r1
     b4e:	21 f1       	breq	.+72     	; 0xb98 <EX_vdConfigInterrupt+0xbe>
     b50:	2f 81       	ldd	r18, Y+7	; 0x07
     b52:	38 85       	ldd	r19, Y+8	; 0x08
     b54:	22 30       	cpi	r18, 0x02	; 2
     b56:	31 05       	cpc	r19, r1
     b58:	2c f4       	brge	.+10     	; 0xb64 <EX_vdConfigInterrupt+0x8a>
     b5a:	8f 81       	ldd	r24, Y+7	; 0x07
     b5c:	98 85       	ldd	r25, Y+8	; 0x08
     b5e:	00 97       	sbiw	r24, 0x00	; 0
     b60:	61 f0       	breq	.+24     	; 0xb7a <EX_vdConfigInterrupt+0xa0>
     b62:	ce c0       	rjmp	.+412    	; 0xd00 <EX_vdConfigInterrupt+0x226>
     b64:	2f 81       	ldd	r18, Y+7	; 0x07
     b66:	38 85       	ldd	r19, Y+8	; 0x08
     b68:	22 30       	cpi	r18, 0x02	; 2
     b6a:	31 05       	cpc	r19, r1
     b6c:	21 f1       	breq	.+72     	; 0xbb6 <EX_vdConfigInterrupt+0xdc>
     b6e:	8f 81       	ldd	r24, Y+7	; 0x07
     b70:	98 85       	ldd	r25, Y+8	; 0x08
     b72:	83 30       	cpi	r24, 0x03	; 3
     b74:	91 05       	cpc	r25, r1
     b76:	71 f1       	breq	.+92     	; 0xbd4 <EX_vdConfigInterrupt+0xfa>
     b78:	c3 c0       	rjmp	.+390    	; 0xd00 <EX_vdConfigInterrupt+0x226>
				{
					case EX_SENSE_FALLING_EDGE:
						Clr_Bit(MCUCR,0);
     b7a:	a5 e5       	ldi	r26, 0x55	; 85
     b7c:	b0 e0       	ldi	r27, 0x00	; 0
     b7e:	e5 e5       	ldi	r30, 0x55	; 85
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	80 81       	ld	r24, Z
     b84:	8e 7f       	andi	r24, 0xFE	; 254
     b86:	8c 93       	st	X, r24
						Set_Bit(MCUCR,1);
     b88:	a5 e5       	ldi	r26, 0x55	; 85
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	e5 e5       	ldi	r30, 0x55	; 85
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 81       	ld	r24, Z
     b92:	82 60       	ori	r24, 0x02	; 2
     b94:	8c 93       	st	X, r24
     b96:	b4 c0       	rjmp	.+360    	; 0xd00 <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_RAISING_EDGE:
						Set_Bit(MCUCR,0);
     b98:	a5 e5       	ldi	r26, 0x55	; 85
     b9a:	b0 e0       	ldi	r27, 0x00	; 0
     b9c:	e5 e5       	ldi	r30, 0x55	; 85
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	80 81       	ld	r24, Z
     ba2:	81 60       	ori	r24, 0x01	; 1
     ba4:	8c 93       	st	X, r24
						Set_Bit(MCUCR,1);
     ba6:	a5 e5       	ldi	r26, 0x55	; 85
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	e5 e5       	ldi	r30, 0x55	; 85
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	82 60       	ori	r24, 0x02	; 2
     bb2:	8c 93       	st	X, r24
     bb4:	a5 c0       	rjmp	.+330    	; 0xd00 <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_LOW_LEVEL:
						Clr_Bit(MCUCR,0);
     bb6:	a5 e5       	ldi	r26, 0x55	; 85
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	e5 e5       	ldi	r30, 0x55	; 85
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	80 81       	ld	r24, Z
     bc0:	8e 7f       	andi	r24, 0xFE	; 254
     bc2:	8c 93       	st	X, r24
						Clr_Bit(MCUCR,1);
     bc4:	a5 e5       	ldi	r26, 0x55	; 85
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
     bc8:	e5 e5       	ldi	r30, 0x55	; 85
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	80 81       	ld	r24, Z
     bce:	8d 7f       	andi	r24, 0xFD	; 253
     bd0:	8c 93       	st	X, r24
     bd2:	96 c0       	rjmp	.+300    	; 0xd00 <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_LOGIACL_CHANGE:
						Set_Bit(MCUCR,0);
     bd4:	a5 e5       	ldi	r26, 0x55	; 85
     bd6:	b0 e0       	ldi	r27, 0x00	; 0
     bd8:	e5 e5       	ldi	r30, 0x55	; 85
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	80 81       	ld	r24, Z
     bde:	81 60       	ori	r24, 0x01	; 1
     be0:	8c 93       	st	X, r24
						Clr_Bit(MCUCR,1);
     be2:	a5 e5       	ldi	r26, 0x55	; 85
     be4:	b0 e0       	ldi	r27, 0x00	; 0
     be6:	e5 e5       	ldi	r30, 0x55	; 85
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	8d 7f       	andi	r24, 0xFD	; 253
     bee:	8c 93       	st	X, r24
     bf0:	87 c0       	rjmp	.+270    	; 0xd00 <EX_vdConfigInterrupt+0x226>
						break;
				}
				break;
			case EX_INT1:
				Set_Bit(GICR,7);
     bf2:	ab e5       	ldi	r26, 0x5B	; 91
     bf4:	b0 e0       	ldi	r27, 0x00	; 0
     bf6:	eb e5       	ldi	r30, 0x5B	; 91
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	80 68       	ori	r24, 0x80	; 128
     bfe:	8c 93       	st	X, r24
				switch (CopyControlSense)
     c00:	8a 81       	ldd	r24, Y+2	; 0x02
     c02:	28 2f       	mov	r18, r24
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	3e 83       	std	Y+6, r19	; 0x06
     c08:	2d 83       	std	Y+5, r18	; 0x05
     c0a:	8d 81       	ldd	r24, Y+5	; 0x05
     c0c:	9e 81       	ldd	r25, Y+6	; 0x06
     c0e:	81 30       	cpi	r24, 0x01	; 1
     c10:	91 05       	cpc	r25, r1
     c12:	21 f1       	breq	.+72     	; 0xc5c <EX_vdConfigInterrupt+0x182>
     c14:	2d 81       	ldd	r18, Y+5	; 0x05
     c16:	3e 81       	ldd	r19, Y+6	; 0x06
     c18:	22 30       	cpi	r18, 0x02	; 2
     c1a:	31 05       	cpc	r19, r1
     c1c:	2c f4       	brge	.+10     	; 0xc28 <EX_vdConfigInterrupt+0x14e>
     c1e:	8d 81       	ldd	r24, Y+5	; 0x05
     c20:	9e 81       	ldd	r25, Y+6	; 0x06
     c22:	00 97       	sbiw	r24, 0x00	; 0
     c24:	61 f0       	breq	.+24     	; 0xc3e <EX_vdConfigInterrupt+0x164>
     c26:	6c c0       	rjmp	.+216    	; 0xd00 <EX_vdConfigInterrupt+0x226>
     c28:	2d 81       	ldd	r18, Y+5	; 0x05
     c2a:	3e 81       	ldd	r19, Y+6	; 0x06
     c2c:	22 30       	cpi	r18, 0x02	; 2
     c2e:	31 05       	cpc	r19, r1
     c30:	21 f1       	breq	.+72     	; 0xc7a <EX_vdConfigInterrupt+0x1a0>
     c32:	8d 81       	ldd	r24, Y+5	; 0x05
     c34:	9e 81       	ldd	r25, Y+6	; 0x06
     c36:	83 30       	cpi	r24, 0x03	; 3
     c38:	91 05       	cpc	r25, r1
     c3a:	71 f1       	breq	.+92     	; 0xc98 <EX_vdConfigInterrupt+0x1be>
     c3c:	61 c0       	rjmp	.+194    	; 0xd00 <EX_vdConfigInterrupt+0x226>
				{
					case EX_SENSE_FALLING_EDGE:
						Clr_Bit(MCUCR,2);
     c3e:	a5 e5       	ldi	r26, 0x55	; 85
     c40:	b0 e0       	ldi	r27, 0x00	; 0
     c42:	e5 e5       	ldi	r30, 0x55	; 85
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	80 81       	ld	r24, Z
     c48:	8b 7f       	andi	r24, 0xFB	; 251
     c4a:	8c 93       	st	X, r24
						Set_Bit(MCUCR,3);
     c4c:	a5 e5       	ldi	r26, 0x55	; 85
     c4e:	b0 e0       	ldi	r27, 0x00	; 0
     c50:	e5 e5       	ldi	r30, 0x55	; 85
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	80 81       	ld	r24, Z
     c56:	88 60       	ori	r24, 0x08	; 8
     c58:	8c 93       	st	X, r24
     c5a:	52 c0       	rjmp	.+164    	; 0xd00 <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_RAISING_EDGE:
						Set_Bit(MCUCR,2);
     c5c:	a5 e5       	ldi	r26, 0x55	; 85
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	e5 e5       	ldi	r30, 0x55	; 85
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	80 81       	ld	r24, Z
     c66:	84 60       	ori	r24, 0x04	; 4
     c68:	8c 93       	st	X, r24
						Set_Bit(MCUCR,3);
     c6a:	a5 e5       	ldi	r26, 0x55	; 85
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	e5 e5       	ldi	r30, 0x55	; 85
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	88 60       	ori	r24, 0x08	; 8
     c76:	8c 93       	st	X, r24
     c78:	43 c0       	rjmp	.+134    	; 0xd00 <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_LOW_LEVEL:
						Clr_Bit(MCUCR,2);
     c7a:	a5 e5       	ldi	r26, 0x55	; 85
     c7c:	b0 e0       	ldi	r27, 0x00	; 0
     c7e:	e5 e5       	ldi	r30, 0x55	; 85
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	80 81       	ld	r24, Z
     c84:	8b 7f       	andi	r24, 0xFB	; 251
     c86:	8c 93       	st	X, r24
						Clr_Bit(MCUCR,3);
     c88:	a5 e5       	ldi	r26, 0x55	; 85
     c8a:	b0 e0       	ldi	r27, 0x00	; 0
     c8c:	e5 e5       	ldi	r30, 0x55	; 85
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	87 7f       	andi	r24, 0xF7	; 247
     c94:	8c 93       	st	X, r24
     c96:	34 c0       	rjmp	.+104    	; 0xd00 <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_LOGIACL_CHANGE:
						Set_Bit(MCUCR,2);
     c98:	a5 e5       	ldi	r26, 0x55	; 85
     c9a:	b0 e0       	ldi	r27, 0x00	; 0
     c9c:	e5 e5       	ldi	r30, 0x55	; 85
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	84 60       	ori	r24, 0x04	; 4
     ca4:	8c 93       	st	X, r24
						Clr_Bit(MCUCR,3);
     ca6:	a5 e5       	ldi	r26, 0x55	; 85
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e5 e5       	ldi	r30, 0x55	; 85
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	87 7f       	andi	r24, 0xF7	; 247
     cb2:	8c 93       	st	X, r24
     cb4:	25 c0       	rjmp	.+74     	; 0xd00 <EX_vdConfigInterrupt+0x226>
						break;
				}
				break;
			case EX_INT2:
				Set_Bit(GICR,5);
     cb6:	ab e5       	ldi	r26, 0x5B	; 91
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	eb e5       	ldi	r30, 0x5B	; 91
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	80 62       	ori	r24, 0x20	; 32
     cc2:	8c 93       	st	X, r24
				switch (CopyControlSense)
     cc4:	8a 81       	ldd	r24, Y+2	; 0x02
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	3c 83       	std	Y+4, r19	; 0x04
     ccc:	2b 83       	std	Y+3, r18	; 0x03
     cce:	8b 81       	ldd	r24, Y+3	; 0x03
     cd0:	9c 81       	ldd	r25, Y+4	; 0x04
     cd2:	00 97       	sbiw	r24, 0x00	; 0
     cd4:	31 f0       	breq	.+12     	; 0xce2 <EX_vdConfigInterrupt+0x208>
     cd6:	2b 81       	ldd	r18, Y+3	; 0x03
     cd8:	3c 81       	ldd	r19, Y+4	; 0x04
     cda:	21 30       	cpi	r18, 0x01	; 1
     cdc:	31 05       	cpc	r19, r1
     cde:	49 f0       	breq	.+18     	; 0xcf2 <EX_vdConfigInterrupt+0x218>
     ce0:	0f c0       	rjmp	.+30     	; 0xd00 <EX_vdConfigInterrupt+0x226>
				{
					case EX_SENSE_FALLING_EDGE:
						Clr_Bit(MCUCSR,6);
     ce2:	a4 e5       	ldi	r26, 0x54	; 84
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e4 e5       	ldi	r30, 0x54	; 84
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	8f 7b       	andi	r24, 0xBF	; 191
     cee:	8c 93       	st	X, r24
     cf0:	07 c0       	rjmp	.+14     	; 0xd00 <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_RAISING_EDGE:
						Set_Bit(MCUCSR,6);
     cf2:	a4 e5       	ldi	r26, 0x54	; 84
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	e4 e5       	ldi	r30, 0x54	; 84
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	80 64       	ori	r24, 0x40	; 64
     cfe:	8c 93       	st	X, r24
						break;
				}
				break;
		}
	}
}
     d00:	2a 96       	adiw	r28, 0x0a	; 10
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	f8 94       	cli
     d06:	de bf       	out	0x3e, r29	; 62
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	cd bf       	out	0x3d, r28	; 61
     d0c:	cf 91       	pop	r28
     d0e:	df 91       	pop	r29
     d10:	08 95       	ret

00000d12 <__vector_1>:
void __vector_1 (void)
{
     d12:	1f 92       	push	r1
     d14:	0f 92       	push	r0
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	0f 92       	push	r0
     d1a:	11 24       	eor	r1, r1
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62

}
     d24:	cf 91       	pop	r28
     d26:	df 91       	pop	r29
     d28:	0f 90       	pop	r0
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	0f 90       	pop	r0
     d2e:	1f 90       	pop	r1
     d30:	18 95       	reti

00000d32 <__vector_2>:
void __vector_2 (void)
{
     d32:	1f 92       	push	r1
     d34:	0f 92       	push	r0
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	0f 92       	push	r0
     d3a:	11 24       	eor	r1, r1
     d3c:	df 93       	push	r29
     d3e:	cf 93       	push	r28
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62

}
     d44:	cf 91       	pop	r28
     d46:	df 91       	pop	r29
     d48:	0f 90       	pop	r0
     d4a:	0f be       	out	0x3f, r0	; 63
     d4c:	0f 90       	pop	r0
     d4e:	1f 90       	pop	r1
     d50:	18 95       	reti

00000d52 <DIO_SetPortDirection>:


/* APIs IMPLEMENTATION */

/* API to Set Port Direction */
DIO_ERROR_state_t DIO_SetPortDirection(uint8_t PortID, uint8_t PortDirection) {
     d52:	df 93       	push	r29
     d54:	cf 93       	push	r28
     d56:	00 d0       	rcall	.+0      	; 0xd58 <DIO_SetPortDirection+0x6>
     d58:	00 d0       	rcall	.+0      	; 0xd5a <DIO_SetPortDirection+0x8>
     d5a:	0f 92       	push	r0
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
     d60:	89 83       	std	Y+1, r24	; 0x01
     d62:	6a 83       	std	Y+2, r22	; 0x02
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA )) {
     d64:	89 81       	ldd	r24, Y+1	; 0x01
     d66:	84 30       	cpi	r24, 0x04	; 4
     d68:	a0 f5       	brcc	.+104    	; 0xdd2 <DIO_SetPortDirection+0x80>
		switch (PortID) {
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	3d 83       	std	Y+5, r19	; 0x05
     d72:	2c 83       	std	Y+4, r18	; 0x04
     d74:	8c 81       	ldd	r24, Y+4	; 0x04
     d76:	9d 81       	ldd	r25, Y+5	; 0x05
     d78:	81 30       	cpi	r24, 0x01	; 1
     d7a:	91 05       	cpc	r25, r1
     d7c:	d1 f0       	breq	.+52     	; 0xdb2 <DIO_SetPortDirection+0x60>
     d7e:	2c 81       	ldd	r18, Y+4	; 0x04
     d80:	3d 81       	ldd	r19, Y+5	; 0x05
     d82:	22 30       	cpi	r18, 0x02	; 2
     d84:	31 05       	cpc	r19, r1
     d86:	2c f4       	brge	.+10     	; 0xd92 <DIO_SetPortDirection+0x40>
     d88:	8c 81       	ldd	r24, Y+4	; 0x04
     d8a:	9d 81       	ldd	r25, Y+5	; 0x05
     d8c:	00 97       	sbiw	r24, 0x00	; 0
     d8e:	61 f0       	breq	.+24     	; 0xda8 <DIO_SetPortDirection+0x56>
     d90:	1e c0       	rjmp	.+60     	; 0xdce <DIO_SetPortDirection+0x7c>
     d92:	2c 81       	ldd	r18, Y+4	; 0x04
     d94:	3d 81       	ldd	r19, Y+5	; 0x05
     d96:	22 30       	cpi	r18, 0x02	; 2
     d98:	31 05       	cpc	r19, r1
     d9a:	81 f0       	breq	.+32     	; 0xdbc <DIO_SetPortDirection+0x6a>
     d9c:	8c 81       	ldd	r24, Y+4	; 0x04
     d9e:	9d 81       	ldd	r25, Y+5	; 0x05
     da0:	83 30       	cpi	r24, 0x03	; 3
     da2:	91 05       	cpc	r25, r1
     da4:	81 f0       	breq	.+32     	; 0xdc6 <DIO_SetPortDirection+0x74>
     da6:	13 c0       	rjmp	.+38     	; 0xdce <DIO_SetPortDirection+0x7c>
		case PORTA :
			PORTA_DIR = PortDirection;
     da8:	ea e3       	ldi	r30, 0x3A	; 58
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	8a 81       	ldd	r24, Y+2	; 0x02
     dae:	80 83       	st	Z, r24
     db0:	0e c0       	rjmp	.+28     	; 0xdce <DIO_SetPortDirection+0x7c>
			break;
		case PORTB :
			PORTB_DIR = PortDirection;
     db2:	e7 e3       	ldi	r30, 0x37	; 55
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	8a 81       	ldd	r24, Y+2	; 0x02
     db8:	80 83       	st	Z, r24
     dba:	09 c0       	rjmp	.+18     	; 0xdce <DIO_SetPortDirection+0x7c>
			break;
		case PORTC :
			PORTC_DIR = PortDirection;
     dbc:	e4 e3       	ldi	r30, 0x34	; 52
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	8a 81       	ldd	r24, Y+2	; 0x02
     dc2:	80 83       	st	Z, r24
     dc4:	04 c0       	rjmp	.+8      	; 0xdce <DIO_SetPortDirection+0x7c>
			break;
		case PORTD :
			PORTD_DIR = PortDirection;
     dc6:	e1 e3       	ldi	r30, 0x31	; 49
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	8a 81       	ldd	r24, Y+2	; 0x02
     dcc:	80 83       	st	Z, r24
			break;
		} //END of SWITCH
		return E_DIO_SUCCESS ;
     dce:	1b 82       	std	Y+3, r1	; 0x03
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <DIO_SetPortDirection+0x84>
	}	  //END of IF
	else {
		return E_DIO_INVALID_PORT_NUMBER ;
     dd2:	91 e0       	ldi	r25, 0x01	; 1
     dd4:	9b 83       	std	Y+3, r25	; 0x03
     dd6:	8b 81       	ldd	r24, Y+3	; 0x03

	}	  //END of ELSE
}	  //END DIO_setPortDirection
     dd8:	0f 90       	pop	r0
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
     dde:	0f 90       	pop	r0
     de0:	0f 90       	pop	r0
     de2:	cf 91       	pop	r28
     de4:	df 91       	pop	r29
     de6:	08 95       	ret

00000de8 <DIO_SetPinDirection>:

/* API to Set Pin Direction */
DIO_ERROR_state_t DIO_SetPinDirection(uint8_t PortID, uint8_t PinNumber,
		uint8_t PinDirection) {
     de8:	df 93       	push	r29
     dea:	cf 93       	push	r28
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
     df0:	28 97       	sbiw	r28, 0x08	; 8
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	f8 94       	cli
     df6:	de bf       	out	0x3e, r29	; 62
     df8:	0f be       	out	0x3f, r0	; 63
     dfa:	cd bf       	out	0x3d, r28	; 61
     dfc:	89 83       	std	Y+1, r24	; 0x01
     dfe:	6a 83       	std	Y+2, r22	; 0x02
     e00:	4b 83       	std	Y+3, r20	; 0x03
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA ) && (PinNumber >= PIN0 )
     e02:	89 81       	ldd	r24, Y+1	; 0x01
     e04:	84 30       	cpi	r24, 0x04	; 4
     e06:	08 f0       	brcs	.+2      	; 0xe0a <DIO_SetPinDirection+0x22>
     e08:	f4 c0       	rjmp	.+488    	; 0xff2 <DIO_SetPinDirection+0x20a>
     e0a:	8a 81       	ldd	r24, Y+2	; 0x02
     e0c:	88 30       	cpi	r24, 0x08	; 8
     e0e:	08 f0       	brcs	.+2      	; 0xe12 <DIO_SetPinDirection+0x2a>
     e10:	f0 c0       	rjmp	.+480    	; 0xff2 <DIO_SetPinDirection+0x20a>
			&& (PinNumber <= PIN7 )) {
		if (PinDirection == PIN_OUTPUT) {
     e12:	8b 81       	ldd	r24, Y+3	; 0x03
     e14:	81 30       	cpi	r24, 0x01	; 1
     e16:	09 f0       	breq	.+2      	; 0xe1a <DIO_SetPinDirection+0x32>
     e18:	70 c0       	rjmp	.+224    	; 0xefa <DIO_SetPinDirection+0x112>
			switch (PortID) {
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
     e1c:	28 2f       	mov	r18, r24
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	38 87       	std	Y+8, r19	; 0x08
     e22:	2f 83       	std	Y+7, r18	; 0x07
     e24:	8f 81       	ldd	r24, Y+7	; 0x07
     e26:	98 85       	ldd	r25, Y+8	; 0x08
     e28:	81 30       	cpi	r24, 0x01	; 1
     e2a:	91 05       	cpc	r25, r1
     e2c:	49 f1       	breq	.+82     	; 0xe80 <DIO_SetPinDirection+0x98>
     e2e:	2f 81       	ldd	r18, Y+7	; 0x07
     e30:	38 85       	ldd	r19, Y+8	; 0x08
     e32:	22 30       	cpi	r18, 0x02	; 2
     e34:	31 05       	cpc	r19, r1
     e36:	2c f4       	brge	.+10     	; 0xe42 <DIO_SetPinDirection+0x5a>
     e38:	8f 81       	ldd	r24, Y+7	; 0x07
     e3a:	98 85       	ldd	r25, Y+8	; 0x08
     e3c:	00 97       	sbiw	r24, 0x00	; 0
     e3e:	61 f0       	breq	.+24     	; 0xe58 <DIO_SetPinDirection+0x70>
     e40:	5a c0       	rjmp	.+180    	; 0xef6 <DIO_SetPinDirection+0x10e>
     e42:	2f 81       	ldd	r18, Y+7	; 0x07
     e44:	38 85       	ldd	r19, Y+8	; 0x08
     e46:	22 30       	cpi	r18, 0x02	; 2
     e48:	31 05       	cpc	r19, r1
     e4a:	71 f1       	breq	.+92     	; 0xea8 <DIO_SetPinDirection+0xc0>
     e4c:	8f 81       	ldd	r24, Y+7	; 0x07
     e4e:	98 85       	ldd	r25, Y+8	; 0x08
     e50:	83 30       	cpi	r24, 0x03	; 3
     e52:	91 05       	cpc	r25, r1
     e54:	e9 f1       	breq	.+122    	; 0xed0 <DIO_SetPinDirection+0xe8>
     e56:	4f c0       	rjmp	.+158    	; 0xef6 <DIO_SetPinDirection+0x10e>
			case PORTA :
				Set_Bit(PORTA_DIR, PinNumber);
     e58:	aa e3       	ldi	r26, 0x3A	; 58
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	ea e3       	ldi	r30, 0x3A	; 58
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	48 2f       	mov	r20, r24
     e64:	8a 81       	ldd	r24, Y+2	; 0x02
     e66:	28 2f       	mov	r18, r24
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	02 2e       	mov	r0, r18
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <DIO_SetPinDirection+0x8e>
     e72:	88 0f       	add	r24, r24
     e74:	99 1f       	adc	r25, r25
     e76:	0a 94       	dec	r0
     e78:	e2 f7       	brpl	.-8      	; 0xe72 <DIO_SetPinDirection+0x8a>
     e7a:	84 2b       	or	r24, r20
     e7c:	8c 93       	st	X, r24
     e7e:	3b c0       	rjmp	.+118    	; 0xef6 <DIO_SetPinDirection+0x10e>
				break;
			case PORTB :
				Set_Bit(PORTB_DIR, PinNumber);
     e80:	a7 e3       	ldi	r26, 0x37	; 55
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	e7 e3       	ldi	r30, 0x37	; 55
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	48 2f       	mov	r20, r24
     e8c:	8a 81       	ldd	r24, Y+2	; 0x02
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	02 2e       	mov	r0, r18
     e98:	02 c0       	rjmp	.+4      	; 0xe9e <DIO_SetPinDirection+0xb6>
     e9a:	88 0f       	add	r24, r24
     e9c:	99 1f       	adc	r25, r25
     e9e:	0a 94       	dec	r0
     ea0:	e2 f7       	brpl	.-8      	; 0xe9a <DIO_SetPinDirection+0xb2>
     ea2:	84 2b       	or	r24, r20
     ea4:	8c 93       	st	X, r24
     ea6:	27 c0       	rjmp	.+78     	; 0xef6 <DIO_SetPinDirection+0x10e>
				break;
			case PORTC :
				Set_Bit(PORTC_DIR, PinNumber);
     ea8:	a4 e3       	ldi	r26, 0x34	; 52
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e4 e3       	ldi	r30, 0x34	; 52
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	48 2f       	mov	r20, r24
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	02 2e       	mov	r0, r18
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <DIO_SetPinDirection+0xde>
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	0a 94       	dec	r0
     ec8:	e2 f7       	brpl	.-8      	; 0xec2 <DIO_SetPinDirection+0xda>
     eca:	84 2b       	or	r24, r20
     ecc:	8c 93       	st	X, r24
     ece:	13 c0       	rjmp	.+38     	; 0xef6 <DIO_SetPinDirection+0x10e>
				break;
			case PORTD :
				Set_Bit(PORTD_DIR, PinNumber);
     ed0:	a1 e3       	ldi	r26, 0x31	; 49
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e1 e3       	ldi	r30, 0x31	; 49
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	48 2f       	mov	r20, r24
     edc:	8a 81       	ldd	r24, Y+2	; 0x02
     ede:	28 2f       	mov	r18, r24
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	02 2e       	mov	r0, r18
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <DIO_SetPinDirection+0x106>
     eea:	88 0f       	add	r24, r24
     eec:	99 1f       	adc	r25, r25
     eee:	0a 94       	dec	r0
     ef0:	e2 f7       	brpl	.-8      	; 0xeea <DIO_SetPinDirection+0x102>
     ef2:	84 2b       	or	r24, r20
     ef4:	8c 93       	st	X, r24
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
     ef6:	1e 82       	std	Y+6, r1	; 0x06
     ef8:	7e c0       	rjmp	.+252    	; 0xff6 <DIO_SetPinDirection+0x20e>
		} // END of IF that check for the direction if it is INPUT
		else if (PinDirection == PIN_INPUT) {
     efa:	8b 81       	ldd	r24, Y+3	; 0x03
     efc:	88 23       	and	r24, r24
     efe:	09 f0       	breq	.+2      	; 0xf02 <DIO_SetPinDirection+0x11a>
     f00:	75 c0       	rjmp	.+234    	; 0xfec <DIO_SetPinDirection+0x204>
			switch (PortID) {
     f02:	89 81       	ldd	r24, Y+1	; 0x01
     f04:	28 2f       	mov	r18, r24
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	3d 83       	std	Y+5, r19	; 0x05
     f0a:	2c 83       	std	Y+4, r18	; 0x04
     f0c:	8c 81       	ldd	r24, Y+4	; 0x04
     f0e:	9d 81       	ldd	r25, Y+5	; 0x05
     f10:	81 30       	cpi	r24, 0x01	; 1
     f12:	91 05       	cpc	r25, r1
     f14:	59 f1       	breq	.+86     	; 0xf6c <DIO_SetPinDirection+0x184>
     f16:	2c 81       	ldd	r18, Y+4	; 0x04
     f18:	3d 81       	ldd	r19, Y+5	; 0x05
     f1a:	22 30       	cpi	r18, 0x02	; 2
     f1c:	31 05       	cpc	r19, r1
     f1e:	2c f4       	brge	.+10     	; 0xf2a <DIO_SetPinDirection+0x142>
     f20:	8c 81       	ldd	r24, Y+4	; 0x04
     f22:	9d 81       	ldd	r25, Y+5	; 0x05
     f24:	00 97       	sbiw	r24, 0x00	; 0
     f26:	69 f0       	breq	.+26     	; 0xf42 <DIO_SetPinDirection+0x15a>
     f28:	5f c0       	rjmp	.+190    	; 0xfe8 <DIO_SetPinDirection+0x200>
     f2a:	2c 81       	ldd	r18, Y+4	; 0x04
     f2c:	3d 81       	ldd	r19, Y+5	; 0x05
     f2e:	22 30       	cpi	r18, 0x02	; 2
     f30:	31 05       	cpc	r19, r1
     f32:	89 f1       	breq	.+98     	; 0xf96 <DIO_SetPinDirection+0x1ae>
     f34:	8c 81       	ldd	r24, Y+4	; 0x04
     f36:	9d 81       	ldd	r25, Y+5	; 0x05
     f38:	83 30       	cpi	r24, 0x03	; 3
     f3a:	91 05       	cpc	r25, r1
     f3c:	09 f4       	brne	.+2      	; 0xf40 <DIO_SetPinDirection+0x158>
     f3e:	40 c0       	rjmp	.+128    	; 0xfc0 <DIO_SetPinDirection+0x1d8>
     f40:	53 c0       	rjmp	.+166    	; 0xfe8 <DIO_SetPinDirection+0x200>
			case PORTA :
				Clr_Bit(PORTA_DIR, PinNumber);
     f42:	aa e3       	ldi	r26, 0x3A	; 58
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	ea e3       	ldi	r30, 0x3A	; 58
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	48 2f       	mov	r20, r24
     f4e:	8a 81       	ldd	r24, Y+2	; 0x02
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	02 2e       	mov	r0, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <DIO_SetPinDirection+0x178>
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	0a 94       	dec	r0
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <DIO_SetPinDirection+0x174>
     f64:	80 95       	com	r24
     f66:	84 23       	and	r24, r20
     f68:	8c 93       	st	X, r24
     f6a:	3e c0       	rjmp	.+124    	; 0xfe8 <DIO_SetPinDirection+0x200>
				break;
			case PORTB :
				Clr_Bit(PORTB_DIR, PinNumber);
     f6c:	a7 e3       	ldi	r26, 0x37	; 55
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e7 e3       	ldi	r30, 0x37	; 55
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	48 2f       	mov	r20, r24
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	02 2e       	mov	r0, r18
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <DIO_SetPinDirection+0x1a2>
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	0a 94       	dec	r0
     f8c:	e2 f7       	brpl	.-8      	; 0xf86 <DIO_SetPinDirection+0x19e>
     f8e:	80 95       	com	r24
     f90:	84 23       	and	r24, r20
     f92:	8c 93       	st	X, r24
     f94:	29 c0       	rjmp	.+82     	; 0xfe8 <DIO_SetPinDirection+0x200>
				break;
			case PORTC :
				Clr_Bit(PORTC_DIR, PinNumber);
     f96:	a4 e3       	ldi	r26, 0x34	; 52
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e4 e3       	ldi	r30, 0x34	; 52
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	48 2f       	mov	r20, r24
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	02 2e       	mov	r0, r18
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <DIO_SetPinDirection+0x1cc>
     fb0:	88 0f       	add	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	0a 94       	dec	r0
     fb6:	e2 f7       	brpl	.-8      	; 0xfb0 <DIO_SetPinDirection+0x1c8>
     fb8:	80 95       	com	r24
     fba:	84 23       	and	r24, r20
     fbc:	8c 93       	st	X, r24
     fbe:	14 c0       	rjmp	.+40     	; 0xfe8 <DIO_SetPinDirection+0x200>
				break;
			case PORTD :
				Clr_Bit(PORTD_DIR, PinNumber);
     fc0:	a1 e3       	ldi	r26, 0x31	; 49
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e1 e3       	ldi	r30, 0x31	; 49
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	48 2f       	mov	r20, r24
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	02 2e       	mov	r0, r18
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <DIO_SetPinDirection+0x1f6>
     fda:	88 0f       	add	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	0a 94       	dec	r0
     fe0:	e2 f7       	brpl	.-8      	; 0xfda <DIO_SetPinDirection+0x1f2>
     fe2:	80 95       	com	r24
     fe4:	84 23       	and	r24, r20
     fe6:	8c 93       	st	X, r24
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
     fe8:	1e 82       	std	Y+6, r1	; 0x06
     fea:	05 c0       	rjmp	.+10     	; 0xff6 <DIO_SetPinDirection+0x20e>
		} // END of ELSE IF that check for the direction if it is INPUT
		else {
			return E_DIO_INVALID_PIN_DIRECTION ;
     fec:	92 e0       	ldi	r25, 0x02	; 2
     fee:	9e 83       	std	Y+6, r25	; 0x06
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <DIO_SetPinDirection+0x20e>
		} //END OF ELSE

	}	  //END of IF That checking the port and pin number

	else {
		return E_DIO_INVALID_PORT_NUMBER ;
     ff2:	21 e0       	ldi	r18, 0x01	; 1
     ff4:	2e 83       	std	Y+6, r18	; 0x06
     ff6:	8e 81       	ldd	r24, Y+6	; 0x06

	}	  //END of ELSE
}	  //END DIO_setPinDirection
     ff8:	28 96       	adiw	r28, 0x08	; 8
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	f8 94       	cli
     ffe:	de bf       	out	0x3e, r29	; 62
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	cd bf       	out	0x3d, r28	; 61
    1004:	cf 91       	pop	r28
    1006:	df 91       	pop	r29
    1008:	08 95       	ret

0000100a <DIO_writePort>:

/* API to Write Port  Value */
DIO_ERROR_state_t DIO_writePort(uint8_t PortID, uint8_t PortValue) {
    100a:	df 93       	push	r29
    100c:	cf 93       	push	r28
    100e:	00 d0       	rcall	.+0      	; 0x1010 <DIO_writePort+0x6>
    1010:	00 d0       	rcall	.+0      	; 0x1012 <DIO_writePort+0x8>
    1012:	0f 92       	push	r0
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
    1018:	89 83       	std	Y+1, r24	; 0x01
    101a:	6a 83       	std	Y+2, r22	; 0x02
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA )) {
    101c:	89 81       	ldd	r24, Y+1	; 0x01
    101e:	84 30       	cpi	r24, 0x04	; 4
    1020:	a0 f5       	brcc	.+104    	; 0x108a <DIO_writePort+0x80>
		switch (PortID) {
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	3d 83       	std	Y+5, r19	; 0x05
    102a:	2c 83       	std	Y+4, r18	; 0x04
    102c:	8c 81       	ldd	r24, Y+4	; 0x04
    102e:	9d 81       	ldd	r25, Y+5	; 0x05
    1030:	81 30       	cpi	r24, 0x01	; 1
    1032:	91 05       	cpc	r25, r1
    1034:	d1 f0       	breq	.+52     	; 0x106a <DIO_writePort+0x60>
    1036:	2c 81       	ldd	r18, Y+4	; 0x04
    1038:	3d 81       	ldd	r19, Y+5	; 0x05
    103a:	22 30       	cpi	r18, 0x02	; 2
    103c:	31 05       	cpc	r19, r1
    103e:	2c f4       	brge	.+10     	; 0x104a <DIO_writePort+0x40>
    1040:	8c 81       	ldd	r24, Y+4	; 0x04
    1042:	9d 81       	ldd	r25, Y+5	; 0x05
    1044:	00 97       	sbiw	r24, 0x00	; 0
    1046:	61 f0       	breq	.+24     	; 0x1060 <DIO_writePort+0x56>
    1048:	1e c0       	rjmp	.+60     	; 0x1086 <DIO_writePort+0x7c>
    104a:	2c 81       	ldd	r18, Y+4	; 0x04
    104c:	3d 81       	ldd	r19, Y+5	; 0x05
    104e:	22 30       	cpi	r18, 0x02	; 2
    1050:	31 05       	cpc	r19, r1
    1052:	81 f0       	breq	.+32     	; 0x1074 <DIO_writePort+0x6a>
    1054:	8c 81       	ldd	r24, Y+4	; 0x04
    1056:	9d 81       	ldd	r25, Y+5	; 0x05
    1058:	83 30       	cpi	r24, 0x03	; 3
    105a:	91 05       	cpc	r25, r1
    105c:	81 f0       	breq	.+32     	; 0x107e <DIO_writePort+0x74>
    105e:	13 c0       	rjmp	.+38     	; 0x1086 <DIO_writePort+0x7c>
		case PORTA :
			PORTA_DATA = PortValue;
    1060:	eb e3       	ldi	r30, 0x3B	; 59
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	80 83       	st	Z, r24
    1068:	0e c0       	rjmp	.+28     	; 0x1086 <DIO_writePort+0x7c>
			break;
		case PORTB :
			PORTB_DATA = PortValue;
    106a:	e8 e3       	ldi	r30, 0x38	; 56
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	80 83       	st	Z, r24
    1072:	09 c0       	rjmp	.+18     	; 0x1086 <DIO_writePort+0x7c>
			break;
		case PORTC :
			PORTC_DATA = PortValue;
    1074:	e5 e3       	ldi	r30, 0x35	; 53
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	8a 81       	ldd	r24, Y+2	; 0x02
    107a:	80 83       	st	Z, r24
    107c:	04 c0       	rjmp	.+8      	; 0x1086 <DIO_writePort+0x7c>
			break;
		case PORTD :
			PORTD_DATA = PortValue;
    107e:	e2 e3       	ldi	r30, 0x32	; 50
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	80 83       	st	Z, r24
			break;

		} //END of SWITCH
		return E_DIO_SUCCESS ;
    1086:	1b 82       	std	Y+3, r1	; 0x03
    1088:	02 c0       	rjmp	.+4      	; 0x108e <DIO_writePort+0x84>
	}	  //END of IF
	else {
		return E_DIO_INVALID_PORT_NUMBER ;
    108a:	91 e0       	ldi	r25, 0x01	; 1
    108c:	9b 83       	std	Y+3, r25	; 0x03
    108e:	8b 81       	ldd	r24, Y+3	; 0x03

	}	  //END of ELSE
}	  //END DIO_writePortValue
    1090:	0f 90       	pop	r0
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	08 95       	ret

000010a0 <DIO_WritePin>:

/* API to Write Pin  Value */
DIO_ERROR_state_t DIO_WritePin(uint8_t PortID, uint8_t PinNumber,
		uint8_t PinDirection) {
    10a0:	df 93       	push	r29
    10a2:	cf 93       	push	r28
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62
    10a8:	28 97       	sbiw	r28, 0x08	; 8
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	f8 94       	cli
    10ae:	de bf       	out	0x3e, r29	; 62
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	cd bf       	out	0x3d, r28	; 61
    10b4:	89 83       	std	Y+1, r24	; 0x01
    10b6:	6a 83       	std	Y+2, r22	; 0x02
    10b8:	4b 83       	std	Y+3, r20	; 0x03
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA ) && (PinNumber >= PIN0 )
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	84 30       	cpi	r24, 0x04	; 4
    10be:	08 f0       	brcs	.+2      	; 0x10c2 <DIO_WritePin+0x22>
    10c0:	f4 c0       	rjmp	.+488    	; 0x12aa <DIO_WritePin+0x20a>
    10c2:	8a 81       	ldd	r24, Y+2	; 0x02
    10c4:	88 30       	cpi	r24, 0x08	; 8
    10c6:	08 f0       	brcs	.+2      	; 0x10ca <DIO_WritePin+0x2a>
    10c8:	f0 c0       	rjmp	.+480    	; 0x12aa <DIO_WritePin+0x20a>
			&& (PinNumber <= PIN7 )) {
		if (PinDirection == PIN_HIGH) {
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	81 30       	cpi	r24, 0x01	; 1
    10ce:	09 f0       	breq	.+2      	; 0x10d2 <DIO_WritePin+0x32>
    10d0:	70 c0       	rjmp	.+224    	; 0x11b2 <DIO_WritePin+0x112>
			switch (PortID) {
    10d2:	89 81       	ldd	r24, Y+1	; 0x01
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	38 87       	std	Y+8, r19	; 0x08
    10da:	2f 83       	std	Y+7, r18	; 0x07
    10dc:	8f 81       	ldd	r24, Y+7	; 0x07
    10de:	98 85       	ldd	r25, Y+8	; 0x08
    10e0:	81 30       	cpi	r24, 0x01	; 1
    10e2:	91 05       	cpc	r25, r1
    10e4:	49 f1       	breq	.+82     	; 0x1138 <DIO_WritePin+0x98>
    10e6:	2f 81       	ldd	r18, Y+7	; 0x07
    10e8:	38 85       	ldd	r19, Y+8	; 0x08
    10ea:	22 30       	cpi	r18, 0x02	; 2
    10ec:	31 05       	cpc	r19, r1
    10ee:	2c f4       	brge	.+10     	; 0x10fa <DIO_WritePin+0x5a>
    10f0:	8f 81       	ldd	r24, Y+7	; 0x07
    10f2:	98 85       	ldd	r25, Y+8	; 0x08
    10f4:	00 97       	sbiw	r24, 0x00	; 0
    10f6:	61 f0       	breq	.+24     	; 0x1110 <DIO_WritePin+0x70>
    10f8:	5a c0       	rjmp	.+180    	; 0x11ae <DIO_WritePin+0x10e>
    10fa:	2f 81       	ldd	r18, Y+7	; 0x07
    10fc:	38 85       	ldd	r19, Y+8	; 0x08
    10fe:	22 30       	cpi	r18, 0x02	; 2
    1100:	31 05       	cpc	r19, r1
    1102:	71 f1       	breq	.+92     	; 0x1160 <DIO_WritePin+0xc0>
    1104:	8f 81       	ldd	r24, Y+7	; 0x07
    1106:	98 85       	ldd	r25, Y+8	; 0x08
    1108:	83 30       	cpi	r24, 0x03	; 3
    110a:	91 05       	cpc	r25, r1
    110c:	e9 f1       	breq	.+122    	; 0x1188 <DIO_WritePin+0xe8>
    110e:	4f c0       	rjmp	.+158    	; 0x11ae <DIO_WritePin+0x10e>
			case PORTA :
				Set_Bit(PORTA_DATA, PinNumber);
    1110:	ab e3       	ldi	r26, 0x3B	; 59
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	eb e3       	ldi	r30, 0x3B	; 59
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	48 2f       	mov	r20, r24
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	02 2e       	mov	r0, r18
    1128:	02 c0       	rjmp	.+4      	; 0x112e <DIO_WritePin+0x8e>
    112a:	88 0f       	add	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	0a 94       	dec	r0
    1130:	e2 f7       	brpl	.-8      	; 0x112a <DIO_WritePin+0x8a>
    1132:	84 2b       	or	r24, r20
    1134:	8c 93       	st	X, r24
    1136:	3b c0       	rjmp	.+118    	; 0x11ae <DIO_WritePin+0x10e>
				break;
			case PORTB :
				Set_Bit(PORTB_DATA, PinNumber);
    1138:	a8 e3       	ldi	r26, 0x38	; 56
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e8 e3       	ldi	r30, 0x38	; 56
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	48 2f       	mov	r20, r24
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	02 2e       	mov	r0, r18
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <DIO_WritePin+0xb6>
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	0a 94       	dec	r0
    1158:	e2 f7       	brpl	.-8      	; 0x1152 <DIO_WritePin+0xb2>
    115a:	84 2b       	or	r24, r20
    115c:	8c 93       	st	X, r24
    115e:	27 c0       	rjmp	.+78     	; 0x11ae <DIO_WritePin+0x10e>
				break;
			case PORTC :
				Set_Bit(PORTC_DATA, PinNumber);
    1160:	a5 e3       	ldi	r26, 0x35	; 53
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	e5 e3       	ldi	r30, 0x35	; 53
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	48 2f       	mov	r20, r24
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	02 2e       	mov	r0, r18
    1178:	02 c0       	rjmp	.+4      	; 0x117e <DIO_WritePin+0xde>
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	0a 94       	dec	r0
    1180:	e2 f7       	brpl	.-8      	; 0x117a <DIO_WritePin+0xda>
    1182:	84 2b       	or	r24, r20
    1184:	8c 93       	st	X, r24
    1186:	13 c0       	rjmp	.+38     	; 0x11ae <DIO_WritePin+0x10e>
				break;
			case PORTD :
				Set_Bit(PORTD_DATA, PinNumber);
    1188:	a2 e3       	ldi	r26, 0x32	; 50
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e2 e3       	ldi	r30, 0x32	; 50
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	48 2f       	mov	r20, r24
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	02 2e       	mov	r0, r18
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <DIO_WritePin+0x106>
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	0a 94       	dec	r0
    11a8:	e2 f7       	brpl	.-8      	; 0x11a2 <DIO_WritePin+0x102>
    11aa:	84 2b       	or	r24, r20
    11ac:	8c 93       	st	X, r24
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
    11ae:	1e 82       	std	Y+6, r1	; 0x06
    11b0:	7e c0       	rjmp	.+252    	; 0x12ae <DIO_WritePin+0x20e>
		} // END of IF that check for the direction if it is INPUT
		else if (PinDirection == PIN_LOW) {
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	88 23       	and	r24, r24
    11b6:	09 f0       	breq	.+2      	; 0x11ba <DIO_WritePin+0x11a>
    11b8:	75 c0       	rjmp	.+234    	; 0x12a4 <DIO_WritePin+0x204>
			switch (PortID) {
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	3d 83       	std	Y+5, r19	; 0x05
    11c2:	2c 83       	std	Y+4, r18	; 0x04
    11c4:	8c 81       	ldd	r24, Y+4	; 0x04
    11c6:	9d 81       	ldd	r25, Y+5	; 0x05
    11c8:	81 30       	cpi	r24, 0x01	; 1
    11ca:	91 05       	cpc	r25, r1
    11cc:	59 f1       	breq	.+86     	; 0x1224 <DIO_WritePin+0x184>
    11ce:	2c 81       	ldd	r18, Y+4	; 0x04
    11d0:	3d 81       	ldd	r19, Y+5	; 0x05
    11d2:	22 30       	cpi	r18, 0x02	; 2
    11d4:	31 05       	cpc	r19, r1
    11d6:	2c f4       	brge	.+10     	; 0x11e2 <DIO_WritePin+0x142>
    11d8:	8c 81       	ldd	r24, Y+4	; 0x04
    11da:	9d 81       	ldd	r25, Y+5	; 0x05
    11dc:	00 97       	sbiw	r24, 0x00	; 0
    11de:	69 f0       	breq	.+26     	; 0x11fa <DIO_WritePin+0x15a>
    11e0:	5f c0       	rjmp	.+190    	; 0x12a0 <DIO_WritePin+0x200>
    11e2:	2c 81       	ldd	r18, Y+4	; 0x04
    11e4:	3d 81       	ldd	r19, Y+5	; 0x05
    11e6:	22 30       	cpi	r18, 0x02	; 2
    11e8:	31 05       	cpc	r19, r1
    11ea:	89 f1       	breq	.+98     	; 0x124e <DIO_WritePin+0x1ae>
    11ec:	8c 81       	ldd	r24, Y+4	; 0x04
    11ee:	9d 81       	ldd	r25, Y+5	; 0x05
    11f0:	83 30       	cpi	r24, 0x03	; 3
    11f2:	91 05       	cpc	r25, r1
    11f4:	09 f4       	brne	.+2      	; 0x11f8 <DIO_WritePin+0x158>
    11f6:	40 c0       	rjmp	.+128    	; 0x1278 <DIO_WritePin+0x1d8>
    11f8:	53 c0       	rjmp	.+166    	; 0x12a0 <DIO_WritePin+0x200>
			case PORTA :
				Clr_Bit(PORTA_DATA, PinNumber);
    11fa:	ab e3       	ldi	r26, 0x3B	; 59
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	eb e3       	ldi	r30, 0x3B	; 59
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	48 2f       	mov	r20, r24
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	28 2f       	mov	r18, r24
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	02 2e       	mov	r0, r18
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <DIO_WritePin+0x178>
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	0a 94       	dec	r0
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <DIO_WritePin+0x174>
    121c:	80 95       	com	r24
    121e:	84 23       	and	r24, r20
    1220:	8c 93       	st	X, r24
    1222:	3e c0       	rjmp	.+124    	; 0x12a0 <DIO_WritePin+0x200>
				break;
			case PORTB :
				Clr_Bit(PORTB_DATA, PinNumber);
    1224:	a8 e3       	ldi	r26, 0x38	; 56
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	e8 e3       	ldi	r30, 0x38	; 56
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	48 2f       	mov	r20, r24
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	02 2e       	mov	r0, r18
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <DIO_WritePin+0x1a2>
    123e:	88 0f       	add	r24, r24
    1240:	99 1f       	adc	r25, r25
    1242:	0a 94       	dec	r0
    1244:	e2 f7       	brpl	.-8      	; 0x123e <DIO_WritePin+0x19e>
    1246:	80 95       	com	r24
    1248:	84 23       	and	r24, r20
    124a:	8c 93       	st	X, r24
    124c:	29 c0       	rjmp	.+82     	; 0x12a0 <DIO_WritePin+0x200>
				break;
			case PORTC :
				Clr_Bit(PORTC_DATA, PinNumber);
    124e:	a5 e3       	ldi	r26, 0x35	; 53
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	e5 e3       	ldi	r30, 0x35	; 53
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	48 2f       	mov	r20, r24
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	02 2e       	mov	r0, r18
    1266:	02 c0       	rjmp	.+4      	; 0x126c <DIO_WritePin+0x1cc>
    1268:	88 0f       	add	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	0a 94       	dec	r0
    126e:	e2 f7       	brpl	.-8      	; 0x1268 <DIO_WritePin+0x1c8>
    1270:	80 95       	com	r24
    1272:	84 23       	and	r24, r20
    1274:	8c 93       	st	X, r24
    1276:	14 c0       	rjmp	.+40     	; 0x12a0 <DIO_WritePin+0x200>
				break;
			case PORTD :
				Clr_Bit(PORTD_DATA, PinNumber);
    1278:	a2 e3       	ldi	r26, 0x32	; 50
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e2 e3       	ldi	r30, 0x32	; 50
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	48 2f       	mov	r20, r24
    1284:	8a 81       	ldd	r24, Y+2	; 0x02
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	02 2e       	mov	r0, r18
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <DIO_WritePin+0x1f6>
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	0a 94       	dec	r0
    1298:	e2 f7       	brpl	.-8      	; 0x1292 <DIO_WritePin+0x1f2>
    129a:	80 95       	com	r24
    129c:	84 23       	and	r24, r20
    129e:	8c 93       	st	X, r24
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
    12a0:	1e 82       	std	Y+6, r1	; 0x06
    12a2:	05 c0       	rjmp	.+10     	; 0x12ae <DIO_WritePin+0x20e>
		} // END of ELSE IF that check for the direction if it is INPUT
		else {
			return E_DIO_INVALID_PIN_DIRECTION ;
    12a4:	92 e0       	ldi	r25, 0x02	; 2
    12a6:	9e 83       	std	Y+6, r25	; 0x06
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <DIO_WritePin+0x20e>
		} //END OF ELSE

	}	  //END of IF That checking the port and pin number

	else {
		return E_DIO_INVALID_PORT_NUMBER ;
    12aa:	21 e0       	ldi	r18, 0x01	; 1
    12ac:	2e 83       	std	Y+6, r18	; 0x06
    12ae:	8e 81       	ldd	r24, Y+6	; 0x06

	}	  //END of ELSE
}	  //END of DIO_writePinValue
    12b0:	28 96       	adiw	r28, 0x08	; 8
    12b2:	0f b6       	in	r0, 0x3f	; 63
    12b4:	f8 94       	cli
    12b6:	de bf       	out	0x3e, r29	; 62
    12b8:	0f be       	out	0x3f, r0	; 63
    12ba:	cd bf       	out	0x3d, r28	; 61
    12bc:	cf 91       	pop	r28
    12be:	df 91       	pop	r29
    12c0:	08 95       	ret

000012c2 <DIO_ReadPort>:

/* API to Read Port  Value */
DIO_ERROR_state_t DIO_ReadPort(uint8_t PortID, uint8_t* PortState) {
    12c2:	df 93       	push	r29
    12c4:	cf 93       	push	r28
    12c6:	00 d0       	rcall	.+0      	; 0x12c8 <DIO_ReadPort+0x6>
    12c8:	00 d0       	rcall	.+0      	; 0x12ca <DIO_ReadPort+0x8>
    12ca:	00 d0       	rcall	.+0      	; 0x12cc <DIO_ReadPort+0xa>
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
    12d0:	89 83       	std	Y+1, r24	; 0x01
    12d2:	7b 83       	std	Y+3, r23	; 0x03
    12d4:	6a 83       	std	Y+2, r22	; 0x02
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA )) {
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	84 30       	cpi	r24, 0x04	; 4
    12da:	e0 f5       	brcc	.+120    	; 0x1354 <DIO_ReadPort+0x92>
		switch (PortID) {
    12dc:	89 81       	ldd	r24, Y+1	; 0x01
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	3e 83       	std	Y+6, r19	; 0x06
    12e4:	2d 83       	std	Y+5, r18	; 0x05
    12e6:	8d 81       	ldd	r24, Y+5	; 0x05
    12e8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ea:	81 30       	cpi	r24, 0x01	; 1
    12ec:	91 05       	cpc	r25, r1
    12ee:	e1 f0       	breq	.+56     	; 0x1328 <DIO_ReadPort+0x66>
    12f0:	2d 81       	ldd	r18, Y+5	; 0x05
    12f2:	3e 81       	ldd	r19, Y+6	; 0x06
    12f4:	22 30       	cpi	r18, 0x02	; 2
    12f6:	31 05       	cpc	r19, r1
    12f8:	2c f4       	brge	.+10     	; 0x1304 <DIO_ReadPort+0x42>
    12fa:	8d 81       	ldd	r24, Y+5	; 0x05
    12fc:	9e 81       	ldd	r25, Y+6	; 0x06
    12fe:	00 97       	sbiw	r24, 0x00	; 0
    1300:	61 f0       	breq	.+24     	; 0x131a <DIO_ReadPort+0x58>
    1302:	26 c0       	rjmp	.+76     	; 0x1350 <DIO_ReadPort+0x8e>
    1304:	2d 81       	ldd	r18, Y+5	; 0x05
    1306:	3e 81       	ldd	r19, Y+6	; 0x06
    1308:	22 30       	cpi	r18, 0x02	; 2
    130a:	31 05       	cpc	r19, r1
    130c:	a1 f0       	breq	.+40     	; 0x1336 <DIO_ReadPort+0x74>
    130e:	8d 81       	ldd	r24, Y+5	; 0x05
    1310:	9e 81       	ldd	r25, Y+6	; 0x06
    1312:	83 30       	cpi	r24, 0x03	; 3
    1314:	91 05       	cpc	r25, r1
    1316:	b1 f0       	breq	.+44     	; 0x1344 <DIO_ReadPort+0x82>
    1318:	1b c0       	rjmp	.+54     	; 0x1350 <DIO_ReadPort+0x8e>
		case PORTA :
			*(PortState) = PORTA_STAT;
    131a:	e9 e3       	ldi	r30, 0x39	; 57
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	ea 81       	ldd	r30, Y+2	; 0x02
    1322:	fb 81       	ldd	r31, Y+3	; 0x03
    1324:	80 83       	st	Z, r24
    1326:	14 c0       	rjmp	.+40     	; 0x1350 <DIO_ReadPort+0x8e>
			break;
		case PORTB :
			*(PortState) = PORTB_STAT;
    1328:	e6 e3       	ldi	r30, 0x36	; 54
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	ea 81       	ldd	r30, Y+2	; 0x02
    1330:	fb 81       	ldd	r31, Y+3	; 0x03
    1332:	80 83       	st	Z, r24
    1334:	0d c0       	rjmp	.+26     	; 0x1350 <DIO_ReadPort+0x8e>
			break;
		case PORTC :
			*(PortState) = PORTC_STAT;
    1336:	e3 e3       	ldi	r30, 0x33	; 51
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	ea 81       	ldd	r30, Y+2	; 0x02
    133e:	fb 81       	ldd	r31, Y+3	; 0x03
    1340:	80 83       	st	Z, r24
    1342:	06 c0       	rjmp	.+12     	; 0x1350 <DIO_ReadPort+0x8e>
			break;
		case PORTD :
			*(PortState) = PORTD_STAT;
    1344:	e0 e3       	ldi	r30, 0x30	; 48
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	ea 81       	ldd	r30, Y+2	; 0x02
    134c:	fb 81       	ldd	r31, Y+3	; 0x03
    134e:	80 83       	st	Z, r24
			break;

		} //END of SWITCH
		return E_DIO_SUCCESS ;
    1350:	1c 82       	std	Y+4, r1	; 0x04
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <DIO_ReadPort+0x96>
	}	  //END of IF
	else {
		return E_DIO_INVALID_PORT_NUMBER ;
    1354:	91 e0       	ldi	r25, 0x01	; 1
    1356:	9c 83       	std	Y+4, r25	; 0x04
    1358:	8c 81       	ldd	r24, Y+4	; 0x04

	}	  //END of ELSE
}	  //END of DIO_readPort
    135a:	26 96       	adiw	r28, 0x06	; 6
    135c:	0f b6       	in	r0, 0x3f	; 63
    135e:	f8 94       	cli
    1360:	de bf       	out	0x3e, r29	; 62
    1362:	0f be       	out	0x3f, r0	; 63
    1364:	cd bf       	out	0x3d, r28	; 61
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	08 95       	ret

0000136c <DIO_ReadPin>:

/* API to Read Pin  Value */
DIO_ERROR_state_t DIO_ReadPin(uint8_t PortID, uint8_t PinNumber,
		uint8_t* PinState) {
    136c:	df 93       	push	r29
    136e:	cf 93       	push	r28
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
    1374:	27 97       	sbiw	r28, 0x07	; 7
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	f8 94       	cli
    137a:	de bf       	out	0x3e, r29	; 62
    137c:	0f be       	out	0x3f, r0	; 63
    137e:	cd bf       	out	0x3d, r28	; 61
    1380:	89 83       	std	Y+1, r24	; 0x01
    1382:	6a 83       	std	Y+2, r22	; 0x02
    1384:	5c 83       	std	Y+4, r21	; 0x04
    1386:	4b 83       	std	Y+3, r20	; 0x03
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA ) && (PinNumber >= PIN0 )
    1388:	89 81       	ldd	r24, Y+1	; 0x01
    138a:	84 30       	cpi	r24, 0x04	; 4
    138c:	08 f0       	brcs	.+2      	; 0x1390 <DIO_ReadPin+0x24>
    138e:	76 c0       	rjmp	.+236    	; 0x147c <DIO_ReadPin+0x110>
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	88 30       	cpi	r24, 0x08	; 8
    1394:	08 f0       	brcs	.+2      	; 0x1398 <DIO_ReadPin+0x2c>
    1396:	72 c0       	rjmp	.+228    	; 0x147c <DIO_ReadPin+0x110>
			&& (PinNumber <= PIN7 )) {

		switch (PortID) {
    1398:	89 81       	ldd	r24, Y+1	; 0x01
    139a:	28 2f       	mov	r18, r24
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	3f 83       	std	Y+7, r19	; 0x07
    13a0:	2e 83       	std	Y+6, r18	; 0x06
    13a2:	4e 81       	ldd	r20, Y+6	; 0x06
    13a4:	5f 81       	ldd	r21, Y+7	; 0x07
    13a6:	41 30       	cpi	r20, 0x01	; 1
    13a8:	51 05       	cpc	r21, r1
    13aa:	59 f1       	breq	.+86     	; 0x1402 <DIO_ReadPin+0x96>
    13ac:	8e 81       	ldd	r24, Y+6	; 0x06
    13ae:	9f 81       	ldd	r25, Y+7	; 0x07
    13b0:	82 30       	cpi	r24, 0x02	; 2
    13b2:	91 05       	cpc	r25, r1
    13b4:	34 f4       	brge	.+12     	; 0x13c2 <DIO_ReadPin+0x56>
    13b6:	2e 81       	ldd	r18, Y+6	; 0x06
    13b8:	3f 81       	ldd	r19, Y+7	; 0x07
    13ba:	21 15       	cp	r18, r1
    13bc:	31 05       	cpc	r19, r1
    13be:	69 f0       	breq	.+26     	; 0x13da <DIO_ReadPin+0x6e>
    13c0:	5b c0       	rjmp	.+182    	; 0x1478 <DIO_ReadPin+0x10c>
    13c2:	4e 81       	ldd	r20, Y+6	; 0x06
    13c4:	5f 81       	ldd	r21, Y+7	; 0x07
    13c6:	42 30       	cpi	r20, 0x02	; 2
    13c8:	51 05       	cpc	r21, r1
    13ca:	79 f1       	breq	.+94     	; 0x142a <DIO_ReadPin+0xbe>
    13cc:	8e 81       	ldd	r24, Y+6	; 0x06
    13ce:	9f 81       	ldd	r25, Y+7	; 0x07
    13d0:	83 30       	cpi	r24, 0x03	; 3
    13d2:	91 05       	cpc	r25, r1
    13d4:	09 f4       	brne	.+2      	; 0x13d8 <DIO_ReadPin+0x6c>
    13d6:	3d c0       	rjmp	.+122    	; 0x1452 <DIO_ReadPin+0xe6>
    13d8:	4f c0       	rjmp	.+158    	; 0x1478 <DIO_ReadPin+0x10c>
		case PORTA :
			*(PinState) = Get_Bit(PORTA_STAT, PinNumber);
    13da:	e9 e3       	ldi	r30, 0x39	; 57
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	8a 81       	ldd	r24, Y+2	; 0x02
    13e6:	88 2f       	mov	r24, r24
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	a9 01       	movw	r20, r18
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <DIO_ReadPin+0x86>
    13ee:	55 95       	asr	r21
    13f0:	47 95       	ror	r20
    13f2:	8a 95       	dec	r24
    13f4:	e2 f7       	brpl	.-8      	; 0x13ee <DIO_ReadPin+0x82>
    13f6:	ca 01       	movw	r24, r20
    13f8:	81 70       	andi	r24, 0x01	; 1
    13fa:	eb 81       	ldd	r30, Y+3	; 0x03
    13fc:	fc 81       	ldd	r31, Y+4	; 0x04
    13fe:	80 83       	st	Z, r24
    1400:	3b c0       	rjmp	.+118    	; 0x1478 <DIO_ReadPin+0x10c>
			break;
		case PORTB :
			*(PinState) = Get_Bit(PORTB_STAT, PinNumber);
    1402:	e6 e3       	ldi	r30, 0x36	; 54
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	28 2f       	mov	r18, r24
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	8a 81       	ldd	r24, Y+2	; 0x02
    140e:	88 2f       	mov	r24, r24
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	a9 01       	movw	r20, r18
    1414:	02 c0       	rjmp	.+4      	; 0x141a <DIO_ReadPin+0xae>
    1416:	55 95       	asr	r21
    1418:	47 95       	ror	r20
    141a:	8a 95       	dec	r24
    141c:	e2 f7       	brpl	.-8      	; 0x1416 <DIO_ReadPin+0xaa>
    141e:	ca 01       	movw	r24, r20
    1420:	81 70       	andi	r24, 0x01	; 1
    1422:	eb 81       	ldd	r30, Y+3	; 0x03
    1424:	fc 81       	ldd	r31, Y+4	; 0x04
    1426:	80 83       	st	Z, r24
    1428:	27 c0       	rjmp	.+78     	; 0x1478 <DIO_ReadPin+0x10c>
			break;
		case PORTC :
			*(PinState) = Get_Bit(PORTC_STAT, PinNumber);
    142a:	e3 e3       	ldi	r30, 0x33	; 51
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	8a 81       	ldd	r24, Y+2	; 0x02
    1436:	88 2f       	mov	r24, r24
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	a9 01       	movw	r20, r18
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <DIO_ReadPin+0xd6>
    143e:	55 95       	asr	r21
    1440:	47 95       	ror	r20
    1442:	8a 95       	dec	r24
    1444:	e2 f7       	brpl	.-8      	; 0x143e <DIO_ReadPin+0xd2>
    1446:	ca 01       	movw	r24, r20
    1448:	81 70       	andi	r24, 0x01	; 1
    144a:	eb 81       	ldd	r30, Y+3	; 0x03
    144c:	fc 81       	ldd	r31, Y+4	; 0x04
    144e:	80 83       	st	Z, r24
    1450:	13 c0       	rjmp	.+38     	; 0x1478 <DIO_ReadPin+0x10c>
			break;
		case PORTD :
			*(PinState) = Get_Bit(PORTD_STAT, PinNumber);
    1452:	e0 e3       	ldi	r30, 0x30	; 48
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	8a 81       	ldd	r24, Y+2	; 0x02
    145e:	88 2f       	mov	r24, r24
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	a9 01       	movw	r20, r18
    1464:	02 c0       	rjmp	.+4      	; 0x146a <DIO_ReadPin+0xfe>
    1466:	55 95       	asr	r21
    1468:	47 95       	ror	r20
    146a:	8a 95       	dec	r24
    146c:	e2 f7       	brpl	.-8      	; 0x1466 <DIO_ReadPin+0xfa>
    146e:	ca 01       	movw	r24, r20
    1470:	81 70       	andi	r24, 0x01	; 1
    1472:	eb 81       	ldd	r30, Y+3	; 0x03
    1474:	fc 81       	ldd	r31, Y+4	; 0x04
    1476:	80 83       	st	Z, r24
			break;

		} //END of SWITCH
		return E_DIO_SUCCESS ;
    1478:	1d 82       	std	Y+5, r1	; 0x05
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <DIO_ReadPin+0x114>

	}	  //END of IF That checking the port and pin number

	else {
		return E_DIO_INVALID_PORT_NUMBER ;
    147c:	51 e0       	ldi	r21, 0x01	; 1
    147e:	5d 83       	std	Y+5, r21	; 0x05
    1480:	8d 81       	ldd	r24, Y+5	; 0x05

	}	  //END of ELSE
}    //END of DIO_readPint
    1482:	27 96       	adiw	r28, 0x07	; 7
    1484:	0f b6       	in	r0, 0x3f	; 63
    1486:	f8 94       	cli
    1488:	de bf       	out	0x3e, r29	; 62
    148a:	0f be       	out	0x3f, r0	; 63
    148c:	cd bf       	out	0x3d, r28	; 61
    148e:	cf 91       	pop	r28
    1490:	df 91       	pop	r29
    1492:	08 95       	ret

00001494 <DIO_TogglePin>:

/* API to toggle pin*/
DIO_ERROR_state_t DIO_TogglePin(uint8_t PortID, uint8_t PinNumber){
    1494:	df 93       	push	r29
    1496:	cf 93       	push	r28
    1498:	00 d0       	rcall	.+0      	; 0x149a <DIO_TogglePin+0x6>
    149a:	00 d0       	rcall	.+0      	; 0x149c <DIO_TogglePin+0x8>
    149c:	0f 92       	push	r0
    149e:	cd b7       	in	r28, 0x3d	; 61
    14a0:	de b7       	in	r29, 0x3e	; 62
    14a2:	89 83       	std	Y+1, r24	; 0x01
    14a4:	6a 83       	std	Y+2, r22	; 0x02
	//Check for the ports if it is between 0 to 3
		if ((PortID <= PORTD ) && (PortID >= PORTA ) && (PinNumber >= PIN0 )
    14a6:	89 81       	ldd	r24, Y+1	; 0x01
    14a8:	84 30       	cpi	r24, 0x04	; 4
    14aa:	08 f0       	brcs	.+2      	; 0x14ae <DIO_TogglePin+0x1a>
    14ac:	74 c0       	rjmp	.+232    	; 0x1596 <DIO_TogglePin+0x102>
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	88 30       	cpi	r24, 0x08	; 8
    14b2:	08 f0       	brcs	.+2      	; 0x14b6 <DIO_TogglePin+0x22>
    14b4:	70 c0       	rjmp	.+224    	; 0x1596 <DIO_TogglePin+0x102>
				&& (PinNumber <= PIN7 )) {
			switch (PortID) {
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	3d 83       	std	Y+5, r19	; 0x05
    14be:	2c 83       	std	Y+4, r18	; 0x04
    14c0:	8c 81       	ldd	r24, Y+4	; 0x04
    14c2:	9d 81       	ldd	r25, Y+5	; 0x05
    14c4:	81 30       	cpi	r24, 0x01	; 1
    14c6:	91 05       	cpc	r25, r1
    14c8:	49 f1       	breq	.+82     	; 0x151c <DIO_TogglePin+0x88>
    14ca:	2c 81       	ldd	r18, Y+4	; 0x04
    14cc:	3d 81       	ldd	r19, Y+5	; 0x05
    14ce:	22 30       	cpi	r18, 0x02	; 2
    14d0:	31 05       	cpc	r19, r1
    14d2:	2c f4       	brge	.+10     	; 0x14de <DIO_TogglePin+0x4a>
    14d4:	8c 81       	ldd	r24, Y+4	; 0x04
    14d6:	9d 81       	ldd	r25, Y+5	; 0x05
    14d8:	00 97       	sbiw	r24, 0x00	; 0
    14da:	61 f0       	breq	.+24     	; 0x14f4 <DIO_TogglePin+0x60>
    14dc:	5a c0       	rjmp	.+180    	; 0x1592 <DIO_TogglePin+0xfe>
    14de:	2c 81       	ldd	r18, Y+4	; 0x04
    14e0:	3d 81       	ldd	r19, Y+5	; 0x05
    14e2:	22 30       	cpi	r18, 0x02	; 2
    14e4:	31 05       	cpc	r19, r1
    14e6:	71 f1       	breq	.+92     	; 0x1544 <DIO_TogglePin+0xb0>
    14e8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ea:	9d 81       	ldd	r25, Y+5	; 0x05
    14ec:	83 30       	cpi	r24, 0x03	; 3
    14ee:	91 05       	cpc	r25, r1
    14f0:	e9 f1       	breq	.+122    	; 0x156c <DIO_TogglePin+0xd8>
    14f2:	4f c0       	rjmp	.+158    	; 0x1592 <DIO_TogglePin+0xfe>
			case PORTA :
				Toggle_Bit(PORTA_DATA, PinNumber);
    14f4:	ab e3       	ldi	r26, 0x3B	; 59
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	eb e3       	ldi	r30, 0x3B	; 59
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	48 2f       	mov	r20, r24
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	02 2e       	mov	r0, r18
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <DIO_TogglePin+0x7e>
    150e:	88 0f       	add	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	0a 94       	dec	r0
    1514:	e2 f7       	brpl	.-8      	; 0x150e <DIO_TogglePin+0x7a>
    1516:	84 27       	eor	r24, r20
    1518:	8c 93       	st	X, r24
    151a:	3b c0       	rjmp	.+118    	; 0x1592 <DIO_TogglePin+0xfe>
				break;
			case PORTB :
				Toggle_Bit(PORTB_DATA, PinNumber);
    151c:	a8 e3       	ldi	r26, 0x38	; 56
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e8 e3       	ldi	r30, 0x38	; 56
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	48 2f       	mov	r20, r24
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	02 2e       	mov	r0, r18
    1534:	02 c0       	rjmp	.+4      	; 0x153a <DIO_TogglePin+0xa6>
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	0a 94       	dec	r0
    153c:	e2 f7       	brpl	.-8      	; 0x1536 <DIO_TogglePin+0xa2>
    153e:	84 27       	eor	r24, r20
    1540:	8c 93       	st	X, r24
    1542:	27 c0       	rjmp	.+78     	; 0x1592 <DIO_TogglePin+0xfe>
				break;
			case PORTC :
				Toggle_Bit(PORTC_DATA, PinNumber);
    1544:	a5 e3       	ldi	r26, 0x35	; 53
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	e5 e3       	ldi	r30, 0x35	; 53
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	48 2f       	mov	r20, r24
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	28 2f       	mov	r18, r24
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	02 2e       	mov	r0, r18
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <DIO_TogglePin+0xce>
    155e:	88 0f       	add	r24, r24
    1560:	99 1f       	adc	r25, r25
    1562:	0a 94       	dec	r0
    1564:	e2 f7       	brpl	.-8      	; 0x155e <DIO_TogglePin+0xca>
    1566:	84 27       	eor	r24, r20
    1568:	8c 93       	st	X, r24
    156a:	13 c0       	rjmp	.+38     	; 0x1592 <DIO_TogglePin+0xfe>
				break;
			case PORTD :
				Toggle_Bit(PORTD_DATA, PinNumber);
    156c:	a2 e3       	ldi	r26, 0x32	; 50
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	e2 e3       	ldi	r30, 0x32	; 50
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	48 2f       	mov	r20, r24
    1578:	8a 81       	ldd	r24, Y+2	; 0x02
    157a:	28 2f       	mov	r18, r24
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	02 2e       	mov	r0, r18
    1584:	02 c0       	rjmp	.+4      	; 0x158a <DIO_TogglePin+0xf6>
    1586:	88 0f       	add	r24, r24
    1588:	99 1f       	adc	r25, r25
    158a:	0a 94       	dec	r0
    158c:	e2 f7       	brpl	.-8      	; 0x1586 <DIO_TogglePin+0xf2>
    158e:	84 27       	eor	r24, r20
    1590:	8c 93       	st	X, r24
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
    1592:	1b 82       	std	Y+3, r1	; 0x03
    1594:	02 c0       	rjmp	.+4      	; 0x159a <DIO_TogglePin+0x106>

		}	  //END of IF That checking the port and pin number

		else {
			return E_DIO_INVALID_PORT_NUMBER ;
    1596:	91 e0       	ldi	r25, 0x01	; 1
    1598:	9b 83       	std	Y+3, r25	; 0x03
    159a:	8b 81       	ldd	r24, Y+3	; 0x03

		}	  //END of ELSE

}
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	cf 91       	pop	r28
    15a8:	df 91       	pop	r29
    15aa:	08 95       	ret

000015ac <DIO_EnablePinPullup>:
DIO_ERROR_state_t DIO_EnablePinPullup(uint8_t PortID, uint8_t PinNumber){
    15ac:	df 93       	push	r29
    15ae:	cf 93       	push	r28
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <DIO_EnablePinPullup+0x6>
    15b2:	00 d0       	rcall	.+0      	; 0x15b4 <DIO_EnablePinPullup+0x8>
    15b4:	0f 92       	push	r0
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
    15ba:	89 83       	std	Y+1, r24	; 0x01
    15bc:	6a 83       	std	Y+2, r22	; 0x02
	//Check for the ports if it is between 0 to 3
		if ((PortID <= PORTD ) && (PortID >= PORTA ) && (PinNumber >= PIN0 )
    15be:	89 81       	ldd	r24, Y+1	; 0x01
    15c0:	84 30       	cpi	r24, 0x04	; 4
    15c2:	08 f0       	brcs	.+2      	; 0x15c6 <DIO_EnablePinPullup+0x1a>
    15c4:	d1 c0       	rjmp	.+418    	; 0x1768 <DIO_EnablePinPullup+0x1bc>
    15c6:	8a 81       	ldd	r24, Y+2	; 0x02
    15c8:	88 30       	cpi	r24, 0x08	; 8
    15ca:	08 f0       	brcs	.+2      	; 0x15ce <DIO_EnablePinPullup+0x22>
    15cc:	cd c0       	rjmp	.+410    	; 0x1768 <DIO_EnablePinPullup+0x1bc>
				&& (PinNumber <= PIN7 )) {
			switch (PortID) {
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
    15d0:	28 2f       	mov	r18, r24
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	3d 83       	std	Y+5, r19	; 0x05
    15d6:	2c 83       	std	Y+4, r18	; 0x04
    15d8:	4c 81       	ldd	r20, Y+4	; 0x04
    15da:	5d 81       	ldd	r21, Y+5	; 0x05
    15dc:	41 30       	cpi	r20, 0x01	; 1
    15de:	51 05       	cpc	r21, r1
    15e0:	09 f4       	brne	.+2      	; 0x15e4 <DIO_EnablePinPullup+0x38>
    15e2:	42 c0       	rjmp	.+132    	; 0x1668 <DIO_EnablePinPullup+0xbc>
    15e4:	8c 81       	ldd	r24, Y+4	; 0x04
    15e6:	9d 81       	ldd	r25, Y+5	; 0x05
    15e8:	82 30       	cpi	r24, 0x02	; 2
    15ea:	91 05       	cpc	r25, r1
    15ec:	34 f4       	brge	.+12     	; 0x15fa <DIO_EnablePinPullup+0x4e>
    15ee:	2c 81       	ldd	r18, Y+4	; 0x04
    15f0:	3d 81       	ldd	r19, Y+5	; 0x05
    15f2:	21 15       	cp	r18, r1
    15f4:	31 05       	cpc	r19, r1
    15f6:	71 f0       	breq	.+28     	; 0x1614 <DIO_EnablePinPullup+0x68>
    15f8:	b5 c0       	rjmp	.+362    	; 0x1764 <DIO_EnablePinPullup+0x1b8>
    15fa:	4c 81       	ldd	r20, Y+4	; 0x04
    15fc:	5d 81       	ldd	r21, Y+5	; 0x05
    15fe:	42 30       	cpi	r20, 0x02	; 2
    1600:	51 05       	cpc	r21, r1
    1602:	09 f4       	brne	.+2      	; 0x1606 <DIO_EnablePinPullup+0x5a>
    1604:	5b c0       	rjmp	.+182    	; 0x16bc <DIO_EnablePinPullup+0x110>
    1606:	8c 81       	ldd	r24, Y+4	; 0x04
    1608:	9d 81       	ldd	r25, Y+5	; 0x05
    160a:	83 30       	cpi	r24, 0x03	; 3
    160c:	91 05       	cpc	r25, r1
    160e:	09 f4       	brne	.+2      	; 0x1612 <DIO_EnablePinPullup+0x66>
    1610:	7f c0       	rjmp	.+254    	; 0x1710 <DIO_EnablePinPullup+0x164>
    1612:	a8 c0       	rjmp	.+336    	; 0x1764 <DIO_EnablePinPullup+0x1b8>
			case PORTA :
				if(Get_Bit(PORTA_DIR, PinNumber)==PIN_INPUT){
    1614:	ea e3       	ldi	r30, 0x3A	; 58
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	28 2f       	mov	r18, r24
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	88 2f       	mov	r24, r24
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	a9 01       	movw	r20, r18
    1626:	02 c0       	rjmp	.+4      	; 0x162c <DIO_EnablePinPullup+0x80>
    1628:	55 95       	asr	r21
    162a:	47 95       	ror	r20
    162c:	8a 95       	dec	r24
    162e:	e2 f7       	brpl	.-8      	; 0x1628 <DIO_EnablePinPullup+0x7c>
    1630:	ca 01       	movw	r24, r20
    1632:	81 70       	andi	r24, 0x01	; 1
    1634:	90 70       	andi	r25, 0x00	; 0
    1636:	00 97       	sbiw	r24, 0x00	; 0
    1638:	a1 f4       	brne	.+40     	; 0x1662 <DIO_EnablePinPullup+0xb6>
					Set_Bit(PORTA_DATA, PinNumber);
    163a:	ab e3       	ldi	r26, 0x3B	; 59
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	eb e3       	ldi	r30, 0x3B	; 59
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	48 2f       	mov	r20, r24
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	28 2f       	mov	r18, r24
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	02 2e       	mov	r0, r18
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <DIO_EnablePinPullup+0xac>
    1654:	88 0f       	add	r24, r24
    1656:	99 1f       	adc	r25, r25
    1658:	0a 94       	dec	r0
    165a:	e2 f7       	brpl	.-8      	; 0x1654 <DIO_EnablePinPullup+0xa8>
    165c:	84 2b       	or	r24, r20
    165e:	8c 93       	st	X, r24
    1660:	81 c0       	rjmp	.+258    	; 0x1764 <DIO_EnablePinPullup+0x1b8>
				}// END of IF which checking if the  pin is INPUT
				else{
					return E_DIO_SET_TO_NON_INPUT;
    1662:	53 e0       	ldi	r21, 0x03	; 3
    1664:	5b 83       	std	Y+3, r21	; 0x03
    1666:	82 c0       	rjmp	.+260    	; 0x176c <DIO_EnablePinPullup+0x1c0>
				}
				break;
			case PORTB :
				if(Get_Bit(PORTB_DIR, PinNumber)==PIN_INPUT){
    1668:	e7 e3       	ldi	r30, 0x37	; 55
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	28 2f       	mov	r18, r24
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	8a 81       	ldd	r24, Y+2	; 0x02
    1674:	88 2f       	mov	r24, r24
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	a9 01       	movw	r20, r18
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <DIO_EnablePinPullup+0xd4>
    167c:	55 95       	asr	r21
    167e:	47 95       	ror	r20
    1680:	8a 95       	dec	r24
    1682:	e2 f7       	brpl	.-8      	; 0x167c <DIO_EnablePinPullup+0xd0>
    1684:	ca 01       	movw	r24, r20
    1686:	81 70       	andi	r24, 0x01	; 1
    1688:	90 70       	andi	r25, 0x00	; 0
    168a:	00 97       	sbiw	r24, 0x00	; 0
    168c:	a1 f4       	brne	.+40     	; 0x16b6 <DIO_EnablePinPullup+0x10a>
					Set_Bit(PORTB_DATA, PinNumber);
    168e:	a8 e3       	ldi	r26, 0x38	; 56
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	e8 e3       	ldi	r30, 0x38	; 56
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	48 2f       	mov	r20, r24
    169a:	8a 81       	ldd	r24, Y+2	; 0x02
    169c:	28 2f       	mov	r18, r24
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	02 2e       	mov	r0, r18
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <DIO_EnablePinPullup+0x100>
    16a8:	88 0f       	add	r24, r24
    16aa:	99 1f       	adc	r25, r25
    16ac:	0a 94       	dec	r0
    16ae:	e2 f7       	brpl	.-8      	; 0x16a8 <DIO_EnablePinPullup+0xfc>
    16b0:	84 2b       	or	r24, r20
    16b2:	8c 93       	st	X, r24
    16b4:	57 c0       	rjmp	.+174    	; 0x1764 <DIO_EnablePinPullup+0x1b8>
				}// END of IF which checking if the  pin is INPUT
				else{
					return E_DIO_SET_TO_NON_INPUT;
    16b6:	53 e0       	ldi	r21, 0x03	; 3
    16b8:	5b 83       	std	Y+3, r21	; 0x03
    16ba:	58 c0       	rjmp	.+176    	; 0x176c <DIO_EnablePinPullup+0x1c0>
				}
				break;
			case PORTC :
				if(Get_Bit(PORTC_DIR, PinNumber)==PIN_INPUT){
    16bc:	e4 e3       	ldi	r30, 0x34	; 52
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	28 2f       	mov	r18, r24
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	8a 81       	ldd	r24, Y+2	; 0x02
    16c8:	88 2f       	mov	r24, r24
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	a9 01       	movw	r20, r18
    16ce:	02 c0       	rjmp	.+4      	; 0x16d4 <DIO_EnablePinPullup+0x128>
    16d0:	55 95       	asr	r21
    16d2:	47 95       	ror	r20
    16d4:	8a 95       	dec	r24
    16d6:	e2 f7       	brpl	.-8      	; 0x16d0 <DIO_EnablePinPullup+0x124>
    16d8:	ca 01       	movw	r24, r20
    16da:	81 70       	andi	r24, 0x01	; 1
    16dc:	90 70       	andi	r25, 0x00	; 0
    16de:	00 97       	sbiw	r24, 0x00	; 0
    16e0:	a1 f4       	brne	.+40     	; 0x170a <DIO_EnablePinPullup+0x15e>
					Set_Bit(PORTC_DATA, PinNumber);
    16e2:	a5 e3       	ldi	r26, 0x35	; 53
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e5 e3       	ldi	r30, 0x35	; 53
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	48 2f       	mov	r20, r24
    16ee:	8a 81       	ldd	r24, Y+2	; 0x02
    16f0:	28 2f       	mov	r18, r24
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	02 2e       	mov	r0, r18
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <DIO_EnablePinPullup+0x154>
    16fc:	88 0f       	add	r24, r24
    16fe:	99 1f       	adc	r25, r25
    1700:	0a 94       	dec	r0
    1702:	e2 f7       	brpl	.-8      	; 0x16fc <DIO_EnablePinPullup+0x150>
    1704:	84 2b       	or	r24, r20
    1706:	8c 93       	st	X, r24
    1708:	2d c0       	rjmp	.+90     	; 0x1764 <DIO_EnablePinPullup+0x1b8>
				}// END of IF which checking if the  pin is INPUT
				else{
					return E_DIO_SET_TO_NON_INPUT;
    170a:	53 e0       	ldi	r21, 0x03	; 3
    170c:	5b 83       	std	Y+3, r21	; 0x03
    170e:	2e c0       	rjmp	.+92     	; 0x176c <DIO_EnablePinPullup+0x1c0>
				}
				break;
			case PORTD :
				if(Get_Bit(PORTD_DIR, PinNumber)==PIN_INPUT){
    1710:	e1 e3       	ldi	r30, 0x31	; 49
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	28 2f       	mov	r18, r24
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	8a 81       	ldd	r24, Y+2	; 0x02
    171c:	88 2f       	mov	r24, r24
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	a9 01       	movw	r20, r18
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <DIO_EnablePinPullup+0x17c>
    1724:	55 95       	asr	r21
    1726:	47 95       	ror	r20
    1728:	8a 95       	dec	r24
    172a:	e2 f7       	brpl	.-8      	; 0x1724 <DIO_EnablePinPullup+0x178>
    172c:	ca 01       	movw	r24, r20
    172e:	81 70       	andi	r24, 0x01	; 1
    1730:	90 70       	andi	r25, 0x00	; 0
    1732:	00 97       	sbiw	r24, 0x00	; 0
    1734:	a1 f4       	brne	.+40     	; 0x175e <DIO_EnablePinPullup+0x1b2>
					Set_Bit(PORTD_DATA, PinNumber);
    1736:	a2 e3       	ldi	r26, 0x32	; 50
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	e2 e3       	ldi	r30, 0x32	; 50
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	48 2f       	mov	r20, r24
    1742:	8a 81       	ldd	r24, Y+2	; 0x02
    1744:	28 2f       	mov	r18, r24
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	02 2e       	mov	r0, r18
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <DIO_EnablePinPullup+0x1a8>
    1750:	88 0f       	add	r24, r24
    1752:	99 1f       	adc	r25, r25
    1754:	0a 94       	dec	r0
    1756:	e2 f7       	brpl	.-8      	; 0x1750 <DIO_EnablePinPullup+0x1a4>
    1758:	84 2b       	or	r24, r20
    175a:	8c 93       	st	X, r24
    175c:	03 c0       	rjmp	.+6      	; 0x1764 <DIO_EnablePinPullup+0x1b8>
				}// END of IF which checking if the  pin is INPUT
				else{
					return E_DIO_SET_TO_NON_INPUT;
    175e:	53 e0       	ldi	r21, 0x03	; 3
    1760:	5b 83       	std	Y+3, r21	; 0x03
    1762:	04 c0       	rjmp	.+8      	; 0x176c <DIO_EnablePinPullup+0x1c0>
				}
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
    1764:	1b 82       	std	Y+3, r1	; 0x03
    1766:	02 c0       	rjmp	.+4      	; 0x176c <DIO_EnablePinPullup+0x1c0>

		}	  //END of IF That checking the port and pin number

		else {
			return E_DIO_INVALID_PORT_NUMBER ;
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	8b 83       	std	Y+3, r24	; 0x03
    176c:	8b 81       	ldd	r24, Y+3	; 0x03

		}	  //END of ELSE

}
    176e:	0f 90       	pop	r0
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	0f 90       	pop	r0
    1776:	0f 90       	pop	r0
    1778:	cf 91       	pop	r28
    177a:	df 91       	pop	r29
    177c:	08 95       	ret

0000177e <EEPROM_Read>:
#include "eeprom.h"




uint8_t EEPROM_Read(uint8_t EEPROM_CH, uint8_t address, uint8_t * data){
    177e:	df 93       	push	r29
    1780:	cf 93       	push	r28
    1782:	00 d0       	rcall	.+0      	; 0x1784 <EEPROM_Read+0x6>
    1784:	00 d0       	rcall	.+0      	; 0x1786 <EEPROM_Read+0x8>
    1786:	cd b7       	in	r28, 0x3d	; 61
    1788:	de b7       	in	r29, 0x3e	; 62
    178a:	89 83       	std	Y+1, r24	; 0x01
    178c:	6a 83       	std	Y+2, r22	; 0x02
    178e:	5c 83       	std	Y+4, r21	; 0x04
    1790:	4b 83       	std	Y+3, r20	; 0x03

	TWI_SendStartCondition(TWI_1);
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	0e 94 14 02 	call	0x428	; 0x428 <TWI_SendStartCondition>

	TWI_SendSLAWrite(TWI_1,EEPROM_CH);
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	69 81       	ldd	r22, Y+1	; 0x01
    179c:	0e 94 4a 02 	call	0x494	; 0x494 <TWI_SendSLAWrite>

	TWI_SendData(TWI_1,address);
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	6a 81       	ldd	r22, Y+2	; 0x02
    17a4:	0e 94 b0 02 	call	0x560	; 0x560 <TWI_SendData>

	TWI_SendStartCondition(TWI_1);
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	0e 94 14 02 	call	0x428	; 0x428 <TWI_SendStartCondition>

	TWI_SendSLARead(TWI_1,EEPROM_CH);
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	69 81       	ldd	r22, Y+1	; 0x01
    17b2:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <TWI_SendSLARead>

	TWI_RecDataAck(TWI_1,data);
    17b6:	2b 81       	ldd	r18, Y+3	; 0x03
    17b8:	3c 81       	ldd	r19, Y+4	; 0x04
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	b9 01       	movw	r22, r18
    17be:	0e 94 fe 02 	call	0x5fc	; 0x5fc <TWI_RecDataAck>

	TWI_SendStopCondition(TWI_1);
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	0e 94 3b 02 	call	0x476	; 0x476 <TWI_SendStopCondition>

	return 0;
    17c8:	80 e0       	ldi	r24, 0x00	; 0
}
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	0f 90       	pop	r0
    17d0:	0f 90       	pop	r0
    17d2:	cf 91       	pop	r28
    17d4:	df 91       	pop	r29
    17d6:	08 95       	ret

000017d8 <EEPROM_Write>:
uint8_t EEPROM_Write(uint8_t EEPROM_CH, uint8_t address, uint8_t data){
    17d8:	df 93       	push	r29
    17da:	cf 93       	push	r28
    17dc:	00 d0       	rcall	.+0      	; 0x17de <EEPROM_Write+0x6>
    17de:	0f 92       	push	r0
    17e0:	cd b7       	in	r28, 0x3d	; 61
    17e2:	de b7       	in	r29, 0x3e	; 62
    17e4:	89 83       	std	Y+1, r24	; 0x01
    17e6:	6a 83       	std	Y+2, r22	; 0x02
    17e8:	4b 83       	std	Y+3, r20	; 0x03

	TWI_SendStartCondition(TWI_1);
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	0e 94 14 02 	call	0x428	; 0x428 <TWI_SendStartCondition>

	TWI_SendSLAWrite(TWI_1,EEPROM_CH);
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	69 81       	ldd	r22, Y+1	; 0x01
    17f4:	0e 94 4a 02 	call	0x494	; 0x494 <TWI_SendSLAWrite>

	TWI_SendData(TWI_1,address);
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	6a 81       	ldd	r22, Y+2	; 0x02
    17fc:	0e 94 b0 02 	call	0x560	; 0x560 <TWI_SendData>

	TWI_SendData(TWI_1,data);
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	6b 81       	ldd	r22, Y+3	; 0x03
    1804:	0e 94 b0 02 	call	0x560	; 0x560 <TWI_SendData>

	TWI_SendStopCondition(TWI_1);
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	0e 94 3b 02 	call	0x476	; 0x476 <TWI_SendStopCondition>

	return 0;
    180e:	80 e0       	ldi	r24, 0x00	; 0
}
    1810:	0f 90       	pop	r0
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	cf 91       	pop	r28
    1818:	df 91       	pop	r29
    181a:	08 95       	ret

0000181c <StringCmpr>:
static uint8_t data = 0;

/*LOCAL FUNCTION IMPLEMENTATION
 ----------------------------*/
/*COMPARE TWWO STRINGS*/
static uint8_t StringCmpr(ptr_uint8_t STRING_1, ptr_uint8_t STRING_2) {
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	00 d0       	rcall	.+0      	; 0x1822 <StringCmpr+0x6>
    1822:	00 d0       	rcall	.+0      	; 0x1824 <StringCmpr+0x8>
    1824:	00 d0       	rcall	.+0      	; 0x1826 <StringCmpr+0xa>
    1826:	cd b7       	in	r28, 0x3d	; 61
    1828:	de b7       	in	r29, 0x3e	; 62
    182a:	9b 83       	std	Y+3, r25	; 0x03
    182c:	8a 83       	std	Y+2, r24	; 0x02
    182e:	7d 83       	std	Y+5, r23	; 0x05
    1830:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t i = 0;
    1832:	19 82       	std	Y+1, r1	; 0x01
    1834:	19 c0       	rjmp	.+50     	; 0x1868 <StringCmpr+0x4c>
	while ((STRING_1[i] != NULL_TERMINATOR) || (STRING_2[i] != NULL_TERMINATOR)) {
		if (STRING_1[i] != STRING_2[i]) {
    1836:	89 81       	ldd	r24, Y+1	; 0x01
    1838:	28 2f       	mov	r18, r24
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	8a 81       	ldd	r24, Y+2	; 0x02
    183e:	9b 81       	ldd	r25, Y+3	; 0x03
    1840:	fc 01       	movw	r30, r24
    1842:	e2 0f       	add	r30, r18
    1844:	f3 1f       	adc	r31, r19
    1846:	40 81       	ld	r20, Z
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	28 2f       	mov	r18, r24
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	8c 81       	ldd	r24, Y+4	; 0x04
    1850:	9d 81       	ldd	r25, Y+5	; 0x05
    1852:	fc 01       	movw	r30, r24
    1854:	e2 0f       	add	r30, r18
    1856:	f3 1f       	adc	r31, r19
    1858:	80 81       	ld	r24, Z
    185a:	48 17       	cp	r20, r24
    185c:	11 f0       	breq	.+4      	; 0x1862 <StringCmpr+0x46>
			return 0;
    185e:	1e 82       	std	Y+6, r1	; 0x06
    1860:	1b c0       	rjmp	.+54     	; 0x1898 <StringCmpr+0x7c>
		} else {
		}
		i++;
    1862:	89 81       	ldd	r24, Y+1	; 0x01
    1864:	8f 5f       	subi	r24, 0xFF	; 255
    1866:	89 83       	std	Y+1, r24	; 0x01
/*LOCAL FUNCTION IMPLEMENTATION
 ----------------------------*/
/*COMPARE TWWO STRINGS*/
static uint8_t StringCmpr(ptr_uint8_t STRING_1, ptr_uint8_t STRING_2) {
	uint8_t i = 0;
	while ((STRING_1[i] != NULL_TERMINATOR) || (STRING_2[i] != NULL_TERMINATOR)) {
    1868:	89 81       	ldd	r24, Y+1	; 0x01
    186a:	28 2f       	mov	r18, r24
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	8a 81       	ldd	r24, Y+2	; 0x02
    1870:	9b 81       	ldd	r25, Y+3	; 0x03
    1872:	fc 01       	movw	r30, r24
    1874:	e2 0f       	add	r30, r18
    1876:	f3 1f       	adc	r31, r19
    1878:	80 81       	ld	r24, Z
    187a:	88 23       	and	r24, r24
    187c:	e1 f6       	brne	.-72     	; 0x1836 <StringCmpr+0x1a>
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	28 2f       	mov	r18, r24
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	8c 81       	ldd	r24, Y+4	; 0x04
    1886:	9d 81       	ldd	r25, Y+5	; 0x05
    1888:	fc 01       	movw	r30, r24
    188a:	e2 0f       	add	r30, r18
    188c:	f3 1f       	adc	r31, r19
    188e:	80 81       	ld	r24, Z
    1890:	88 23       	and	r24, r24
    1892:	89 f6       	brne	.-94     	; 0x1836 <StringCmpr+0x1a>
			return 0;
		} else {
		}
		i++;
	}
	return 1;
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	8e 83       	std	Y+6, r24	; 0x06
    1898:	8e 81       	ldd	r24, Y+6	; 0x06
}
    189a:	26 96       	adiw	r28, 0x06	; 6
    189c:	0f b6       	in	r0, 0x3f	; 63
    189e:	f8 94       	cli
    18a0:	de bf       	out	0x3e, r29	; 62
    18a2:	0f be       	out	0x3f, r0	; 63
    18a4:	cd bf       	out	0x3d, r28	; 61
    18a6:	cf 91       	pop	r28
    18a8:	df 91       	pop	r29
    18aa:	08 95       	ret

000018ac <ConvertCh_Dec>:
/*CONVERTS THE ADDRESS FROM CHARACTERS TO DECIMAL NUMBER*/
static uint8_t ConvertCh_Dec(ptr_uint8_t STRING_1, ptr_uint8_t Address) {
    18ac:	df 93       	push	r29
    18ae:	cf 93       	push	r28
    18b0:	cd b7       	in	r28, 0x3d	; 61
    18b2:	de b7       	in	r29, 0x3e	; 62
    18b4:	27 97       	sbiw	r28, 0x07	; 7
    18b6:	0f b6       	in	r0, 0x3f	; 63
    18b8:	f8 94       	cli
    18ba:	de bf       	out	0x3e, r29	; 62
    18bc:	0f be       	out	0x3f, r0	; 63
    18be:	cd bf       	out	0x3d, r28	; 61
    18c0:	9c 83       	std	Y+4, r25	; 0x04
    18c2:	8b 83       	std	Y+3, r24	; 0x03
    18c4:	7e 83       	std	Y+6, r23	; 0x06
    18c6:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t lu8_counter = 0;
    18c8:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t lu8_counter2 = 0;
    18ca:	19 82       	std	Y+1, r1	; 0x01
    18cc:	2d c0       	rjmp	.+90     	; 0x1928 <ConvertCh_Dec+0x7c>
	while (STRING_1[lu8_counter] != NULL_TERMINATOR) {
		if ((STRING_1[lu8_counter] != '0') && (STRING_1[lu8_counter] != '1')) {
    18ce:	8a 81       	ldd	r24, Y+2	; 0x02
    18d0:	28 2f       	mov	r18, r24
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	8b 81       	ldd	r24, Y+3	; 0x03
    18d6:	9c 81       	ldd	r25, Y+4	; 0x04
    18d8:	fc 01       	movw	r30, r24
    18da:	e2 0f       	add	r30, r18
    18dc:	f3 1f       	adc	r31, r19
    18de:	80 81       	ld	r24, Z
    18e0:	80 33       	cpi	r24, 0x30	; 48
    18e2:	71 f0       	breq	.+28     	; 0x1900 <ConvertCh_Dec+0x54>
    18e4:	8a 81       	ldd	r24, Y+2	; 0x02
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	9c 81       	ldd	r25, Y+4	; 0x04
    18ee:	fc 01       	movw	r30, r24
    18f0:	e2 0f       	add	r30, r18
    18f2:	f3 1f       	adc	r31, r19
    18f4:	80 81       	ld	r24, Z
    18f6:	81 33       	cpi	r24, 0x31	; 49
    18f8:	19 f0       	breq	.+6      	; 0x1900 <ConvertCh_Dec+0x54>
			return 2;
    18fa:	62 e0       	ldi	r22, 0x02	; 2
    18fc:	6f 83       	std	Y+7, r22	; 0x07
    18fe:	4f c0       	rjmp	.+158    	; 0x199e <ConvertCh_Dec+0xf2>
		} else {
			STRING_1[lu8_counter] = gu8_ReceiverAddr[lu8_counter] - '0';
    1900:	8a 81       	ldd	r24, Y+2	; 0x02
    1902:	28 2f       	mov	r18, r24
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	8b 81       	ldd	r24, Y+3	; 0x03
    1908:	9c 81       	ldd	r25, Y+4	; 0x04
    190a:	dc 01       	movw	r26, r24
    190c:	a2 0f       	add	r26, r18
    190e:	b3 1f       	adc	r27, r19
    1910:	8a 81       	ldd	r24, Y+2	; 0x02
    1912:	88 2f       	mov	r24, r24
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	fc 01       	movw	r30, r24
    1918:	e3 5d       	subi	r30, 0xD3	; 211
    191a:	fe 4f       	sbci	r31, 0xFE	; 254
    191c:	80 81       	ld	r24, Z
    191e:	80 53       	subi	r24, 0x30	; 48
    1920:	8c 93       	st	X, r24
			lu8_counter++;
    1922:	8a 81       	ldd	r24, Y+2	; 0x02
    1924:	8f 5f       	subi	r24, 0xFF	; 255
    1926:	8a 83       	std	Y+2, r24	; 0x02
}
/*CONVERTS THE ADDRESS FROM CHARACTERS TO DECIMAL NUMBER*/
static uint8_t ConvertCh_Dec(ptr_uint8_t STRING_1, ptr_uint8_t Address) {
	uint8_t lu8_counter = 0;
	uint8_t lu8_counter2 = 0;
	while (STRING_1[lu8_counter] != NULL_TERMINATOR) {
    1928:	8a 81       	ldd	r24, Y+2	; 0x02
    192a:	28 2f       	mov	r18, r24
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	9c 81       	ldd	r25, Y+4	; 0x04
    1932:	fc 01       	movw	r30, r24
    1934:	e2 0f       	add	r30, r18
    1936:	f3 1f       	adc	r31, r19
    1938:	80 81       	ld	r24, Z
    193a:	88 23       	and	r24, r24
    193c:	41 f6       	brne	.-112    	; 0x18ce <ConvertCh_Dec+0x22>
		} else {
			STRING_1[lu8_counter] = gu8_ReceiverAddr[lu8_counter] - '0';
			lu8_counter++;
		}
	}
	lu8_counter = lu8_counter - 1;
    193e:	8a 81       	ldd	r24, Y+2	; 0x02
    1940:	81 50       	subi	r24, 0x01	; 1
    1942:	8a 83       	std	Y+2, r24	; 0x02
	if (lu8_counter != ADDRESS_SIZE) {
    1944:	8a 81       	ldd	r24, Y+2	; 0x02
    1946:	87 30       	cpi	r24, 0x07	; 7
    1948:	31 f1       	breq	.+76     	; 0x1996 <ConvertCh_Dec+0xea>
		return 1;
    194a:	71 e0       	ldi	r23, 0x01	; 1
    194c:	7f 83       	std	Y+7, r23	; 0x07
    194e:	27 c0       	rjmp	.+78     	; 0x199e <ConvertCh_Dec+0xf2>
	} else {
	}
	while (lu8_counter2 != 8) {
		*Address |= (STRING_1[lu8_counter] << lu8_counter2);
    1950:	ed 81       	ldd	r30, Y+5	; 0x05
    1952:	fe 81       	ldd	r31, Y+6	; 0x06
    1954:	80 81       	ld	r24, Z
    1956:	48 2f       	mov	r20, r24
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	28 2f       	mov	r18, r24
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	8b 81       	ldd	r24, Y+3	; 0x03
    1960:	9c 81       	ldd	r25, Y+4	; 0x04
    1962:	fc 01       	movw	r30, r24
    1964:	e2 0f       	add	r30, r18
    1966:	f3 1f       	adc	r31, r19
    1968:	80 81       	ld	r24, Z
    196a:	28 2f       	mov	r18, r24
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	89 81       	ldd	r24, Y+1	; 0x01
    1970:	88 2f       	mov	r24, r24
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	b9 01       	movw	r22, r18
    1976:	02 c0       	rjmp	.+4      	; 0x197c <ConvertCh_Dec+0xd0>
    1978:	66 0f       	add	r22, r22
    197a:	77 1f       	adc	r23, r23
    197c:	8a 95       	dec	r24
    197e:	e2 f7       	brpl	.-8      	; 0x1978 <ConvertCh_Dec+0xcc>
    1980:	cb 01       	movw	r24, r22
    1982:	84 2b       	or	r24, r20
    1984:	ed 81       	ldd	r30, Y+5	; 0x05
    1986:	fe 81       	ldd	r31, Y+6	; 0x06
    1988:	80 83       	st	Z, r24
		lu8_counter--;
    198a:	8a 81       	ldd	r24, Y+2	; 0x02
    198c:	81 50       	subi	r24, 0x01	; 1
    198e:	8a 83       	std	Y+2, r24	; 0x02
		lu8_counter2++;
    1990:	89 81       	ldd	r24, Y+1	; 0x01
    1992:	8f 5f       	subi	r24, 0xFF	; 255
    1994:	89 83       	std	Y+1, r24	; 0x01
	lu8_counter = lu8_counter - 1;
	if (lu8_counter != ADDRESS_SIZE) {
		return 1;
	} else {
	}
	while (lu8_counter2 != 8) {
    1996:	89 81       	ldd	r24, Y+1	; 0x01
    1998:	88 30       	cpi	r24, 0x08	; 8
    199a:	d1 f6       	brne	.-76     	; 0x1950 <ConvertCh_Dec+0xa4>
		*Address |= (STRING_1[lu8_counter] << lu8_counter2);
		lu8_counter--;
		lu8_counter2++;
	}
	return 0;
    199c:	1f 82       	std	Y+7, r1	; 0x07
    199e:	8f 81       	ldd	r24, Y+7	; 0x07

}
    19a0:	27 96       	adiw	r28, 0x07	; 7
    19a2:	0f b6       	in	r0, 0x3f	; 63
    19a4:	f8 94       	cli
    19a6:	de bf       	out	0x3e, r29	; 62
    19a8:	0f be       	out	0x3f, r0	; 63
    19aa:	cd bf       	out	0x3d, r28	; 61
    19ac:	cf 91       	pop	r28
    19ae:	df 91       	pop	r29
    19b0:	08 95       	ret

000019b2 <App_Init>:

/*- APIs IMPLEMENTATION
 -----------------------------------*/
void App_Init(void) {
    19b2:	df 93       	push	r29
    19b4:	cf 93       	push	r28
    19b6:	cd b7       	in	r28, 0x3d	; 61
    19b8:	de b7       	in	r29, 0x3e	; 62
	/*--Initialization--*/
	DIO_SetPortDirection(PORTA, PORT_OUTPUT);
    19ba:	80 e0       	ldi	r24, 0x00	; 0
    19bc:	6f ef       	ldi	r22, 0xFF	; 255
    19be:	0e 94 a9 06 	call	0xd52	; 0xd52 <DIO_SetPortDirection>
	UART_Init(UART_1);
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	0e 94 49 00 	call	0x92	; 0x92 <UART_Init>
	TWI_Init(TWI_1);
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	0e 94 ed 01 	call	0x3da	; 0x3da <TWI_Init>
}
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	08 95       	ret

000019d4 <App_Update>:
void App_Update(void) {
    19d4:	df 93       	push	r29
    19d6:	cf 93       	push	r28
    19d8:	cd b7       	in	r28, 0x3d	; 61
    19da:	de b7       	in	r29, 0x3e	; 62
	/*GET THE COMMAND(READ/WRITE)*/
	UART_ReceiveString(UART_1, gu8_ReceiverBuffer);
    19dc:	29 ec       	ldi	r18, 0xC9	; 201
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	80 e0       	ldi	r24, 0x00	; 0
    19e2:	b9 01       	movw	r22, r18
    19e4:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <UART_ReceiveString>

	if ((StringCmpr(gu8_WriteMsg, gu8_ReceiverBuffer)) != 0) {
    19e8:	8a e6       	ldi	r24, 0x6A	; 106
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	29 ec       	ldi	r18, 0xC9	; 201
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	b9 01       	movw	r22, r18
    19f2:	0e 94 0e 0c 	call	0x181c	; 0x181c <StringCmpr>
    19f6:	88 23       	and	r24, r24
    19f8:	09 f4       	brne	.+2      	; 0x19fc <App_Update+0x28>
    19fa:	42 c0       	rjmp	.+132    	; 0x1a80 <App_Update+0xac>
		/*GET THE ADDRESS*/
		UART_TransmitString(UART_1, gu8_EnterTheADDR);
    19fc:	24 e8       	ldi	r18, 0x84	; 132
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	80 e0       	ldi	r24, 0x00	; 0
    1a02:	b9 01       	movw	r22, r18
    1a04:	0e 94 98 00 	call	0x130	; 0x130 <UART_TransmitString>
		UART_ReceiveString(UART_1, gu8_ReceiverAddr);
    1a08:	2d e2       	ldi	r18, 0x2D	; 45
    1a0a:	31 e0       	ldi	r19, 0x01	; 1
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	b9 01       	movw	r22, r18
    1a10:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <UART_ReceiveString>
    1a14:	0c c0       	rjmp	.+24     	; 0x1a2e <App_Update+0x5a>
		/*CONVERTS THE ADDRESS FROM CHARACTERS TO DECIMAL NUMBER
		 * AND CHECK IF THE ADRESS IS 8-BIT AND BINARY */
		while (ConvertCh_Dec(gu8_ReceiverAddr, &gu8_WriteAddr) != 0) {
			/*WORNG ADDRESS, ASK THE USER TO REENTER THE ADDRESS*/
			UART_TransmitString(UART_1, gu8_EnterTheAddrAga);
    1a16:	26 e9       	ldi	r18, 0x96	; 150
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	80 e0       	ldi	r24, 0x00	; 0
    1a1c:	b9 01       	movw	r22, r18
    1a1e:	0e 94 98 00 	call	0x130	; 0x130 <UART_TransmitString>
			UART_ReceiveString(UART_1, gu8_ReceiverAddr);
    1a22:	2d e2       	ldi	r18, 0x2D	; 45
    1a24:	31 e0       	ldi	r19, 0x01	; 1
    1a26:	80 e0       	ldi	r24, 0x00	; 0
    1a28:	b9 01       	movw	r22, r18
    1a2a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <UART_ReceiveString>
		/*GET THE ADDRESS*/
		UART_TransmitString(UART_1, gu8_EnterTheADDR);
		UART_ReceiveString(UART_1, gu8_ReceiverAddr);
		/*CONVERTS THE ADDRESS FROM CHARACTERS TO DECIMAL NUMBER
		 * AND CHECK IF THE ADRESS IS 8-BIT AND BINARY */
		while (ConvertCh_Dec(gu8_ReceiverAddr, &gu8_WriteAddr) != 0) {
    1a2e:	8d e2       	ldi	r24, 0x2D	; 45
    1a30:	91 e0       	ldi	r25, 0x01	; 1
    1a32:	26 ec       	ldi	r18, 0xC6	; 198
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	b9 01       	movw	r22, r18
    1a38:	0e 94 56 0c 	call	0x18ac	; 0x18ac <ConvertCh_Dec>
    1a3c:	88 23       	and	r24, r24
    1a3e:	59 f7       	brne	.-42     	; 0x1a16 <App_Update+0x42>
			UART_TransmitString(UART_1, gu8_EnterTheAddrAga);
			UART_ReceiveString(UART_1, gu8_ReceiverAddr);
		}
			/*IF THE ADDRESS IS CORRECT*/
			/*GET THE CHAR*/
			UART_TransmitString(UART_1, gu8_EnterTheData);
    1a40:	25 e7       	ldi	r18, 0x75	; 117
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	b9 01       	movw	r22, r18
    1a48:	0e 94 98 00 	call	0x130	; 0x130 <UART_TransmitString>
			UART_ReceiveChar(UART_1, &data);
    1a4c:	28 ec       	ldi	r18, 0xC8	; 200
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	b9 01       	movw	r22, r18
    1a54:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <UART_ReceiveChar>
			UART_TransmitChar(UART_1, '\r');
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	6d e0       	ldi	r22, 0x0D	; 13
    1a5c:	0e 94 7b 00 	call	0xf6	; 0xf6 <UART_TransmitChar>
			/*STORE THE CHARR IN EEPROM*/
			EEPROM_Write(EEPROM_1_B1, gu8_WriteAddr, data);
    1a60:	90 91 c6 00 	lds	r25, 0x00C6
    1a64:	20 91 c8 00 	lds	r18, 0x00C8
    1a68:	80 e5       	ldi	r24, 0x50	; 80
    1a6a:	69 2f       	mov	r22, r25
    1a6c:	42 2f       	mov	r20, r18
    1a6e:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <EEPROM_Write>

		/*SEND OK MSG TO INFORM THE USER THAT THE PROCESS WENT WELL*/
		UART_TransmitString(UART_1, gu8_OkMsg);
    1a72:	20 e6       	ldi	r18, 0x60	; 96
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	b9 01       	movw	r22, r18
    1a7a:	0e 94 98 00 	call	0x130	; 0x130 <UART_TransmitString>
    1a7e:	57 c0       	rjmp	.+174    	; 0x1b2e <App_Update+0x15a>

	} else if ((StringCmpr(gu8_ReceiverBuffer, gu8_ReadMsg)) == 1) {
    1a80:	89 ec       	ldi	r24, 0xC9	; 201
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	20 e7       	ldi	r18, 0x70	; 112
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	b9 01       	movw	r22, r18
    1a8a:	0e 94 0e 0c 	call	0x181c	; 0x181c <StringCmpr>
    1a8e:	81 30       	cpi	r24, 0x01	; 1
    1a90:	09 f0       	breq	.+2      	; 0x1a94 <App_Update+0xc0>
    1a92:	47 c0       	rjmp	.+142    	; 0x1b22 <App_Update+0x14e>
		/*GET THE ADDRESS*/
		UART_TransmitString(UART_1, gu8_EnterTheADDR);
    1a94:	24 e8       	ldi	r18, 0x84	; 132
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	80 e0       	ldi	r24, 0x00	; 0
    1a9a:	b9 01       	movw	r22, r18
    1a9c:	0e 94 98 00 	call	0x130	; 0x130 <UART_TransmitString>
		UART_ReceiveString(UART_1, gu8_ReceiverAddr);
    1aa0:	2d e2       	ldi	r18, 0x2D	; 45
    1aa2:	31 e0       	ldi	r19, 0x01	; 1
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	b9 01       	movw	r22, r18
    1aa8:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <UART_ReceiveString>
    1aac:	0c c0       	rjmp	.+24     	; 0x1ac6 <App_Update+0xf2>
		/*CONVERTS THE ADDRESS FROM CHARACTERS TO DECIMAL NUMBER
		 * AND CHECK IF THE ADRESS IS 8-BIT AND BINARY */
		while (ConvertCh_Dec(gu8_ReceiverAddr, &gu8_ReadAddr) != 0) {
			/*WORNG ADDRESS, ASK THE USER TO REENTER THE ADDRESS*/
			UART_TransmitString(UART_1, gu8_EnterTheAddrAga);
    1aae:	26 e9       	ldi	r18, 0x96	; 150
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	b9 01       	movw	r22, r18
    1ab6:	0e 94 98 00 	call	0x130	; 0x130 <UART_TransmitString>
			UART_ReceiveString(UART_1, gu8_ReceiverAddr);
    1aba:	2d e2       	ldi	r18, 0x2D	; 45
    1abc:	31 e0       	ldi	r19, 0x01	; 1
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	b9 01       	movw	r22, r18
    1ac2:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <UART_ReceiveString>
		/*GET THE ADDRESS*/
		UART_TransmitString(UART_1, gu8_EnterTheADDR);
		UART_ReceiveString(UART_1, gu8_ReceiverAddr);
		/*CONVERTS THE ADDRESS FROM CHARACTERS TO DECIMAL NUMBER
		 * AND CHECK IF THE ADRESS IS 8-BIT AND BINARY */
		while (ConvertCh_Dec(gu8_ReceiverAddr, &gu8_ReadAddr) != 0) {
    1ac6:	8d e2       	ldi	r24, 0x2D	; 45
    1ac8:	91 e0       	ldi	r25, 0x01	; 1
    1aca:	27 ec       	ldi	r18, 0xC7	; 199
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	b9 01       	movw	r22, r18
    1ad0:	0e 94 56 0c 	call	0x18ac	; 0x18ac <ConvertCh_Dec>
    1ad4:	88 23       	and	r24, r24
    1ad6:	59 f7       	brne	.-42     	; 0x1aae <App_Update+0xda>
			/*WORNG ADDRESS, ASK THE USER TO REENTER THE ADDRESS*/
			UART_TransmitString(UART_1, gu8_EnterTheAddrAga);
			UART_ReceiveString(UART_1, gu8_ReceiverAddr);
		}
			/*READ THE CHAR FROM EEPROM*/
			EEPROM_Read(EEPROM_1_B1, gu8_ReadAddr, &data);
    1ad8:	90 91 c7 00 	lds	r25, 0x00C7
    1adc:	28 ec       	ldi	r18, 0xC8	; 200
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	80 e5       	ldi	r24, 0x50	; 80
    1ae2:	69 2f       	mov	r22, r25
    1ae4:	a9 01       	movw	r20, r18
    1ae6:	0e 94 bf 0b 	call	0x177e	; 0x177e <EEPROM_Read>
		/*CHECK IF THE DATA IS CORRECT*/
		if (data == 0xff) {
    1aea:	80 91 c8 00 	lds	r24, 0x00C8
    1aee:	8f 3f       	cpi	r24, 0xFF	; 255
    1af0:	39 f4       	brne	.+14     	; 0x1b00 <App_Update+0x12c>
			UART_TransmitString(UART_1, gu8_Empty);
    1af2:	2e ea       	ldi	r18, 0xAE	; 174
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	b9 01       	movw	r22, r18
    1afa:	0e 94 98 00 	call	0x130	; 0x130 <UART_TransmitString>
    1afe:	17 c0       	rjmp	.+46     	; 0x1b2e <App_Update+0x15a>
		} else {
			/*SEND OK MSG TO INFORM THE USER THAT THE PROCESS WENT WELL*/
			UART_TransmitString(UART_1, gu8_OkMsg);
    1b00:	20 e6       	ldi	r18, 0x60	; 96
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	80 e0       	ldi	r24, 0x00	; 0
    1b06:	b9 01       	movw	r22, r18
    1b08:	0e 94 98 00 	call	0x130	; 0x130 <UART_TransmitString>
			UART_TransmitChar(UART_1, data);
    1b0c:	90 91 c8 00 	lds	r25, 0x00C8
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	69 2f       	mov	r22, r25
    1b14:	0e 94 7b 00 	call	0xf6	; 0xf6 <UART_TransmitChar>
			UART_TransmitChar(UART_1, '\r');
    1b18:	80 e0       	ldi	r24, 0x00	; 0
    1b1a:	6d e0       	ldi	r22, 0x0D	; 13
    1b1c:	0e 94 7b 00 	call	0xf6	; 0xf6 <UART_TransmitChar>
    1b20:	06 c0       	rjmp	.+12     	; 0x1b2e <App_Update+0x15a>
		}
	} else {
		/*SEND ERORR MSG, NO SUCH COMMAND*/
		UART_TransmitString(UART_1, gu8_ErrorMsg);
    1b22:	23 e6       	ldi	r18, 0x63	; 99
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	b9 01       	movw	r22, r18
    1b2a:	0e 94 98 00 	call	0x130	; 0x130 <UART_TransmitString>
	}

}
    1b2e:	cf 91       	pop	r28
    1b30:	df 91       	pop	r29
    1b32:	08 95       	ret

00001b34 <main>:
/*- INCLUDES 
-----------------------------------------------*/
#include "App/INTERFACE_MCU_WITH_EEPROM/interface_mcu_with_eeprom.h"

int main(){
    1b34:	df 93       	push	r29
    1b36:	cf 93       	push	r28
    1b38:	cd b7       	in	r28, 0x3d	; 61
    1b3a:	de b7       	in	r29, 0x3e	; 62
	App_Init();
    1b3c:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <App_Init>
	while(1){
	App_Update();
    1b40:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <App_Update>
    1b44:	fd cf       	rjmp	.-6      	; 0x1b40 <main+0xc>

00001b46 <_exit>:
    1b46:	f8 94       	cli

00001b48 <__stop_program>:
    1b48:	ff cf       	rjmp	.-2      	; 0x1b48 <__stop_program>
