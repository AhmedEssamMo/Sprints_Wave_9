
S_TWI_MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e8  00800060  00001a2e  00001ac2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800148  00800148  00001baa  2**0
                  ALLOC
  3 .stab         00002cdc  00000000  00000000  00001bac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011a5  00000000  00000000  00004888  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <__vector_1>
       8:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 31 05 	jmp	0xa62	; 0xa62 <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e2       	ldi	r30, 0x2E	; 46
      68:	fa e1       	ldi	r31, 0x1A	; 26
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 34       	cpi	r26, 0x48	; 72
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e4       	ldi	r26, 0x48	; 72
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 35       	cpi	r26, 0x52	; 82
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <main>
      8a:	0c 94 15 0d 	jmp	0x1a2a	; 0x1a2a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_Init>:
Ptr_VoidFuncVoid_t Gptr_uartDataEmptyRegInt;
Ptr_VoidFuncVoid_t Gptr_uartTxInt;

/*APIs IMPLEMENTATION
 -------------------------*/
uint8_t UART_Init(uint8_t UartNumber) {
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	0f 92       	push	r0
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
      9c:	89 83       	std	Y+1, r24	; 0x01
#if RECEIVEING
	Set_Bit(UCSRB, RXEN);
      9e:	aa e2       	ldi	r26, 0x2A	; 42
      a0:	b0 e0       	ldi	r27, 0x00	; 0
      a2:	ea e2       	ldi	r30, 0x2A	; 42
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	80 61       	ori	r24, 0x10	; 16
      aa:	8c 93       	st	X, r24
#else
	Clr_Bit(UCSRB,RXEN);
#endif
#if TRANSMITTING
	Set_Bit(UCSRB, TXEN);
      ac:	aa e2       	ldi	r26, 0x2A	; 42
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	ea e2       	ldi	r30, 0x2A	; 42
      b2:	f0 e0       	ldi	r31, 0x00	; 0
      b4:	80 81       	ld	r24, Z
      b6:	88 60       	ori	r24, 0x08	; 8
      b8:	8c 93       	st	X, r24
	Clr_Bit(UCSRB,TXEN);
#endif
#if SPEED
	Set_Bit(UCSRA,U2X);
#else
	Clr_Bit(UCSRA, U2X);
      ba:	ab e2       	ldi	r26, 0x2B	; 43
      bc:	b0 e0       	ldi	r27, 0x00	; 0
      be:	eb e2       	ldi	r30, 0x2B	; 43
      c0:	f0 e0       	ldi	r31, 0x00	; 0
      c2:	80 81       	ld	r24, Z
      c4:	8d 7f       	andi	r24, 0xFD	; 253
      c6:	8c 93       	st	X, r24
#endif
#if NINE_BIT
	Set_Bit(UCSRB, UCSZ2);
#else
	Clr_Bit(UCSRB, UCSZ2);
      c8:	aa e2       	ldi	r26, 0x2A	; 42
      ca:	b0 e0       	ldi	r27, 0x00	; 0
      cc:	ea e2       	ldi	r30, 0x2A	; 42
      ce:	f0 e0       	ldi	r31, 0x00	; 0
      d0:	80 81       	ld	r24, Z
      d2:	8b 7f       	andi	r24, 0xFB	; 251
      d4:	8c 93       	st	X, r24
#endif
	UCSRC |= ((SYNCHRONIZATION ) & (STOP_BITS ) & (CHARACTER_SIZE )
      d6:	a0 e4       	ldi	r26, 0x40	; 64
      d8:	b0 e0       	ldi	r27, 0x00	; 0
      da:	e0 e4       	ldi	r30, 0x40	; 64
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	80 81       	ld	r24, Z
      e0:	86 68       	ori	r24, 0x86	; 134
      e2:	8c 93       	st	X, r24
			& (PARITY_MODE ) & (CLOCK_POLARITY ));
	UBRRL = BUAD_RATE;
      e4:	e9 e2       	ldi	r30, 0x29	; 41
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	83 e3       	ldi	r24, 0x33	; 51
      ea:	80 83       	st	Z, r24
	return 0;
      ec:	80 e0       	ldi	r24, 0x00	; 0
}
      ee:	0f 90       	pop	r0
      f0:	cf 91       	pop	r28
      f2:	df 91       	pop	r29
      f4:	08 95       	ret

000000f6 <UART_TransmitChar>:
uint8_t UART_TransmitChar(uint8_t UartNumber, uint8_t TxChar) {
      f6:	df 93       	push	r29
      f8:	cf 93       	push	r28
      fa:	00 d0       	rcall	.+0      	; 0xfc <UART_TransmitChar+0x6>
      fc:	cd b7       	in	r28, 0x3d	; 61
      fe:	de b7       	in	r29, 0x3e	; 62
     100:	89 83       	std	Y+1, r24	; 0x01
     102:	6a 83       	std	Y+2, r22	; 0x02
	UDR = TxChar;
     104:	ec e2       	ldi	r30, 0x2C	; 44
     106:	f0 e0       	ldi	r31, 0x00	; 0
     108:	8a 81       	ldd	r24, Y+2	; 0x02
     10a:	80 83       	st	Z, r24
	while ((Get_Bit(UCSRA, UDRE)) != 1) {
     10c:	eb e2       	ldi	r30, 0x2B	; 43
     10e:	f0 e0       	ldi	r31, 0x00	; 0
     110:	80 81       	ld	r24, Z
     112:	82 95       	swap	r24
     114:	86 95       	lsr	r24
     116:	87 70       	andi	r24, 0x07	; 7
     118:	88 2f       	mov	r24, r24
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	81 70       	andi	r24, 0x01	; 1
     11e:	90 70       	andi	r25, 0x00	; 0
     120:	00 97       	sbiw	r24, 0x00	; 0
     122:	a1 f3       	breq	.-24     	; 0x10c <UART_TransmitChar+0x16>
	}
	return 0;
     124:	80 e0       	ldi	r24, 0x00	; 0
}
     126:	0f 90       	pop	r0
     128:	0f 90       	pop	r0
     12a:	cf 91       	pop	r28
     12c:	df 91       	pop	r29
     12e:	08 95       	ret

00000130 <UART_TransmitString>:
uint8_t UART_TransmitString(uint8_t UartNumber, ptr_uint8_t TxString) {
     130:	df 93       	push	r29
     132:	cf 93       	push	r28
     134:	00 d0       	rcall	.+0      	; 0x136 <UART_TransmitString+0x6>
     136:	00 d0       	rcall	.+0      	; 0x138 <UART_TransmitString+0x8>
     138:	cd b7       	in	r28, 0x3d	; 61
     13a:	de b7       	in	r29, 0x3e	; 62
     13c:	8a 83       	std	Y+2, r24	; 0x02
     13e:	7c 83       	std	Y+4, r23	; 0x04
     140:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t counter = 0;
     142:	19 82       	std	Y+1, r1	; 0x01
     144:	1b c0       	rjmp	.+54     	; 0x17c <UART_TransmitString+0x4c>
	while ((*(TxString + counter)) != NULL_TERMINATOR) {
		UDR = *(TxString + counter);//TxString[counter]
     146:	ac e2       	ldi	r26, 0x2C	; 44
     148:	b0 e0       	ldi	r27, 0x00	; 0
     14a:	89 81       	ldd	r24, Y+1	; 0x01
     14c:	28 2f       	mov	r18, r24
     14e:	30 e0       	ldi	r19, 0x00	; 0
     150:	8b 81       	ldd	r24, Y+3	; 0x03
     152:	9c 81       	ldd	r25, Y+4	; 0x04
     154:	fc 01       	movw	r30, r24
     156:	e2 0f       	add	r30, r18
     158:	f3 1f       	adc	r31, r19
     15a:	80 81       	ld	r24, Z
     15c:	8c 93       	st	X, r24
		while ((Get_Bit(UCSRA, UDRE)) != 1) ;
     15e:	eb e2       	ldi	r30, 0x2B	; 43
     160:	f0 e0       	ldi	r31, 0x00	; 0
     162:	80 81       	ld	r24, Z
     164:	82 95       	swap	r24
     166:	86 95       	lsr	r24
     168:	87 70       	andi	r24, 0x07	; 7
     16a:	88 2f       	mov	r24, r24
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	81 70       	andi	r24, 0x01	; 1
     170:	90 70       	andi	r25, 0x00	; 0
     172:	00 97       	sbiw	r24, 0x00	; 0
     174:	a1 f3       	breq	.-24     	; 0x15e <UART_TransmitString+0x2e>
		counter++;
     176:	89 81       	ldd	r24, Y+1	; 0x01
     178:	8f 5f       	subi	r24, 0xFF	; 255
     17a:	89 83       	std	Y+1, r24	; 0x01
	}
	return 0;
}
uint8_t UART_TransmitString(uint8_t UartNumber, ptr_uint8_t TxString) {
	uint8_t counter = 0;
	while ((*(TxString + counter)) != NULL_TERMINATOR) {
     17c:	89 81       	ldd	r24, Y+1	; 0x01
     17e:	28 2f       	mov	r18, r24
     180:	30 e0       	ldi	r19, 0x00	; 0
     182:	8b 81       	ldd	r24, Y+3	; 0x03
     184:	9c 81       	ldd	r25, Y+4	; 0x04
     186:	fc 01       	movw	r30, r24
     188:	e2 0f       	add	r30, r18
     18a:	f3 1f       	adc	r31, r19
     18c:	80 81       	ld	r24, Z
     18e:	88 23       	and	r24, r24
     190:	d1 f6       	brne	.-76     	; 0x146 <UART_TransmitString+0x16>
		UDR = *(TxString + counter);//TxString[counter]
		while ((Get_Bit(UCSRA, UDRE)) != 1) ;
		counter++;
	}
	UDR ='\r';//TxString[counter]
     192:	ec e2       	ldi	r30, 0x2C	; 44
     194:	f0 e0       	ldi	r31, 0x00	; 0
     196:	8d e0       	ldi	r24, 0x0D	; 13
     198:	80 83       	st	Z, r24
	while ((Get_Bit(UCSRA, UDRE)) != 1) ;
     19a:	eb e2       	ldi	r30, 0x2B	; 43
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	80 81       	ld	r24, Z
     1a0:	82 95       	swap	r24
     1a2:	86 95       	lsr	r24
     1a4:	87 70       	andi	r24, 0x07	; 7
     1a6:	88 2f       	mov	r24, r24
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	81 70       	andi	r24, 0x01	; 1
     1ac:	90 70       	andi	r25, 0x00	; 0
     1ae:	00 97       	sbiw	r24, 0x00	; 0
     1b0:	a1 f3       	breq	.-24     	; 0x19a <UART_TransmitString+0x6a>
	return 0;
     1b2:	80 e0       	ldi	r24, 0x00	; 0
}
     1b4:	0f 90       	pop	r0
     1b6:	0f 90       	pop	r0
     1b8:	0f 90       	pop	r0
     1ba:	0f 90       	pop	r0
     1bc:	cf 91       	pop	r28
     1be:	df 91       	pop	r29
     1c0:	08 95       	ret

000001c2 <UART_ReceiveChar>:
uint8_t UART_ReceiveChar(uint8_t UartNumber, ptr_uint8_t RxChar) {
     1c2:	df 93       	push	r29
     1c4:	cf 93       	push	r28
     1c6:	00 d0       	rcall	.+0      	; 0x1c8 <UART_ReceiveChar+0x6>
     1c8:	0f 92       	push	r0
     1ca:	cd b7       	in	r28, 0x3d	; 61
     1cc:	de b7       	in	r29, 0x3e	; 62
     1ce:	89 83       	std	Y+1, r24	; 0x01
     1d0:	7b 83       	std	Y+3, r23	; 0x03
     1d2:	6a 83       	std	Y+2, r22	; 0x02

	while ( !(UCSRA & (1<<RXC)) );
     1d4:	eb e2       	ldi	r30, 0x2B	; 43
     1d6:	f0 e0       	ldi	r31, 0x00	; 0
     1d8:	80 81       	ld	r24, Z
     1da:	88 23       	and	r24, r24
     1dc:	dc f7       	brge	.-10     	; 0x1d4 <UART_ReceiveChar+0x12>
	*(RxChar) = (uint8_t)UDR;
     1de:	ec e2       	ldi	r30, 0x2C	; 44
     1e0:	f0 e0       	ldi	r31, 0x00	; 0
     1e2:	80 81       	ld	r24, Z
     1e4:	ea 81       	ldd	r30, Y+2	; 0x02
     1e6:	fb 81       	ldd	r31, Y+3	; 0x03
     1e8:	80 83       	st	Z, r24
	return 0;
     1ea:	80 e0       	ldi	r24, 0x00	; 0
}
     1ec:	0f 90       	pop	r0
     1ee:	0f 90       	pop	r0
     1f0:	0f 90       	pop	r0
     1f2:	cf 91       	pop	r28
     1f4:	df 91       	pop	r29
     1f6:	08 95       	ret

000001f8 <UART_ReceiveString>:
uint8_t UART_ReceiveString(uint8_t UartNumber, ptr_uint8_t RxString) {
     1f8:	df 93       	push	r29
     1fa:	cf 93       	push	r28
     1fc:	00 d0       	rcall	.+0      	; 0x1fe <UART_ReceiveString+0x6>
     1fe:	00 d0       	rcall	.+0      	; 0x200 <UART_ReceiveString+0x8>
     200:	cd b7       	in	r28, 0x3d	; 61
     202:	de b7       	in	r29, 0x3e	; 62
     204:	8a 83       	std	Y+2, r24	; 0x02
     206:	7c 83       	std	Y+4, r23	; 0x04
     208:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t counter = 0;
     20a:	19 82       	std	Y+1, r1	; 0x01

	while (1) {
		while ( !(UCSRA & (1<<RXC)) );
     20c:	eb e2       	ldi	r30, 0x2B	; 43
     20e:	f0 e0       	ldi	r31, 0x00	; 0
     210:	80 81       	ld	r24, Z
     212:	88 23       	and	r24, r24
     214:	dc f7       	brge	.-10     	; 0x20c <UART_ReceiveString+0x14>
		RxString[counter] = (uint8_t)UDR;
     216:	89 81       	ldd	r24, Y+1	; 0x01
     218:	28 2f       	mov	r18, r24
     21a:	30 e0       	ldi	r19, 0x00	; 0
     21c:	8b 81       	ldd	r24, Y+3	; 0x03
     21e:	9c 81       	ldd	r25, Y+4	; 0x04
     220:	dc 01       	movw	r26, r24
     222:	a2 0f       	add	r26, r18
     224:	b3 1f       	adc	r27, r19
     226:	ec e2       	ldi	r30, 0x2C	; 44
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	80 81       	ld	r24, Z
     22c:	8c 93       	st	X, r24
		//UART_TransmitChar(UART_1,RxString[counter]);
		counter++;
     22e:	89 81       	ldd	r24, Y+1	; 0x01
     230:	8f 5f       	subi	r24, 0xFF	; 255
     232:	89 83       	std	Y+1, r24	; 0x01
		if((UDR)==(NEW_LINE)){
     234:	ec e2       	ldi	r30, 0x2C	; 44
     236:	f0 e0       	ldi	r31, 0x00	; 0
     238:	80 81       	ld	r24, Z
     23a:	8d 30       	cpi	r24, 0x0D	; 13
     23c:	a1 f4       	brne	.+40     	; 0x266 <UART_ReceiveString+0x6e>
			RxString[counter-1]=NULL_TERMINATOR;
     23e:	89 81       	ldd	r24, Y+1	; 0x01
     240:	88 2f       	mov	r24, r24
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	9c 01       	movw	r18, r24
     246:	21 50       	subi	r18, 0x01	; 1
     248:	30 40       	sbci	r19, 0x00	; 0
     24a:	8b 81       	ldd	r24, Y+3	; 0x03
     24c:	9c 81       	ldd	r25, Y+4	; 0x04
     24e:	fc 01       	movw	r30, r24
     250:	e2 0f       	add	r30, r18
     252:	f3 1f       	adc	r31, r19
     254:	10 82       	st	Z, r1



	}
	//*(RxString+counter)='\n';
	return 0;
     256:	80 e0       	ldi	r24, 0x00	; 0
}
     258:	0f 90       	pop	r0
     25a:	0f 90       	pop	r0
     25c:	0f 90       	pop	r0
     25e:	0f 90       	pop	r0
     260:	cf 91       	pop	r28
     262:	df 91       	pop	r29
     264:	08 95       	ret
		counter++;
		if((UDR)==(NEW_LINE)){
			RxString[counter-1]=NULL_TERMINATOR;
			break;
		}
		else if(((UDR)==(BACKSPACE))&&counter>1){
     266:	ec e2       	ldi	r30, 0x2C	; 44
     268:	f0 e0       	ldi	r31, 0x00	; 0
     26a:	80 81       	ld	r24, Z
     26c:	88 30       	cpi	r24, 0x08	; 8
     26e:	39 f4       	brne	.+14     	; 0x27e <UART_ReceiveString+0x86>
     270:	89 81       	ldd	r24, Y+1	; 0x01
     272:	82 30       	cpi	r24, 0x02	; 2
     274:	20 f0       	brcs	.+8      	; 0x27e <UART_ReceiveString+0x86>
			counter=counter-2;
     276:	89 81       	ldd	r24, Y+1	; 0x01
     278:	82 50       	subi	r24, 0x02	; 2
     27a:	89 83       	std	Y+1, r24	; 0x01
     27c:	c7 cf       	rjmp	.-114    	; 0x20c <UART_ReceiveString+0x14>
		}
		else if(((UDR)==(BACKSPACE))&&counter<=1){
     27e:	ec e2       	ldi	r30, 0x2C	; 44
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	80 81       	ld	r24, Z
     284:	88 30       	cpi	r24, 0x08	; 8
     286:	11 f6       	brne	.-124    	; 0x20c <UART_ReceiveString+0x14>
     288:	89 81       	ldd	r24, Y+1	; 0x01
     28a:	82 30       	cpi	r24, 0x02	; 2
     28c:	08 f0       	brcs	.+2      	; 0x290 <UART_ReceiveString+0x98>
     28e:	be cf       	rjmp	.-132    	; 0x20c <UART_ReceiveString+0x14>
			counter=0;
     290:	19 82       	std	Y+1, r1	; 0x01
     292:	bc cf       	rjmp	.-136    	; 0x20c <UART_ReceiveString+0x14>

00000294 <UART_EnableInterrupt>:

	}
	//*(RxString+counter)='\n';
	return 0;
}
uint8_t UART_EnableInterrupt(uint8_t UartNumber, uint8_t UartInterruptType) {
     294:	df 93       	push	r29
     296:	cf 93       	push	r28
     298:	00 d0       	rcall	.+0      	; 0x29a <UART_EnableInterrupt+0x6>
     29a:	00 d0       	rcall	.+0      	; 0x29c <UART_EnableInterrupt+0x8>
     29c:	cd b7       	in	r28, 0x3d	; 61
     29e:	de b7       	in	r29, 0x3e	; 62
     2a0:	89 83       	std	Y+1, r24	; 0x01
     2a2:	6a 83       	std	Y+2, r22	; 0x02
	switch (UartNumber) {
     2a4:	89 81       	ldd	r24, Y+1	; 0x01
     2a6:	88 2f       	mov	r24, r24
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	00 97       	sbiw	r24, 0x00	; 0
     2ac:	51 f5       	brne	.+84     	; 0x302 <UART_EnableInterrupt+0x6e>
	case UART_1 :
		switch (UartInterruptType) {
     2ae:	8a 81       	ldd	r24, Y+2	; 0x02
     2b0:	28 2f       	mov	r18, r24
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	3c 83       	std	Y+4, r19	; 0x04
     2b6:	2b 83       	std	Y+3, r18	; 0x03
     2b8:	8b 81       	ldd	r24, Y+3	; 0x03
     2ba:	9c 81       	ldd	r25, Y+4	; 0x04
     2bc:	81 30       	cpi	r24, 0x01	; 1
     2be:	91 05       	cpc	r25, r1
     2c0:	89 f0       	breq	.+34     	; 0x2e4 <UART_EnableInterrupt+0x50>
     2c2:	2b 81       	ldd	r18, Y+3	; 0x03
     2c4:	3c 81       	ldd	r19, Y+4	; 0x04
     2c6:	22 30       	cpi	r18, 0x02	; 2
     2c8:	31 05       	cpc	r19, r1
     2ca:	a1 f0       	breq	.+40     	; 0x2f4 <UART_EnableInterrupt+0x60>
     2cc:	8b 81       	ldd	r24, Y+3	; 0x03
     2ce:	9c 81       	ldd	r25, Y+4	; 0x04
     2d0:	00 97       	sbiw	r24, 0x00	; 0
     2d2:	b9 f4       	brne	.+46     	; 0x302 <UART_EnableInterrupt+0x6e>
		case RECIVE_INT :
			Set_Bit(UCSRB, RXCIE);
     2d4:	aa e2       	ldi	r26, 0x2A	; 42
     2d6:	b0 e0       	ldi	r27, 0x00	; 0
     2d8:	ea e2       	ldi	r30, 0x2A	; 42
     2da:	f0 e0       	ldi	r31, 0x00	; 0
     2dc:	80 81       	ld	r24, Z
     2de:	80 68       	ori	r24, 0x80	; 128
     2e0:	8c 93       	st	X, r24
     2e2:	0f c0       	rjmp	.+30     	; 0x302 <UART_EnableInterrupt+0x6e>
			break;
		case TRANSMIT_INT :
			Set_Bit(UCSRB, TXCIE);
     2e4:	aa e2       	ldi	r26, 0x2A	; 42
     2e6:	b0 e0       	ldi	r27, 0x00	; 0
     2e8:	ea e2       	ldi	r30, 0x2A	; 42
     2ea:	f0 e0       	ldi	r31, 0x00	; 0
     2ec:	80 81       	ld	r24, Z
     2ee:	80 64       	ori	r24, 0x40	; 64
     2f0:	8c 93       	st	X, r24
     2f2:	07 c0       	rjmp	.+14     	; 0x302 <UART_EnableInterrupt+0x6e>
			break;
		case EMPTY_BUFFERR_INT :
			Set_Bit(UCSRB, UDRIE);
     2f4:	aa e2       	ldi	r26, 0x2A	; 42
     2f6:	b0 e0       	ldi	r27, 0x00	; 0
     2f8:	ea e2       	ldi	r30, 0x2A	; 42
     2fa:	f0 e0       	ldi	r31, 0x00	; 0
     2fc:	80 81       	ld	r24, Z
     2fe:	80 62       	ori	r24, 0x20	; 32
     300:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
	return 0;
     302:	80 e0       	ldi	r24, 0x00	; 0
}
     304:	0f 90       	pop	r0
     306:	0f 90       	pop	r0
     308:	0f 90       	pop	r0
     30a:	0f 90       	pop	r0
     30c:	cf 91       	pop	r28
     30e:	df 91       	pop	r29
     310:	08 95       	ret

00000312 <UART_DisableInterrupt>:
uint8_t UART_DisableInterrupt(uint8_t UartNumber, uint8_t UartInterruptType) {
     312:	df 93       	push	r29
     314:	cf 93       	push	r28
     316:	00 d0       	rcall	.+0      	; 0x318 <UART_DisableInterrupt+0x6>
     318:	00 d0       	rcall	.+0      	; 0x31a <UART_DisableInterrupt+0x8>
     31a:	cd b7       	in	r28, 0x3d	; 61
     31c:	de b7       	in	r29, 0x3e	; 62
     31e:	89 83       	std	Y+1, r24	; 0x01
     320:	6a 83       	std	Y+2, r22	; 0x02
	switch (UartNumber) {
     322:	89 81       	ldd	r24, Y+1	; 0x01
     324:	88 2f       	mov	r24, r24
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	00 97       	sbiw	r24, 0x00	; 0
     32a:	51 f5       	brne	.+84     	; 0x380 <UART_DisableInterrupt+0x6e>
	case UART_1 :
		switch (UartInterruptType) {
     32c:	8a 81       	ldd	r24, Y+2	; 0x02
     32e:	28 2f       	mov	r18, r24
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	3c 83       	std	Y+4, r19	; 0x04
     334:	2b 83       	std	Y+3, r18	; 0x03
     336:	8b 81       	ldd	r24, Y+3	; 0x03
     338:	9c 81       	ldd	r25, Y+4	; 0x04
     33a:	81 30       	cpi	r24, 0x01	; 1
     33c:	91 05       	cpc	r25, r1
     33e:	89 f0       	breq	.+34     	; 0x362 <UART_DisableInterrupt+0x50>
     340:	2b 81       	ldd	r18, Y+3	; 0x03
     342:	3c 81       	ldd	r19, Y+4	; 0x04
     344:	22 30       	cpi	r18, 0x02	; 2
     346:	31 05       	cpc	r19, r1
     348:	a1 f0       	breq	.+40     	; 0x372 <UART_DisableInterrupt+0x60>
     34a:	8b 81       	ldd	r24, Y+3	; 0x03
     34c:	9c 81       	ldd	r25, Y+4	; 0x04
     34e:	00 97       	sbiw	r24, 0x00	; 0
     350:	b9 f4       	brne	.+46     	; 0x380 <UART_DisableInterrupt+0x6e>
		case RECIVE_INT :
			Clr_Bit(UCSRB, RXCIE);
     352:	aa e2       	ldi	r26, 0x2A	; 42
     354:	b0 e0       	ldi	r27, 0x00	; 0
     356:	ea e2       	ldi	r30, 0x2A	; 42
     358:	f0 e0       	ldi	r31, 0x00	; 0
     35a:	80 81       	ld	r24, Z
     35c:	8f 77       	andi	r24, 0x7F	; 127
     35e:	8c 93       	st	X, r24
     360:	0f c0       	rjmp	.+30     	; 0x380 <UART_DisableInterrupt+0x6e>
			break;
		case TRANSMIT_INT :
			Clr_Bit(UCSRB, TXCIE);
     362:	aa e2       	ldi	r26, 0x2A	; 42
     364:	b0 e0       	ldi	r27, 0x00	; 0
     366:	ea e2       	ldi	r30, 0x2A	; 42
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	80 81       	ld	r24, Z
     36c:	8f 7b       	andi	r24, 0xBF	; 191
     36e:	8c 93       	st	X, r24
     370:	07 c0       	rjmp	.+14     	; 0x380 <UART_DisableInterrupt+0x6e>
			break;
		case EMPTY_BUFFERR_INT :
			Clr_Bit(UCSRB, UDRIE);
     372:	aa e2       	ldi	r26, 0x2A	; 42
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ea e2       	ldi	r30, 0x2A	; 42
     378:	f0 e0       	ldi	r31, 0x00	; 0
     37a:	80 81       	ld	r24, Z
     37c:	8f 7d       	andi	r24, 0xDF	; 223
     37e:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
	return 0;
     380:	80 e0       	ldi	r24, 0x00	; 0
}
     382:	0f 90       	pop	r0
     384:	0f 90       	pop	r0
     386:	0f 90       	pop	r0
     388:	0f 90       	pop	r0
     38a:	cf 91       	pop	r28
     38c:	df 91       	pop	r29
     38e:	08 95       	ret

00000390 <TWI_SetSlaveAddress>:
 The 1St Bit is for read or write operation
 Read =1
 write=0
 */

uint8_t TWI_SetSlaveAddress(uint8_t I2C_CH) {
     390:	df 93       	push	r29
     392:	cf 93       	push	r28
     394:	0f 92       	push	r0
     396:	cd b7       	in	r28, 0x3d	; 61
     398:	de b7       	in	r29, 0x3e	; 62
     39a:	89 83       	std	Y+1, r24	; 0x01
	TWI_Adress_REGISTER = (SlaveAddr << 1); //Shift the register left
     39c:	e2 e2       	ldi	r30, 0x22	; 34
     39e:	f0 e0       	ldi	r31, 0x00	; 0
     3a0:	80 e3       	ldi	r24, 0x30	; 48
     3a2:	80 83       	st	Z, r24
	return 0;
     3a4:	80 e0       	ldi	r24, 0x00	; 0
}
     3a6:	0f 90       	pop	r0
     3a8:	cf 91       	pop	r28
     3aa:	df 91       	pop	r29
     3ac:	08 95       	ret

000003ae <TWI_Init>:
uint8_t TWI_Init(uint8_t I2C_CH) {
     3ae:	df 93       	push	r29
     3b0:	cf 93       	push	r28
     3b2:	0f 92       	push	r0
     3b4:	cd b7       	in	r28, 0x3d	; 61
     3b6:	de b7       	in	r29, 0x3e	; 62
     3b8:	89 83       	std	Y+1, r24	; 0x01
	/*-----SET ADDRESS IN CASE OF IT'S IN SLAVE MODE---- */
	TWI_SetSlaveAddress(I2C_CH);
     3ba:	89 81       	ldd	r24, Y+1	; 0x01
     3bc:	0e 94 c8 01 	call	0x390	; 0x390 <TWI_SetSlaveAddress>
	/*-----SETTING THE FREQ-----*/
	TWI_Bit_Rate_REGISTER = Bit_rate;
     3c0:	e0 e2       	ldi	r30, 0x20	; 32
     3c2:	f0 e0       	ldi	r31, 0x00	; 0
     3c4:	8e e1       	ldi	r24, 0x1E	; 30
     3c6:	80 83       	st	Z, r24
	TWI_Status_REGISTER &= Prescaler;
     3c8:	a1 e2       	ldi	r26, 0x21	; 33
     3ca:	b0 e0       	ldi	r27, 0x00	; 0
     3cc:	e1 e2       	ldi	r30, 0x21	; 33
     3ce:	f0 e0       	ldi	r31, 0x00	; 0
     3d0:	80 81       	ld	r24, Z
     3d2:	8c 7f       	andi	r24, 0xFC	; 252
     3d4:	8c 93       	st	X, r24
	/*Initial Value for TWI_Control_REGISTER is zeros so I set only what I need and ignore the rest*/
	/*-----ENABLE ACKNOWLEDGE----*/
	Set_Bit(TWI_Control_REGISTER, TWEA);
     3d6:	a6 e5       	ldi	r26, 0x56	; 86
     3d8:	b0 e0       	ldi	r27, 0x00	; 0
     3da:	e6 e5       	ldi	r30, 0x56	; 86
     3dc:	f0 e0       	ldi	r31, 0x00	; 0
     3de:	80 81       	ld	r24, Z
     3e0:	80 64       	ori	r24, 0x40	; 64
     3e2:	8c 93       	st	X, r24
	/*-----ENABLE THE PREIPHERAL ITSELF-----*/
	Set_Bit(TWI_Control_REGISTER, TWEN);
     3e4:	a6 e5       	ldi	r26, 0x56	; 86
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e6 e5       	ldi	r30, 0x56	; 86
     3ea:	f0 e0       	ldi	r31, 0x00	; 0
     3ec:	80 81       	ld	r24, Z
     3ee:	84 60       	ori	r24, 0x04	; 4
     3f0:	8c 93       	st	X, r24
	return 0;
     3f2:	80 e0       	ldi	r24, 0x00	; 0
}
     3f4:	0f 90       	pop	r0
     3f6:	cf 91       	pop	r28
     3f8:	df 91       	pop	r29
     3fa:	08 95       	ret

000003fc <TWI_SendStartCondition>:
uint8_t TWI_SendStartCondition(uint8_t I2C_CH) {
     3fc:	df 93       	push	r29
     3fe:	cf 93       	push	r28
     400:	00 d0       	rcall	.+0      	; 0x402 <TWI_SendStartCondition+0x6>
     402:	0f 92       	push	r0
     404:	cd b7       	in	r28, 0x3d	; 61
     406:	de b7       	in	r29, 0x3e	; 62
     408:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t ErrStatus = 0;
     40a:	19 82       	std	Y+1, r1	; 0x01
	TWI_Control_REGISTER = (EN_TWI | SEND_START | CLR_FLAG);
     40c:	e6 e5       	ldi	r30, 0x56	; 86
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	84 ea       	ldi	r24, 0xA4	; 164
     412:	80 83       	st	Z, r24
	while ((Get_Bit(TWI_Control_REGISTER, TWINT)) != 1)
     414:	e6 e5       	ldi	r30, 0x56	; 86
     416:	f0 e0       	ldi	r31, 0x00	; 0
     418:	80 81       	ld	r24, Z
     41a:	88 1f       	adc	r24, r24
     41c:	88 27       	eor	r24, r24
     41e:	88 1f       	adc	r24, r24
     420:	81 30       	cpi	r24, 0x01	; 1
     422:	c1 f7       	brne	.-16     	; 0x414 <TWI_SendStartCondition+0x18>
		;/*Wait for TWINT Flag set.
		 This indicates that the START condition has been transmitted*/
	ErrStatus = (TWI_Status_REGISTER & 0xf8); //0b11111000
     424:	e1 e2       	ldi	r30, 0x21	; 33
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	80 81       	ld	r24, Z
     42a:	88 7f       	andi	r24, 0xF8	; 248
     42c:	89 83       	std	Y+1, r24	; 0x01
	if (ErrStatus == ST_CONDITION) {
     42e:	89 81       	ldd	r24, Y+1	; 0x01
     430:	88 30       	cpi	r24, 0x08	; 8
     432:	41 f4       	brne	.+16     	; 0x444 <TWI_SendStartCondition+0x48>
		UART_TransmitString(UART_1, "START CONDITION SENT\r");
     434:	20 e6       	ldi	r18, 0x60	; 96
     436:	30 e0       	ldi	r19, 0x00	; 0
     438:	80 e0       	ldi	r24, 0x00	; 0
     43a:	b9 01       	movw	r22, r18
     43c:	0e 94 98 00 	call	0x130	; 0x130 <UART_TransmitString>
		return 0; //STATR CONDITION HAS BEEN SENT
     440:	1b 82       	std	Y+3, r1	; 0x03
     442:	08 c0       	rjmp	.+16     	; 0x454 <TWI_SendStartCondition+0x58>
	} else {
		UART_TransmitString(UART_1, "START CONDITION NOT SENT\r");
     444:	26 e7       	ldi	r18, 0x76	; 118
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	b9 01       	movw	r22, r18
     44c:	0e 94 98 00 	call	0x130	; 0x130 <UART_TransmitString>
		return 1; //ERROR
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	8b 83       	std	Y+3, r24	; 0x03
     454:	8b 81       	ldd	r24, Y+3	; 0x03
	}

}
     456:	0f 90       	pop	r0
     458:	0f 90       	pop	r0
     45a:	0f 90       	pop	r0
     45c:	cf 91       	pop	r28
     45e:	df 91       	pop	r29
     460:	08 95       	ret

00000462 <TWI_SendStopCondition>:
uint8_t TWI_SendStopCondition(uint8_t I2C_CH) {
     462:	df 93       	push	r29
     464:	cf 93       	push	r28
     466:	0f 92       	push	r0
     468:	cd b7       	in	r28, 0x3d	; 61
     46a:	de b7       	in	r29, 0x3e	; 62
     46c:	89 83       	std	Y+1, r24	; 0x01
	TWI_Control_REGISTER = (EN_TWI | CLR_FLAG | SEND_STOP);
     46e:	e6 e5       	ldi	r30, 0x56	; 86
     470:	f0 e0       	ldi	r31, 0x00	; 0
     472:	84 e9       	ldi	r24, 0x94	; 148
     474:	80 83       	st	Z, r24
	UART_TransmitString(UART_1, "STOP CONDITION SENT\r");
     476:	20 e9       	ldi	r18, 0x90	; 144
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	80 e0       	ldi	r24, 0x00	; 0
     47c:	b9 01       	movw	r22, r18
     47e:	0e 94 98 00 	call	0x130	; 0x130 <UART_TransmitString>
	return 0;
     482:	80 e0       	ldi	r24, 0x00	; 0
}
     484:	0f 90       	pop	r0
     486:	cf 91       	pop	r28
     488:	df 91       	pop	r29
     48a:	08 95       	ret

0000048c <TWI_SendSLAWrite>:
uint8_t TWI_SendSLAWrite(uint8_t I2C_CH, uint8_t SlvAdr) {
     48c:	df 93       	push	r29
     48e:	cf 93       	push	r28
     490:	00 d0       	rcall	.+0      	; 0x492 <TWI_SendSLAWrite+0x6>
     492:	00 d0       	rcall	.+0      	; 0x494 <TWI_SendSLAWrite+0x8>
     494:	cd b7       	in	r28, 0x3d	; 61
     496:	de b7       	in	r29, 0x3e	; 62
     498:	8a 83       	std	Y+2, r24	; 0x02
     49a:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrStatus = 0;
     49c:	19 82       	std	Y+1, r1	; 0x01
	TWI_Data_REGISTER = ((SlvAdr << 1) | 0);
     49e:	e3 e2       	ldi	r30, 0x23	; 35
     4a0:	f0 e0       	ldi	r31, 0x00	; 0
     4a2:	8b 81       	ldd	r24, Y+3	; 0x03
     4a4:	88 0f       	add	r24, r24
     4a6:	80 83       	st	Z, r24
	TWI_Control_REGISTER = (EN_TWI | CLR_FLAG);// CLEAR FLAG TO SEND DATA
     4a8:	e6 e5       	ldi	r30, 0x56	; 86
     4aa:	f0 e0       	ldi	r31, 0x00	; 0
     4ac:	84 e8       	ldi	r24, 0x84	; 132
     4ae:	80 83       	st	Z, r24
	while (Get_Bit(TWI_Control_REGISTER,TWINT) == 0)
     4b0:	e6 e5       	ldi	r30, 0x56	; 86
     4b2:	f0 e0       	ldi	r31, 0x00	; 0
     4b4:	80 81       	ld	r24, Z
     4b6:	88 23       	and	r24, r24
     4b8:	dc f7       	brge	.-10     	; 0x4b0 <TWI_SendSLAWrite+0x24>
		;
	ErrStatus = (TWI_Status_REGISTER & 0xf8); //0b11111000
     4ba:	e1 e2       	ldi	r30, 0x21	; 33
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	80 81       	ld	r24, Z
     4c0:	88 7f       	andi	r24, 0xF8	; 248
     4c2:	89 83       	std	Y+1, r24	; 0x01
	if (ErrStatus == SLA_W_ACK) {
     4c4:	89 81       	ldd	r24, Y+1	; 0x01
     4c6:	88 31       	cpi	r24, 0x18	; 24
     4c8:	41 f4       	brne	.+16     	; 0x4da <TWI_SendSLAWrite+0x4e>
		UART_TransmitString(UART_1, "SENT SLAVE ADDRESS WITH ACK\r");
     4ca:	25 ea       	ldi	r18, 0xA5	; 165
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	b9 01       	movw	r22, r18
     4d2:	0e 94 98 00 	call	0x130	; 0x130 <UART_TransmitString>
		return 0;
     4d6:	1c 82       	std	Y+4, r1	; 0x04
     4d8:	14 c0       	rjmp	.+40     	; 0x502 <TWI_SendSLAWrite+0x76>
	} else if (ErrStatus == SLA_W_NACK) {
     4da:	89 81       	ldd	r24, Y+1	; 0x01
     4dc:	80 32       	cpi	r24, 0x20	; 32
     4de:	49 f4       	brne	.+18     	; 0x4f2 <TWI_SendSLAWrite+0x66>
		UART_TransmitString(UART_1, "SENT SLAVE ADDRESS WITH NO ACK\r");
     4e0:	22 ec       	ldi	r18, 0xC2	; 194
     4e2:	30 e0       	ldi	r19, 0x00	; 0
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	b9 01       	movw	r22, r18
     4e8:	0e 94 98 00 	call	0x130	; 0x130 <UART_TransmitString>
		return 2;
     4ec:	82 e0       	ldi	r24, 0x02	; 2
     4ee:	8c 83       	std	Y+4, r24	; 0x04
     4f0:	08 c0       	rjmp	.+16     	; 0x502 <TWI_SendSLAWrite+0x76>
	} else {
		UART_TransmitString(UART_1, "ERROR\r");
     4f2:	22 ee       	ldi	r18, 0xE2	; 226
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	b9 01       	movw	r22, r18
     4fa:	0e 94 98 00 	call	0x130	; 0x130 <UART_TransmitString>
		return 3;
     4fe:	83 e0       	ldi	r24, 0x03	; 3
     500:	8c 83       	std	Y+4, r24	; 0x04
     502:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
     504:	0f 90       	pop	r0
     506:	0f 90       	pop	r0
     508:	0f 90       	pop	r0
     50a:	0f 90       	pop	r0
     50c:	cf 91       	pop	r28
     50e:	df 91       	pop	r29
     510:	08 95       	ret

00000512 <TWI_SendSLARead>:
uint8_t TWI_SendSLARead(uint8_t I2C_CH, uint8_t SlvAdr) {
     512:	df 93       	push	r29
     514:	cf 93       	push	r28
     516:	00 d0       	rcall	.+0      	; 0x518 <TWI_SendSLARead+0x6>
     518:	00 d0       	rcall	.+0      	; 0x51a <TWI_SendSLARead+0x8>
     51a:	cd b7       	in	r28, 0x3d	; 61
     51c:	de b7       	in	r29, 0x3e	; 62
     51e:	8a 83       	std	Y+2, r24	; 0x02
     520:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrStatus = 0;
     522:	19 82       	std	Y+1, r1	; 0x01
	TWI_Data_REGISTER = ((SlvAdr << 1) | 1);
     524:	e3 e2       	ldi	r30, 0x23	; 35
     526:	f0 e0       	ldi	r31, 0x00	; 0
     528:	8b 81       	ldd	r24, Y+3	; 0x03
     52a:	88 2f       	mov	r24, r24
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	88 0f       	add	r24, r24
     530:	99 1f       	adc	r25, r25
     532:	81 60       	ori	r24, 0x01	; 1
     534:	80 83       	st	Z, r24
	TWI_Control_REGISTER = (EN_TWI | CLR_FLAG);
     536:	e6 e5       	ldi	r30, 0x56	; 86
     538:	f0 e0       	ldi	r31, 0x00	; 0
     53a:	84 e8       	ldi	r24, 0x84	; 132
     53c:	80 83       	st	Z, r24
	while (Get_Bit(TWI_Control_REGISTER,TWINT) == 0)
     53e:	e6 e5       	ldi	r30, 0x56	; 86
     540:	f0 e0       	ldi	r31, 0x00	; 0
     542:	80 81       	ld	r24, Z
     544:	88 23       	and	r24, r24
     546:	dc f7       	brge	.-10     	; 0x53e <TWI_SendSLARead+0x2c>
		;
	ErrStatus = (TWI_Status_REGISTER & 0xf8); //0b11111000
     548:	e1 e2       	ldi	r30, 0x21	; 33
     54a:	f0 e0       	ldi	r31, 0x00	; 0
     54c:	80 81       	ld	r24, Z
     54e:	88 7f       	andi	r24, 0xF8	; 248
     550:	89 83       	std	Y+1, r24	; 0x01
	if (ErrStatus == SLA_R_ACK) {
     552:	89 81       	ldd	r24, Y+1	; 0x01
     554:	80 34       	cpi	r24, 0x40	; 64
     556:	41 f4       	brne	.+16     	; 0x568 <TWI_SendSLARead+0x56>
		UART_TransmitString(UART_1, "SENT SLAVE ADDRESS WITH ACK\r");
     558:	25 ea       	ldi	r18, 0xA5	; 165
     55a:	30 e0       	ldi	r19, 0x00	; 0
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	b9 01       	movw	r22, r18
     560:	0e 94 98 00 	call	0x130	; 0x130 <UART_TransmitString>
		return 0;
     564:	1c 82       	std	Y+4, r1	; 0x04
     566:	14 c0       	rjmp	.+40     	; 0x590 <TWI_SendSLARead+0x7e>
	} else if (ErrStatus == SLA_R_NACK) {
     568:	89 81       	ldd	r24, Y+1	; 0x01
     56a:	88 34       	cpi	r24, 0x48	; 72
     56c:	49 f4       	brne	.+18     	; 0x580 <TWI_SendSLARead+0x6e>
		UART_TransmitString(UART_1, "SENT SLAVE ADDRESS WITH NO ACK\r");
     56e:	22 ec       	ldi	r18, 0xC2	; 194
     570:	30 e0       	ldi	r19, 0x00	; 0
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	b9 01       	movw	r22, r18
     576:	0e 94 98 00 	call	0x130	; 0x130 <UART_TransmitString>
		return 2;
     57a:	82 e0       	ldi	r24, 0x02	; 2
     57c:	8c 83       	std	Y+4, r24	; 0x04
     57e:	08 c0       	rjmp	.+16     	; 0x590 <TWI_SendSLARead+0x7e>
	} else {
		UART_TransmitString(UART_1, "ERROR\r");
     580:	22 ee       	ldi	r18, 0xE2	; 226
     582:	30 e0       	ldi	r19, 0x00	; 0
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	b9 01       	movw	r22, r18
     588:	0e 94 98 00 	call	0x130	; 0x130 <UART_TransmitString>
		return 3;
     58c:	83 e0       	ldi	r24, 0x03	; 3
     58e:	8c 83       	std	Y+4, r24	; 0x04
     590:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
     592:	0f 90       	pop	r0
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	0f 90       	pop	r0
     59a:	cf 91       	pop	r28
     59c:	df 91       	pop	r29
     59e:	08 95       	ret

000005a0 <TWI_SendData>:
uint8_t TWI_SendData(uint8_t I2C_CH, uint8_t Data) {
     5a0:	df 93       	push	r29
     5a2:	cf 93       	push	r28
     5a4:	00 d0       	rcall	.+0      	; 0x5a6 <TWI_SendData+0x6>
     5a6:	00 d0       	rcall	.+0      	; 0x5a8 <TWI_SendData+0x8>
     5a8:	cd b7       	in	r28, 0x3d	; 61
     5aa:	de b7       	in	r29, 0x3e	; 62
     5ac:	8a 83       	std	Y+2, r24	; 0x02
     5ae:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrStatus = 0;
     5b0:	19 82       	std	Y+1, r1	; 0x01
	TWI_Data_REGISTER = Data;
     5b2:	e3 e2       	ldi	r30, 0x23	; 35
     5b4:	f0 e0       	ldi	r31, 0x00	; 0
     5b6:	8b 81       	ldd	r24, Y+3	; 0x03
     5b8:	80 83       	st	Z, r24
	TWI_Control_REGISTER = (EN_TWI | CLR_FLAG);
     5ba:	e6 e5       	ldi	r30, 0x56	; 86
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
     5be:	84 e8       	ldi	r24, 0x84	; 132
     5c0:	80 83       	st	Z, r24
	while (Get_Bit(TWI_Control_REGISTER,TWINT) == 0)
     5c2:	e6 e5       	ldi	r30, 0x56	; 86
     5c4:	f0 e0       	ldi	r31, 0x00	; 0
     5c6:	80 81       	ld	r24, Z
     5c8:	88 23       	and	r24, r24
     5ca:	dc f7       	brge	.-10     	; 0x5c2 <TWI_SendData+0x22>
		;
	ErrStatus = (TWI_Status_REGISTER & 0xf8); //MASKING THE PRE_SCALERS BITS
     5cc:	e1 e2       	ldi	r30, 0x21	; 33
     5ce:	f0 e0       	ldi	r31, 0x00	; 0
     5d0:	80 81       	ld	r24, Z
     5d2:	88 7f       	andi	r24, 0xF8	; 248
     5d4:	89 83       	std	Y+1, r24	; 0x01
	if (ErrStatus == DATA_TR_ACK) {
     5d6:	89 81       	ldd	r24, Y+1	; 0x01
     5d8:	88 32       	cpi	r24, 0x28	; 40
     5da:	41 f4       	brne	.+16     	; 0x5ec <TWI_SendData+0x4c>
		UART_TransmitString(UART_1, "SENT DATA WITH ACK\r");
     5dc:	29 ee       	ldi	r18, 0xE9	; 233
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	b9 01       	movw	r22, r18
     5e4:	0e 94 98 00 	call	0x130	; 0x130 <UART_TransmitString>
		return 0;
     5e8:	1c 82       	std	Y+4, r1	; 0x04
     5ea:	14 c0       	rjmp	.+40     	; 0x614 <TWI_SendData+0x74>
	} else if (ErrStatus == DATA_TR_NACK) {
     5ec:	89 81       	ldd	r24, Y+1	; 0x01
     5ee:	80 33       	cpi	r24, 0x30	; 48
     5f0:	49 f4       	brne	.+18     	; 0x604 <TWI_SendData+0x64>
		UART_TransmitString(UART_1, "SENT DATA WITH NO ACK\r");
     5f2:	2d ef       	ldi	r18, 0xFD	; 253
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	b9 01       	movw	r22, r18
     5fa:	0e 94 98 00 	call	0x130	; 0x130 <UART_TransmitString>
		return 6;
     5fe:	86 e0       	ldi	r24, 0x06	; 6
     600:	8c 83       	std	Y+4, r24	; 0x04
     602:	08 c0       	rjmp	.+16     	; 0x614 <TWI_SendData+0x74>
	} else {
		UART_TransmitString(UART_1, "ERROR\r");
     604:	22 ee       	ldi	r18, 0xE2	; 226
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	b9 01       	movw	r22, r18
     60c:	0e 94 98 00 	call	0x130	; 0x130 <UART_TransmitString>
		return 7;
     610:	87 e0       	ldi	r24, 0x07	; 7
     612:	8c 83       	std	Y+4, r24	; 0x04
     614:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
     616:	0f 90       	pop	r0
     618:	0f 90       	pop	r0
     61a:	0f 90       	pop	r0
     61c:	0f 90       	pop	r0
     61e:	cf 91       	pop	r28
     620:	df 91       	pop	r29
     622:	08 95       	ret

00000624 <TWI_SendChar>:
uint8_t TWI_SendChar(uint8_t I2C_CH, uint8_t SlvAdr, uint8_t Data) {
     624:	df 93       	push	r29
     626:	cf 93       	push	r28
     628:	00 d0       	rcall	.+0      	; 0x62a <TWI_SendChar+0x6>
     62a:	0f 92       	push	r0
     62c:	cd b7       	in	r28, 0x3d	; 61
     62e:	de b7       	in	r29, 0x3e	; 62
     630:	89 83       	std	Y+1, r24	; 0x01
     632:	6a 83       	std	Y+2, r22	; 0x02
     634:	4b 83       	std	Y+3, r20	; 0x03
	/*SENDING START CONDITION*/
	TWI_SendStartCondition(I2C_CH);
     636:	89 81       	ldd	r24, Y+1	; 0x01
     638:	0e 94 fe 01 	call	0x3fc	; 0x3fc <TWI_SendStartCondition>
	/*--SEND SALVE ADDRESS WITH WRITE OPERATION--*/
	TWI_SendSLAWrite(I2C_CH, SlvAdr);
     63c:	89 81       	ldd	r24, Y+1	; 0x01
     63e:	6a 81       	ldd	r22, Y+2	; 0x02
     640:	0e 94 46 02 	call	0x48c	; 0x48c <TWI_SendSLAWrite>
	/*--SENDING DATA--*/
	TWI_SendData(I2C_CH, Data);
     644:	89 81       	ldd	r24, Y+1	; 0x01
     646:	6b 81       	ldd	r22, Y+3	; 0x03
     648:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <TWI_SendData>
	/*--SENDING STOP CONDITION*/
	TWI_SendStopCondition(I2C_CH);
     64c:	89 81       	ldd	r24, Y+1	; 0x01
     64e:	0e 94 31 02 	call	0x462	; 0x462 <TWI_SendStopCondition>
	return 0;
     652:	80 e0       	ldi	r24, 0x00	; 0
}
     654:	0f 90       	pop	r0
     656:	0f 90       	pop	r0
     658:	0f 90       	pop	r0
     65a:	cf 91       	pop	r28
     65c:	df 91       	pop	r29
     65e:	08 95       	ret

00000660 <TWI_RecDataAck>:
uint8_t TWI_RecDataAck(uint8_t I2C_CH, uint8_t* data) {
     660:	df 93       	push	r29
     662:	cf 93       	push	r28
     664:	00 d0       	rcall	.+0      	; 0x666 <TWI_RecDataAck+0x6>
     666:	00 d0       	rcall	.+0      	; 0x668 <TWI_RecDataAck+0x8>
     668:	0f 92       	push	r0
     66a:	cd b7       	in	r28, 0x3d	; 61
     66c:	de b7       	in	r29, 0x3e	; 62
     66e:	8a 83       	std	Y+2, r24	; 0x02
     670:	7c 83       	std	Y+4, r23	; 0x04
     672:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrStatus = 0;
     674:	19 82       	std	Y+1, r1	; 0x01
	Set_Bit(TWI_Control_REGISTER, TWEA);
     676:	a6 e5       	ldi	r26, 0x56	; 86
     678:	b0 e0       	ldi	r27, 0x00	; 0
     67a:	e6 e5       	ldi	r30, 0x56	; 86
     67c:	f0 e0       	ldi	r31, 0x00	; 0
     67e:	80 81       	ld	r24, Z
     680:	80 64       	ori	r24, 0x40	; 64
     682:	8c 93       	st	X, r24
	Set_Bit(TWI_Control_REGISTER, TWINT);
     684:	a6 e5       	ldi	r26, 0x56	; 86
     686:	b0 e0       	ldi	r27, 0x00	; 0
     688:	e6 e5       	ldi	r30, 0x56	; 86
     68a:	f0 e0       	ldi	r31, 0x00	; 0
     68c:	80 81       	ld	r24, Z
     68e:	80 68       	ori	r24, 0x80	; 128
     690:	8c 93       	st	X, r24
	while (Get_Bit(TWI_Control_REGISTER,TWINT) == 0)
     692:	e6 e5       	ldi	r30, 0x56	; 86
     694:	f0 e0       	ldi	r31, 0x00	; 0
     696:	80 81       	ld	r24, Z
     698:	88 23       	and	r24, r24
     69a:	dc f7       	brge	.-10     	; 0x692 <TWI_RecDataAck+0x32>
		;
	*data = TWI_Data_REGISTER;
     69c:	e3 e2       	ldi	r30, 0x23	; 35
     69e:	f0 e0       	ldi	r31, 0x00	; 0
     6a0:	80 81       	ld	r24, Z
     6a2:	eb 81       	ldd	r30, Y+3	; 0x03
     6a4:	fc 81       	ldd	r31, Y+4	; 0x04
     6a6:	80 83       	st	Z, r24
	ErrStatus = (TWI_Status_REGISTER & 0xf8); //MASKING THE PRE_SCALERS BITS
     6a8:	e1 e2       	ldi	r30, 0x21	; 33
     6aa:	f0 e0       	ldi	r31, 0x00	; 0
     6ac:	80 81       	ld	r24, Z
     6ae:	88 7f       	andi	r24, 0xF8	; 248
     6b0:	89 83       	std	Y+1, r24	; 0x01
	if (ErrStatus == DATA_REC_ACK) {
     6b2:	89 81       	ldd	r24, Y+1	; 0x01
     6b4:	80 35       	cpi	r24, 0x50	; 80
     6b6:	41 f4       	brne	.+16     	; 0x6c8 <TWI_RecDataAck+0x68>
		UART_TransmitString(UART_1, "RECEIVED DATA WITH ACK\r");
     6b8:	24 e1       	ldi	r18, 0x14	; 20
     6ba:	31 e0       	ldi	r19, 0x01	; 1
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	b9 01       	movw	r22, r18
     6c0:	0e 94 98 00 	call	0x130	; 0x130 <UART_TransmitString>
		return 0;
     6c4:	1d 82       	std	Y+5, r1	; 0x05
     6c6:	14 c0       	rjmp	.+40     	; 0x6f0 <TWI_RecDataAck+0x90>
	} else if (ErrStatus == DATA_REC_NACK) {
     6c8:	89 81       	ldd	r24, Y+1	; 0x01
     6ca:	88 35       	cpi	r24, 0x58	; 88
     6cc:	49 f4       	brne	.+18     	; 0x6e0 <TWI_RecDataAck+0x80>
		UART_TransmitString(UART_1, "RECEIVED DATA WITH NO ACK\r");
     6ce:	2c e2       	ldi	r18, 0x2C	; 44
     6d0:	31 e0       	ldi	r19, 0x01	; 1
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	b9 01       	movw	r22, r18
     6d6:	0e 94 98 00 	call	0x130	; 0x130 <UART_TransmitString>
		return 6;
     6da:	86 e0       	ldi	r24, 0x06	; 6
     6dc:	8d 83       	std	Y+5, r24	; 0x05
     6de:	08 c0       	rjmp	.+16     	; 0x6f0 <TWI_RecDataAck+0x90>
	} else {

		UART_TransmitString(UART_1, "ERROR\r");
     6e0:	22 ee       	ldi	r18, 0xE2	; 226
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	b9 01       	movw	r22, r18
     6e8:	0e 94 98 00 	call	0x130	; 0x130 <UART_TransmitString>
		return 7;
     6ec:	87 e0       	ldi	r24, 0x07	; 7
     6ee:	8d 83       	std	Y+5, r24	; 0x05
     6f0:	8d 81       	ldd	r24, Y+5	; 0x05
	}
	return 0;
}
     6f2:	0f 90       	pop	r0
     6f4:	0f 90       	pop	r0
     6f6:	0f 90       	pop	r0
     6f8:	0f 90       	pop	r0
     6fa:	0f 90       	pop	r0
     6fc:	cf 91       	pop	r28
     6fe:	df 91       	pop	r29
     700:	08 95       	ret

00000702 <TWI_RecChar>:
uint8_t TWI_RecChar(uint8_t I2C_CH, uint8_t SlvAdr, uint8_t* Data) {
     702:	df 93       	push	r29
     704:	cf 93       	push	r28
     706:	00 d0       	rcall	.+0      	; 0x708 <TWI_RecChar+0x6>
     708:	00 d0       	rcall	.+0      	; 0x70a <TWI_RecChar+0x8>
     70a:	0f 92       	push	r0
     70c:	cd b7       	in	r28, 0x3d	; 61
     70e:	de b7       	in	r29, 0x3e	; 62
     710:	8a 83       	std	Y+2, r24	; 0x02
     712:	6b 83       	std	Y+3, r22	; 0x03
     714:	5d 83       	std	Y+5, r21	; 0x05
     716:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t status = 0;
     718:	19 82       	std	Y+1, r1	; 0x01
	TWI_SendStartCondition(I2C_CH);
     71a:	8a 81       	ldd	r24, Y+2	; 0x02
     71c:	0e 94 fe 01 	call	0x3fc	; 0x3fc <TWI_SendStartCondition>
	TWI_SendSLARead(I2C_CH, SlvAdr);
     720:	8a 81       	ldd	r24, Y+2	; 0x02
     722:	6b 81       	ldd	r22, Y+3	; 0x03
     724:	0e 94 89 02 	call	0x512	; 0x512 <TWI_SendSLARead>
	TWI_RecDataAck(I2C_CH, Data);
     728:	2c 81       	ldd	r18, Y+4	; 0x04
     72a:	3d 81       	ldd	r19, Y+5	; 0x05
     72c:	8a 81       	ldd	r24, Y+2	; 0x02
     72e:	b9 01       	movw	r22, r18
     730:	0e 94 30 03 	call	0x660	; 0x660 <TWI_RecDataAck>
	TWI_SendStopCondition(I2C_CH);
     734:	8a 81       	ldd	r24, Y+2	; 0x02
     736:	0e 94 31 02 	call	0x462	; 0x462 <TWI_SendStopCondition>
	return 0;
     73a:	80 e0       	ldi	r24, 0x00	; 0
}
     73c:	0f 90       	pop	r0
     73e:	0f 90       	pop	r0
     740:	0f 90       	pop	r0
     742:	0f 90       	pop	r0
     744:	0f 90       	pop	r0
     746:	cf 91       	pop	r28
     748:	df 91       	pop	r29
     74a:	08 95       	ret

0000074c <TWI_EnableInterrupt>:
/*uint8_t TWI_Status(uint8_t I2C_CH, uint8_t * Status) {
	*(Status) = ((TWI_Status_REGISTER) & 0xf8);
	return 0;
}*/
uint8_t TWI_EnableInterrupt(uint8_t I2C_CH) {
     74c:	df 93       	push	r29
     74e:	cf 93       	push	r28
     750:	0f 92       	push	r0
     752:	cd b7       	in	r28, 0x3d	; 61
     754:	de b7       	in	r29, 0x3e	; 62
     756:	89 83       	std	Y+1, r24	; 0x01
	Set_Bit(TWI_Control_REGISTER, TWIE); //Disable ISR for the TWI peripheral
     758:	a6 e5       	ldi	r26, 0x56	; 86
     75a:	b0 e0       	ldi	r27, 0x00	; 0
     75c:	e6 e5       	ldi	r30, 0x56	; 86
     75e:	f0 e0       	ldi	r31, 0x00	; 0
     760:	80 81       	ld	r24, Z
     762:	81 60       	ori	r24, 0x01	; 1
     764:	8c 93       	st	X, r24
	return 0;
     766:	80 e0       	ldi	r24, 0x00	; 0

}
     768:	0f 90       	pop	r0
     76a:	cf 91       	pop	r28
     76c:	df 91       	pop	r29
     76e:	08 95       	ret

00000770 <TWI_DisableInterrupt>:
uint8_t TWI_DisableInterrupt(uint8_t I2C_CH) {
     770:	df 93       	push	r29
     772:	cf 93       	push	r28
     774:	0f 92       	push	r0
     776:	cd b7       	in	r28, 0x3d	; 61
     778:	de b7       	in	r29, 0x3e	; 62
     77a:	89 83       	std	Y+1, r24	; 0x01
	Clr_Bit(TWI_Control_REGISTER, TWIE); //Disable ISR for the TWI peripheral
     77c:	a6 e5       	ldi	r26, 0x56	; 86
     77e:	b0 e0       	ldi	r27, 0x00	; 0
     780:	e6 e5       	ldi	r30, 0x56	; 86
     782:	f0 e0       	ldi	r31, 0x00	; 0
     784:	80 81       	ld	r24, Z
     786:	8e 7f       	andi	r24, 0xFE	; 254
     788:	8c 93       	st	X, r24
	return 0;
     78a:	80 e0       	ldi	r24, 0x00	; 0

}
     78c:	0f 90       	pop	r0
     78e:	cf 91       	pop	r28
     790:	df 91       	pop	r29
     792:	08 95       	ret

00000794 <TWI_SlaOperDetermination>:
uint8_t TWI_SlaOperDetermination(uint8_t I2C_CH, uint8_t* Oper) {
     794:	df 93       	push	r29
     796:	cf 93       	push	r28
     798:	00 d0       	rcall	.+0      	; 0x79a <TWI_SlaOperDetermination+0x6>
     79a:	0f 92       	push	r0
     79c:	cd b7       	in	r28, 0x3d	; 61
     79e:	de b7       	in	r29, 0x3e	; 62
     7a0:	89 83       	std	Y+1, r24	; 0x01
     7a2:	7b 83       	std	Y+3, r23	; 0x03
     7a4:	6a 83       	std	Y+2, r22	; 0x02
	*Oper = Get_Bit(TWI_Data_REGISTER, 0);
     7a6:	e3 e2       	ldi	r30, 0x23	; 35
     7a8:	f0 e0       	ldi	r31, 0x00	; 0
     7aa:	80 81       	ld	r24, Z
     7ac:	81 70       	andi	r24, 0x01	; 1
     7ae:	ea 81       	ldd	r30, Y+2	; 0x02
     7b0:	fb 81       	ldd	r31, Y+3	; 0x03
     7b2:	80 83       	st	Z, r24
	return 0;
     7b4:	80 e0       	ldi	r24, 0x00	; 0
}
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
     7ba:	0f 90       	pop	r0
     7bc:	cf 91       	pop	r28
     7be:	df 91       	pop	r29
     7c0:	08 95       	ret

000007c2 <TWI_SetCallback>:

uint8_t TWI_SetCallback(uint8_t I2CNumber, Ptr_VoidFuncVoid_t Callback) {
     7c2:	df 93       	push	r29
     7c4:	cf 93       	push	r28
     7c6:	00 d0       	rcall	.+0      	; 0x7c8 <TWI_SetCallback+0x6>
     7c8:	0f 92       	push	r0
     7ca:	cd b7       	in	r28, 0x3d	; 61
     7cc:	de b7       	in	r29, 0x3e	; 62
     7ce:	89 83       	std	Y+1, r24	; 0x01
     7d0:	7b 83       	std	Y+3, r23	; 0x03
     7d2:	6a 83       	std	Y+2, r22	; 0x02
	G_TWI_CALLBACK = Callback;
     7d4:	8a 81       	ldd	r24, Y+2	; 0x02
     7d6:	9b 81       	ldd	r25, Y+3	; 0x03
     7d8:	90 93 4f 01 	sts	0x014F, r25
     7dc:	80 93 4e 01 	sts	0x014E, r24
	return 0;
     7e0:	80 e0       	ldi	r24, 0x00	; 0
}
     7e2:	0f 90       	pop	r0
     7e4:	0f 90       	pop	r0
     7e6:	0f 90       	pop	r0
     7e8:	cf 91       	pop	r28
     7ea:	df 91       	pop	r29
     7ec:	08 95       	ret

000007ee <__vector_19>:
void __vector_19(void) __attribute__((signal)); // Serial Transfer Complete
void __vector_19(void) {
     7ee:	1f 92       	push	r1
     7f0:	0f 92       	push	r0
     7f2:	0f b6       	in	r0, 0x3f	; 63
     7f4:	0f 92       	push	r0
     7f6:	11 24       	eor	r1, r1
     7f8:	2f 93       	push	r18
     7fa:	3f 93       	push	r19
     7fc:	4f 93       	push	r20
     7fe:	5f 93       	push	r21
     800:	6f 93       	push	r22
     802:	7f 93       	push	r23
     804:	8f 93       	push	r24
     806:	9f 93       	push	r25
     808:	af 93       	push	r26
     80a:	bf 93       	push	r27
     80c:	ef 93       	push	r30
     80e:	ff 93       	push	r31
     810:	df 93       	push	r29
     812:	cf 93       	push	r28
     814:	cd b7       	in	r28, 0x3d	; 61
     816:	de b7       	in	r29, 0x3e	; 62
	G_TWI_CALLBACK();
     818:	e0 91 4e 01 	lds	r30, 0x014E
     81c:	f0 91 4f 01 	lds	r31, 0x014F
     820:	09 95       	icall
}
     822:	cf 91       	pop	r28
     824:	df 91       	pop	r29
     826:	ff 91       	pop	r31
     828:	ef 91       	pop	r30
     82a:	bf 91       	pop	r27
     82c:	af 91       	pop	r26
     82e:	9f 91       	pop	r25
     830:	8f 91       	pop	r24
     832:	7f 91       	pop	r23
     834:	6f 91       	pop	r22
     836:	5f 91       	pop	r21
     838:	4f 91       	pop	r20
     83a:	3f 91       	pop	r19
     83c:	2f 91       	pop	r18
     83e:	0f 90       	pop	r0
     840:	0f be       	out	0x3f, r0	; 63
     842:	0f 90       	pop	r0
     844:	1f 90       	pop	r1
     846:	18 95       	reti

00000848 <SPI_Init>:
#endif

	return 0;
}
#endif
uint8_t SPI_Init(uint8_t SpiNumber) {
     848:	df 93       	push	r29
     84a:	cf 93       	push	r28
     84c:	0f 92       	push	r0
     84e:	cd b7       	in	r28, 0x3d	; 61
     850:	de b7       	in	r29, 0x3e	; 62
     852:	89 83       	std	Y+1, r24	; 0x01
#else
	Clr_Bit(SPSR, SPI2X);
#endif /*DOUBLE_SPEED*/

#else
	Clr_Bit(SPCR, MSTR);
     854:	ad e2       	ldi	r26, 0x2D	; 45
     856:	b0 e0       	ldi	r27, 0x00	; 0
     858:	ed e2       	ldi	r30, 0x2D	; 45
     85a:	f0 e0       	ldi	r31, 0x00	; 0
     85c:	80 81       	ld	r24, Z
     85e:	8f 7e       	andi	r24, 0xEF	; 239
     860:	8c 93       	st	X, r24
	Set_Bit(SPCR, SPE);
     862:	ad e2       	ldi	r26, 0x2D	; 45
     864:	b0 e0       	ldi	r27, 0x00	; 0
     866:	ed e2       	ldi	r30, 0x2D	; 45
     868:	f0 e0       	ldi	r31, 0x00	; 0
     86a:	80 81       	ld	r24, Z
     86c:	80 64       	ori	r24, 0x40	; 64
     86e:	8c 93       	st	X, r24
	DIO_SetPinDirection(SPI_CH0_MISO_PORT, SPI_CH0_MISO_PIN, PIN_OUTPUT);
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	66 e0       	ldi	r22, 0x06	; 6
     874:	41 e0       	ldi	r20, 0x01	; 1
     876:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_SetPinDirection>
	DIO_SetPinDirection(SPI_CH0_MOSI_PORT, SPI_CH0_MOSI_PIN, PIN_INPUT);
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	65 e0       	ldi	r22, 0x05	; 5
     87e:	40 e0       	ldi	r20, 0x00	; 0
     880:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_SetPinDirection>
	DIO_SetPinDirection(SPI_CH0_SCK_PORT, SPI_CH0_SCK_PIN, PIN_INPUT);
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	67 e0       	ldi	r22, 0x07	; 7
     888:	40 e0       	ldi	r20, 0x00	; 0
     88a:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_SetPinDirection>
	DIO_SetPinDirection(SPI_CH0_SS_PORT, SPI_CH0_SS_PIN, PIN_INPUT);
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	64 e0       	ldi	r22, 0x04	; 4
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_SetPinDirection>
#endif/*MODE_MSRT_SLAVE*/
	return 0;
     898:	80 e0       	ldi	r24, 0x00	; 0
}
     89a:	0f 90       	pop	r0
     89c:	cf 91       	pop	r28
     89e:	df 91       	pop	r29
     8a0:	08 95       	ret

000008a2 <SPI_TransmitChar>:

uint8_t SPI_TransmitChar(uint8_t SpiNumber, uint8_t TxChar, uint8_t slave_CH) {
     8a2:	df 93       	push	r29
     8a4:	cf 93       	push	r28
     8a6:	00 d0       	rcall	.+0      	; 0x8a8 <SPI_TransmitChar+0x6>
     8a8:	0f 92       	push	r0
     8aa:	cd b7       	in	r28, 0x3d	; 61
     8ac:	de b7       	in	r29, 0x3e	; 62
     8ae:	89 83       	std	Y+1, r24	; 0x01
     8b0:	6a 83       	std	Y+2, r22	; 0x02
     8b2:	4b 83       	std	Y+3, r20	; 0x03
		break;
		default:
		break;
	}
#else
	SPDR = TxChar;
     8b4:	ef e2       	ldi	r30, 0x2F	; 47
     8b6:	f0 e0       	ldi	r31, 0x00	; 0
     8b8:	8a 81       	ldd	r24, Y+2	; 0x02
     8ba:	80 83       	st	Z, r24
	//trigger an external interrupt in master MCU
	while (!(SPSR & (1 << SPIF )))
     8bc:	ee e2       	ldi	r30, 0x2E	; 46
     8be:	f0 e0       	ldi	r31, 0x00	; 0
     8c0:	80 81       	ld	r24, Z
     8c2:	88 23       	and	r24, r24
     8c4:	dc f7       	brge	.-10     	; 0x8bc <SPI_TransmitChar+0x1a>
		;
#endif
	return 0;
     8c6:	80 e0       	ldi	r24, 0x00	; 0
}
     8c8:	0f 90       	pop	r0
     8ca:	0f 90       	pop	r0
     8cc:	0f 90       	pop	r0
     8ce:	cf 91       	pop	r28
     8d0:	df 91       	pop	r29
     8d2:	08 95       	ret

000008d4 <SPI_TransmitString>:
uint8_t SPI_TransmitString(uint8_t SpiNumber, ptr_uint8_t TxString,
		uint8_t slave_CH) {
     8d4:	df 93       	push	r29
     8d6:	cf 93       	push	r28
     8d8:	00 d0       	rcall	.+0      	; 0x8da <SPI_TransmitString+0x6>
     8da:	00 d0       	rcall	.+0      	; 0x8dc <SPI_TransmitString+0x8>
     8dc:	0f 92       	push	r0
     8de:	cd b7       	in	r28, 0x3d	; 61
     8e0:	de b7       	in	r29, 0x3e	; 62
     8e2:	8a 83       	std	Y+2, r24	; 0x02
     8e4:	7c 83       	std	Y+4, r23	; 0x04
     8e6:	6b 83       	std	Y+3, r22	; 0x03
     8e8:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t counter = 0;
     8ea:	19 82       	std	Y+1, r1	; 0x01
     8ec:	1f c0       	rjmp	.+62     	; 0x92c <SPI_TransmitString+0x58>
		default:
		break;
	}
#else
	while (counter >= 255) {
		if ((*(TxString + counter)) == NULL_TERMINATOR) {
     8ee:	89 81       	ldd	r24, Y+1	; 0x01
     8f0:	28 2f       	mov	r18, r24
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	8b 81       	ldd	r24, Y+3	; 0x03
     8f6:	9c 81       	ldd	r25, Y+4	; 0x04
     8f8:	fc 01       	movw	r30, r24
     8fa:	e2 0f       	add	r30, r18
     8fc:	f3 1f       	adc	r31, r19
     8fe:	80 81       	ld	r24, Z
     900:	88 23       	and	r24, r24
     902:	b9 f0       	breq	.+46     	; 0x932 <SPI_TransmitString+0x5e>
			break;
		}
		SPDR = *(TxString + counter);
     904:	af e2       	ldi	r26, 0x2F	; 47
     906:	b0 e0       	ldi	r27, 0x00	; 0
     908:	89 81       	ldd	r24, Y+1	; 0x01
     90a:	28 2f       	mov	r18, r24
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	8b 81       	ldd	r24, Y+3	; 0x03
     910:	9c 81       	ldd	r25, Y+4	; 0x04
     912:	fc 01       	movw	r30, r24
     914:	e2 0f       	add	r30, r18
     916:	f3 1f       	adc	r31, r19
     918:	80 81       	ld	r24, Z
     91a:	8c 93       	st	X, r24
		counter++;
     91c:	89 81       	ldd	r24, Y+1	; 0x01
     91e:	8f 5f       	subi	r24, 0xFF	; 255
     920:	89 83       	std	Y+1, r24	; 0x01
		//trigger an external interrupt in master MCU
		while (!(SPSR & (1 << SPIF )))
     922:	ee e2       	ldi	r30, 0x2E	; 46
     924:	f0 e0       	ldi	r31, 0x00	; 0
     926:	80 81       	ld	r24, Z
     928:	88 23       	and	r24, r24
     92a:	dc f7       	brge	.-10     	; 0x922 <SPI_TransmitString+0x4e>
		break;
		default:
		break;
	}
#else
	while (counter >= 255) {
     92c:	89 81       	ldd	r24, Y+1	; 0x01
     92e:	8f 3f       	cpi	r24, 0xFF	; 255
     930:	f1 f2       	breq	.-68     	; 0x8ee <SPI_TransmitString+0x1a>
		//trigger an external interrupt in master MCU
		while (!(SPSR & (1 << SPIF )))
			;
	}
#endif
	return 0;
     932:	80 e0       	ldi	r24, 0x00	; 0
}
     934:	0f 90       	pop	r0
     936:	0f 90       	pop	r0
     938:	0f 90       	pop	r0
     93a:	0f 90       	pop	r0
     93c:	0f 90       	pop	r0
     93e:	cf 91       	pop	r28
     940:	df 91       	pop	r29
     942:	08 95       	ret

00000944 <SPI_ReceiveChar>:

uint8_t SPI_ReceiveChar(uint8_t SpiNumber, ptr_uint8_t RxData, uint8_t slave_CH) {
     944:	df 93       	push	r29
     946:	cf 93       	push	r28
     948:	00 d0       	rcall	.+0      	; 0x94a <SPI_ReceiveChar+0x6>
     94a:	00 d0       	rcall	.+0      	; 0x94c <SPI_ReceiveChar+0x8>
     94c:	cd b7       	in	r28, 0x3d	; 61
     94e:	de b7       	in	r29, 0x3e	; 62
     950:	89 83       	std	Y+1, r24	; 0x01
     952:	7b 83       	std	Y+3, r23	; 0x03
     954:	6a 83       	std	Y+2, r22	; 0x02
     956:	4c 83       	std	Y+4, r20	; 0x04
		break;
		default:
		break;
	}
#else
	while (!(SPSR & (1 << SPIF )))
     958:	ee e2       	ldi	r30, 0x2E	; 46
     95a:	f0 e0       	ldi	r31, 0x00	; 0
     95c:	80 81       	ld	r24, Z
     95e:	88 23       	and	r24, r24
     960:	dc f7       	brge	.-10     	; 0x958 <SPI_ReceiveChar+0x14>
		;
	*(RxData) = SPDR;
     962:	ef e2       	ldi	r30, 0x2F	; 47
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	80 81       	ld	r24, Z
     968:	ea 81       	ldd	r30, Y+2	; 0x02
     96a:	fb 81       	ldd	r31, Y+3	; 0x03
     96c:	80 83       	st	Z, r24
#endif
	return 0;
     96e:	80 e0       	ldi	r24, 0x00	; 0
}
     970:	0f 90       	pop	r0
     972:	0f 90       	pop	r0
     974:	0f 90       	pop	r0
     976:	0f 90       	pop	r0
     978:	cf 91       	pop	r28
     97a:	df 91       	pop	r29
     97c:	08 95       	ret

0000097e <SPI_ReceiveString>:
uint8_t SPI_ReceiveString(uint8_t SpiNumber, ptr_uint8_t RxString,
		uint8_t slave_CH) {
     97e:	df 93       	push	r29
     980:	cf 93       	push	r28
     982:	00 d0       	rcall	.+0      	; 0x984 <SPI_ReceiveString+0x6>
     984:	00 d0       	rcall	.+0      	; 0x986 <SPI_ReceiveString+0x8>
     986:	0f 92       	push	r0
     988:	cd b7       	in	r28, 0x3d	; 61
     98a:	de b7       	in	r29, 0x3e	; 62
     98c:	8a 83       	std	Y+2, r24	; 0x02
     98e:	7c 83       	std	Y+4, r23	; 0x04
     990:	6b 83       	std	Y+3, r22	; 0x03
     992:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t counter = 0;
     994:	19 82       	std	Y+1, r1	; 0x01
		default:
		break;
	}
#else
	while (1) {
		while ((Get_Bit(SPSR, SPIF)) != 1);
     996:	ee e2       	ldi	r30, 0x2E	; 46
     998:	f0 e0       	ldi	r31, 0x00	; 0
     99a:	80 81       	ld	r24, Z
     99c:	88 1f       	adc	r24, r24
     99e:	88 27       	eor	r24, r24
     9a0:	88 1f       	adc	r24, r24
     9a2:	81 30       	cpi	r24, 0x01	; 1
     9a4:	c1 f7       	brne	.-16     	; 0x996 <SPI_ReceiveString+0x18>
		*(RxString + counter) = SPDR;
     9a6:	89 81       	ldd	r24, Y+1	; 0x01
     9a8:	28 2f       	mov	r18, r24
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	8b 81       	ldd	r24, Y+3	; 0x03
     9ae:	9c 81       	ldd	r25, Y+4	; 0x04
     9b0:	dc 01       	movw	r26, r24
     9b2:	a2 0f       	add	r26, r18
     9b4:	b3 1f       	adc	r27, r19
     9b6:	ef e2       	ldi	r30, 0x2F	; 47
     9b8:	f0 e0       	ldi	r31, 0x00	; 0
     9ba:	80 81       	ld	r24, Z
     9bc:	8c 93       	st	X, r24
		if ((*(RxString + counter)) == NULL_TERMINATOR) {
     9be:	89 81       	ldd	r24, Y+1	; 0x01
     9c0:	28 2f       	mov	r18, r24
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	8b 81       	ldd	r24, Y+3	; 0x03
     9c6:	9c 81       	ldd	r25, Y+4	; 0x04
     9c8:	fc 01       	movw	r30, r24
     9ca:	e2 0f       	add	r30, r18
     9cc:	f3 1f       	adc	r31, r19
     9ce:	80 81       	ld	r24, Z
     9d0:	88 23       	and	r24, r24
     9d2:	21 f0       	breq	.+8      	; 0x9dc <SPI_ReceiveString+0x5e>
			break;
		}
		counter++;
     9d4:	89 81       	ldd	r24, Y+1	; 0x01
     9d6:	8f 5f       	subi	r24, 0xFF	; 255
     9d8:	89 83       	std	Y+1, r24	; 0x01
     9da:	dd cf       	rjmp	.-70     	; 0x996 <SPI_ReceiveString+0x18>
	}
#endif
	return 0;
     9dc:	80 e0       	ldi	r24, 0x00	; 0
}
     9de:	0f 90       	pop	r0
     9e0:	0f 90       	pop	r0
     9e2:	0f 90       	pop	r0
     9e4:	0f 90       	pop	r0
     9e6:	0f 90       	pop	r0
     9e8:	cf 91       	pop	r28
     9ea:	df 91       	pop	r29
     9ec:	08 95       	ret

000009ee <SPI_EnableInterrupt>:

uint8_t SPI_EnableInterrupt(uint8_t SpiNumber) {
     9ee:	df 93       	push	r29
     9f0:	cf 93       	push	r28
     9f2:	0f 92       	push	r0
     9f4:	cd b7       	in	r28, 0x3d	; 61
     9f6:	de b7       	in	r29, 0x3e	; 62
     9f8:	89 83       	std	Y+1, r24	; 0x01
	Set_Bit(SPCR, SPIE);
     9fa:	ad e2       	ldi	r26, 0x2D	; 45
     9fc:	b0 e0       	ldi	r27, 0x00	; 0
     9fe:	ed e2       	ldi	r30, 0x2D	; 45
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	80 81       	ld	r24, Z
     a04:	80 68       	ori	r24, 0x80	; 128
     a06:	8c 93       	st	X, r24
	return 0;
     a08:	80 e0       	ldi	r24, 0x00	; 0
}
     a0a:	0f 90       	pop	r0
     a0c:	cf 91       	pop	r28
     a0e:	df 91       	pop	r29
     a10:	08 95       	ret

00000a12 <SPI_DisableInterrupt>:
uint8_t SPI_DisableInterrupt(uint8_t SpiNumber) {
     a12:	df 93       	push	r29
     a14:	cf 93       	push	r28
     a16:	0f 92       	push	r0
     a18:	cd b7       	in	r28, 0x3d	; 61
     a1a:	de b7       	in	r29, 0x3e	; 62
     a1c:	89 83       	std	Y+1, r24	; 0x01
	Clr_Bit(SPCR, SPIE);
     a1e:	ad e2       	ldi	r26, 0x2D	; 45
     a20:	b0 e0       	ldi	r27, 0x00	; 0
     a22:	ed e2       	ldi	r30, 0x2D	; 45
     a24:	f0 e0       	ldi	r31, 0x00	; 0
     a26:	80 81       	ld	r24, Z
     a28:	8f 77       	andi	r24, 0x7F	; 127
     a2a:	8c 93       	st	X, r24
	return 0;
     a2c:	80 e0       	ldi	r24, 0x00	; 0
}
     a2e:	0f 90       	pop	r0
     a30:	cf 91       	pop	r28
     a32:	df 91       	pop	r29
     a34:	08 95       	ret

00000a36 <SPI_SetCallback>:

uint8_t SPI_SetCallback(uint8_t SpiNumber, Ptr_VoidFuncVoid_t Callback) {
     a36:	df 93       	push	r29
     a38:	cf 93       	push	r28
     a3a:	00 d0       	rcall	.+0      	; 0xa3c <SPI_SetCallback+0x6>
     a3c:	0f 92       	push	r0
     a3e:	cd b7       	in	r28, 0x3d	; 61
     a40:	de b7       	in	r29, 0x3e	; 62
     a42:	89 83       	std	Y+1, r24	; 0x01
     a44:	7b 83       	std	Y+3, r23	; 0x03
     a46:	6a 83       	std	Y+2, r22	; 0x02
	G_SPI_CALLBACK=Callback;
     a48:	8a 81       	ldd	r24, Y+2	; 0x02
     a4a:	9b 81       	ldd	r25, Y+3	; 0x03
     a4c:	90 93 51 01 	sts	0x0151, r25
     a50:	80 93 50 01 	sts	0x0150, r24
	return 0;
     a54:	80 e0       	ldi	r24, 0x00	; 0
}
     a56:	0f 90       	pop	r0
     a58:	0f 90       	pop	r0
     a5a:	0f 90       	pop	r0
     a5c:	cf 91       	pop	r28
     a5e:	df 91       	pop	r29
     a60:	08 95       	ret

00000a62 <__vector_12>:

void __vector_12(void) __attribute__((signal)); // Serial Transfer Complete
void __vector_12(void) {
     a62:	1f 92       	push	r1
     a64:	0f 92       	push	r0
     a66:	0f b6       	in	r0, 0x3f	; 63
     a68:	0f 92       	push	r0
     a6a:	11 24       	eor	r1, r1
     a6c:	2f 93       	push	r18
     a6e:	3f 93       	push	r19
     a70:	4f 93       	push	r20
     a72:	5f 93       	push	r21
     a74:	6f 93       	push	r22
     a76:	7f 93       	push	r23
     a78:	8f 93       	push	r24
     a7a:	9f 93       	push	r25
     a7c:	af 93       	push	r26
     a7e:	bf 93       	push	r27
     a80:	ef 93       	push	r30
     a82:	ff 93       	push	r31
     a84:	df 93       	push	r29
     a86:	cf 93       	push	r28
     a88:	cd b7       	in	r28, 0x3d	; 61
     a8a:	de b7       	in	r29, 0x3e	; 62
	G_SPI_CALLBACK();
     a8c:	e0 91 50 01 	lds	r30, 0x0150
     a90:	f0 91 51 01 	lds	r31, 0x0151
     a94:	09 95       	icall
}
     a96:	cf 91       	pop	r28
     a98:	df 91       	pop	r29
     a9a:	ff 91       	pop	r31
     a9c:	ef 91       	pop	r30
     a9e:	bf 91       	pop	r27
     aa0:	af 91       	pop	r26
     aa2:	9f 91       	pop	r25
     aa4:	8f 91       	pop	r24
     aa6:	7f 91       	pop	r23
     aa8:	6f 91       	pop	r22
     aaa:	5f 91       	pop	r21
     aac:	4f 91       	pop	r20
     aae:	3f 91       	pop	r19
     ab0:	2f 91       	pop	r18
     ab2:	0f 90       	pop	r0
     ab4:	0f be       	out	0x3f, r0	; 63
     ab6:	0f 90       	pop	r0
     ab8:	1f 90       	pop	r1
     aba:	18 95       	reti

00000abc <GI_EnableGI>:
 */
#include"globalInterruptReg.h"
#include"globalInterrupt.h"

void GI_EnableGI (void)
{
     abc:	df 93       	push	r29
     abe:	cf 93       	push	r28
     ac0:	cd b7       	in	r28, 0x3d	; 61
     ac2:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(SREG_REGISTER,I_BIT);
     ac4:	af e5       	ldi	r26, 0x5F	; 95
     ac6:	b0 e0       	ldi	r27, 0x00	; 0
     ac8:	ef e5       	ldi	r30, 0x5F	; 95
     aca:	f0 e0       	ldi	r31, 0x00	; 0
     acc:	80 81       	ld	r24, Z
     ace:	80 68       	ori	r24, 0x80	; 128
     ad0:	8c 93       	st	X, r24
}
     ad2:	cf 91       	pop	r28
     ad4:	df 91       	pop	r29
     ad6:	08 95       	ret

00000ad8 <GI_DisableGI>:


void GI_DisableGI (void)
{
     ad8:	df 93       	push	r29
     ada:	cf 93       	push	r28
     adc:	cd b7       	in	r28, 0x3d	; 61
     ade:	de b7       	in	r29, 0x3e	; 62
	Clr_Bit(SREG_REGISTER, I_BIT);
     ae0:	af e5       	ldi	r26, 0x5F	; 95
     ae2:	b0 e0       	ldi	r27, 0x00	; 0
     ae4:	ef e5       	ldi	r30, 0x5F	; 95
     ae6:	f0 e0       	ldi	r31, 0x00	; 0
     ae8:	80 81       	ld	r24, Z
     aea:	8f 77       	andi	r24, 0x7F	; 127
     aec:	8c 93       	st	X, r24
}
     aee:	cf 91       	pop	r28
     af0:	df 91       	pop	r29
     af2:	08 95       	ret

00000af4 <EX_vdDisable>:
#include"externalInterruptReg.h"
#include"externalInterrupt.h"


void EX_vdDisable(uint8_t CopyInterrupt)
{
     af4:	df 93       	push	r29
     af6:	cf 93       	push	r28
     af8:	00 d0       	rcall	.+0      	; 0xafa <EX_vdDisable+0x6>
     afa:	0f 92       	push	r0
     afc:	cd b7       	in	r28, 0x3d	; 61
     afe:	de b7       	in	r29, 0x3e	; 62
     b00:	89 83       	std	Y+1, r24	; 0x01
	if(CopyInterrupt <= EX_INT2)
     b02:	89 81       	ldd	r24, Y+1	; 0x01
     b04:	83 30       	cpi	r24, 0x03	; 3
     b06:	50 f5       	brcc	.+84     	; 0xb5c <EX_vdDisable+0x68>
	{
		switch (CopyInterrupt)
     b08:	89 81       	ldd	r24, Y+1	; 0x01
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	3b 83       	std	Y+3, r19	; 0x03
     b10:	2a 83       	std	Y+2, r18	; 0x02
     b12:	8a 81       	ldd	r24, Y+2	; 0x02
     b14:	9b 81       	ldd	r25, Y+3	; 0x03
     b16:	81 30       	cpi	r24, 0x01	; 1
     b18:	91 05       	cpc	r25, r1
     b1a:	89 f0       	breq	.+34     	; 0xb3e <EX_vdDisable+0x4a>
     b1c:	2a 81       	ldd	r18, Y+2	; 0x02
     b1e:	3b 81       	ldd	r19, Y+3	; 0x03
     b20:	22 30       	cpi	r18, 0x02	; 2
     b22:	31 05       	cpc	r19, r1
     b24:	a1 f0       	breq	.+40     	; 0xb4e <EX_vdDisable+0x5a>
     b26:	8a 81       	ldd	r24, Y+2	; 0x02
     b28:	9b 81       	ldd	r25, Y+3	; 0x03
     b2a:	00 97       	sbiw	r24, 0x00	; 0
     b2c:	b9 f4       	brne	.+46     	; 0xb5c <EX_vdDisable+0x68>
		{
		case EX_INT0:
			Clr_Bit(GICR,6);
     b2e:	ab e5       	ldi	r26, 0x5B	; 91
     b30:	b0 e0       	ldi	r27, 0x00	; 0
     b32:	eb e5       	ldi	r30, 0x5B	; 91
     b34:	f0 e0       	ldi	r31, 0x00	; 0
     b36:	80 81       	ld	r24, Z
     b38:	8f 7b       	andi	r24, 0xBF	; 191
     b3a:	8c 93       	st	X, r24
     b3c:	0f c0       	rjmp	.+30     	; 0xb5c <EX_vdDisable+0x68>
			break;
		case EX_INT1:
			Clr_Bit(GICR,7);
     b3e:	ab e5       	ldi	r26, 0x5B	; 91
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	eb e5       	ldi	r30, 0x5B	; 91
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	8f 77       	andi	r24, 0x7F	; 127
     b4a:	8c 93       	st	X, r24
     b4c:	07 c0       	rjmp	.+14     	; 0xb5c <EX_vdDisable+0x68>
			break;
		case EX_INT2:
			Clr_Bit(GICR,5);
     b4e:	ab e5       	ldi	r26, 0x5B	; 91
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	eb e5       	ldi	r30, 0x5B	; 91
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8f 7d       	andi	r24, 0xDF	; 223
     b5a:	8c 93       	st	X, r24
			break;
		default:
			break;
		}
	}
}
     b5c:	0f 90       	pop	r0
     b5e:	0f 90       	pop	r0
     b60:	0f 90       	pop	r0
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <EX_vdConfigInterrupt>:

void EX_vdConfigInterrupt(uint8_t CopyInterrupt , uint8_t CopyControlSense)
{
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
     b70:	2a 97       	sbiw	r28, 0x0a	; 10
     b72:	0f b6       	in	r0, 0x3f	; 63
     b74:	f8 94       	cli
     b76:	de bf       	out	0x3e, r29	; 62
     b78:	0f be       	out	0x3f, r0	; 63
     b7a:	cd bf       	out	0x3d, r28	; 61
     b7c:	89 83       	std	Y+1, r24	; 0x01
     b7e:	6a 83       	std	Y+2, r22	; 0x02
	if(CopyInterrupt <= EX_INT2 && CopyControlSense <= EX_SENSE_LOGIACL_CHANGE)
     b80:	89 81       	ldd	r24, Y+1	; 0x01
     b82:	83 30       	cpi	r24, 0x03	; 3
     b84:	08 f0       	brcs	.+2      	; 0xb88 <EX_vdConfigInterrupt+0x20>
     b86:	03 c1       	rjmp	.+518    	; 0xd8e <EX_vdConfigInterrupt+0x226>
     b88:	8a 81       	ldd	r24, Y+2	; 0x02
     b8a:	84 30       	cpi	r24, 0x04	; 4
     b8c:	08 f0       	brcs	.+2      	; 0xb90 <EX_vdConfigInterrupt+0x28>
     b8e:	ff c0       	rjmp	.+510    	; 0xd8e <EX_vdConfigInterrupt+0x226>
	{
		switch (CopyInterrupt)
     b90:	89 81       	ldd	r24, Y+1	; 0x01
     b92:	28 2f       	mov	r18, r24
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	3a 87       	std	Y+10, r19	; 0x0a
     b98:	29 87       	std	Y+9, r18	; 0x09
     b9a:	89 85       	ldd	r24, Y+9	; 0x09
     b9c:	9a 85       	ldd	r25, Y+10	; 0x0a
     b9e:	81 30       	cpi	r24, 0x01	; 1
     ba0:	91 05       	cpc	r25, r1
     ba2:	09 f4       	brne	.+2      	; 0xba6 <EX_vdConfigInterrupt+0x3e>
     ba4:	6d c0       	rjmp	.+218    	; 0xc80 <EX_vdConfigInterrupt+0x118>
     ba6:	29 85       	ldd	r18, Y+9	; 0x09
     ba8:	3a 85       	ldd	r19, Y+10	; 0x0a
     baa:	22 30       	cpi	r18, 0x02	; 2
     bac:	31 05       	cpc	r19, r1
     bae:	09 f4       	brne	.+2      	; 0xbb2 <EX_vdConfigInterrupt+0x4a>
     bb0:	c9 c0       	rjmp	.+402    	; 0xd44 <EX_vdConfigInterrupt+0x1dc>
     bb2:	89 85       	ldd	r24, Y+9	; 0x09
     bb4:	9a 85       	ldd	r25, Y+10	; 0x0a
     bb6:	00 97       	sbiw	r24, 0x00	; 0
     bb8:	09 f0       	breq	.+2      	; 0xbbc <EX_vdConfigInterrupt+0x54>
     bba:	e9 c0       	rjmp	.+466    	; 0xd8e <EX_vdConfigInterrupt+0x226>
		{
			case EX_INT0:
				Set_Bit(GICR,6);
     bbc:	ab e5       	ldi	r26, 0x5B	; 91
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	eb e5       	ldi	r30, 0x5B	; 91
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	80 64       	ori	r24, 0x40	; 64
     bc8:	8c 93       	st	X, r24
				switch (CopyControlSense)
     bca:	8a 81       	ldd	r24, Y+2	; 0x02
     bcc:	28 2f       	mov	r18, r24
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	38 87       	std	Y+8, r19	; 0x08
     bd2:	2f 83       	std	Y+7, r18	; 0x07
     bd4:	8f 81       	ldd	r24, Y+7	; 0x07
     bd6:	98 85       	ldd	r25, Y+8	; 0x08
     bd8:	81 30       	cpi	r24, 0x01	; 1
     bda:	91 05       	cpc	r25, r1
     bdc:	21 f1       	breq	.+72     	; 0xc26 <EX_vdConfigInterrupt+0xbe>
     bde:	2f 81       	ldd	r18, Y+7	; 0x07
     be0:	38 85       	ldd	r19, Y+8	; 0x08
     be2:	22 30       	cpi	r18, 0x02	; 2
     be4:	31 05       	cpc	r19, r1
     be6:	2c f4       	brge	.+10     	; 0xbf2 <EX_vdConfigInterrupt+0x8a>
     be8:	8f 81       	ldd	r24, Y+7	; 0x07
     bea:	98 85       	ldd	r25, Y+8	; 0x08
     bec:	00 97       	sbiw	r24, 0x00	; 0
     bee:	61 f0       	breq	.+24     	; 0xc08 <EX_vdConfigInterrupt+0xa0>
     bf0:	ce c0       	rjmp	.+412    	; 0xd8e <EX_vdConfigInterrupt+0x226>
     bf2:	2f 81       	ldd	r18, Y+7	; 0x07
     bf4:	38 85       	ldd	r19, Y+8	; 0x08
     bf6:	22 30       	cpi	r18, 0x02	; 2
     bf8:	31 05       	cpc	r19, r1
     bfa:	21 f1       	breq	.+72     	; 0xc44 <EX_vdConfigInterrupt+0xdc>
     bfc:	8f 81       	ldd	r24, Y+7	; 0x07
     bfe:	98 85       	ldd	r25, Y+8	; 0x08
     c00:	83 30       	cpi	r24, 0x03	; 3
     c02:	91 05       	cpc	r25, r1
     c04:	71 f1       	breq	.+92     	; 0xc62 <EX_vdConfigInterrupt+0xfa>
     c06:	c3 c0       	rjmp	.+390    	; 0xd8e <EX_vdConfigInterrupt+0x226>
				{
					case EX_SENSE_FALLING_EDGE:
						Clr_Bit(MCUCR,0);
     c08:	a5 e5       	ldi	r26, 0x55	; 85
     c0a:	b0 e0       	ldi	r27, 0x00	; 0
     c0c:	e5 e5       	ldi	r30, 0x55	; 85
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	80 81       	ld	r24, Z
     c12:	8e 7f       	andi	r24, 0xFE	; 254
     c14:	8c 93       	st	X, r24
						Set_Bit(MCUCR,1);
     c16:	a5 e5       	ldi	r26, 0x55	; 85
     c18:	b0 e0       	ldi	r27, 0x00	; 0
     c1a:	e5 e5       	ldi	r30, 0x55	; 85
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	80 81       	ld	r24, Z
     c20:	82 60       	ori	r24, 0x02	; 2
     c22:	8c 93       	st	X, r24
     c24:	b4 c0       	rjmp	.+360    	; 0xd8e <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_RAISING_EDGE:
						Set_Bit(MCUCR,0);
     c26:	a5 e5       	ldi	r26, 0x55	; 85
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e5 e5       	ldi	r30, 0x55	; 85
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	81 60       	ori	r24, 0x01	; 1
     c32:	8c 93       	st	X, r24
						Set_Bit(MCUCR,1);
     c34:	a5 e5       	ldi	r26, 0x55	; 85
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e5 e5       	ldi	r30, 0x55	; 85
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	82 60       	ori	r24, 0x02	; 2
     c40:	8c 93       	st	X, r24
     c42:	a5 c0       	rjmp	.+330    	; 0xd8e <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_LOW_LEVEL:
						Clr_Bit(MCUCR,0);
     c44:	a5 e5       	ldi	r26, 0x55	; 85
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	e5 e5       	ldi	r30, 0x55	; 85
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	8e 7f       	andi	r24, 0xFE	; 254
     c50:	8c 93       	st	X, r24
						Clr_Bit(MCUCR,1);
     c52:	a5 e5       	ldi	r26, 0x55	; 85
     c54:	b0 e0       	ldi	r27, 0x00	; 0
     c56:	e5 e5       	ldi	r30, 0x55	; 85
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	8d 7f       	andi	r24, 0xFD	; 253
     c5e:	8c 93       	st	X, r24
     c60:	96 c0       	rjmp	.+300    	; 0xd8e <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_LOGIACL_CHANGE:
						Set_Bit(MCUCR,0);
     c62:	a5 e5       	ldi	r26, 0x55	; 85
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	e5 e5       	ldi	r30, 0x55	; 85
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	80 81       	ld	r24, Z
     c6c:	81 60       	ori	r24, 0x01	; 1
     c6e:	8c 93       	st	X, r24
						Clr_Bit(MCUCR,1);
     c70:	a5 e5       	ldi	r26, 0x55	; 85
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	e5 e5       	ldi	r30, 0x55	; 85
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	8d 7f       	andi	r24, 0xFD	; 253
     c7c:	8c 93       	st	X, r24
     c7e:	87 c0       	rjmp	.+270    	; 0xd8e <EX_vdConfigInterrupt+0x226>
						break;
				}
				break;
			case EX_INT1:
				Set_Bit(GICR,7);
     c80:	ab e5       	ldi	r26, 0x5B	; 91
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	eb e5       	ldi	r30, 0x5B	; 91
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 81       	ld	r24, Z
     c8a:	80 68       	ori	r24, 0x80	; 128
     c8c:	8c 93       	st	X, r24
				switch (CopyControlSense)
     c8e:	8a 81       	ldd	r24, Y+2	; 0x02
     c90:	28 2f       	mov	r18, r24
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	3e 83       	std	Y+6, r19	; 0x06
     c96:	2d 83       	std	Y+5, r18	; 0x05
     c98:	8d 81       	ldd	r24, Y+5	; 0x05
     c9a:	9e 81       	ldd	r25, Y+6	; 0x06
     c9c:	81 30       	cpi	r24, 0x01	; 1
     c9e:	91 05       	cpc	r25, r1
     ca0:	21 f1       	breq	.+72     	; 0xcea <EX_vdConfigInterrupt+0x182>
     ca2:	2d 81       	ldd	r18, Y+5	; 0x05
     ca4:	3e 81       	ldd	r19, Y+6	; 0x06
     ca6:	22 30       	cpi	r18, 0x02	; 2
     ca8:	31 05       	cpc	r19, r1
     caa:	2c f4       	brge	.+10     	; 0xcb6 <EX_vdConfigInterrupt+0x14e>
     cac:	8d 81       	ldd	r24, Y+5	; 0x05
     cae:	9e 81       	ldd	r25, Y+6	; 0x06
     cb0:	00 97       	sbiw	r24, 0x00	; 0
     cb2:	61 f0       	breq	.+24     	; 0xccc <EX_vdConfigInterrupt+0x164>
     cb4:	6c c0       	rjmp	.+216    	; 0xd8e <EX_vdConfigInterrupt+0x226>
     cb6:	2d 81       	ldd	r18, Y+5	; 0x05
     cb8:	3e 81       	ldd	r19, Y+6	; 0x06
     cba:	22 30       	cpi	r18, 0x02	; 2
     cbc:	31 05       	cpc	r19, r1
     cbe:	21 f1       	breq	.+72     	; 0xd08 <EX_vdConfigInterrupt+0x1a0>
     cc0:	8d 81       	ldd	r24, Y+5	; 0x05
     cc2:	9e 81       	ldd	r25, Y+6	; 0x06
     cc4:	83 30       	cpi	r24, 0x03	; 3
     cc6:	91 05       	cpc	r25, r1
     cc8:	71 f1       	breq	.+92     	; 0xd26 <EX_vdConfigInterrupt+0x1be>
     cca:	61 c0       	rjmp	.+194    	; 0xd8e <EX_vdConfigInterrupt+0x226>
				{
					case EX_SENSE_FALLING_EDGE:
						Clr_Bit(MCUCR,2);
     ccc:	a5 e5       	ldi	r26, 0x55	; 85
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	e5 e5       	ldi	r30, 0x55	; 85
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	8b 7f       	andi	r24, 0xFB	; 251
     cd8:	8c 93       	st	X, r24
						Set_Bit(MCUCR,3);
     cda:	a5 e5       	ldi	r26, 0x55	; 85
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	e5 e5       	ldi	r30, 0x55	; 85
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	88 60       	ori	r24, 0x08	; 8
     ce6:	8c 93       	st	X, r24
     ce8:	52 c0       	rjmp	.+164    	; 0xd8e <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_RAISING_EDGE:
						Set_Bit(MCUCR,2);
     cea:	a5 e5       	ldi	r26, 0x55	; 85
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e5 e5       	ldi	r30, 0x55	; 85
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	84 60       	ori	r24, 0x04	; 4
     cf6:	8c 93       	st	X, r24
						Set_Bit(MCUCR,3);
     cf8:	a5 e5       	ldi	r26, 0x55	; 85
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	e5 e5       	ldi	r30, 0x55	; 85
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	88 60       	ori	r24, 0x08	; 8
     d04:	8c 93       	st	X, r24
     d06:	43 c0       	rjmp	.+134    	; 0xd8e <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_LOW_LEVEL:
						Clr_Bit(MCUCR,2);
     d08:	a5 e5       	ldi	r26, 0x55	; 85
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e5 e5       	ldi	r30, 0x55	; 85
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	8b 7f       	andi	r24, 0xFB	; 251
     d14:	8c 93       	st	X, r24
						Clr_Bit(MCUCR,3);
     d16:	a5 e5       	ldi	r26, 0x55	; 85
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e5 e5       	ldi	r30, 0x55	; 85
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	87 7f       	andi	r24, 0xF7	; 247
     d22:	8c 93       	st	X, r24
     d24:	34 c0       	rjmp	.+104    	; 0xd8e <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_LOGIACL_CHANGE:
						Set_Bit(MCUCR,2);
     d26:	a5 e5       	ldi	r26, 0x55	; 85
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	e5 e5       	ldi	r30, 0x55	; 85
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	84 60       	ori	r24, 0x04	; 4
     d32:	8c 93       	st	X, r24
						Clr_Bit(MCUCR,3);
     d34:	a5 e5       	ldi	r26, 0x55	; 85
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	e5 e5       	ldi	r30, 0x55	; 85
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	87 7f       	andi	r24, 0xF7	; 247
     d40:	8c 93       	st	X, r24
     d42:	25 c0       	rjmp	.+74     	; 0xd8e <EX_vdConfigInterrupt+0x226>
						break;
				}
				break;
			case EX_INT2:
				Set_Bit(GICR,5);
     d44:	ab e5       	ldi	r26, 0x5B	; 91
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	eb e5       	ldi	r30, 0x5B	; 91
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	80 62       	ori	r24, 0x20	; 32
     d50:	8c 93       	st	X, r24
				switch (CopyControlSense)
     d52:	8a 81       	ldd	r24, Y+2	; 0x02
     d54:	28 2f       	mov	r18, r24
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	3c 83       	std	Y+4, r19	; 0x04
     d5a:	2b 83       	std	Y+3, r18	; 0x03
     d5c:	8b 81       	ldd	r24, Y+3	; 0x03
     d5e:	9c 81       	ldd	r25, Y+4	; 0x04
     d60:	00 97       	sbiw	r24, 0x00	; 0
     d62:	31 f0       	breq	.+12     	; 0xd70 <EX_vdConfigInterrupt+0x208>
     d64:	2b 81       	ldd	r18, Y+3	; 0x03
     d66:	3c 81       	ldd	r19, Y+4	; 0x04
     d68:	21 30       	cpi	r18, 0x01	; 1
     d6a:	31 05       	cpc	r19, r1
     d6c:	49 f0       	breq	.+18     	; 0xd80 <EX_vdConfigInterrupt+0x218>
     d6e:	0f c0       	rjmp	.+30     	; 0xd8e <EX_vdConfigInterrupt+0x226>
				{
					case EX_SENSE_FALLING_EDGE:
						Clr_Bit(MCUCSR,6);
     d70:	a4 e5       	ldi	r26, 0x54	; 84
     d72:	b0 e0       	ldi	r27, 0x00	; 0
     d74:	e4 e5       	ldi	r30, 0x54	; 84
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	8f 7b       	andi	r24, 0xBF	; 191
     d7c:	8c 93       	st	X, r24
     d7e:	07 c0       	rjmp	.+14     	; 0xd8e <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_RAISING_EDGE:
						Set_Bit(MCUCSR,6);
     d80:	a4 e5       	ldi	r26, 0x54	; 84
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	e4 e5       	ldi	r30, 0x54	; 84
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	80 64       	ori	r24, 0x40	; 64
     d8c:	8c 93       	st	X, r24
						break;
				}
				break;
		}
	}
}
     d8e:	2a 96       	adiw	r28, 0x0a	; 10
     d90:	0f b6       	in	r0, 0x3f	; 63
     d92:	f8 94       	cli
     d94:	de bf       	out	0x3e, r29	; 62
     d96:	0f be       	out	0x3f, r0	; 63
     d98:	cd bf       	out	0x3d, r28	; 61
     d9a:	cf 91       	pop	r28
     d9c:	df 91       	pop	r29
     d9e:	08 95       	ret

00000da0 <__vector_1>:
void __vector_1 (void)
{
     da0:	1f 92       	push	r1
     da2:	0f 92       	push	r0
     da4:	0f b6       	in	r0, 0x3f	; 63
     da6:	0f 92       	push	r0
     da8:	11 24       	eor	r1, r1
     daa:	df 93       	push	r29
     dac:	cf 93       	push	r28
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62

}
     db2:	cf 91       	pop	r28
     db4:	df 91       	pop	r29
     db6:	0f 90       	pop	r0
     db8:	0f be       	out	0x3f, r0	; 63
     dba:	0f 90       	pop	r0
     dbc:	1f 90       	pop	r1
     dbe:	18 95       	reti

00000dc0 <__vector_2>:
void __vector_2 (void)
{
     dc0:	1f 92       	push	r1
     dc2:	0f 92       	push	r0
     dc4:	0f b6       	in	r0, 0x3f	; 63
     dc6:	0f 92       	push	r0
     dc8:	11 24       	eor	r1, r1
     dca:	df 93       	push	r29
     dcc:	cf 93       	push	r28
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62

}
     dd2:	cf 91       	pop	r28
     dd4:	df 91       	pop	r29
     dd6:	0f 90       	pop	r0
     dd8:	0f be       	out	0x3f, r0	; 63
     dda:	0f 90       	pop	r0
     ddc:	1f 90       	pop	r1
     dde:	18 95       	reti

00000de0 <DIO_SetPortDirection>:


/* APIs IMPLEMENTATION */

/* API to Set Port Direction */
DIO_ERROR_state_t DIO_SetPortDirection(uint8_t PortID, uint8_t PortDirection) {
     de0:	df 93       	push	r29
     de2:	cf 93       	push	r28
     de4:	00 d0       	rcall	.+0      	; 0xde6 <DIO_SetPortDirection+0x6>
     de6:	00 d0       	rcall	.+0      	; 0xde8 <DIO_SetPortDirection+0x8>
     de8:	0f 92       	push	r0
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
     dee:	89 83       	std	Y+1, r24	; 0x01
     df0:	6a 83       	std	Y+2, r22	; 0x02
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA )) {
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	84 30       	cpi	r24, 0x04	; 4
     df6:	a0 f5       	brcc	.+104    	; 0xe60 <DIO_SetPortDirection+0x80>
		switch (PortID) {
     df8:	89 81       	ldd	r24, Y+1	; 0x01
     dfa:	28 2f       	mov	r18, r24
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	3d 83       	std	Y+5, r19	; 0x05
     e00:	2c 83       	std	Y+4, r18	; 0x04
     e02:	8c 81       	ldd	r24, Y+4	; 0x04
     e04:	9d 81       	ldd	r25, Y+5	; 0x05
     e06:	81 30       	cpi	r24, 0x01	; 1
     e08:	91 05       	cpc	r25, r1
     e0a:	d1 f0       	breq	.+52     	; 0xe40 <DIO_SetPortDirection+0x60>
     e0c:	2c 81       	ldd	r18, Y+4	; 0x04
     e0e:	3d 81       	ldd	r19, Y+5	; 0x05
     e10:	22 30       	cpi	r18, 0x02	; 2
     e12:	31 05       	cpc	r19, r1
     e14:	2c f4       	brge	.+10     	; 0xe20 <DIO_SetPortDirection+0x40>
     e16:	8c 81       	ldd	r24, Y+4	; 0x04
     e18:	9d 81       	ldd	r25, Y+5	; 0x05
     e1a:	00 97       	sbiw	r24, 0x00	; 0
     e1c:	61 f0       	breq	.+24     	; 0xe36 <DIO_SetPortDirection+0x56>
     e1e:	1e c0       	rjmp	.+60     	; 0xe5c <DIO_SetPortDirection+0x7c>
     e20:	2c 81       	ldd	r18, Y+4	; 0x04
     e22:	3d 81       	ldd	r19, Y+5	; 0x05
     e24:	22 30       	cpi	r18, 0x02	; 2
     e26:	31 05       	cpc	r19, r1
     e28:	81 f0       	breq	.+32     	; 0xe4a <DIO_SetPortDirection+0x6a>
     e2a:	8c 81       	ldd	r24, Y+4	; 0x04
     e2c:	9d 81       	ldd	r25, Y+5	; 0x05
     e2e:	83 30       	cpi	r24, 0x03	; 3
     e30:	91 05       	cpc	r25, r1
     e32:	81 f0       	breq	.+32     	; 0xe54 <DIO_SetPortDirection+0x74>
     e34:	13 c0       	rjmp	.+38     	; 0xe5c <DIO_SetPortDirection+0x7c>
		case PORTA :
			PORTA_DIR = PortDirection;
     e36:	ea e3       	ldi	r30, 0x3A	; 58
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	8a 81       	ldd	r24, Y+2	; 0x02
     e3c:	80 83       	st	Z, r24
     e3e:	0e c0       	rjmp	.+28     	; 0xe5c <DIO_SetPortDirection+0x7c>
			break;
		case PORTB :
			PORTB_DIR = PortDirection;
     e40:	e7 e3       	ldi	r30, 0x37	; 55
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	8a 81       	ldd	r24, Y+2	; 0x02
     e46:	80 83       	st	Z, r24
     e48:	09 c0       	rjmp	.+18     	; 0xe5c <DIO_SetPortDirection+0x7c>
			break;
		case PORTC :
			PORTC_DIR = PortDirection;
     e4a:	e4 e3       	ldi	r30, 0x34	; 52
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	8a 81       	ldd	r24, Y+2	; 0x02
     e50:	80 83       	st	Z, r24
     e52:	04 c0       	rjmp	.+8      	; 0xe5c <DIO_SetPortDirection+0x7c>
			break;
		case PORTD :
			PORTD_DIR = PortDirection;
     e54:	e1 e3       	ldi	r30, 0x31	; 49
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	8a 81       	ldd	r24, Y+2	; 0x02
     e5a:	80 83       	st	Z, r24
			break;
		} //END of SWITCH
		return E_DIO_SUCCESS ;
     e5c:	1b 82       	std	Y+3, r1	; 0x03
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <DIO_SetPortDirection+0x84>
	}	  //END of IF
	else {
		return E_DIO_INVALID_PORT_NUMBER ;
     e60:	91 e0       	ldi	r25, 0x01	; 1
     e62:	9b 83       	std	Y+3, r25	; 0x03
     e64:	8b 81       	ldd	r24, Y+3	; 0x03

	}	  //END of ELSE
}	  //END DIO_setPortDirection
     e66:	0f 90       	pop	r0
     e68:	0f 90       	pop	r0
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	cf 91       	pop	r28
     e72:	df 91       	pop	r29
     e74:	08 95       	ret

00000e76 <DIO_SetPinDirection>:

/* API to Set Pin Direction */
DIO_ERROR_state_t DIO_SetPinDirection(uint8_t PortID, uint8_t PinNumber,
		uint8_t PinDirection) {
     e76:	df 93       	push	r29
     e78:	cf 93       	push	r28
     e7a:	cd b7       	in	r28, 0x3d	; 61
     e7c:	de b7       	in	r29, 0x3e	; 62
     e7e:	28 97       	sbiw	r28, 0x08	; 8
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	f8 94       	cli
     e84:	de bf       	out	0x3e, r29	; 62
     e86:	0f be       	out	0x3f, r0	; 63
     e88:	cd bf       	out	0x3d, r28	; 61
     e8a:	89 83       	std	Y+1, r24	; 0x01
     e8c:	6a 83       	std	Y+2, r22	; 0x02
     e8e:	4b 83       	std	Y+3, r20	; 0x03
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA ) && (PinNumber >= PIN0 )
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	84 30       	cpi	r24, 0x04	; 4
     e94:	08 f0       	brcs	.+2      	; 0xe98 <DIO_SetPinDirection+0x22>
     e96:	f4 c0       	rjmp	.+488    	; 0x1080 <DIO_SetPinDirection+0x20a>
     e98:	8a 81       	ldd	r24, Y+2	; 0x02
     e9a:	88 30       	cpi	r24, 0x08	; 8
     e9c:	08 f0       	brcs	.+2      	; 0xea0 <DIO_SetPinDirection+0x2a>
     e9e:	f0 c0       	rjmp	.+480    	; 0x1080 <DIO_SetPinDirection+0x20a>
			&& (PinNumber <= PIN7 )) {
		if (PinDirection == PIN_OUTPUT) {
     ea0:	8b 81       	ldd	r24, Y+3	; 0x03
     ea2:	81 30       	cpi	r24, 0x01	; 1
     ea4:	09 f0       	breq	.+2      	; 0xea8 <DIO_SetPinDirection+0x32>
     ea6:	70 c0       	rjmp	.+224    	; 0xf88 <DIO_SetPinDirection+0x112>
			switch (PortID) {
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	28 2f       	mov	r18, r24
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	38 87       	std	Y+8, r19	; 0x08
     eb0:	2f 83       	std	Y+7, r18	; 0x07
     eb2:	8f 81       	ldd	r24, Y+7	; 0x07
     eb4:	98 85       	ldd	r25, Y+8	; 0x08
     eb6:	81 30       	cpi	r24, 0x01	; 1
     eb8:	91 05       	cpc	r25, r1
     eba:	49 f1       	breq	.+82     	; 0xf0e <DIO_SetPinDirection+0x98>
     ebc:	2f 81       	ldd	r18, Y+7	; 0x07
     ebe:	38 85       	ldd	r19, Y+8	; 0x08
     ec0:	22 30       	cpi	r18, 0x02	; 2
     ec2:	31 05       	cpc	r19, r1
     ec4:	2c f4       	brge	.+10     	; 0xed0 <DIO_SetPinDirection+0x5a>
     ec6:	8f 81       	ldd	r24, Y+7	; 0x07
     ec8:	98 85       	ldd	r25, Y+8	; 0x08
     eca:	00 97       	sbiw	r24, 0x00	; 0
     ecc:	61 f0       	breq	.+24     	; 0xee6 <DIO_SetPinDirection+0x70>
     ece:	5a c0       	rjmp	.+180    	; 0xf84 <DIO_SetPinDirection+0x10e>
     ed0:	2f 81       	ldd	r18, Y+7	; 0x07
     ed2:	38 85       	ldd	r19, Y+8	; 0x08
     ed4:	22 30       	cpi	r18, 0x02	; 2
     ed6:	31 05       	cpc	r19, r1
     ed8:	71 f1       	breq	.+92     	; 0xf36 <DIO_SetPinDirection+0xc0>
     eda:	8f 81       	ldd	r24, Y+7	; 0x07
     edc:	98 85       	ldd	r25, Y+8	; 0x08
     ede:	83 30       	cpi	r24, 0x03	; 3
     ee0:	91 05       	cpc	r25, r1
     ee2:	e9 f1       	breq	.+122    	; 0xf5e <DIO_SetPinDirection+0xe8>
     ee4:	4f c0       	rjmp	.+158    	; 0xf84 <DIO_SetPinDirection+0x10e>
			case PORTA :
				Set_Bit(PORTA_DIR, PinNumber);
     ee6:	aa e3       	ldi	r26, 0x3A	; 58
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	ea e3       	ldi	r30, 0x3A	; 58
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	48 2f       	mov	r20, r24
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	28 2f       	mov	r18, r24
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	02 2e       	mov	r0, r18
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <DIO_SetPinDirection+0x8e>
     f00:	88 0f       	add	r24, r24
     f02:	99 1f       	adc	r25, r25
     f04:	0a 94       	dec	r0
     f06:	e2 f7       	brpl	.-8      	; 0xf00 <DIO_SetPinDirection+0x8a>
     f08:	84 2b       	or	r24, r20
     f0a:	8c 93       	st	X, r24
     f0c:	3b c0       	rjmp	.+118    	; 0xf84 <DIO_SetPinDirection+0x10e>
				break;
			case PORTB :
				Set_Bit(PORTB_DIR, PinNumber);
     f0e:	a7 e3       	ldi	r26, 0x37	; 55
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e7 e3       	ldi	r30, 0x37	; 55
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	48 2f       	mov	r20, r24
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	02 2e       	mov	r0, r18
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <DIO_SetPinDirection+0xb6>
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	0a 94       	dec	r0
     f2e:	e2 f7       	brpl	.-8      	; 0xf28 <DIO_SetPinDirection+0xb2>
     f30:	84 2b       	or	r24, r20
     f32:	8c 93       	st	X, r24
     f34:	27 c0       	rjmp	.+78     	; 0xf84 <DIO_SetPinDirection+0x10e>
				break;
			case PORTC :
				Set_Bit(PORTC_DIR, PinNumber);
     f36:	a4 e3       	ldi	r26, 0x34	; 52
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e4 e3       	ldi	r30, 0x34	; 52
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	48 2f       	mov	r20, r24
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	28 2f       	mov	r18, r24
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	02 2e       	mov	r0, r18
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <DIO_SetPinDirection+0xde>
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	0a 94       	dec	r0
     f56:	e2 f7       	brpl	.-8      	; 0xf50 <DIO_SetPinDirection+0xda>
     f58:	84 2b       	or	r24, r20
     f5a:	8c 93       	st	X, r24
     f5c:	13 c0       	rjmp	.+38     	; 0xf84 <DIO_SetPinDirection+0x10e>
				break;
			case PORTD :
				Set_Bit(PORTD_DIR, PinNumber);
     f5e:	a1 e3       	ldi	r26, 0x31	; 49
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e1 e3       	ldi	r30, 0x31	; 49
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	48 2f       	mov	r20, r24
     f6a:	8a 81       	ldd	r24, Y+2	; 0x02
     f6c:	28 2f       	mov	r18, r24
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	02 2e       	mov	r0, r18
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <DIO_SetPinDirection+0x106>
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	0a 94       	dec	r0
     f7e:	e2 f7       	brpl	.-8      	; 0xf78 <DIO_SetPinDirection+0x102>
     f80:	84 2b       	or	r24, r20
     f82:	8c 93       	st	X, r24
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
     f84:	1e 82       	std	Y+6, r1	; 0x06
     f86:	7e c0       	rjmp	.+252    	; 0x1084 <DIO_SetPinDirection+0x20e>
		} // END of IF that check for the direction if it is INPUT
		else if (PinDirection == PIN_INPUT) {
     f88:	8b 81       	ldd	r24, Y+3	; 0x03
     f8a:	88 23       	and	r24, r24
     f8c:	09 f0       	breq	.+2      	; 0xf90 <DIO_SetPinDirection+0x11a>
     f8e:	75 c0       	rjmp	.+234    	; 0x107a <DIO_SetPinDirection+0x204>
			switch (PortID) {
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	3d 83       	std	Y+5, r19	; 0x05
     f98:	2c 83       	std	Y+4, r18	; 0x04
     f9a:	8c 81       	ldd	r24, Y+4	; 0x04
     f9c:	9d 81       	ldd	r25, Y+5	; 0x05
     f9e:	81 30       	cpi	r24, 0x01	; 1
     fa0:	91 05       	cpc	r25, r1
     fa2:	59 f1       	breq	.+86     	; 0xffa <DIO_SetPinDirection+0x184>
     fa4:	2c 81       	ldd	r18, Y+4	; 0x04
     fa6:	3d 81       	ldd	r19, Y+5	; 0x05
     fa8:	22 30       	cpi	r18, 0x02	; 2
     faa:	31 05       	cpc	r19, r1
     fac:	2c f4       	brge	.+10     	; 0xfb8 <DIO_SetPinDirection+0x142>
     fae:	8c 81       	ldd	r24, Y+4	; 0x04
     fb0:	9d 81       	ldd	r25, Y+5	; 0x05
     fb2:	00 97       	sbiw	r24, 0x00	; 0
     fb4:	69 f0       	breq	.+26     	; 0xfd0 <DIO_SetPinDirection+0x15a>
     fb6:	5f c0       	rjmp	.+190    	; 0x1076 <DIO_SetPinDirection+0x200>
     fb8:	2c 81       	ldd	r18, Y+4	; 0x04
     fba:	3d 81       	ldd	r19, Y+5	; 0x05
     fbc:	22 30       	cpi	r18, 0x02	; 2
     fbe:	31 05       	cpc	r19, r1
     fc0:	89 f1       	breq	.+98     	; 0x1024 <DIO_SetPinDirection+0x1ae>
     fc2:	8c 81       	ldd	r24, Y+4	; 0x04
     fc4:	9d 81       	ldd	r25, Y+5	; 0x05
     fc6:	83 30       	cpi	r24, 0x03	; 3
     fc8:	91 05       	cpc	r25, r1
     fca:	09 f4       	brne	.+2      	; 0xfce <DIO_SetPinDirection+0x158>
     fcc:	40 c0       	rjmp	.+128    	; 0x104e <DIO_SetPinDirection+0x1d8>
     fce:	53 c0       	rjmp	.+166    	; 0x1076 <DIO_SetPinDirection+0x200>
			case PORTA :
				Clr_Bit(PORTA_DIR, PinNumber);
     fd0:	aa e3       	ldi	r26, 0x3A	; 58
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	ea e3       	ldi	r30, 0x3A	; 58
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	48 2f       	mov	r20, r24
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	02 2e       	mov	r0, r18
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <DIO_SetPinDirection+0x178>
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	0a 94       	dec	r0
     ff0:	e2 f7       	brpl	.-8      	; 0xfea <DIO_SetPinDirection+0x174>
     ff2:	80 95       	com	r24
     ff4:	84 23       	and	r24, r20
     ff6:	8c 93       	st	X, r24
     ff8:	3e c0       	rjmp	.+124    	; 0x1076 <DIO_SetPinDirection+0x200>
				break;
			case PORTB :
				Clr_Bit(PORTB_DIR, PinNumber);
     ffa:	a7 e3       	ldi	r26, 0x37	; 55
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e7 e3       	ldi	r30, 0x37	; 55
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	48 2f       	mov	r20, r24
    1006:	8a 81       	ldd	r24, Y+2	; 0x02
    1008:	28 2f       	mov	r18, r24
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	02 2e       	mov	r0, r18
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <DIO_SetPinDirection+0x1a2>
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	0a 94       	dec	r0
    101a:	e2 f7       	brpl	.-8      	; 0x1014 <DIO_SetPinDirection+0x19e>
    101c:	80 95       	com	r24
    101e:	84 23       	and	r24, r20
    1020:	8c 93       	st	X, r24
    1022:	29 c0       	rjmp	.+82     	; 0x1076 <DIO_SetPinDirection+0x200>
				break;
			case PORTC :
				Clr_Bit(PORTC_DIR, PinNumber);
    1024:	a4 e3       	ldi	r26, 0x34	; 52
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e4 e3       	ldi	r30, 0x34	; 52
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	48 2f       	mov	r20, r24
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	28 2f       	mov	r18, r24
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	02 2e       	mov	r0, r18
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <DIO_SetPinDirection+0x1cc>
    103e:	88 0f       	add	r24, r24
    1040:	99 1f       	adc	r25, r25
    1042:	0a 94       	dec	r0
    1044:	e2 f7       	brpl	.-8      	; 0x103e <DIO_SetPinDirection+0x1c8>
    1046:	80 95       	com	r24
    1048:	84 23       	and	r24, r20
    104a:	8c 93       	st	X, r24
    104c:	14 c0       	rjmp	.+40     	; 0x1076 <DIO_SetPinDirection+0x200>
				break;
			case PORTD :
				Clr_Bit(PORTD_DIR, PinNumber);
    104e:	a1 e3       	ldi	r26, 0x31	; 49
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e1 e3       	ldi	r30, 0x31	; 49
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	48 2f       	mov	r20, r24
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	02 2e       	mov	r0, r18
    1066:	02 c0       	rjmp	.+4      	; 0x106c <DIO_SetPinDirection+0x1f6>
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	0a 94       	dec	r0
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <DIO_SetPinDirection+0x1f2>
    1070:	80 95       	com	r24
    1072:	84 23       	and	r24, r20
    1074:	8c 93       	st	X, r24
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
    1076:	1e 82       	std	Y+6, r1	; 0x06
    1078:	05 c0       	rjmp	.+10     	; 0x1084 <DIO_SetPinDirection+0x20e>
		} // END of ELSE IF that check for the direction if it is INPUT
		else {
			return E_DIO_INVALID_PIN_DIRECTION ;
    107a:	92 e0       	ldi	r25, 0x02	; 2
    107c:	9e 83       	std	Y+6, r25	; 0x06
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <DIO_SetPinDirection+0x20e>
		} //END OF ELSE

	}	  //END of IF That checking the port and pin number

	else {
		return E_DIO_INVALID_PORT_NUMBER ;
    1080:	21 e0       	ldi	r18, 0x01	; 1
    1082:	2e 83       	std	Y+6, r18	; 0x06
    1084:	8e 81       	ldd	r24, Y+6	; 0x06

	}	  //END of ELSE
}	  //END DIO_setPinDirection
    1086:	28 96       	adiw	r28, 0x08	; 8
    1088:	0f b6       	in	r0, 0x3f	; 63
    108a:	f8 94       	cli
    108c:	de bf       	out	0x3e, r29	; 62
    108e:	0f be       	out	0x3f, r0	; 63
    1090:	cd bf       	out	0x3d, r28	; 61
    1092:	cf 91       	pop	r28
    1094:	df 91       	pop	r29
    1096:	08 95       	ret

00001098 <DIO_writePort>:

/* API to Write Port  Value */
DIO_ERROR_state_t DIO_writePort(uint8_t PortID, uint8_t PortValue) {
    1098:	df 93       	push	r29
    109a:	cf 93       	push	r28
    109c:	00 d0       	rcall	.+0      	; 0x109e <DIO_writePort+0x6>
    109e:	00 d0       	rcall	.+0      	; 0x10a0 <DIO_writePort+0x8>
    10a0:	0f 92       	push	r0
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    10a6:	89 83       	std	Y+1, r24	; 0x01
    10a8:	6a 83       	std	Y+2, r22	; 0x02
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA )) {
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
    10ac:	84 30       	cpi	r24, 0x04	; 4
    10ae:	a0 f5       	brcc	.+104    	; 0x1118 <DIO_writePort+0x80>
		switch (PortID) {
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	3d 83       	std	Y+5, r19	; 0x05
    10b8:	2c 83       	std	Y+4, r18	; 0x04
    10ba:	8c 81       	ldd	r24, Y+4	; 0x04
    10bc:	9d 81       	ldd	r25, Y+5	; 0x05
    10be:	81 30       	cpi	r24, 0x01	; 1
    10c0:	91 05       	cpc	r25, r1
    10c2:	d1 f0       	breq	.+52     	; 0x10f8 <DIO_writePort+0x60>
    10c4:	2c 81       	ldd	r18, Y+4	; 0x04
    10c6:	3d 81       	ldd	r19, Y+5	; 0x05
    10c8:	22 30       	cpi	r18, 0x02	; 2
    10ca:	31 05       	cpc	r19, r1
    10cc:	2c f4       	brge	.+10     	; 0x10d8 <DIO_writePort+0x40>
    10ce:	8c 81       	ldd	r24, Y+4	; 0x04
    10d0:	9d 81       	ldd	r25, Y+5	; 0x05
    10d2:	00 97       	sbiw	r24, 0x00	; 0
    10d4:	61 f0       	breq	.+24     	; 0x10ee <DIO_writePort+0x56>
    10d6:	1e c0       	rjmp	.+60     	; 0x1114 <DIO_writePort+0x7c>
    10d8:	2c 81       	ldd	r18, Y+4	; 0x04
    10da:	3d 81       	ldd	r19, Y+5	; 0x05
    10dc:	22 30       	cpi	r18, 0x02	; 2
    10de:	31 05       	cpc	r19, r1
    10e0:	81 f0       	breq	.+32     	; 0x1102 <DIO_writePort+0x6a>
    10e2:	8c 81       	ldd	r24, Y+4	; 0x04
    10e4:	9d 81       	ldd	r25, Y+5	; 0x05
    10e6:	83 30       	cpi	r24, 0x03	; 3
    10e8:	91 05       	cpc	r25, r1
    10ea:	81 f0       	breq	.+32     	; 0x110c <DIO_writePort+0x74>
    10ec:	13 c0       	rjmp	.+38     	; 0x1114 <DIO_writePort+0x7c>
		case PORTA :
			PORTA_DATA = PortValue;
    10ee:	eb e3       	ldi	r30, 0x3B	; 59
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	8a 81       	ldd	r24, Y+2	; 0x02
    10f4:	80 83       	st	Z, r24
    10f6:	0e c0       	rjmp	.+28     	; 0x1114 <DIO_writePort+0x7c>
			break;
		case PORTB :
			PORTB_DATA = PortValue;
    10f8:	e8 e3       	ldi	r30, 0x38	; 56
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	8a 81       	ldd	r24, Y+2	; 0x02
    10fe:	80 83       	st	Z, r24
    1100:	09 c0       	rjmp	.+18     	; 0x1114 <DIO_writePort+0x7c>
			break;
		case PORTC :
			PORTC_DATA = PortValue;
    1102:	e5 e3       	ldi	r30, 0x35	; 53
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	8a 81       	ldd	r24, Y+2	; 0x02
    1108:	80 83       	st	Z, r24
    110a:	04 c0       	rjmp	.+8      	; 0x1114 <DIO_writePort+0x7c>
			break;
		case PORTD :
			PORTD_DATA = PortValue;
    110c:	e2 e3       	ldi	r30, 0x32	; 50
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	80 83       	st	Z, r24
			break;

		} //END of SWITCH
		return E_DIO_SUCCESS ;
    1114:	1b 82       	std	Y+3, r1	; 0x03
    1116:	02 c0       	rjmp	.+4      	; 0x111c <DIO_writePort+0x84>
	}	  //END of IF
	else {
		return E_DIO_INVALID_PORT_NUMBER ;
    1118:	91 e0       	ldi	r25, 0x01	; 1
    111a:	9b 83       	std	Y+3, r25	; 0x03
    111c:	8b 81       	ldd	r24, Y+3	; 0x03

	}	  //END of ELSE
}	  //END DIO_writePortValue
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	cf 91       	pop	r28
    112a:	df 91       	pop	r29
    112c:	08 95       	ret

0000112e <DIO_WritePin>:

/* API to Write Pin  Value */
DIO_ERROR_state_t DIO_WritePin(uint8_t PortID, uint8_t PinNumber,
		uint8_t PinDirection) {
    112e:	df 93       	push	r29
    1130:	cf 93       	push	r28
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
    1136:	28 97       	sbiw	r28, 0x08	; 8
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	f8 94       	cli
    113c:	de bf       	out	0x3e, r29	; 62
    113e:	0f be       	out	0x3f, r0	; 63
    1140:	cd bf       	out	0x3d, r28	; 61
    1142:	89 83       	std	Y+1, r24	; 0x01
    1144:	6a 83       	std	Y+2, r22	; 0x02
    1146:	4b 83       	std	Y+3, r20	; 0x03
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA ) && (PinNumber >= PIN0 )
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	84 30       	cpi	r24, 0x04	; 4
    114c:	08 f0       	brcs	.+2      	; 0x1150 <DIO_WritePin+0x22>
    114e:	f4 c0       	rjmp	.+488    	; 0x1338 <DIO_WritePin+0x20a>
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	88 30       	cpi	r24, 0x08	; 8
    1154:	08 f0       	brcs	.+2      	; 0x1158 <DIO_WritePin+0x2a>
    1156:	f0 c0       	rjmp	.+480    	; 0x1338 <DIO_WritePin+0x20a>
			&& (PinNumber <= PIN7 )) {
		if (PinDirection == PIN_HIGH) {
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	81 30       	cpi	r24, 0x01	; 1
    115c:	09 f0       	breq	.+2      	; 0x1160 <DIO_WritePin+0x32>
    115e:	70 c0       	rjmp	.+224    	; 0x1240 <DIO_WritePin+0x112>
			switch (PortID) {
    1160:	89 81       	ldd	r24, Y+1	; 0x01
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	38 87       	std	Y+8, r19	; 0x08
    1168:	2f 83       	std	Y+7, r18	; 0x07
    116a:	8f 81       	ldd	r24, Y+7	; 0x07
    116c:	98 85       	ldd	r25, Y+8	; 0x08
    116e:	81 30       	cpi	r24, 0x01	; 1
    1170:	91 05       	cpc	r25, r1
    1172:	49 f1       	breq	.+82     	; 0x11c6 <DIO_WritePin+0x98>
    1174:	2f 81       	ldd	r18, Y+7	; 0x07
    1176:	38 85       	ldd	r19, Y+8	; 0x08
    1178:	22 30       	cpi	r18, 0x02	; 2
    117a:	31 05       	cpc	r19, r1
    117c:	2c f4       	brge	.+10     	; 0x1188 <DIO_WritePin+0x5a>
    117e:	8f 81       	ldd	r24, Y+7	; 0x07
    1180:	98 85       	ldd	r25, Y+8	; 0x08
    1182:	00 97       	sbiw	r24, 0x00	; 0
    1184:	61 f0       	breq	.+24     	; 0x119e <DIO_WritePin+0x70>
    1186:	5a c0       	rjmp	.+180    	; 0x123c <DIO_WritePin+0x10e>
    1188:	2f 81       	ldd	r18, Y+7	; 0x07
    118a:	38 85       	ldd	r19, Y+8	; 0x08
    118c:	22 30       	cpi	r18, 0x02	; 2
    118e:	31 05       	cpc	r19, r1
    1190:	71 f1       	breq	.+92     	; 0x11ee <DIO_WritePin+0xc0>
    1192:	8f 81       	ldd	r24, Y+7	; 0x07
    1194:	98 85       	ldd	r25, Y+8	; 0x08
    1196:	83 30       	cpi	r24, 0x03	; 3
    1198:	91 05       	cpc	r25, r1
    119a:	e9 f1       	breq	.+122    	; 0x1216 <DIO_WritePin+0xe8>
    119c:	4f c0       	rjmp	.+158    	; 0x123c <DIO_WritePin+0x10e>
			case PORTA :
				Set_Bit(PORTA_DATA, PinNumber);
    119e:	ab e3       	ldi	r26, 0x3B	; 59
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	eb e3       	ldi	r30, 0x3B	; 59
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	48 2f       	mov	r20, r24
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	28 2f       	mov	r18, r24
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	02 2e       	mov	r0, r18
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <DIO_WritePin+0x8e>
    11b8:	88 0f       	add	r24, r24
    11ba:	99 1f       	adc	r25, r25
    11bc:	0a 94       	dec	r0
    11be:	e2 f7       	brpl	.-8      	; 0x11b8 <DIO_WritePin+0x8a>
    11c0:	84 2b       	or	r24, r20
    11c2:	8c 93       	st	X, r24
    11c4:	3b c0       	rjmp	.+118    	; 0x123c <DIO_WritePin+0x10e>
				break;
			case PORTB :
				Set_Bit(PORTB_DATA, PinNumber);
    11c6:	a8 e3       	ldi	r26, 0x38	; 56
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e8 e3       	ldi	r30, 0x38	; 56
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	48 2f       	mov	r20, r24
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	28 2f       	mov	r18, r24
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	02 2e       	mov	r0, r18
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <DIO_WritePin+0xb6>
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	0a 94       	dec	r0
    11e6:	e2 f7       	brpl	.-8      	; 0x11e0 <DIO_WritePin+0xb2>
    11e8:	84 2b       	or	r24, r20
    11ea:	8c 93       	st	X, r24
    11ec:	27 c0       	rjmp	.+78     	; 0x123c <DIO_WritePin+0x10e>
				break;
			case PORTC :
				Set_Bit(PORTC_DATA, PinNumber);
    11ee:	a5 e3       	ldi	r26, 0x35	; 53
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	e5 e3       	ldi	r30, 0x35	; 53
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	48 2f       	mov	r20, r24
    11fa:	8a 81       	ldd	r24, Y+2	; 0x02
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	02 2e       	mov	r0, r18
    1206:	02 c0       	rjmp	.+4      	; 0x120c <DIO_WritePin+0xde>
    1208:	88 0f       	add	r24, r24
    120a:	99 1f       	adc	r25, r25
    120c:	0a 94       	dec	r0
    120e:	e2 f7       	brpl	.-8      	; 0x1208 <DIO_WritePin+0xda>
    1210:	84 2b       	or	r24, r20
    1212:	8c 93       	st	X, r24
    1214:	13 c0       	rjmp	.+38     	; 0x123c <DIO_WritePin+0x10e>
				break;
			case PORTD :
				Set_Bit(PORTD_DATA, PinNumber);
    1216:	a2 e3       	ldi	r26, 0x32	; 50
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	e2 e3       	ldi	r30, 0x32	; 50
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	48 2f       	mov	r20, r24
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	02 2e       	mov	r0, r18
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <DIO_WritePin+0x106>
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	0a 94       	dec	r0
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <DIO_WritePin+0x102>
    1238:	84 2b       	or	r24, r20
    123a:	8c 93       	st	X, r24
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
    123c:	1e 82       	std	Y+6, r1	; 0x06
    123e:	7e c0       	rjmp	.+252    	; 0x133c <DIO_WritePin+0x20e>
		} // END of IF that check for the direction if it is INPUT
		else if (PinDirection == PIN_LOW) {
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	88 23       	and	r24, r24
    1244:	09 f0       	breq	.+2      	; 0x1248 <DIO_WritePin+0x11a>
    1246:	75 c0       	rjmp	.+234    	; 0x1332 <DIO_WritePin+0x204>
			switch (PortID) {
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	3d 83       	std	Y+5, r19	; 0x05
    1250:	2c 83       	std	Y+4, r18	; 0x04
    1252:	8c 81       	ldd	r24, Y+4	; 0x04
    1254:	9d 81       	ldd	r25, Y+5	; 0x05
    1256:	81 30       	cpi	r24, 0x01	; 1
    1258:	91 05       	cpc	r25, r1
    125a:	59 f1       	breq	.+86     	; 0x12b2 <DIO_WritePin+0x184>
    125c:	2c 81       	ldd	r18, Y+4	; 0x04
    125e:	3d 81       	ldd	r19, Y+5	; 0x05
    1260:	22 30       	cpi	r18, 0x02	; 2
    1262:	31 05       	cpc	r19, r1
    1264:	2c f4       	brge	.+10     	; 0x1270 <DIO_WritePin+0x142>
    1266:	8c 81       	ldd	r24, Y+4	; 0x04
    1268:	9d 81       	ldd	r25, Y+5	; 0x05
    126a:	00 97       	sbiw	r24, 0x00	; 0
    126c:	69 f0       	breq	.+26     	; 0x1288 <DIO_WritePin+0x15a>
    126e:	5f c0       	rjmp	.+190    	; 0x132e <DIO_WritePin+0x200>
    1270:	2c 81       	ldd	r18, Y+4	; 0x04
    1272:	3d 81       	ldd	r19, Y+5	; 0x05
    1274:	22 30       	cpi	r18, 0x02	; 2
    1276:	31 05       	cpc	r19, r1
    1278:	89 f1       	breq	.+98     	; 0x12dc <DIO_WritePin+0x1ae>
    127a:	8c 81       	ldd	r24, Y+4	; 0x04
    127c:	9d 81       	ldd	r25, Y+5	; 0x05
    127e:	83 30       	cpi	r24, 0x03	; 3
    1280:	91 05       	cpc	r25, r1
    1282:	09 f4       	brne	.+2      	; 0x1286 <DIO_WritePin+0x158>
    1284:	40 c0       	rjmp	.+128    	; 0x1306 <DIO_WritePin+0x1d8>
    1286:	53 c0       	rjmp	.+166    	; 0x132e <DIO_WritePin+0x200>
			case PORTA :
				Clr_Bit(PORTA_DATA, PinNumber);
    1288:	ab e3       	ldi	r26, 0x3B	; 59
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	eb e3       	ldi	r30, 0x3B	; 59
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	48 2f       	mov	r20, r24
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	02 2e       	mov	r0, r18
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <DIO_WritePin+0x178>
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	0a 94       	dec	r0
    12a8:	e2 f7       	brpl	.-8      	; 0x12a2 <DIO_WritePin+0x174>
    12aa:	80 95       	com	r24
    12ac:	84 23       	and	r24, r20
    12ae:	8c 93       	st	X, r24
    12b0:	3e c0       	rjmp	.+124    	; 0x132e <DIO_WritePin+0x200>
				break;
			case PORTB :
				Clr_Bit(PORTB_DATA, PinNumber);
    12b2:	a8 e3       	ldi	r26, 0x38	; 56
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	e8 e3       	ldi	r30, 0x38	; 56
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	48 2f       	mov	r20, r24
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	28 2f       	mov	r18, r24
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	02 2e       	mov	r0, r18
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <DIO_WritePin+0x1a2>
    12cc:	88 0f       	add	r24, r24
    12ce:	99 1f       	adc	r25, r25
    12d0:	0a 94       	dec	r0
    12d2:	e2 f7       	brpl	.-8      	; 0x12cc <DIO_WritePin+0x19e>
    12d4:	80 95       	com	r24
    12d6:	84 23       	and	r24, r20
    12d8:	8c 93       	st	X, r24
    12da:	29 c0       	rjmp	.+82     	; 0x132e <DIO_WritePin+0x200>
				break;
			case PORTC :
				Clr_Bit(PORTC_DATA, PinNumber);
    12dc:	a5 e3       	ldi	r26, 0x35	; 53
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e5 e3       	ldi	r30, 0x35	; 53
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	48 2f       	mov	r20, r24
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	02 2e       	mov	r0, r18
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <DIO_WritePin+0x1cc>
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	0a 94       	dec	r0
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <DIO_WritePin+0x1c8>
    12fe:	80 95       	com	r24
    1300:	84 23       	and	r24, r20
    1302:	8c 93       	st	X, r24
    1304:	14 c0       	rjmp	.+40     	; 0x132e <DIO_WritePin+0x200>
				break;
			case PORTD :
				Clr_Bit(PORTD_DATA, PinNumber);
    1306:	a2 e3       	ldi	r26, 0x32	; 50
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	e2 e3       	ldi	r30, 0x32	; 50
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	48 2f       	mov	r20, r24
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	28 2f       	mov	r18, r24
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	02 2e       	mov	r0, r18
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <DIO_WritePin+0x1f6>
    1320:	88 0f       	add	r24, r24
    1322:	99 1f       	adc	r25, r25
    1324:	0a 94       	dec	r0
    1326:	e2 f7       	brpl	.-8      	; 0x1320 <DIO_WritePin+0x1f2>
    1328:	80 95       	com	r24
    132a:	84 23       	and	r24, r20
    132c:	8c 93       	st	X, r24
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
    132e:	1e 82       	std	Y+6, r1	; 0x06
    1330:	05 c0       	rjmp	.+10     	; 0x133c <DIO_WritePin+0x20e>
		} // END of ELSE IF that check for the direction if it is INPUT
		else {
			return E_DIO_INVALID_PIN_DIRECTION ;
    1332:	92 e0       	ldi	r25, 0x02	; 2
    1334:	9e 83       	std	Y+6, r25	; 0x06
    1336:	02 c0       	rjmp	.+4      	; 0x133c <DIO_WritePin+0x20e>
		} //END OF ELSE

	}	  //END of IF That checking the port and pin number

	else {
		return E_DIO_INVALID_PORT_NUMBER ;
    1338:	21 e0       	ldi	r18, 0x01	; 1
    133a:	2e 83       	std	Y+6, r18	; 0x06
    133c:	8e 81       	ldd	r24, Y+6	; 0x06

	}	  //END of ELSE
}	  //END of DIO_writePinValue
    133e:	28 96       	adiw	r28, 0x08	; 8
    1340:	0f b6       	in	r0, 0x3f	; 63
    1342:	f8 94       	cli
    1344:	de bf       	out	0x3e, r29	; 62
    1346:	0f be       	out	0x3f, r0	; 63
    1348:	cd bf       	out	0x3d, r28	; 61
    134a:	cf 91       	pop	r28
    134c:	df 91       	pop	r29
    134e:	08 95       	ret

00001350 <DIO_ReadPort>:

/* API to Read Port  Value */
DIO_ERROR_state_t DIO_ReadPort(uint8_t PortID, uint8_t* PortState) {
    1350:	df 93       	push	r29
    1352:	cf 93       	push	r28
    1354:	00 d0       	rcall	.+0      	; 0x1356 <DIO_ReadPort+0x6>
    1356:	00 d0       	rcall	.+0      	; 0x1358 <DIO_ReadPort+0x8>
    1358:	00 d0       	rcall	.+0      	; 0x135a <DIO_ReadPort+0xa>
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62
    135e:	89 83       	std	Y+1, r24	; 0x01
    1360:	7b 83       	std	Y+3, r23	; 0x03
    1362:	6a 83       	std	Y+2, r22	; 0x02
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA )) {
    1364:	89 81       	ldd	r24, Y+1	; 0x01
    1366:	84 30       	cpi	r24, 0x04	; 4
    1368:	e0 f5       	brcc	.+120    	; 0x13e2 <DIO_ReadPort+0x92>
		switch (PortID) {
    136a:	89 81       	ldd	r24, Y+1	; 0x01
    136c:	28 2f       	mov	r18, r24
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	3e 83       	std	Y+6, r19	; 0x06
    1372:	2d 83       	std	Y+5, r18	; 0x05
    1374:	8d 81       	ldd	r24, Y+5	; 0x05
    1376:	9e 81       	ldd	r25, Y+6	; 0x06
    1378:	81 30       	cpi	r24, 0x01	; 1
    137a:	91 05       	cpc	r25, r1
    137c:	e1 f0       	breq	.+56     	; 0x13b6 <DIO_ReadPort+0x66>
    137e:	2d 81       	ldd	r18, Y+5	; 0x05
    1380:	3e 81       	ldd	r19, Y+6	; 0x06
    1382:	22 30       	cpi	r18, 0x02	; 2
    1384:	31 05       	cpc	r19, r1
    1386:	2c f4       	brge	.+10     	; 0x1392 <DIO_ReadPort+0x42>
    1388:	8d 81       	ldd	r24, Y+5	; 0x05
    138a:	9e 81       	ldd	r25, Y+6	; 0x06
    138c:	00 97       	sbiw	r24, 0x00	; 0
    138e:	61 f0       	breq	.+24     	; 0x13a8 <DIO_ReadPort+0x58>
    1390:	26 c0       	rjmp	.+76     	; 0x13de <DIO_ReadPort+0x8e>
    1392:	2d 81       	ldd	r18, Y+5	; 0x05
    1394:	3e 81       	ldd	r19, Y+6	; 0x06
    1396:	22 30       	cpi	r18, 0x02	; 2
    1398:	31 05       	cpc	r19, r1
    139a:	a1 f0       	breq	.+40     	; 0x13c4 <DIO_ReadPort+0x74>
    139c:	8d 81       	ldd	r24, Y+5	; 0x05
    139e:	9e 81       	ldd	r25, Y+6	; 0x06
    13a0:	83 30       	cpi	r24, 0x03	; 3
    13a2:	91 05       	cpc	r25, r1
    13a4:	b1 f0       	breq	.+44     	; 0x13d2 <DIO_ReadPort+0x82>
    13a6:	1b c0       	rjmp	.+54     	; 0x13de <DIO_ReadPort+0x8e>
		case PORTA :
			*(PortState) = PORTA_STAT;
    13a8:	e9 e3       	ldi	r30, 0x39	; 57
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	ea 81       	ldd	r30, Y+2	; 0x02
    13b0:	fb 81       	ldd	r31, Y+3	; 0x03
    13b2:	80 83       	st	Z, r24
    13b4:	14 c0       	rjmp	.+40     	; 0x13de <DIO_ReadPort+0x8e>
			break;
		case PORTB :
			*(PortState) = PORTB_STAT;
    13b6:	e6 e3       	ldi	r30, 0x36	; 54
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	ea 81       	ldd	r30, Y+2	; 0x02
    13be:	fb 81       	ldd	r31, Y+3	; 0x03
    13c0:	80 83       	st	Z, r24
    13c2:	0d c0       	rjmp	.+26     	; 0x13de <DIO_ReadPort+0x8e>
			break;
		case PORTC :
			*(PortState) = PORTC_STAT;
    13c4:	e3 e3       	ldi	r30, 0x33	; 51
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	ea 81       	ldd	r30, Y+2	; 0x02
    13cc:	fb 81       	ldd	r31, Y+3	; 0x03
    13ce:	80 83       	st	Z, r24
    13d0:	06 c0       	rjmp	.+12     	; 0x13de <DIO_ReadPort+0x8e>
			break;
		case PORTD :
			*(PortState) = PORTD_STAT;
    13d2:	e0 e3       	ldi	r30, 0x30	; 48
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	ea 81       	ldd	r30, Y+2	; 0x02
    13da:	fb 81       	ldd	r31, Y+3	; 0x03
    13dc:	80 83       	st	Z, r24
			break;

		} //END of SWITCH
		return E_DIO_SUCCESS ;
    13de:	1c 82       	std	Y+4, r1	; 0x04
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <DIO_ReadPort+0x96>
	}	  //END of IF
	else {
		return E_DIO_INVALID_PORT_NUMBER ;
    13e2:	91 e0       	ldi	r25, 0x01	; 1
    13e4:	9c 83       	std	Y+4, r25	; 0x04
    13e6:	8c 81       	ldd	r24, Y+4	; 0x04

	}	  //END of ELSE
}	  //END of DIO_readPort
    13e8:	26 96       	adiw	r28, 0x06	; 6
    13ea:	0f b6       	in	r0, 0x3f	; 63
    13ec:	f8 94       	cli
    13ee:	de bf       	out	0x3e, r29	; 62
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	cd bf       	out	0x3d, r28	; 61
    13f4:	cf 91       	pop	r28
    13f6:	df 91       	pop	r29
    13f8:	08 95       	ret

000013fa <DIO_ReadPin>:

/* API to Read Pin  Value */
DIO_ERROR_state_t DIO_ReadPin(uint8_t PortID, uint8_t PinNumber,
		uint8_t* PinState) {
    13fa:	df 93       	push	r29
    13fc:	cf 93       	push	r28
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
    1402:	27 97       	sbiw	r28, 0x07	; 7
    1404:	0f b6       	in	r0, 0x3f	; 63
    1406:	f8 94       	cli
    1408:	de bf       	out	0x3e, r29	; 62
    140a:	0f be       	out	0x3f, r0	; 63
    140c:	cd bf       	out	0x3d, r28	; 61
    140e:	89 83       	std	Y+1, r24	; 0x01
    1410:	6a 83       	std	Y+2, r22	; 0x02
    1412:	5c 83       	std	Y+4, r21	; 0x04
    1414:	4b 83       	std	Y+3, r20	; 0x03
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA ) && (PinNumber >= PIN0 )
    1416:	89 81       	ldd	r24, Y+1	; 0x01
    1418:	84 30       	cpi	r24, 0x04	; 4
    141a:	08 f0       	brcs	.+2      	; 0x141e <DIO_ReadPin+0x24>
    141c:	76 c0       	rjmp	.+236    	; 0x150a <DIO_ReadPin+0x110>
    141e:	8a 81       	ldd	r24, Y+2	; 0x02
    1420:	88 30       	cpi	r24, 0x08	; 8
    1422:	08 f0       	brcs	.+2      	; 0x1426 <DIO_ReadPin+0x2c>
    1424:	72 c0       	rjmp	.+228    	; 0x150a <DIO_ReadPin+0x110>
			&& (PinNumber <= PIN7 )) {

		switch (PortID) {
    1426:	89 81       	ldd	r24, Y+1	; 0x01
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	3f 83       	std	Y+7, r19	; 0x07
    142e:	2e 83       	std	Y+6, r18	; 0x06
    1430:	4e 81       	ldd	r20, Y+6	; 0x06
    1432:	5f 81       	ldd	r21, Y+7	; 0x07
    1434:	41 30       	cpi	r20, 0x01	; 1
    1436:	51 05       	cpc	r21, r1
    1438:	59 f1       	breq	.+86     	; 0x1490 <DIO_ReadPin+0x96>
    143a:	8e 81       	ldd	r24, Y+6	; 0x06
    143c:	9f 81       	ldd	r25, Y+7	; 0x07
    143e:	82 30       	cpi	r24, 0x02	; 2
    1440:	91 05       	cpc	r25, r1
    1442:	34 f4       	brge	.+12     	; 0x1450 <DIO_ReadPin+0x56>
    1444:	2e 81       	ldd	r18, Y+6	; 0x06
    1446:	3f 81       	ldd	r19, Y+7	; 0x07
    1448:	21 15       	cp	r18, r1
    144a:	31 05       	cpc	r19, r1
    144c:	69 f0       	breq	.+26     	; 0x1468 <DIO_ReadPin+0x6e>
    144e:	5b c0       	rjmp	.+182    	; 0x1506 <DIO_ReadPin+0x10c>
    1450:	4e 81       	ldd	r20, Y+6	; 0x06
    1452:	5f 81       	ldd	r21, Y+7	; 0x07
    1454:	42 30       	cpi	r20, 0x02	; 2
    1456:	51 05       	cpc	r21, r1
    1458:	79 f1       	breq	.+94     	; 0x14b8 <DIO_ReadPin+0xbe>
    145a:	8e 81       	ldd	r24, Y+6	; 0x06
    145c:	9f 81       	ldd	r25, Y+7	; 0x07
    145e:	83 30       	cpi	r24, 0x03	; 3
    1460:	91 05       	cpc	r25, r1
    1462:	09 f4       	brne	.+2      	; 0x1466 <DIO_ReadPin+0x6c>
    1464:	3d c0       	rjmp	.+122    	; 0x14e0 <DIO_ReadPin+0xe6>
    1466:	4f c0       	rjmp	.+158    	; 0x1506 <DIO_ReadPin+0x10c>
		case PORTA :
			*(PinState) = Get_Bit(PORTA_STAT, PinNumber);
    1468:	e9 e3       	ldi	r30, 0x39	; 57
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	8a 81       	ldd	r24, Y+2	; 0x02
    1474:	88 2f       	mov	r24, r24
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	a9 01       	movw	r20, r18
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <DIO_ReadPin+0x86>
    147c:	55 95       	asr	r21
    147e:	47 95       	ror	r20
    1480:	8a 95       	dec	r24
    1482:	e2 f7       	brpl	.-8      	; 0x147c <DIO_ReadPin+0x82>
    1484:	ca 01       	movw	r24, r20
    1486:	81 70       	andi	r24, 0x01	; 1
    1488:	eb 81       	ldd	r30, Y+3	; 0x03
    148a:	fc 81       	ldd	r31, Y+4	; 0x04
    148c:	80 83       	st	Z, r24
    148e:	3b c0       	rjmp	.+118    	; 0x1506 <DIO_ReadPin+0x10c>
			break;
		case PORTB :
			*(PinState) = Get_Bit(PORTB_STAT, PinNumber);
    1490:	e6 e3       	ldi	r30, 0x36	; 54
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	28 2f       	mov	r18, r24
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	8a 81       	ldd	r24, Y+2	; 0x02
    149c:	88 2f       	mov	r24, r24
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	a9 01       	movw	r20, r18
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <DIO_ReadPin+0xae>
    14a4:	55 95       	asr	r21
    14a6:	47 95       	ror	r20
    14a8:	8a 95       	dec	r24
    14aa:	e2 f7       	brpl	.-8      	; 0x14a4 <DIO_ReadPin+0xaa>
    14ac:	ca 01       	movw	r24, r20
    14ae:	81 70       	andi	r24, 0x01	; 1
    14b0:	eb 81       	ldd	r30, Y+3	; 0x03
    14b2:	fc 81       	ldd	r31, Y+4	; 0x04
    14b4:	80 83       	st	Z, r24
    14b6:	27 c0       	rjmp	.+78     	; 0x1506 <DIO_ReadPin+0x10c>
			break;
		case PORTC :
			*(PinState) = Get_Bit(PORTC_STAT, PinNumber);
    14b8:	e3 e3       	ldi	r30, 0x33	; 51
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	28 2f       	mov	r18, r24
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	8a 81       	ldd	r24, Y+2	; 0x02
    14c4:	88 2f       	mov	r24, r24
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	a9 01       	movw	r20, r18
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <DIO_ReadPin+0xd6>
    14cc:	55 95       	asr	r21
    14ce:	47 95       	ror	r20
    14d0:	8a 95       	dec	r24
    14d2:	e2 f7       	brpl	.-8      	; 0x14cc <DIO_ReadPin+0xd2>
    14d4:	ca 01       	movw	r24, r20
    14d6:	81 70       	andi	r24, 0x01	; 1
    14d8:	eb 81       	ldd	r30, Y+3	; 0x03
    14da:	fc 81       	ldd	r31, Y+4	; 0x04
    14dc:	80 83       	st	Z, r24
    14de:	13 c0       	rjmp	.+38     	; 0x1506 <DIO_ReadPin+0x10c>
			break;
		case PORTD :
			*(PinState) = Get_Bit(PORTD_STAT, PinNumber);
    14e0:	e0 e3       	ldi	r30, 0x30	; 48
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	88 2f       	mov	r24, r24
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	a9 01       	movw	r20, r18
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <DIO_ReadPin+0xfe>
    14f4:	55 95       	asr	r21
    14f6:	47 95       	ror	r20
    14f8:	8a 95       	dec	r24
    14fa:	e2 f7       	brpl	.-8      	; 0x14f4 <DIO_ReadPin+0xfa>
    14fc:	ca 01       	movw	r24, r20
    14fe:	81 70       	andi	r24, 0x01	; 1
    1500:	eb 81       	ldd	r30, Y+3	; 0x03
    1502:	fc 81       	ldd	r31, Y+4	; 0x04
    1504:	80 83       	st	Z, r24
			break;

		} //END of SWITCH
		return E_DIO_SUCCESS ;
    1506:	1d 82       	std	Y+5, r1	; 0x05
    1508:	02 c0       	rjmp	.+4      	; 0x150e <DIO_ReadPin+0x114>

	}	  //END of IF That checking the port and pin number

	else {
		return E_DIO_INVALID_PORT_NUMBER ;
    150a:	51 e0       	ldi	r21, 0x01	; 1
    150c:	5d 83       	std	Y+5, r21	; 0x05
    150e:	8d 81       	ldd	r24, Y+5	; 0x05

	}	  //END of ELSE
}    //END of DIO_readPint
    1510:	27 96       	adiw	r28, 0x07	; 7
    1512:	0f b6       	in	r0, 0x3f	; 63
    1514:	f8 94       	cli
    1516:	de bf       	out	0x3e, r29	; 62
    1518:	0f be       	out	0x3f, r0	; 63
    151a:	cd bf       	out	0x3d, r28	; 61
    151c:	cf 91       	pop	r28
    151e:	df 91       	pop	r29
    1520:	08 95       	ret

00001522 <DIO_TogglePin>:

/* API to toggle pin*/
DIO_ERROR_state_t DIO_TogglePin(uint8_t PortID, uint8_t PinNumber){
    1522:	df 93       	push	r29
    1524:	cf 93       	push	r28
    1526:	00 d0       	rcall	.+0      	; 0x1528 <DIO_TogglePin+0x6>
    1528:	00 d0       	rcall	.+0      	; 0x152a <DIO_TogglePin+0x8>
    152a:	0f 92       	push	r0
    152c:	cd b7       	in	r28, 0x3d	; 61
    152e:	de b7       	in	r29, 0x3e	; 62
    1530:	89 83       	std	Y+1, r24	; 0x01
    1532:	6a 83       	std	Y+2, r22	; 0x02
	//Check for the ports if it is between 0 to 3
		if ((PortID <= PORTD ) && (PortID >= PORTA ) && (PinNumber >= PIN0 )
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	84 30       	cpi	r24, 0x04	; 4
    1538:	08 f0       	brcs	.+2      	; 0x153c <DIO_TogglePin+0x1a>
    153a:	74 c0       	rjmp	.+232    	; 0x1624 <DIO_TogglePin+0x102>
    153c:	8a 81       	ldd	r24, Y+2	; 0x02
    153e:	88 30       	cpi	r24, 0x08	; 8
    1540:	08 f0       	brcs	.+2      	; 0x1544 <DIO_TogglePin+0x22>
    1542:	70 c0       	rjmp	.+224    	; 0x1624 <DIO_TogglePin+0x102>
				&& (PinNumber <= PIN7 )) {
			switch (PortID) {
    1544:	89 81       	ldd	r24, Y+1	; 0x01
    1546:	28 2f       	mov	r18, r24
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	3d 83       	std	Y+5, r19	; 0x05
    154c:	2c 83       	std	Y+4, r18	; 0x04
    154e:	8c 81       	ldd	r24, Y+4	; 0x04
    1550:	9d 81       	ldd	r25, Y+5	; 0x05
    1552:	81 30       	cpi	r24, 0x01	; 1
    1554:	91 05       	cpc	r25, r1
    1556:	49 f1       	breq	.+82     	; 0x15aa <DIO_TogglePin+0x88>
    1558:	2c 81       	ldd	r18, Y+4	; 0x04
    155a:	3d 81       	ldd	r19, Y+5	; 0x05
    155c:	22 30       	cpi	r18, 0x02	; 2
    155e:	31 05       	cpc	r19, r1
    1560:	2c f4       	brge	.+10     	; 0x156c <DIO_TogglePin+0x4a>
    1562:	8c 81       	ldd	r24, Y+4	; 0x04
    1564:	9d 81       	ldd	r25, Y+5	; 0x05
    1566:	00 97       	sbiw	r24, 0x00	; 0
    1568:	61 f0       	breq	.+24     	; 0x1582 <DIO_TogglePin+0x60>
    156a:	5a c0       	rjmp	.+180    	; 0x1620 <DIO_TogglePin+0xfe>
    156c:	2c 81       	ldd	r18, Y+4	; 0x04
    156e:	3d 81       	ldd	r19, Y+5	; 0x05
    1570:	22 30       	cpi	r18, 0x02	; 2
    1572:	31 05       	cpc	r19, r1
    1574:	71 f1       	breq	.+92     	; 0x15d2 <DIO_TogglePin+0xb0>
    1576:	8c 81       	ldd	r24, Y+4	; 0x04
    1578:	9d 81       	ldd	r25, Y+5	; 0x05
    157a:	83 30       	cpi	r24, 0x03	; 3
    157c:	91 05       	cpc	r25, r1
    157e:	e9 f1       	breq	.+122    	; 0x15fa <DIO_TogglePin+0xd8>
    1580:	4f c0       	rjmp	.+158    	; 0x1620 <DIO_TogglePin+0xfe>
			case PORTA :
				Toggle_Bit(PORTA_DATA, PinNumber);
    1582:	ab e3       	ldi	r26, 0x3B	; 59
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	eb e3       	ldi	r30, 0x3B	; 59
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	48 2f       	mov	r20, r24
    158e:	8a 81       	ldd	r24, Y+2	; 0x02
    1590:	28 2f       	mov	r18, r24
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	02 2e       	mov	r0, r18
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <DIO_TogglePin+0x7e>
    159c:	88 0f       	add	r24, r24
    159e:	99 1f       	adc	r25, r25
    15a0:	0a 94       	dec	r0
    15a2:	e2 f7       	brpl	.-8      	; 0x159c <DIO_TogglePin+0x7a>
    15a4:	84 27       	eor	r24, r20
    15a6:	8c 93       	st	X, r24
    15a8:	3b c0       	rjmp	.+118    	; 0x1620 <DIO_TogglePin+0xfe>
				break;
			case PORTB :
				Toggle_Bit(PORTB_DATA, PinNumber);
    15aa:	a8 e3       	ldi	r26, 0x38	; 56
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	e8 e3       	ldi	r30, 0x38	; 56
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	48 2f       	mov	r20, r24
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	02 2e       	mov	r0, r18
    15c2:	02 c0       	rjmp	.+4      	; 0x15c8 <DIO_TogglePin+0xa6>
    15c4:	88 0f       	add	r24, r24
    15c6:	99 1f       	adc	r25, r25
    15c8:	0a 94       	dec	r0
    15ca:	e2 f7       	brpl	.-8      	; 0x15c4 <DIO_TogglePin+0xa2>
    15cc:	84 27       	eor	r24, r20
    15ce:	8c 93       	st	X, r24
    15d0:	27 c0       	rjmp	.+78     	; 0x1620 <DIO_TogglePin+0xfe>
				break;
			case PORTC :
				Toggle_Bit(PORTC_DATA, PinNumber);
    15d2:	a5 e3       	ldi	r26, 0x35	; 53
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	e5 e3       	ldi	r30, 0x35	; 53
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	48 2f       	mov	r20, r24
    15de:	8a 81       	ldd	r24, Y+2	; 0x02
    15e0:	28 2f       	mov	r18, r24
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	02 2e       	mov	r0, r18
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <DIO_TogglePin+0xce>
    15ec:	88 0f       	add	r24, r24
    15ee:	99 1f       	adc	r25, r25
    15f0:	0a 94       	dec	r0
    15f2:	e2 f7       	brpl	.-8      	; 0x15ec <DIO_TogglePin+0xca>
    15f4:	84 27       	eor	r24, r20
    15f6:	8c 93       	st	X, r24
    15f8:	13 c0       	rjmp	.+38     	; 0x1620 <DIO_TogglePin+0xfe>
				break;
			case PORTD :
				Toggle_Bit(PORTD_DATA, PinNumber);
    15fa:	a2 e3       	ldi	r26, 0x32	; 50
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	e2 e3       	ldi	r30, 0x32	; 50
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	48 2f       	mov	r20, r24
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	28 2f       	mov	r18, r24
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	02 2e       	mov	r0, r18
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <DIO_TogglePin+0xf6>
    1614:	88 0f       	add	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	0a 94       	dec	r0
    161a:	e2 f7       	brpl	.-8      	; 0x1614 <DIO_TogglePin+0xf2>
    161c:	84 27       	eor	r24, r20
    161e:	8c 93       	st	X, r24
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
    1620:	1b 82       	std	Y+3, r1	; 0x03
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <DIO_TogglePin+0x106>

		}	  //END of IF That checking the port and pin number

		else {
			return E_DIO_INVALID_PORT_NUMBER ;
    1624:	91 e0       	ldi	r25, 0x01	; 1
    1626:	9b 83       	std	Y+3, r25	; 0x03
    1628:	8b 81       	ldd	r24, Y+3	; 0x03

		}	  //END of ELSE

}
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	cf 91       	pop	r28
    1636:	df 91       	pop	r29
    1638:	08 95       	ret

0000163a <DIO_EnablePinPullup>:
DIO_ERROR_state_t DIO_EnablePinPullup(uint8_t PortID, uint8_t PinNumber){
    163a:	df 93       	push	r29
    163c:	cf 93       	push	r28
    163e:	00 d0       	rcall	.+0      	; 0x1640 <DIO_EnablePinPullup+0x6>
    1640:	00 d0       	rcall	.+0      	; 0x1642 <DIO_EnablePinPullup+0x8>
    1642:	0f 92       	push	r0
    1644:	cd b7       	in	r28, 0x3d	; 61
    1646:	de b7       	in	r29, 0x3e	; 62
    1648:	89 83       	std	Y+1, r24	; 0x01
    164a:	6a 83       	std	Y+2, r22	; 0x02
	//Check for the ports if it is between 0 to 3
		if ((PortID <= PORTD ) && (PortID >= PORTA ) && (PinNumber >= PIN0 )
    164c:	89 81       	ldd	r24, Y+1	; 0x01
    164e:	84 30       	cpi	r24, 0x04	; 4
    1650:	08 f0       	brcs	.+2      	; 0x1654 <DIO_EnablePinPullup+0x1a>
    1652:	d1 c0       	rjmp	.+418    	; 0x17f6 <DIO_EnablePinPullup+0x1bc>
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	88 30       	cpi	r24, 0x08	; 8
    1658:	08 f0       	brcs	.+2      	; 0x165c <DIO_EnablePinPullup+0x22>
    165a:	cd c0       	rjmp	.+410    	; 0x17f6 <DIO_EnablePinPullup+0x1bc>
				&& (PinNumber <= PIN7 )) {
			switch (PortID) {
    165c:	89 81       	ldd	r24, Y+1	; 0x01
    165e:	28 2f       	mov	r18, r24
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	3d 83       	std	Y+5, r19	; 0x05
    1664:	2c 83       	std	Y+4, r18	; 0x04
    1666:	4c 81       	ldd	r20, Y+4	; 0x04
    1668:	5d 81       	ldd	r21, Y+5	; 0x05
    166a:	41 30       	cpi	r20, 0x01	; 1
    166c:	51 05       	cpc	r21, r1
    166e:	09 f4       	brne	.+2      	; 0x1672 <DIO_EnablePinPullup+0x38>
    1670:	42 c0       	rjmp	.+132    	; 0x16f6 <DIO_EnablePinPullup+0xbc>
    1672:	8c 81       	ldd	r24, Y+4	; 0x04
    1674:	9d 81       	ldd	r25, Y+5	; 0x05
    1676:	82 30       	cpi	r24, 0x02	; 2
    1678:	91 05       	cpc	r25, r1
    167a:	34 f4       	brge	.+12     	; 0x1688 <DIO_EnablePinPullup+0x4e>
    167c:	2c 81       	ldd	r18, Y+4	; 0x04
    167e:	3d 81       	ldd	r19, Y+5	; 0x05
    1680:	21 15       	cp	r18, r1
    1682:	31 05       	cpc	r19, r1
    1684:	71 f0       	breq	.+28     	; 0x16a2 <DIO_EnablePinPullup+0x68>
    1686:	b5 c0       	rjmp	.+362    	; 0x17f2 <DIO_EnablePinPullup+0x1b8>
    1688:	4c 81       	ldd	r20, Y+4	; 0x04
    168a:	5d 81       	ldd	r21, Y+5	; 0x05
    168c:	42 30       	cpi	r20, 0x02	; 2
    168e:	51 05       	cpc	r21, r1
    1690:	09 f4       	brne	.+2      	; 0x1694 <DIO_EnablePinPullup+0x5a>
    1692:	5b c0       	rjmp	.+182    	; 0x174a <DIO_EnablePinPullup+0x110>
    1694:	8c 81       	ldd	r24, Y+4	; 0x04
    1696:	9d 81       	ldd	r25, Y+5	; 0x05
    1698:	83 30       	cpi	r24, 0x03	; 3
    169a:	91 05       	cpc	r25, r1
    169c:	09 f4       	brne	.+2      	; 0x16a0 <DIO_EnablePinPullup+0x66>
    169e:	7f c0       	rjmp	.+254    	; 0x179e <DIO_EnablePinPullup+0x164>
    16a0:	a8 c0       	rjmp	.+336    	; 0x17f2 <DIO_EnablePinPullup+0x1b8>
			case PORTA :
				if(Get_Bit(PORTA_DIR, PinNumber)==PIN_INPUT){
    16a2:	ea e3       	ldi	r30, 0x3A	; 58
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	28 2f       	mov	r18, r24
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	88 2f       	mov	r24, r24
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	a9 01       	movw	r20, r18
    16b4:	02 c0       	rjmp	.+4      	; 0x16ba <DIO_EnablePinPullup+0x80>
    16b6:	55 95       	asr	r21
    16b8:	47 95       	ror	r20
    16ba:	8a 95       	dec	r24
    16bc:	e2 f7       	brpl	.-8      	; 0x16b6 <DIO_EnablePinPullup+0x7c>
    16be:	ca 01       	movw	r24, r20
    16c0:	81 70       	andi	r24, 0x01	; 1
    16c2:	90 70       	andi	r25, 0x00	; 0
    16c4:	00 97       	sbiw	r24, 0x00	; 0
    16c6:	a1 f4       	brne	.+40     	; 0x16f0 <DIO_EnablePinPullup+0xb6>
					Set_Bit(PORTA_DATA, PinNumber);
    16c8:	ab e3       	ldi	r26, 0x3B	; 59
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	eb e3       	ldi	r30, 0x3B	; 59
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	48 2f       	mov	r20, r24
    16d4:	8a 81       	ldd	r24, Y+2	; 0x02
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	02 2e       	mov	r0, r18
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <DIO_EnablePinPullup+0xac>
    16e2:	88 0f       	add	r24, r24
    16e4:	99 1f       	adc	r25, r25
    16e6:	0a 94       	dec	r0
    16e8:	e2 f7       	brpl	.-8      	; 0x16e2 <DIO_EnablePinPullup+0xa8>
    16ea:	84 2b       	or	r24, r20
    16ec:	8c 93       	st	X, r24
    16ee:	81 c0       	rjmp	.+258    	; 0x17f2 <DIO_EnablePinPullup+0x1b8>
				}// END of IF which checking if the  pin is INPUT
				else{
					return E_DIO_SET_TO_NON_INPUT;
    16f0:	53 e0       	ldi	r21, 0x03	; 3
    16f2:	5b 83       	std	Y+3, r21	; 0x03
    16f4:	82 c0       	rjmp	.+260    	; 0x17fa <DIO_EnablePinPullup+0x1c0>
				}
				break;
			case PORTB :
				if(Get_Bit(PORTB_DIR, PinNumber)==PIN_INPUT){
    16f6:	e7 e3       	ldi	r30, 0x37	; 55
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	28 2f       	mov	r18, r24
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	8a 81       	ldd	r24, Y+2	; 0x02
    1702:	88 2f       	mov	r24, r24
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	a9 01       	movw	r20, r18
    1708:	02 c0       	rjmp	.+4      	; 0x170e <DIO_EnablePinPullup+0xd4>
    170a:	55 95       	asr	r21
    170c:	47 95       	ror	r20
    170e:	8a 95       	dec	r24
    1710:	e2 f7       	brpl	.-8      	; 0x170a <DIO_EnablePinPullup+0xd0>
    1712:	ca 01       	movw	r24, r20
    1714:	81 70       	andi	r24, 0x01	; 1
    1716:	90 70       	andi	r25, 0x00	; 0
    1718:	00 97       	sbiw	r24, 0x00	; 0
    171a:	a1 f4       	brne	.+40     	; 0x1744 <DIO_EnablePinPullup+0x10a>
					Set_Bit(PORTB_DATA, PinNumber);
    171c:	a8 e3       	ldi	r26, 0x38	; 56
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	e8 e3       	ldi	r30, 0x38	; 56
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	48 2f       	mov	r20, r24
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	28 2f       	mov	r18, r24
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	02 2e       	mov	r0, r18
    1734:	02 c0       	rjmp	.+4      	; 0x173a <DIO_EnablePinPullup+0x100>
    1736:	88 0f       	add	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	0a 94       	dec	r0
    173c:	e2 f7       	brpl	.-8      	; 0x1736 <DIO_EnablePinPullup+0xfc>
    173e:	84 2b       	or	r24, r20
    1740:	8c 93       	st	X, r24
    1742:	57 c0       	rjmp	.+174    	; 0x17f2 <DIO_EnablePinPullup+0x1b8>
				}// END of IF which checking if the  pin is INPUT
				else{
					return E_DIO_SET_TO_NON_INPUT;
    1744:	53 e0       	ldi	r21, 0x03	; 3
    1746:	5b 83       	std	Y+3, r21	; 0x03
    1748:	58 c0       	rjmp	.+176    	; 0x17fa <DIO_EnablePinPullup+0x1c0>
				}
				break;
			case PORTC :
				if(Get_Bit(PORTC_DIR, PinNumber)==PIN_INPUT){
    174a:	e4 e3       	ldi	r30, 0x34	; 52
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	28 2f       	mov	r18, r24
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	8a 81       	ldd	r24, Y+2	; 0x02
    1756:	88 2f       	mov	r24, r24
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	a9 01       	movw	r20, r18
    175c:	02 c0       	rjmp	.+4      	; 0x1762 <DIO_EnablePinPullup+0x128>
    175e:	55 95       	asr	r21
    1760:	47 95       	ror	r20
    1762:	8a 95       	dec	r24
    1764:	e2 f7       	brpl	.-8      	; 0x175e <DIO_EnablePinPullup+0x124>
    1766:	ca 01       	movw	r24, r20
    1768:	81 70       	andi	r24, 0x01	; 1
    176a:	90 70       	andi	r25, 0x00	; 0
    176c:	00 97       	sbiw	r24, 0x00	; 0
    176e:	a1 f4       	brne	.+40     	; 0x1798 <DIO_EnablePinPullup+0x15e>
					Set_Bit(PORTC_DATA, PinNumber);
    1770:	a5 e3       	ldi	r26, 0x35	; 53
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	e5 e3       	ldi	r30, 0x35	; 53
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	48 2f       	mov	r20, r24
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	28 2f       	mov	r18, r24
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	02 2e       	mov	r0, r18
    1788:	02 c0       	rjmp	.+4      	; 0x178e <DIO_EnablePinPullup+0x154>
    178a:	88 0f       	add	r24, r24
    178c:	99 1f       	adc	r25, r25
    178e:	0a 94       	dec	r0
    1790:	e2 f7       	brpl	.-8      	; 0x178a <DIO_EnablePinPullup+0x150>
    1792:	84 2b       	or	r24, r20
    1794:	8c 93       	st	X, r24
    1796:	2d c0       	rjmp	.+90     	; 0x17f2 <DIO_EnablePinPullup+0x1b8>
				}// END of IF which checking if the  pin is INPUT
				else{
					return E_DIO_SET_TO_NON_INPUT;
    1798:	53 e0       	ldi	r21, 0x03	; 3
    179a:	5b 83       	std	Y+3, r21	; 0x03
    179c:	2e c0       	rjmp	.+92     	; 0x17fa <DIO_EnablePinPullup+0x1c0>
				}
				break;
			case PORTD :
				if(Get_Bit(PORTD_DIR, PinNumber)==PIN_INPUT){
    179e:	e1 e3       	ldi	r30, 0x31	; 49
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	28 2f       	mov	r18, r24
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	8a 81       	ldd	r24, Y+2	; 0x02
    17aa:	88 2f       	mov	r24, r24
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	a9 01       	movw	r20, r18
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <DIO_EnablePinPullup+0x17c>
    17b2:	55 95       	asr	r21
    17b4:	47 95       	ror	r20
    17b6:	8a 95       	dec	r24
    17b8:	e2 f7       	brpl	.-8      	; 0x17b2 <DIO_EnablePinPullup+0x178>
    17ba:	ca 01       	movw	r24, r20
    17bc:	81 70       	andi	r24, 0x01	; 1
    17be:	90 70       	andi	r25, 0x00	; 0
    17c0:	00 97       	sbiw	r24, 0x00	; 0
    17c2:	a1 f4       	brne	.+40     	; 0x17ec <DIO_EnablePinPullup+0x1b2>
					Set_Bit(PORTD_DATA, PinNumber);
    17c4:	a2 e3       	ldi	r26, 0x32	; 50
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	e2 e3       	ldi	r30, 0x32	; 50
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	48 2f       	mov	r20, r24
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	28 2f       	mov	r18, r24
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	02 2e       	mov	r0, r18
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <DIO_EnablePinPullup+0x1a8>
    17de:	88 0f       	add	r24, r24
    17e0:	99 1f       	adc	r25, r25
    17e2:	0a 94       	dec	r0
    17e4:	e2 f7       	brpl	.-8      	; 0x17de <DIO_EnablePinPullup+0x1a4>
    17e6:	84 2b       	or	r24, r20
    17e8:	8c 93       	st	X, r24
    17ea:	03 c0       	rjmp	.+6      	; 0x17f2 <DIO_EnablePinPullup+0x1b8>
				}// END of IF which checking if the  pin is INPUT
				else{
					return E_DIO_SET_TO_NON_INPUT;
    17ec:	53 e0       	ldi	r21, 0x03	; 3
    17ee:	5b 83       	std	Y+3, r21	; 0x03
    17f0:	04 c0       	rjmp	.+8      	; 0x17fa <DIO_EnablePinPullup+0x1c0>
				}
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
    17f2:	1b 82       	std	Y+3, r1	; 0x03
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <DIO_EnablePinPullup+0x1c0>

		}	  //END of IF That checking the port and pin number

		else {
			return E_DIO_INVALID_PORT_NUMBER ;
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	8b 83       	std	Y+3, r24	; 0x03
    17fa:	8b 81       	ldd	r24, Y+3	; 0x03

		}	  //END of ELSE

}
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	cf 91       	pop	r28
    1808:	df 91       	pop	r29
    180a:	08 95       	ret

0000180c <LED_Init>:
#define PIN_LOW  (uint8_t)0




uint8_t LED_Init(void){
    180c:	df 93       	push	r29
    180e:	cf 93       	push	r28
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
#if LED_1
	DIO_SetPinDirection(LED_1_PORT,LED_1_PIN,PIN_OUTPUT);
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	60 e0       	ldi	r22, 0x00	; 0
    1818:	41 e0       	ldi	r20, 0x01	; 1
    181a:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_SetPinDirection>
#endif
#if LED_2
	DIO_SetPinDirection(LED_2_PORT,LED_2_PIN,PIN_OUTPUT);
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	61 e0       	ldi	r22, 0x01	; 1
    1822:	41 e0       	ldi	r20, 0x01	; 1
    1824:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_SetPinDirection>
#endif
#if LED_3
	DIO_SetPinDirection(LED_3_PORT,LED_3_PIN,PIN_OUTPUT);
    1828:	80 e0       	ldi	r24, 0x00	; 0
    182a:	62 e0       	ldi	r22, 0x02	; 2
    182c:	41 e0       	ldi	r20, 0x01	; 1
    182e:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_SetPinDirection>
#endif
	return 0;
    1832:	80 e0       	ldi	r24, 0x00	; 0
}
    1834:	cf 91       	pop	r28
    1836:	df 91       	pop	r29
    1838:	08 95       	ret

0000183a <LED_On>:
uint8_t LED_On(uint8_t LedNumber){
    183a:	df 93       	push	r29
    183c:	cf 93       	push	r28
    183e:	00 d0       	rcall	.+0      	; 0x1840 <LED_On+0x6>
    1840:	0f 92       	push	r0
    1842:	cd b7       	in	r28, 0x3d	; 61
    1844:	de b7       	in	r29, 0x3e	; 62
    1846:	89 83       	std	Y+1, r24	; 0x01
	switch (LedNumber){
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	28 2f       	mov	r18, r24
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	3b 83       	std	Y+3, r19	; 0x03
    1850:	2a 83       	std	Y+2, r18	; 0x02
    1852:	8a 81       	ldd	r24, Y+2	; 0x02
    1854:	9b 81       	ldd	r25, Y+3	; 0x03
    1856:	82 30       	cpi	r24, 0x02	; 2
    1858:	91 05       	cpc	r25, r1
    185a:	81 f0       	breq	.+32     	; 0x187c <LED_On+0x42>
    185c:	2a 81       	ldd	r18, Y+2	; 0x02
    185e:	3b 81       	ldd	r19, Y+3	; 0x03
    1860:	23 30       	cpi	r18, 0x03	; 3
    1862:	31 05       	cpc	r19, r1
    1864:	89 f0       	breq	.+34     	; 0x1888 <LED_On+0x4e>
    1866:	8a 81       	ldd	r24, Y+2	; 0x02
    1868:	9b 81       	ldd	r25, Y+3	; 0x03
    186a:	81 30       	cpi	r24, 0x01	; 1
    186c:	91 05       	cpc	r25, r1
    186e:	89 f4       	brne	.+34     	; 0x1892 <LED_On+0x58>
	case LED_1:
		DIO_WritePin(LED_1_PORT,LED_1_PIN,PIN_HIGH);
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	60 e0       	ldi	r22, 0x00	; 0
    1874:	41 e0       	ldi	r20, 0x01	; 1
    1876:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_WritePin>
    187a:	0b c0       	rjmp	.+22     	; 0x1892 <LED_On+0x58>
		break;
	case LED_2:
		DIO_WritePin(LED_2_PORT,LED_2_PIN,PIN_HIGH);
    187c:	80 e0       	ldi	r24, 0x00	; 0
    187e:	61 e0       	ldi	r22, 0x01	; 1
    1880:	41 e0       	ldi	r20, 0x01	; 1
    1882:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_WritePin>
    1886:	05 c0       	rjmp	.+10     	; 0x1892 <LED_On+0x58>
		break;
	case LED_3:
		DIO_WritePin(LED_3_PORT,LED_3_PIN,PIN_HIGH);
    1888:	80 e0       	ldi	r24, 0x00	; 0
    188a:	62 e0       	ldi	r22, 0x02	; 2
    188c:	41 e0       	ldi	r20, 0x01	; 1
    188e:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_WritePin>
		break;
	}
	return 0;
    1892:	80 e0       	ldi	r24, 0x00	; 0

}
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	cf 91       	pop	r28
    189c:	df 91       	pop	r29
    189e:	08 95       	ret

000018a0 <LED_Off>:
uint8_t LED_Off(uint8_t LedNumber){
    18a0:	df 93       	push	r29
    18a2:	cf 93       	push	r28
    18a4:	00 d0       	rcall	.+0      	; 0x18a6 <LED_Off+0x6>
    18a6:	0f 92       	push	r0
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
    18ac:	89 83       	std	Y+1, r24	; 0x01
	switch (LedNumber){
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	28 2f       	mov	r18, r24
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	3b 83       	std	Y+3, r19	; 0x03
    18b6:	2a 83       	std	Y+2, r18	; 0x02
    18b8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ba:	9b 81       	ldd	r25, Y+3	; 0x03
    18bc:	82 30       	cpi	r24, 0x02	; 2
    18be:	91 05       	cpc	r25, r1
    18c0:	81 f0       	breq	.+32     	; 0x18e2 <LED_Off+0x42>
    18c2:	2a 81       	ldd	r18, Y+2	; 0x02
    18c4:	3b 81       	ldd	r19, Y+3	; 0x03
    18c6:	23 30       	cpi	r18, 0x03	; 3
    18c8:	31 05       	cpc	r19, r1
    18ca:	89 f0       	breq	.+34     	; 0x18ee <LED_Off+0x4e>
    18cc:	8a 81       	ldd	r24, Y+2	; 0x02
    18ce:	9b 81       	ldd	r25, Y+3	; 0x03
    18d0:	81 30       	cpi	r24, 0x01	; 1
    18d2:	91 05       	cpc	r25, r1
    18d4:	89 f4       	brne	.+34     	; 0x18f8 <LED_Off+0x58>
	case LED_1:
		DIO_WritePin(LED_1_PORT,LED_1_PIN,PIN_LOW);
    18d6:	80 e0       	ldi	r24, 0x00	; 0
    18d8:	60 e0       	ldi	r22, 0x00	; 0
    18da:	40 e0       	ldi	r20, 0x00	; 0
    18dc:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_WritePin>
    18e0:	0b c0       	rjmp	.+22     	; 0x18f8 <LED_Off+0x58>
		break;
	case LED_2:
		DIO_WritePin(LED_2_PORT,LED_2_PIN,PIN_LOW);
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	61 e0       	ldi	r22, 0x01	; 1
    18e6:	40 e0       	ldi	r20, 0x00	; 0
    18e8:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_WritePin>
    18ec:	05 c0       	rjmp	.+10     	; 0x18f8 <LED_Off+0x58>
		break;
	case LED_3:
		DIO_WritePin(LED_3_PORT,LED_3_PIN,PIN_LOW);
    18ee:	80 e0       	ldi	r24, 0x00	; 0
    18f0:	62 e0       	ldi	r22, 0x02	; 2
    18f2:	40 e0       	ldi	r20, 0x00	; 0
    18f4:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_WritePin>
		break;
	}

	return 0;
    18f8:	80 e0       	ldi	r24, 0x00	; 0
}
    18fa:	0f 90       	pop	r0
    18fc:	0f 90       	pop	r0
    18fe:	0f 90       	pop	r0
    1900:	cf 91       	pop	r28
    1902:	df 91       	pop	r29
    1904:	08 95       	ret

00001906 <LED_Toggle>:
uint8_t LED_Toggle(uint8_t LedNumber){
    1906:	df 93       	push	r29
    1908:	cf 93       	push	r28
    190a:	00 d0       	rcall	.+0      	; 0x190c <LED_Toggle+0x6>
    190c:	0f 92       	push	r0
    190e:	cd b7       	in	r28, 0x3d	; 61
    1910:	de b7       	in	r29, 0x3e	; 62
    1912:	89 83       	std	Y+1, r24	; 0x01
	switch (LedNumber){
    1914:	89 81       	ldd	r24, Y+1	; 0x01
    1916:	28 2f       	mov	r18, r24
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	3b 83       	std	Y+3, r19	; 0x03
    191c:	2a 83       	std	Y+2, r18	; 0x02
    191e:	8a 81       	ldd	r24, Y+2	; 0x02
    1920:	9b 81       	ldd	r25, Y+3	; 0x03
    1922:	82 30       	cpi	r24, 0x02	; 2
    1924:	91 05       	cpc	r25, r1
    1926:	79 f0       	breq	.+30     	; 0x1946 <LED_Toggle+0x40>
    1928:	2a 81       	ldd	r18, Y+2	; 0x02
    192a:	3b 81       	ldd	r19, Y+3	; 0x03
    192c:	23 30       	cpi	r18, 0x03	; 3
    192e:	31 05       	cpc	r19, r1
    1930:	79 f0       	breq	.+30     	; 0x1950 <LED_Toggle+0x4a>
    1932:	8a 81       	ldd	r24, Y+2	; 0x02
    1934:	9b 81       	ldd	r25, Y+3	; 0x03
    1936:	81 30       	cpi	r24, 0x01	; 1
    1938:	91 05       	cpc	r25, r1
    193a:	71 f4       	brne	.+28     	; 0x1958 <LED_Toggle+0x52>
	case LED_1:
		DIO_TogglePin(LED_1_PORT,LED_1_PIN);
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	60 e0       	ldi	r22, 0x00	; 0
    1940:	0e 94 91 0a 	call	0x1522	; 0x1522 <DIO_TogglePin>
    1944:	09 c0       	rjmp	.+18     	; 0x1958 <LED_Toggle+0x52>
		break;
	case LED_2:
		DIO_TogglePin(LED_2_PORT,LED_2_PIN);
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	61 e0       	ldi	r22, 0x01	; 1
    194a:	0e 94 91 0a 	call	0x1522	; 0x1522 <DIO_TogglePin>
    194e:	04 c0       	rjmp	.+8      	; 0x1958 <LED_Toggle+0x52>
		break;
	case LED_3:
		DIO_TogglePin(LED_3_PORT,LED_3_PIN);
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	62 e0       	ldi	r22, 0x02	; 2
    1954:	0e 94 91 0a 	call	0x1522	; 0x1522 <DIO_TogglePin>
		break;
	}
	return 0;
    1958:	80 e0       	ldi	r24, 0x00	; 0

}
    195a:	0f 90       	pop	r0
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	cf 91       	pop	r28
    1962:	df 91       	pop	r29
    1964:	08 95       	ret

00001966 <LED_Status>:
uint8_t LED_Status(uint8_t LedNumber, uint8_t* LedState){
    1966:	df 93       	push	r29
    1968:	cf 93       	push	r28
    196a:	00 d0       	rcall	.+0      	; 0x196c <LED_Status+0x6>
    196c:	00 d0       	rcall	.+0      	; 0x196e <LED_Status+0x8>
    196e:	0f 92       	push	r0
    1970:	cd b7       	in	r28, 0x3d	; 61
    1972:	de b7       	in	r29, 0x3e	; 62
    1974:	89 83       	std	Y+1, r24	; 0x01
    1976:	7b 83       	std	Y+3, r23	; 0x03
    1978:	6a 83       	std	Y+2, r22	; 0x02
	switch (LedNumber){
    197a:	89 81       	ldd	r24, Y+1	; 0x01
    197c:	28 2f       	mov	r18, r24
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	3d 83       	std	Y+5, r19	; 0x05
    1982:	2c 83       	std	Y+4, r18	; 0x04
    1984:	8c 81       	ldd	r24, Y+4	; 0x04
    1986:	9d 81       	ldd	r25, Y+5	; 0x05
    1988:	82 30       	cpi	r24, 0x02	; 2
    198a:	91 05       	cpc	r25, r1
    198c:	91 f0       	breq	.+36     	; 0x19b2 <LED_Status+0x4c>
    198e:	2c 81       	ldd	r18, Y+4	; 0x04
    1990:	3d 81       	ldd	r19, Y+5	; 0x05
    1992:	23 30       	cpi	r18, 0x03	; 3
    1994:	31 05       	cpc	r19, r1
    1996:	a9 f0       	breq	.+42     	; 0x19c2 <LED_Status+0x5c>
    1998:	8c 81       	ldd	r24, Y+4	; 0x04
    199a:	9d 81       	ldd	r25, Y+5	; 0x05
    199c:	81 30       	cpi	r24, 0x01	; 1
    199e:	91 05       	cpc	r25, r1
    19a0:	b9 f4       	brne	.+46     	; 0x19d0 <LED_Status+0x6a>
	case LED_1:
		DIO_ReadPin(LED_1_PORT,LED_1_PIN,LedState);
    19a2:	2a 81       	ldd	r18, Y+2	; 0x02
    19a4:	3b 81       	ldd	r19, Y+3	; 0x03
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	60 e0       	ldi	r22, 0x00	; 0
    19aa:	a9 01       	movw	r20, r18
    19ac:	0e 94 fd 09 	call	0x13fa	; 0x13fa <DIO_ReadPin>
    19b0:	0f c0       	rjmp	.+30     	; 0x19d0 <LED_Status+0x6a>
		break;
	case LED_2:
		DIO_ReadPin(LED_2_PORT,LED_2_PIN,LedState);
    19b2:	2a 81       	ldd	r18, Y+2	; 0x02
    19b4:	3b 81       	ldd	r19, Y+3	; 0x03
    19b6:	80 e0       	ldi	r24, 0x00	; 0
    19b8:	61 e0       	ldi	r22, 0x01	; 1
    19ba:	a9 01       	movw	r20, r18
    19bc:	0e 94 fd 09 	call	0x13fa	; 0x13fa <DIO_ReadPin>
    19c0:	07 c0       	rjmp	.+14     	; 0x19d0 <LED_Status+0x6a>
		break;
	case LED_3:
		DIO_ReadPin(LED_3_PORT,LED_3_PIN,LedState);
    19c2:	2a 81       	ldd	r18, Y+2	; 0x02
    19c4:	3b 81       	ldd	r19, Y+3	; 0x03
    19c6:	80 e0       	ldi	r24, 0x00	; 0
    19c8:	62 e0       	ldi	r22, 0x02	; 2
    19ca:	a9 01       	movw	r20, r18
    19cc:	0e 94 fd 09 	call	0x13fa	; 0x13fa <DIO_ReadPin>
		break;
	}
	return 0;
    19d0:	80 e0       	ldi	r24, 0x00	; 0

}
    19d2:	0f 90       	pop	r0
    19d4:	0f 90       	pop	r0
    19d6:	0f 90       	pop	r0
    19d8:	0f 90       	pop	r0
    19da:	0f 90       	pop	r0
    19dc:	cf 91       	pop	r28
    19de:	df 91       	pop	r29
    19e0:	08 95       	ret

000019e2 <App_Init>:
 *  Created on: Jul 18, 2021
 *      Author: Ahmed
 */
#include "twi_master_app.h"
uint8_t data=0x55;
void App_Init(void){
    19e2:	df 93       	push	r29
    19e4:	cf 93       	push	r28
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
//	DIO_SetPortDirection(PORTA,PORT_OUTPUT);
    UART_Init(UART_1);
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	0e 94 49 00 	call	0x92	; 0x92 <UART_Init>
	TWI_Init(0);
    19f0:	80 e0       	ldi	r24, 0x00	; 0
    19f2:	0e 94 d7 01 	call	0x3ae	; 0x3ae <TWI_Init>




}
    19f6:	cf 91       	pop	r28
    19f8:	df 91       	pop	r29
    19fa:	08 95       	ret

000019fc <App_Update>:
void App_Update(void){
    19fc:	df 93       	push	r29
    19fe:	cf 93       	push	r28
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62


	TWI_SendChar(TWI_1,24,data);
    1a04:	90 91 47 01 	lds	r25, 0x0147
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	68 e1       	ldi	r22, 0x18	; 24
    1a0c:	49 2f       	mov	r20, r25
    1a0e:	0e 94 12 03 	call	0x624	; 0x624 <TWI_SendChar>



}
    1a12:	cf 91       	pop	r28
    1a14:	df 91       	pop	r29
    1a16:	08 95       	ret

00001a18 <main>:
/*- INCLUDES 
-----------------------------------------------*/

#include "App/MASTER_APP/twi_master_app.h"

int main(){
    1a18:	df 93       	push	r29
    1a1a:	cf 93       	push	r28
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
	App_Init();
    1a20:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <App_Init>
	App_Update();
    1a24:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <App_Update>
    1a28:	ff cf       	rjmp	.-2      	; 0x1a28 <main+0x10>

00001a2a <_exit>:
    1a2a:	f8 94       	cli

00001a2c <__stop_program>:
    1a2c:	ff cf       	rjmp	.-2      	; 0x1a2c <__stop_program>
