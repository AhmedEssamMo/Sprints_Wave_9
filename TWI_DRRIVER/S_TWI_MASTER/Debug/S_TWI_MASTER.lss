
S_TWI_MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001cf4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00001cf4  00001d88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800062  00800062  00001d8a  2**0
                  ALLOC
  3 .stab         000036d8  00000000  00000000  00001d8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015d5  00000000  00000000  00005464  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 36 08 	jmp	0x106c	; 0x106c <__vector_1>
       8:	0c 94 46 08 	jmp	0x108c	; 0x108c <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 97 06 	jmp	0xd2e	; 0xd2e <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 5d 05 	jmp	0xaba	; 0xaba <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ef       	ldi	r30, 0xF4	; 244
      68:	fc e1       	ldi	r31, 0x1C	; 28
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 36       	cpi	r26, 0x62	; 98
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e6       	ldi	r26, 0x62	; 98
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 37       	cpi	r26, 0x79	; 121
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <main>
      8a:	0c 94 78 0e 	jmp	0x1cf0	; 0x1cf0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_Init>:
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	00 d0       	rcall	.+0      	; 0x98 <UART_Init+0x6>
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
      9c:	8a 83       	std	Y+2, r24	; 0x02
      9e:	19 82       	std	Y+1, r1	; 0x01
      a0:	8a 81       	ldd	r24, Y+2	; 0x02
      a2:	88 23       	and	r24, r24
      a4:	19 f0       	breq	.+6      	; 0xac <UART_Init+0x1a>
      a6:	8c ef       	ldi	r24, 0xFC	; 252
      a8:	89 83       	std	Y+1, r24	; 0x01
      aa:	35 c0       	rjmp	.+106    	; 0x116 <UART_Init+0x84>
      ac:	80 91 68 00 	lds	r24, 0x0068
      b0:	81 30       	cpi	r24, 0x01	; 1
      b2:	19 f4       	brne	.+6      	; 0xba <UART_Init+0x28>
      b4:	8f ef       	ldi	r24, 0xFF	; 255
      b6:	89 83       	std	Y+1, r24	; 0x01
      b8:	2e c0       	rjmp	.+92     	; 0x116 <UART_Init+0x84>
      ba:	80 91 68 00 	lds	r24, 0x0068
      be:	88 23       	and	r24, r24
      c0:	51 f5       	brne	.+84     	; 0x116 <UART_Init+0x84>
      c2:	aa e2       	ldi	r26, 0x2A	; 42
      c4:	b0 e0       	ldi	r27, 0x00	; 0
      c6:	ea e2       	ldi	r30, 0x2A	; 42
      c8:	f0 e0       	ldi	r31, 0x00	; 0
      ca:	80 81       	ld	r24, Z
      cc:	80 61       	ori	r24, 0x10	; 16
      ce:	8c 93       	st	X, r24
      d0:	aa e2       	ldi	r26, 0x2A	; 42
      d2:	b0 e0       	ldi	r27, 0x00	; 0
      d4:	ea e2       	ldi	r30, 0x2A	; 42
      d6:	f0 e0       	ldi	r31, 0x00	; 0
      d8:	80 81       	ld	r24, Z
      da:	88 60       	ori	r24, 0x08	; 8
      dc:	8c 93       	st	X, r24
      de:	ab e2       	ldi	r26, 0x2B	; 43
      e0:	b0 e0       	ldi	r27, 0x00	; 0
      e2:	eb e2       	ldi	r30, 0x2B	; 43
      e4:	f0 e0       	ldi	r31, 0x00	; 0
      e6:	80 81       	ld	r24, Z
      e8:	8d 7f       	andi	r24, 0xFD	; 253
      ea:	8c 93       	st	X, r24
      ec:	aa e2       	ldi	r26, 0x2A	; 42
      ee:	b0 e0       	ldi	r27, 0x00	; 0
      f0:	ea e2       	ldi	r30, 0x2A	; 42
      f2:	f0 e0       	ldi	r31, 0x00	; 0
      f4:	80 81       	ld	r24, Z
      f6:	8b 7f       	andi	r24, 0xFB	; 251
      f8:	8c 93       	st	X, r24
      fa:	a0 e4       	ldi	r26, 0x40	; 64
      fc:	b0 e0       	ldi	r27, 0x00	; 0
      fe:	e0 e4       	ldi	r30, 0x40	; 64
     100:	f0 e0       	ldi	r31, 0x00	; 0
     102:	80 81       	ld	r24, Z
     104:	86 68       	ori	r24, 0x86	; 134
     106:	8c 93       	st	X, r24
     108:	e9 e2       	ldi	r30, 0x29	; 41
     10a:	f0 e0       	ldi	r31, 0x00	; 0
     10c:	83 e3       	ldi	r24, 0x33	; 51
     10e:	80 83       	st	Z, r24
     110:	81 e0       	ldi	r24, 0x01	; 1
     112:	80 93 68 00 	sts	0x0068, r24
     116:	89 81       	ldd	r24, Y+1	; 0x01
     118:	0f 90       	pop	r0
     11a:	0f 90       	pop	r0
     11c:	cf 91       	pop	r28
     11e:	df 91       	pop	r29
     120:	08 95       	ret

00000122 <UART_TransmitChar>:
        //DO NOTHING
        }
	}
	return au8_ERROR_STAT;
}
UART_ERROR_state_t UART_TransmitChar(uint8_t UartNumber, uint8_t TxChar) {
     122:	df 93       	push	r29
     124:	cf 93       	push	r28
     126:	00 d0       	rcall	.+0      	; 0x128 <UART_TransmitChar+0x6>
     128:	0f 92       	push	r0
     12a:	cd b7       	in	r28, 0x3d	; 61
     12c:	de b7       	in	r29, 0x3e	; 62
     12e:	8a 83       	std	Y+2, r24	; 0x02
     130:	6b 83       	std	Y+3, r22	; 0x03
    uint8_t au8_ERROR_STAT=UART_SUCCESS;//ERRROR STAT HAS A SUCCESS VALUE AS DEFAULT
     132:	19 82       	std	Y+1, r1	; 0x01
    if (UartNumber>UART_1){
     134:	8a 81       	ldd	r24, Y+2	; 0x02
     136:	88 23       	and	r24, r24
     138:	19 f0       	breq	.+6      	; 0x140 <UART_TransmitChar+0x1e>
		au8_ERROR_STAT=UART_INVALID_CHANNEL;
     13a:	8c ef       	ldi	r24, 0xFC	; 252
     13c:	89 83       	std	Y+1, r24	; 0x01
     13e:	1b c0       	rjmp	.+54     	; 0x176 <UART_TransmitChar+0x54>
	}
	else{
        if(NOT_INIT==gu8_InitFlag){
     140:	80 91 68 00 	lds	r24, 0x0068
     144:	88 23       	and	r24, r24
     146:	19 f4       	brne	.+6      	; 0x14e <UART_TransmitChar+0x2c>
            au8_ERROR_STAT=UART_NOT_INIT;
     148:	8e ef       	ldi	r24, 0xFE	; 254
     14a:	89 83       	std	Y+1, r24	; 0x01
     14c:	14 c0       	rjmp	.+40     	; 0x176 <UART_TransmitChar+0x54>
        }
        else if (INIT==gu8_InitFlag){
     14e:	80 91 68 00 	lds	r24, 0x0068
     152:	81 30       	cpi	r24, 0x01	; 1
     154:	81 f4       	brne	.+32     	; 0x176 <UART_TransmitChar+0x54>
        UDR = TxChar;
     156:	ec e2       	ldi	r30, 0x2C	; 44
     158:	f0 e0       	ldi	r31, 0x00	; 0
     15a:	8b 81       	ldd	r24, Y+3	; 0x03
     15c:	80 83       	st	Z, r24
        while ((Get_Bit(UCSRA, UDRE)) != 1) {
     15e:	eb e2       	ldi	r30, 0x2B	; 43
     160:	f0 e0       	ldi	r31, 0x00	; 0
     162:	80 81       	ld	r24, Z
     164:	82 95       	swap	r24
     166:	86 95       	lsr	r24
     168:	87 70       	andi	r24, 0x07	; 7
     16a:	88 2f       	mov	r24, r24
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	81 70       	andi	r24, 0x01	; 1
     170:	90 70       	andi	r25, 0x00	; 0
     172:	00 97       	sbiw	r24, 0x00	; 0
     174:	a1 f3       	breq	.-24     	; 0x15e <UART_TransmitChar+0x3c>
        }
        else{
            //DO NOTHING
        }
	}
	return au8_ERROR_STAT;
     176:	89 81       	ldd	r24, Y+1	; 0x01
}
     178:	0f 90       	pop	r0
     17a:	0f 90       	pop	r0
     17c:	0f 90       	pop	r0
     17e:	cf 91       	pop	r28
     180:	df 91       	pop	r29
     182:	08 95       	ret

00000184 <UART_TransmitString>:
UART_ERROR_state_t UART_TransmitString(uint8_t UartNumber, ptr_uint8_t TxString) {
     184:	df 93       	push	r29
     186:	cf 93       	push	r28
     188:	00 d0       	rcall	.+0      	; 0x18a <UART_TransmitString+0x6>
     18a:	00 d0       	rcall	.+0      	; 0x18c <UART_TransmitString+0x8>
     18c:	0f 92       	push	r0
     18e:	cd b7       	in	r28, 0x3d	; 61
     190:	de b7       	in	r29, 0x3e	; 62
     192:	8b 83       	std	Y+3, r24	; 0x03
     194:	7d 83       	std	Y+5, r23	; 0x05
     196:	6c 83       	std	Y+4, r22	; 0x04
    uint8_t au8_ERROR_STAT=UART_SUCCESS;//ERRROR STAT HAS A SUCCESS VALUE AS DEFAULT
     198:	1a 82       	std	Y+2, r1	; 0x02
    if(NULL_PTR==TxString){//CHECK IF THE POINTER IS NOT = NULL
     19a:	8c 81       	ldd	r24, Y+4	; 0x04
     19c:	9d 81       	ldd	r25, Y+5	; 0x05
     19e:	00 97       	sbiw	r24, 0x00	; 0
     1a0:	19 f4       	brne	.+6      	; 0x1a8 <UART_TransmitString+0x24>
        au8_ERROR_STAT=UART_NULL_POINTER;//IF IT IS NULL POINTER STORE NULL POINTERR TO THE ERROR STAT
     1a2:	8d ef       	ldi	r24, 0xFD	; 253
     1a4:	8a 83       	std	Y+2, r24	; 0x02
     1a6:	39 c0       	rjmp	.+114    	; 0x21a <UART_TransmitString+0x96>
    }
    else{
        if (UartNumber>UART_1){//CHECK IF USER ENTERED RIGHT UART CHANNEL
     1a8:	8b 81       	ldd	r24, Y+3	; 0x03
     1aa:	88 23       	and	r24, r24
     1ac:	19 f0       	breq	.+6      	; 0x1b4 <UART_TransmitString+0x30>
            au8_ERROR_STAT=UART_INVALID_CHANNEL;
     1ae:	8c ef       	ldi	r24, 0xFC	; 252
     1b0:	8a 83       	std	Y+2, r24	; 0x02
     1b2:	33 c0       	rjmp	.+102    	; 0x21a <UART_TransmitString+0x96>
        }
        else{
            if(NOT_INIT==gu8_InitFlag){
     1b4:	80 91 68 00 	lds	r24, 0x0068
     1b8:	88 23       	and	r24, r24
     1ba:	19 f4       	brne	.+6      	; 0x1c2 <UART_TransmitString+0x3e>
                au8_ERROR_STAT=UART_NOT_INIT;
     1bc:	8e ef       	ldi	r24, 0xFE	; 254
     1be:	8a 83       	std	Y+2, r24	; 0x02
     1c0:	2c c0       	rjmp	.+88     	; 0x21a <UART_TransmitString+0x96>
            }
            else if (INIT==gu8_InitFlag){//CHECK IF THE UART HAS BEEN INITIALIZED
     1c2:	80 91 68 00 	lds	r24, 0x0068
     1c6:	81 30       	cpi	r24, 0x01	; 1
     1c8:	41 f5       	brne	.+80     	; 0x21a <UART_TransmitString+0x96>
            uint8_t au8_counter = 0;
     1ca:	19 82       	std	Y+1, r1	; 0x01
     1cc:	1b c0       	rjmp	.+54     	; 0x204 <UART_TransmitString+0x80>
            while ((*(TxString + au8_counter)) != NULL_TERMINATOR) {
                UDR = *(TxString + au8_counter);//TxString[au8_counter]
     1ce:	ac e2       	ldi	r26, 0x2C	; 44
     1d0:	b0 e0       	ldi	r27, 0x00	; 0
     1d2:	89 81       	ldd	r24, Y+1	; 0x01
     1d4:	28 2f       	mov	r18, r24
     1d6:	30 e0       	ldi	r19, 0x00	; 0
     1d8:	8c 81       	ldd	r24, Y+4	; 0x04
     1da:	9d 81       	ldd	r25, Y+5	; 0x05
     1dc:	fc 01       	movw	r30, r24
     1de:	e2 0f       	add	r30, r18
     1e0:	f3 1f       	adc	r31, r19
     1e2:	80 81       	ld	r24, Z
     1e4:	8c 93       	st	X, r24
                while ((Get_Bit(UCSRA, UDRE)) != 1) ;
     1e6:	eb e2       	ldi	r30, 0x2B	; 43
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	80 81       	ld	r24, Z
     1ec:	82 95       	swap	r24
     1ee:	86 95       	lsr	r24
     1f0:	87 70       	andi	r24, 0x07	; 7
     1f2:	88 2f       	mov	r24, r24
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	81 70       	andi	r24, 0x01	; 1
     1f8:	90 70       	andi	r25, 0x00	; 0
     1fa:	00 97       	sbiw	r24, 0x00	; 0
     1fc:	a1 f3       	breq	.-24     	; 0x1e6 <UART_TransmitString+0x62>
                au8_counter++;
     1fe:	89 81       	ldd	r24, Y+1	; 0x01
     200:	8f 5f       	subi	r24, 0xFF	; 255
     202:	89 83       	std	Y+1, r24	; 0x01
            if(NOT_INIT==gu8_InitFlag){
                au8_ERROR_STAT=UART_NOT_INIT;
            }
            else if (INIT==gu8_InitFlag){//CHECK IF THE UART HAS BEEN INITIALIZED
            uint8_t au8_counter = 0;
            while ((*(TxString + au8_counter)) != NULL_TERMINATOR) {
     204:	89 81       	ldd	r24, Y+1	; 0x01
     206:	28 2f       	mov	r18, r24
     208:	30 e0       	ldi	r19, 0x00	; 0
     20a:	8c 81       	ldd	r24, Y+4	; 0x04
     20c:	9d 81       	ldd	r25, Y+5	; 0x05
     20e:	fc 01       	movw	r30, r24
     210:	e2 0f       	add	r30, r18
     212:	f3 1f       	adc	r31, r19
     214:	80 81       	ld	r24, Z
     216:	88 23       	and	r24, r24
     218:	d1 f6       	brne	.-76     	; 0x1ce <UART_TransmitString+0x4a>
            else{
                //DO NOTHING
            }
        }
    }
	return au8_ERROR_STAT;
     21a:	8a 81       	ldd	r24, Y+2	; 0x02
}
     21c:	0f 90       	pop	r0
     21e:	0f 90       	pop	r0
     220:	0f 90       	pop	r0
     222:	0f 90       	pop	r0
     224:	0f 90       	pop	r0
     226:	cf 91       	pop	r28
     228:	df 91       	pop	r29
     22a:	08 95       	ret

0000022c <UART_ReceiveChar>:
UART_ERROR_state_t UART_ReceiveChar(uint8_t UartNumber, ptr_uint8_t RxChar) {
     22c:	df 93       	push	r29
     22e:	cf 93       	push	r28
     230:	00 d0       	rcall	.+0      	; 0x232 <UART_ReceiveChar+0x6>
     232:	00 d0       	rcall	.+0      	; 0x234 <UART_ReceiveChar+0x8>
     234:	cd b7       	in	r28, 0x3d	; 61
     236:	de b7       	in	r29, 0x3e	; 62
     238:	8a 83       	std	Y+2, r24	; 0x02
     23a:	7c 83       	std	Y+4, r23	; 0x04
     23c:	6b 83       	std	Y+3, r22	; 0x03
    uint8_t au8_ERROR_STAT=UART_SUCCESS;//ERRROR STAT HAS A SUCCESS VALUE AS DEFAULT
     23e:	19 82       	std	Y+1, r1	; 0x01
    if(NULL_PTR==RxChar){//CHECK IF THE POINTER IS NOT = NULL
     240:	8b 81       	ldd	r24, Y+3	; 0x03
     242:	9c 81       	ldd	r25, Y+4	; 0x04
     244:	00 97       	sbiw	r24, 0x00	; 0
     246:	19 f4       	brne	.+6      	; 0x24e <UART_ReceiveChar+0x22>
        au8_ERROR_STAT=UART_NULL_POINTER;
     248:	8d ef       	ldi	r24, 0xFD	; 253
     24a:	89 83       	std	Y+1, r24	; 0x01
     24c:	1c c0       	rjmp	.+56     	; 0x286 <UART_ReceiveChar+0x5a>
    }
    else{
        if (UartNumber>UART_1){//CHECK IF USER ENTERED RIGHT UART CHANNEL
     24e:	8a 81       	ldd	r24, Y+2	; 0x02
     250:	88 23       	and	r24, r24
     252:	19 f0       	breq	.+6      	; 0x25a <UART_ReceiveChar+0x2e>
            au8_ERROR_STAT=UART_INVALID_CHANNEL;
     254:	8c ef       	ldi	r24, 0xFC	; 252
     256:	89 83       	std	Y+1, r24	; 0x01
     258:	16 c0       	rjmp	.+44     	; 0x286 <UART_ReceiveChar+0x5a>
        }//if
        else{
            if(NOT_INIT==gu8_InitFlag){//CHECK IF THE UART HAS BEEN INITIALIZED
     25a:	80 91 68 00 	lds	r24, 0x0068
     25e:	88 23       	and	r24, r24
     260:	19 f4       	brne	.+6      	; 0x268 <UART_ReceiveChar+0x3c>
                au8_ERROR_STAT=UART_NOT_INIT;
     262:	8e ef       	ldi	r24, 0xFE	; 254
     264:	89 83       	std	Y+1, r24	; 0x01
     266:	0f c0       	rjmp	.+30     	; 0x286 <UART_ReceiveChar+0x5a>
            }//if
            else if (INIT==gu8_InitFlag){
     268:	80 91 68 00 	lds	r24, 0x0068
     26c:	81 30       	cpi	r24, 0x01	; 1
     26e:	59 f4       	brne	.+22     	; 0x286 <UART_ReceiveChar+0x5a>
            while ( !(UCSRA & (1<<RXC)) );//WAIT FOR THE FLAG
     270:	eb e2       	ldi	r30, 0x2B	; 43
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	80 81       	ld	r24, Z
     276:	88 23       	and	r24, r24
     278:	dc f7       	brge	.-10     	; 0x270 <UART_ReceiveChar+0x44>
            *(RxChar) = (uint8_t)UDR;//STORE DATA CAME BY UART
     27a:	ec e2       	ldi	r30, 0x2C	; 44
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	80 81       	ld	r24, Z
     280:	eb 81       	ldd	r30, Y+3	; 0x03
     282:	fc 81       	ldd	r31, Y+4	; 0x04
     284:	80 83       	st	Z, r24
            else{
                //DO NOTHING
            }//else
        }//else
    }
	return au8_ERROR_STAT;
     286:	89 81       	ldd	r24, Y+1	; 0x01
}
     288:	0f 90       	pop	r0
     28a:	0f 90       	pop	r0
     28c:	0f 90       	pop	r0
     28e:	0f 90       	pop	r0
     290:	cf 91       	pop	r28
     292:	df 91       	pop	r29
     294:	08 95       	ret

00000296 <UART_ReceiveString>:
UART_ERROR_state_t UART_ReceiveString(uint8_t UartNumber, ptr_uint8_t RxString) {
     296:	df 93       	push	r29
     298:	cf 93       	push	r28
     29a:	00 d0       	rcall	.+0      	; 0x29c <UART_ReceiveString+0x6>
     29c:	00 d0       	rcall	.+0      	; 0x29e <UART_ReceiveString+0x8>
     29e:	0f 92       	push	r0
     2a0:	cd b7       	in	r28, 0x3d	; 61
     2a2:	de b7       	in	r29, 0x3e	; 62
     2a4:	8b 83       	std	Y+3, r24	; 0x03
     2a6:	7d 83       	std	Y+5, r23	; 0x05
     2a8:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t au8_ERROR_STAT = UART_SUCCESS; //ERRROR STAT HAS A SUCCESS VALUE AS DEFAULT
     2aa:	1a 82       	std	Y+2, r1	; 0x02
	if (NULL_PTR == RxString) {//CHECK IF THE POINTER IS NOT = NULL
     2ac:	8c 81       	ldd	r24, Y+4	; 0x04
     2ae:	9d 81       	ldd	r25, Y+5	; 0x05
     2b0:	00 97       	sbiw	r24, 0x00	; 0
     2b2:	19 f4       	brne	.+6      	; 0x2ba <UART_ReceiveString+0x24>
		au8_ERROR_STAT = UART_NULL_POINTER;
     2b4:	8d ef       	ldi	r24, 0xFD	; 253
     2b6:	8a 83       	std	Y+2, r24	; 0x02
     2b8:	61 c0       	rjmp	.+194    	; 0x37c <UART_ReceiveString+0xe6>
	} else {
		if (UartNumber > UART_1) {//CHECK IF USER ENTERED RIGHT UART CHANNEL
     2ba:	8b 81       	ldd	r24, Y+3	; 0x03
     2bc:	88 23       	and	r24, r24
     2be:	19 f0       	breq	.+6      	; 0x2c6 <UART_ReceiveString+0x30>
			au8_ERROR_STAT = UART_INVALID_CHANNEL;
     2c0:	8c ef       	ldi	r24, 0xFC	; 252
     2c2:	8a 83       	std	Y+2, r24	; 0x02
     2c4:	5b c0       	rjmp	.+182    	; 0x37c <UART_ReceiveString+0xe6>
		} else {
			if (NOT_INIT == gu8_InitFlag) {//CHECK IF THE UART HAS BEEN INITIALIZED
     2c6:	80 91 68 00 	lds	r24, 0x0068
     2ca:	88 23       	and	r24, r24
     2cc:	19 f4       	brne	.+6      	; 0x2d4 <UART_ReceiveString+0x3e>
				au8_ERROR_STAT = UART_NOT_INIT;
     2ce:	8e ef       	ldi	r24, 0xFE	; 254
     2d0:	8a 83       	std	Y+2, r24	; 0x02
     2d2:	54 c0       	rjmp	.+168    	; 0x37c <UART_ReceiveString+0xe6>
			} //if
			else {
				uint8_t au8_counter = 0;//THIS COUNTER FOR THE ARRAY INDEX
     2d4:	19 82       	std	Y+1, r1	; 0x01
				while (1) {
					while (!(UCSRA & (1 << RXC )));//WAIT FOR THE FLAG
     2d6:	eb e2       	ldi	r30, 0x2B	; 43
     2d8:	f0 e0       	ldi	r31, 0x00	; 0
     2da:	80 81       	ld	r24, Z
     2dc:	88 23       	and	r24, r24
     2de:	dc f7       	brge	.-10     	; 0x2d6 <UART_ReceiveString+0x40>
					RxString[au8_counter] = UDR;//STORE DATA IN THE ARRAY
     2e0:	89 81       	ldd	r24, Y+1	; 0x01
     2e2:	28 2f       	mov	r18, r24
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	8c 81       	ldd	r24, Y+4	; 0x04
     2e8:	9d 81       	ldd	r25, Y+5	; 0x05
     2ea:	dc 01       	movw	r26, r24
     2ec:	a2 0f       	add	r26, r18
     2ee:	b3 1f       	adc	r27, r19
     2f0:	ec e2       	ldi	r30, 0x2C	; 44
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	80 81       	ld	r24, Z
     2f6:	8c 93       	st	X, r24
					if (RxString[au8_counter] == (NEW_LINE)) {//CHECK IF THE USER ENTERED NEW LINE CHAR '\r'
     2f8:	89 81       	ldd	r24, Y+1	; 0x01
     2fa:	28 2f       	mov	r18, r24
     2fc:	30 e0       	ldi	r19, 0x00	; 0
     2fe:	8c 81       	ldd	r24, Y+4	; 0x04
     300:	9d 81       	ldd	r25, Y+5	; 0x05
     302:	fc 01       	movw	r30, r24
     304:	e2 0f       	add	r30, r18
     306:	f3 1f       	adc	r31, r19
     308:	80 81       	ld	r24, Z
     30a:	8d 30       	cpi	r24, 0x0D	; 13
     30c:	51 f4       	brne	.+20     	; 0x322 <UART_ReceiveString+0x8c>
						RxString[au8_counter] = NULL_TERMINATOR;//REPLACE THE NEW LINE CHAR WITH NULL TERMINATOR
     30e:	89 81       	ldd	r24, Y+1	; 0x01
     310:	28 2f       	mov	r18, r24
     312:	30 e0       	ldi	r19, 0x00	; 0
     314:	8c 81       	ldd	r24, Y+4	; 0x04
     316:	9d 81       	ldd	r25, Y+5	; 0x05
     318:	fc 01       	movw	r30, r24
     31a:	e2 0f       	add	r30, r18
     31c:	f3 1f       	adc	r31, r19
     31e:	10 82       	st	Z, r1
     320:	2d c0       	rjmp	.+90     	; 0x37c <UART_ReceiveString+0xe6>
						break;//BREAK FROM THE WHILE(1)
					}
					au8_counter++;//GO TO THE NEXT PLACE IN THE ARRAY
     322:	89 81       	ldd	r24, Y+1	; 0x01
     324:	8f 5f       	subi	r24, 0xFF	; 255
     326:	89 83       	std	Y+1, r24	; 0x01
					if ((RxString[au8_counter - 1] == (BACKSPACE)) && au8_counter > 1) {//CHECK IF USER ENTERED BACK SPACE AND IT IS NOT THE FIRST PLACE IN THE ARRAY
     328:	89 81       	ldd	r24, Y+1	; 0x01
     32a:	88 2f       	mov	r24, r24
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	9c 01       	movw	r18, r24
     330:	21 50       	subi	r18, 0x01	; 1
     332:	30 40       	sbci	r19, 0x00	; 0
     334:	8c 81       	ldd	r24, Y+4	; 0x04
     336:	9d 81       	ldd	r25, Y+5	; 0x05
     338:	fc 01       	movw	r30, r24
     33a:	e2 0f       	add	r30, r18
     33c:	f3 1f       	adc	r31, r19
     33e:	80 81       	ld	r24, Z
     340:	88 30       	cpi	r24, 0x08	; 8
     342:	39 f4       	brne	.+14     	; 0x352 <UART_ReceiveString+0xbc>
     344:	89 81       	ldd	r24, Y+1	; 0x01
     346:	82 30       	cpi	r24, 0x02	; 2
     348:	20 f0       	brcs	.+8      	; 0x352 <UART_ReceiveString+0xbc>
						au8_counter = au8_counter - 2;
     34a:	89 81       	ldd	r24, Y+1	; 0x01
     34c:	82 50       	subi	r24, 0x02	; 2
     34e:	89 83       	std	Y+1, r24	; 0x01
     350:	c2 cf       	rjmp	.-124    	; 0x2d6 <UART_ReceiveString+0x40>
					} else if ((RxString[au8_counter - 1] == (BACKSPACE))//CHECK IF USER ENTERED BACK SPACE AND IT IS THE FIRST PLACE IN THE ARRAY
     352:	89 81       	ldd	r24, Y+1	; 0x01
     354:	88 2f       	mov	r24, r24
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	9c 01       	movw	r18, r24
     35a:	21 50       	subi	r18, 0x01	; 1
     35c:	30 40       	sbci	r19, 0x00	; 0
     35e:	8c 81       	ldd	r24, Y+4	; 0x04
     360:	9d 81       	ldd	r25, Y+5	; 0x05
     362:	fc 01       	movw	r30, r24
     364:	e2 0f       	add	r30, r18
     366:	f3 1f       	adc	r31, r19
     368:	80 81       	ld	r24, Z
     36a:	88 30       	cpi	r24, 0x08	; 8
     36c:	09 f0       	breq	.+2      	; 0x370 <UART_ReceiveString+0xda>
     36e:	b3 cf       	rjmp	.-154    	; 0x2d6 <UART_ReceiveString+0x40>
     370:	89 81       	ldd	r24, Y+1	; 0x01
     372:	82 30       	cpi	r24, 0x02	; 2
     374:	08 f0       	brcs	.+2      	; 0x378 <UART_ReceiveString+0xe2>
     376:	af cf       	rjmp	.-162    	; 0x2d6 <UART_ReceiveString+0x40>
							&& au8_counter <= 1) {
						au8_counter = 0;//RETURN TO THE FIRST PLACE
     378:	19 82       	std	Y+1, r1	; 0x01
     37a:	ad cf       	rjmp	.-166    	; 0x2d6 <UART_ReceiveString+0x40>
					}//ELSE
				}//WHILE
			}//ELSE
		}//ELSE
	}//ELSE
	return au8_ERROR_STAT;//RETURN THE ERROR STAT
     37c:	8a 81       	ldd	r24, Y+2	; 0x02
}
     37e:	0f 90       	pop	r0
     380:	0f 90       	pop	r0
     382:	0f 90       	pop	r0
     384:	0f 90       	pop	r0
     386:	0f 90       	pop	r0
     388:	cf 91       	pop	r28
     38a:	df 91       	pop	r29
     38c:	08 95       	ret

0000038e <UART_EnableInterrupt>:
/*THIS API ENABLE CHOSEN INTERRUPT*/
UART_ERROR_state_t UART_EnableInterrupt(uint8_t UartNumber, uint8_t UartInterruptType) {
     38e:	df 93       	push	r29
     390:	cf 93       	push	r28
     392:	00 d0       	rcall	.+0      	; 0x394 <UART_EnableInterrupt+0x6>
     394:	00 d0       	rcall	.+0      	; 0x396 <UART_EnableInterrupt+0x8>
     396:	0f 92       	push	r0
     398:	cd b7       	in	r28, 0x3d	; 61
     39a:	de b7       	in	r29, 0x3e	; 62
     39c:	8a 83       	std	Y+2, r24	; 0x02
     39e:	6b 83       	std	Y+3, r22	; 0x03
    uint8_t au8_ERROR_STAT=UART_SUCCESS;//ERRROR STAT HAS A SUCCESS VALUE AS DEFAULT
     3a0:	19 82       	std	Y+1, r1	; 0x01
	if(NOT_INIT==gu8_InitFlag){//CHECK IF THE UART HAS BEEN INITIALIZED
     3a2:	80 91 68 00 	lds	r24, 0x0068
     3a6:	88 23       	and	r24, r24
     3a8:	19 f4       	brne	.+6      	; 0x3b0 <UART_EnableInterrupt+0x22>
		au8_ERROR_STAT=UART_NOT_INIT;
     3aa:	8e ef       	ldi	r24, 0xFE	; 254
     3ac:	89 83       	std	Y+1, r24	; 0x01
     3ae:	39 c0       	rjmp	.+114    	; 0x422 <UART_EnableInterrupt+0x94>
	}
	else if (INIT==gu8_InitFlag){
     3b0:	80 91 68 00 	lds	r24, 0x0068
     3b4:	81 30       	cpi	r24, 0x01	; 1
     3b6:	a9 f5       	brne	.+106    	; 0x422 <UART_EnableInterrupt+0x94>
        switch (UartNumber) {
     3b8:	8a 81       	ldd	r24, Y+2	; 0x02
     3ba:	88 2f       	mov	r24, r24
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	00 97       	sbiw	r24, 0x00	; 0
     3c0:	71 f5       	brne	.+92     	; 0x41e <UART_EnableInterrupt+0x90>
        case UART_1 :
            switch (UartInterruptType) {
     3c2:	8b 81       	ldd	r24, Y+3	; 0x03
     3c4:	28 2f       	mov	r18, r24
     3c6:	30 e0       	ldi	r19, 0x00	; 0
     3c8:	3d 83       	std	Y+5, r19	; 0x05
     3ca:	2c 83       	std	Y+4, r18	; 0x04
     3cc:	8c 81       	ldd	r24, Y+4	; 0x04
     3ce:	9d 81       	ldd	r25, Y+5	; 0x05
     3d0:	81 30       	cpi	r24, 0x01	; 1
     3d2:	91 05       	cpc	r25, r1
     3d4:	89 f0       	breq	.+34     	; 0x3f8 <UART_EnableInterrupt+0x6a>
     3d6:	2c 81       	ldd	r18, Y+4	; 0x04
     3d8:	3d 81       	ldd	r19, Y+5	; 0x05
     3da:	22 30       	cpi	r18, 0x02	; 2
     3dc:	31 05       	cpc	r19, r1
     3de:	a1 f0       	breq	.+40     	; 0x408 <UART_EnableInterrupt+0x7a>
     3e0:	8c 81       	ldd	r24, Y+4	; 0x04
     3e2:	9d 81       	ldd	r25, Y+5	; 0x05
     3e4:	00 97       	sbiw	r24, 0x00	; 0
     3e6:	c1 f4       	brne	.+48     	; 0x418 <UART_EnableInterrupt+0x8a>
            case RECIVE_INT :
                Set_Bit(UCSRB, RXCIE);
     3e8:	aa e2       	ldi	r26, 0x2A	; 42
     3ea:	b0 e0       	ldi	r27, 0x00	; 0
     3ec:	ea e2       	ldi	r30, 0x2A	; 42
     3ee:	f0 e0       	ldi	r31, 0x00	; 0
     3f0:	80 81       	ld	r24, Z
     3f2:	80 68       	ori	r24, 0x80	; 128
     3f4:	8c 93       	st	X, r24
     3f6:	15 c0       	rjmp	.+42     	; 0x422 <UART_EnableInterrupt+0x94>
                break;
            case TRANSMIT_INT :
                Set_Bit(UCSRB, TXCIE);
     3f8:	aa e2       	ldi	r26, 0x2A	; 42
     3fa:	b0 e0       	ldi	r27, 0x00	; 0
     3fc:	ea e2       	ldi	r30, 0x2A	; 42
     3fe:	f0 e0       	ldi	r31, 0x00	; 0
     400:	80 81       	ld	r24, Z
     402:	80 64       	ori	r24, 0x40	; 64
     404:	8c 93       	st	X, r24
     406:	0d c0       	rjmp	.+26     	; 0x422 <UART_EnableInterrupt+0x94>
                break;
            case EMPTY_BUFFERR_INT :
                Set_Bit(UCSRB, UDRIE);
     408:	aa e2       	ldi	r26, 0x2A	; 42
     40a:	b0 e0       	ldi	r27, 0x00	; 0
     40c:	ea e2       	ldi	r30, 0x2A	; 42
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	80 81       	ld	r24, Z
     412:	80 62       	ori	r24, 0x20	; 32
     414:	8c 93       	st	X, r24
     416:	05 c0       	rjmp	.+10     	; 0x422 <UART_EnableInterrupt+0x94>
                break;
            default:
                au8_ERROR_STAT=UART_INTERRUPT_CHANNEL;//THIS HAPPENS WHEN USER ENTER WRONG INTRRUPT TYPE
     418:	8b ef       	ldi	r24, 0xFB	; 251
     41a:	89 83       	std	Y+1, r24	; 0x01
     41c:	02 c0       	rjmp	.+4      	; 0x422 <UART_EnableInterrupt+0x94>
                break;
            }//switch
            break;
        default:
            au8_ERROR_STAT=UART_INVALID_CHANNEL;//THIS HAPPENS WHEN USER ENTER WRONG UART CHANNEL
     41e:	8c ef       	ldi	r24, 0xFC	; 252
     420:	89 83       	std	Y+1, r24	; 0x01
        }//switch
	}//else if
	else{
        //DO NOTHING
	}
	return au8_ERROR_STAT;
     422:	89 81       	ldd	r24, Y+1	; 0x01
}
     424:	0f 90       	pop	r0
     426:	0f 90       	pop	r0
     428:	0f 90       	pop	r0
     42a:	0f 90       	pop	r0
     42c:	0f 90       	pop	r0
     42e:	cf 91       	pop	r28
     430:	df 91       	pop	r29
     432:	08 95       	ret

00000434 <UART_DisableInterrupt>:
/*THIS API DISABLE CHOSEN INTERRUPT*/
UART_ERROR_state_t UART_DisableInterrupt(uint8_t UartNumber, uint8_t UartInterruptType) {
     434:	df 93       	push	r29
     436:	cf 93       	push	r28
     438:	00 d0       	rcall	.+0      	; 0x43a <UART_DisableInterrupt+0x6>
     43a:	00 d0       	rcall	.+0      	; 0x43c <UART_DisableInterrupt+0x8>
     43c:	0f 92       	push	r0
     43e:	cd b7       	in	r28, 0x3d	; 61
     440:	de b7       	in	r29, 0x3e	; 62
     442:	8a 83       	std	Y+2, r24	; 0x02
     444:	6b 83       	std	Y+3, r22	; 0x03
    uint8_t au8_ERROR_STAT=UART_SUCCESS;//ERRROR STAT HAS A SUCCESS VALUE AS DEFAULT
     446:	19 82       	std	Y+1, r1	; 0x01
	if(NOT_INIT==gu8_InitFlag){
     448:	80 91 68 00 	lds	r24, 0x0068
     44c:	88 23       	and	r24, r24
     44e:	19 f4       	brne	.+6      	; 0x456 <UART_DisableInterrupt+0x22>
		au8_ERROR_STAT=UART_NOT_INIT;
     450:	8e ef       	ldi	r24, 0xFE	; 254
     452:	89 83       	std	Y+1, r24	; 0x01
     454:	39 c0       	rjmp	.+114    	; 0x4c8 <__stack+0x69>
	}
	else if (INIT==gu8_InitFlag){
     456:	80 91 68 00 	lds	r24, 0x0068
     45a:	81 30       	cpi	r24, 0x01	; 1
     45c:	a9 f5       	brne	.+106    	; 0x4c8 <__stack+0x69>
        switch (UartNumber) {
     45e:	8a 81       	ldd	r24, Y+2	; 0x02
     460:	88 2f       	mov	r24, r24
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	00 97       	sbiw	r24, 0x00	; 0
     466:	71 f5       	brne	.+92     	; 0x4c4 <__stack+0x65>
        case UART_1 :
            switch (UartInterruptType) {
     468:	8b 81       	ldd	r24, Y+3	; 0x03
     46a:	28 2f       	mov	r18, r24
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	3d 83       	std	Y+5, r19	; 0x05
     470:	2c 83       	std	Y+4, r18	; 0x04
     472:	8c 81       	ldd	r24, Y+4	; 0x04
     474:	9d 81       	ldd	r25, Y+5	; 0x05
     476:	81 30       	cpi	r24, 0x01	; 1
     478:	91 05       	cpc	r25, r1
     47a:	89 f0       	breq	.+34     	; 0x49e <__stack+0x3f>
     47c:	2c 81       	ldd	r18, Y+4	; 0x04
     47e:	3d 81       	ldd	r19, Y+5	; 0x05
     480:	22 30       	cpi	r18, 0x02	; 2
     482:	31 05       	cpc	r19, r1
     484:	a1 f0       	breq	.+40     	; 0x4ae <__stack+0x4f>
     486:	8c 81       	ldd	r24, Y+4	; 0x04
     488:	9d 81       	ldd	r25, Y+5	; 0x05
     48a:	00 97       	sbiw	r24, 0x00	; 0
     48c:	c1 f4       	brne	.+48     	; 0x4be <__stack+0x5f>
            case RECIVE_INT :
                Clr_Bit(UCSRB, RXCIE);
     48e:	aa e2       	ldi	r26, 0x2A	; 42
     490:	b0 e0       	ldi	r27, 0x00	; 0
     492:	ea e2       	ldi	r30, 0x2A	; 42
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	80 81       	ld	r24, Z
     498:	8f 77       	andi	r24, 0x7F	; 127
     49a:	8c 93       	st	X, r24
     49c:	15 c0       	rjmp	.+42     	; 0x4c8 <__stack+0x69>
                break;
            case TRANSMIT_INT :
                Clr_Bit(UCSRB, TXCIE);
     49e:	aa e2       	ldi	r26, 0x2A	; 42
     4a0:	b0 e0       	ldi	r27, 0x00	; 0
     4a2:	ea e2       	ldi	r30, 0x2A	; 42
     4a4:	f0 e0       	ldi	r31, 0x00	; 0
     4a6:	80 81       	ld	r24, Z
     4a8:	8f 7b       	andi	r24, 0xBF	; 191
     4aa:	8c 93       	st	X, r24
     4ac:	0d c0       	rjmp	.+26     	; 0x4c8 <__stack+0x69>
                break;
            case EMPTY_BUFFERR_INT :
                Clr_Bit(UCSRB, UDRIE);
     4ae:	aa e2       	ldi	r26, 0x2A	; 42
     4b0:	b0 e0       	ldi	r27, 0x00	; 0
     4b2:	ea e2       	ldi	r30, 0x2A	; 42
     4b4:	f0 e0       	ldi	r31, 0x00	; 0
     4b6:	80 81       	ld	r24, Z
     4b8:	8f 7d       	andi	r24, 0xDF	; 223
     4ba:	8c 93       	st	X, r24
     4bc:	05 c0       	rjmp	.+10     	; 0x4c8 <__stack+0x69>
                break;
            default:
                au8_ERROR_STAT=UART_INTERRUPT_CHANNEL;
     4be:	8b ef       	ldi	r24, 0xFB	; 251
     4c0:	89 83       	std	Y+1, r24	; 0x01
     4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <__stack+0x69>
                break;
            }
            break;
        default:
            au8_ERROR_STAT=UART_INVALID_CHANNEL;
     4c4:	8c ef       	ldi	r24, 0xFC	; 252
     4c6:	89 83       	std	Y+1, r24	; 0x01
        }//switch
	}
	else{
        //DO NOTHING
	}
	return au8_ERROR_STAT;
     4c8:	89 81       	ldd	r24, Y+1	; 0x01
}
     4ca:	0f 90       	pop	r0
     4cc:	0f 90       	pop	r0
     4ce:	0f 90       	pop	r0
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	cf 91       	pop	r28
     4d6:	df 91       	pop	r29
     4d8:	08 95       	ret

000004da <UART_SetCallback>:
UART_ERROR_state_t UART_SetCallback(uint8_t UartNumber,uint8_t UartInterruptType,Ptr_VoidFuncVoid_t Callback){
     4da:	df 93       	push	r29
     4dc:	cf 93       	push	r28
     4de:	cd b7       	in	r28, 0x3d	; 61
     4e0:	de b7       	in	r29, 0x3e	; 62
     4e2:	27 97       	sbiw	r28, 0x07	; 7
     4e4:	0f b6       	in	r0, 0x3f	; 63
     4e6:	f8 94       	cli
     4e8:	de bf       	out	0x3e, r29	; 62
     4ea:	0f be       	out	0x3f, r0	; 63
     4ec:	cd bf       	out	0x3d, r28	; 61
     4ee:	8a 83       	std	Y+2, r24	; 0x02
     4f0:	6b 83       	std	Y+3, r22	; 0x03
     4f2:	5d 83       	std	Y+5, r21	; 0x05
     4f4:	4c 83       	std	Y+4, r20	; 0x04
    uint8_t au8_ERROR_STAT=UART_SUCCESS;//ERRROR STAT HAS A SUCCESS VALUE AS DEFAULT
     4f6:	19 82       	std	Y+1, r1	; 0x01
    if(NULL_PTR==Callback){
     4f8:	8c 81       	ldd	r24, Y+4	; 0x04
     4fa:	9d 81       	ldd	r25, Y+5	; 0x05
     4fc:	00 97       	sbiw	r24, 0x00	; 0
     4fe:	19 f4       	brne	.+6      	; 0x506 <UART_SetCallback+0x2c>
        au8_ERROR_STAT=UART_NULL_POINTER;
     500:	8d ef       	ldi	r24, 0xFD	; 253
     502:	89 83       	std	Y+1, r24	; 0x01
     504:	3d c0       	rjmp	.+122    	; 0x580 <UART_SetCallback+0xa6>
    }//if
    else{
        if(NOT_INIT==gu8_InitFlag){
     506:	80 91 68 00 	lds	r24, 0x0068
     50a:	88 23       	and	r24, r24
     50c:	19 f4       	brne	.+6      	; 0x514 <UART_SetCallback+0x3a>
            au8_ERROR_STAT=UART_NOT_INIT;
     50e:	8e ef       	ldi	r24, 0xFE	; 254
     510:	89 83       	std	Y+1, r24	; 0x01
     512:	36 c0       	rjmp	.+108    	; 0x580 <UART_SetCallback+0xa6>
        }//if
        else if (INIT==gu8_InitFlag){
     514:	80 91 68 00 	lds	r24, 0x0068
     518:	81 30       	cpi	r24, 0x01	; 1
     51a:	91 f5       	brne	.+100    	; 0x580 <UART_SetCallback+0xa6>
            switch (UartNumber) {
     51c:	8a 81       	ldd	r24, Y+2	; 0x02
     51e:	88 2f       	mov	r24, r24
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	00 97       	sbiw	r24, 0x00	; 0
     524:	59 f5       	brne	.+86     	; 0x57c <UART_SetCallback+0xa2>
            case UART_1 :
                switch (UartInterruptType) {
     526:	8b 81       	ldd	r24, Y+3	; 0x03
     528:	28 2f       	mov	r18, r24
     52a:	30 e0       	ldi	r19, 0x00	; 0
     52c:	3f 83       	std	Y+7, r19	; 0x07
     52e:	2e 83       	std	Y+6, r18	; 0x06
     530:	8e 81       	ldd	r24, Y+6	; 0x06
     532:	9f 81       	ldd	r25, Y+7	; 0x07
     534:	81 30       	cpi	r24, 0x01	; 1
     536:	91 05       	cpc	r25, r1
     538:	81 f0       	breq	.+32     	; 0x55a <UART_SetCallback+0x80>
     53a:	2e 81       	ldd	r18, Y+6	; 0x06
     53c:	3f 81       	ldd	r19, Y+7	; 0x07
     53e:	22 30       	cpi	r18, 0x02	; 2
     540:	31 05       	cpc	r19, r1
     542:	91 f0       	breq	.+36     	; 0x568 <UART_SetCallback+0x8e>
     544:	8e 81       	ldd	r24, Y+6	; 0x06
     546:	9f 81       	ldd	r25, Y+7	; 0x07
     548:	00 97       	sbiw	r24, 0x00	; 0
     54a:	a9 f4       	brne	.+42     	; 0x576 <UART_SetCallback+0x9c>
                case RECIVE_INT :
                    Gptr_uartRxInt=Callback;
     54c:	8c 81       	ldd	r24, Y+4	; 0x04
     54e:	9d 81       	ldd	r25, Y+5	; 0x05
     550:	90 93 63 00 	sts	0x0063, r25
     554:	80 93 62 00 	sts	0x0062, r24
     558:	13 c0       	rjmp	.+38     	; 0x580 <UART_SetCallback+0xa6>
                    break;
                case TRANSMIT_INT :
                    Gptr_uartTxInt=Callback;
     55a:	8c 81       	ldd	r24, Y+4	; 0x04
     55c:	9d 81       	ldd	r25, Y+5	; 0x05
     55e:	90 93 67 00 	sts	0x0067, r25
     562:	80 93 66 00 	sts	0x0066, r24
     566:	0c c0       	rjmp	.+24     	; 0x580 <UART_SetCallback+0xa6>
                    break;
                case EMPTY_BUFFERR_INT :
                    Gptr_uartDataEmptyRegInt=Callback;
     568:	8c 81       	ldd	r24, Y+4	; 0x04
     56a:	9d 81       	ldd	r25, Y+5	; 0x05
     56c:	90 93 65 00 	sts	0x0065, r25
     570:	80 93 64 00 	sts	0x0064, r24
     574:	05 c0       	rjmp	.+10     	; 0x580 <UART_SetCallback+0xa6>
                    break;
                default:
                    au8_ERROR_STAT=UART_INTERRUPT_CHANNEL;
     576:	8b ef       	ldi	r24, 0xFB	; 251
     578:	89 83       	std	Y+1, r24	; 0x01
     57a:	02 c0       	rjmp	.+4      	; 0x580 <UART_SetCallback+0xa6>
                    break;
                }
                break;
            default:
                au8_ERROR_STAT=UART_INVALID_CHANNEL;
     57c:	8c ef       	ldi	r24, 0xFC	; 252
     57e:	89 83       	std	Y+1, r24	; 0x01
        }
        else{
            //DO NOTHING
        }
    }
    return au8_ERROR_STAT;
     580:	89 81       	ldd	r24, Y+1	; 0x01
}
     582:	27 96       	adiw	r28, 0x07	; 7
     584:	0f b6       	in	r0, 0x3f	; 63
     586:	f8 94       	cli
     588:	de bf       	out	0x3e, r29	; 62
     58a:	0f be       	out	0x3f, r0	; 63
     58c:	cd bf       	out	0x3d, r28	; 61
     58e:	cf 91       	pop	r28
     590:	df 91       	pop	r29
     592:	08 95       	ret

00000594 <TWI_SetSlaveAddress>:
#define SEND_START 0b00100000
#define SEND_ACK   0b01000000
#define CLR_FLAG   0b10000000

/*----APIs IMPLEMENTATION----*/
void TWI_SetSlaveAddress(void) {
     594:	df 93       	push	r29
     596:	cf 93       	push	r28
     598:	cd b7       	in	r28, 0x3d	; 61
     59a:	de b7       	in	r29, 0x3e	; 62

	TWI_Adress_REGISTER = (SlaveAddr << 1); //Shift the register left
     59c:	e2 e2       	ldi	r30, 0x22	; 34
     59e:	f0 e0       	ldi	r31, 0x00	; 0
     5a0:	88 e4       	ldi	r24, 0x48	; 72
     5a2:	80 83       	st	Z, r24

}
     5a4:	cf 91       	pop	r28
     5a6:	df 91       	pop	r29
     5a8:	08 95       	ret

000005aa <TWI_Init>:
TWI_ERROR_state_t TWI_Init(uint8_t I2C_CH) {
     5aa:	df 93       	push	r29
     5ac:	cf 93       	push	r28
     5ae:	00 d0       	rcall	.+0      	; 0x5b0 <TWI_Init+0x6>
     5b0:	cd b7       	in	r28, 0x3d	; 61
     5b2:	de b7       	in	r29, 0x3e	; 62
     5b4:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t au8_ERROR_STAT=TWI_SUCCESS;//ERRROR STAT HAS A SUCCESS VALUE AS DEFAULT
     5b6:	19 82       	std	Y+1, r1	; 0x01
    if (I2C_CH>TWI_1){
     5b8:	8a 81       	ldd	r24, Y+2	; 0x02
     5ba:	82 30       	cpi	r24, 0x02	; 2
     5bc:	18 f0       	brcs	.+6      	; 0x5c4 <TWI_Init+0x1a>
		au8_ERROR_STAT=TWI_INVALID_CHANNEL;
     5be:	8c ef       	ldi	r24, 0xFC	; 252
     5c0:	89 83       	std	Y+1, r24	; 0x01
     5c2:	29 c0       	rjmp	.+82     	; 0x616 <TWI_Init+0x6c>
	}
	else{
        if (INIT==gu8_InitFlag){
     5c4:	80 91 71 00 	lds	r24, 0x0071
     5c8:	81 30       	cpi	r24, 0x01	; 1
     5ca:	19 f4       	brne	.+6      	; 0x5d2 <TWI_Init+0x28>
            au8_ERROR_STAT=TWI_SEC_INIT;
     5cc:	8f ef       	ldi	r24, 0xFF	; 255
     5ce:	89 83       	std	Y+1, r24	; 0x01
     5d0:	22 c0       	rjmp	.+68     	; 0x616 <TWI_Init+0x6c>
        }
        else if (NOT_INIT==gu8_InitFlag){
     5d2:	80 91 71 00 	lds	r24, 0x0071
     5d6:	88 23       	and	r24, r24
     5d8:	f1 f4       	brne	.+60     	; 0x616 <TWI_Init+0x6c>
	/*-----SET ADDRESS IN CASE OF IT'S IN SLAVE MODE---- */
            TWI_SetSlaveAddress();
     5da:	0e 94 ca 02 	call	0x594	; 0x594 <TWI_SetSlaveAddress>
            /*-----SETTING THE FREQ-----*/
            TWI_Bit_Rate_REGISTER = Bit_rate;
     5de:	e0 e2       	ldi	r30, 0x20	; 32
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
     5e2:	8e e1       	ldi	r24, 0x1E	; 30
     5e4:	80 83       	st	Z, r24
            TWI_Status_REGISTER &= Prescaler;
     5e6:	a1 e2       	ldi	r26, 0x21	; 33
     5e8:	b0 e0       	ldi	r27, 0x00	; 0
     5ea:	e1 e2       	ldi	r30, 0x21	; 33
     5ec:	f0 e0       	ldi	r31, 0x00	; 0
     5ee:	80 81       	ld	r24, Z
     5f0:	8c 7f       	andi	r24, 0xFC	; 252
     5f2:	8c 93       	st	X, r24
            /*Initial Value for TWI_Control_REGISTER is zeros so I set only what I need and ignore the rest*/
            /*-----ENABLE ACKNOWLEDGE----*/
            Set_Bit(TWI_Control_REGISTER, TWEA);
     5f4:	a6 e5       	ldi	r26, 0x56	; 86
     5f6:	b0 e0       	ldi	r27, 0x00	; 0
     5f8:	e6 e5       	ldi	r30, 0x56	; 86
     5fa:	f0 e0       	ldi	r31, 0x00	; 0
     5fc:	80 81       	ld	r24, Z
     5fe:	80 64       	ori	r24, 0x40	; 64
     600:	8c 93       	st	X, r24
            /*-----ENABLE THE PREIPHERAL ITSELF-----*/
            Set_Bit(TWI_Control_REGISTER, TWEN);
     602:	a6 e5       	ldi	r26, 0x56	; 86
     604:	b0 e0       	ldi	r27, 0x00	; 0
     606:	e6 e5       	ldi	r30, 0x56	; 86
     608:	f0 e0       	ldi	r31, 0x00	; 0
     60a:	80 81       	ld	r24, Z
     60c:	84 60       	ori	r24, 0x04	; 4
     60e:	8c 93       	st	X, r24
            gu8_InitFlag = INIT;
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	80 93 71 00 	sts	0x0071, r24
        }
	}
	return au8_ERROR_STAT;
     616:	89 81       	ldd	r24, Y+1	; 0x01
}
     618:	0f 90       	pop	r0
     61a:	0f 90       	pop	r0
     61c:	cf 91       	pop	r28
     61e:	df 91       	pop	r29
     620:	08 95       	ret

00000622 <TWI_SendStartCondition>:
TWI_ERROR_state_t TWI_SendStartCondition(uint8_t I2C_CH) {
     622:	df 93       	push	r29
     624:	cf 93       	push	r28
     626:	00 d0       	rcall	.+0      	; 0x628 <TWI_SendStartCondition+0x6>
     628:	cd b7       	in	r28, 0x3d	; 61
     62a:	de b7       	in	r29, 0x3e	; 62
     62c:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t au8_ERROR_STAT=TWI_SUCCESS;//ERRROR STAT HAS A SUCCESS VALUE AS DEFAULT
     62e:	19 82       	std	Y+1, r1	; 0x01
    if (I2C_CH>TWI_1){
     630:	8a 81       	ldd	r24, Y+2	; 0x02
     632:	82 30       	cpi	r24, 0x02	; 2
     634:	18 f0       	brcs	.+6      	; 0x63c <TWI_SendStartCondition+0x1a>
		au8_ERROR_STAT=TWI_INVALID_CHANNEL;
     636:	8c ef       	ldi	r24, 0xFC	; 252
     638:	89 83       	std	Y+1, r24	; 0x01
     63a:	17 c0       	rjmp	.+46     	; 0x66a <TWI_SendStartCondition+0x48>
	}
	else{
        if(NOT_INIT==gu8_InitFlag){
     63c:	80 91 71 00 	lds	r24, 0x0071
     640:	88 23       	and	r24, r24
     642:	19 f4       	brne	.+6      	; 0x64a <TWI_SendStartCondition+0x28>
            au8_ERROR_STAT=TWI_NOT_INIT;
     644:	8e ef       	ldi	r24, 0xFE	; 254
     646:	89 83       	std	Y+1, r24	; 0x01
     648:	10 c0       	rjmp	.+32     	; 0x66a <TWI_SendStartCondition+0x48>
        }
        else if (INIT==gu8_InitFlag){
     64a:	80 91 71 00 	lds	r24, 0x0071
     64e:	81 30       	cpi	r24, 0x01	; 1
     650:	61 f4       	brne	.+24     	; 0x66a <TWI_SendStartCondition+0x48>
            TWI_Control_REGISTER = (EN_TWI | SEND_START | CLR_FLAG);
     652:	e6 e5       	ldi	r30, 0x56	; 86
     654:	f0 e0       	ldi	r31, 0x00	; 0
     656:	84 ea       	ldi	r24, 0xA4	; 164
     658:	80 83       	st	Z, r24
            while ((Get_Bit(TWI_Control_REGISTER, TWINT)) != 1)
     65a:	e6 e5       	ldi	r30, 0x56	; 86
     65c:	f0 e0       	ldi	r31, 0x00	; 0
     65e:	80 81       	ld	r24, Z
     660:	88 1f       	adc	r24, r24
     662:	88 27       	eor	r24, r24
     664:	88 1f       	adc	r24, r24
     666:	81 30       	cpi	r24, 0x01	; 1
     668:	c1 f7       	brne	.-16     	; 0x65a <TWI_SendStartCondition+0x38>
                ;/*Wait for TWINT Flag set.
		 This indicates that the START condition has been transmitted*/
        }
    }
		 return au8_ERROR_STAT;
     66a:	89 81       	ldd	r24, Y+1	; 0x01
}
     66c:	0f 90       	pop	r0
     66e:	0f 90       	pop	r0
     670:	cf 91       	pop	r28
     672:	df 91       	pop	r29
     674:	08 95       	ret

00000676 <TWI_SendStopCondition>:
TWI_ERROR_state_t TWI_SendStopCondition(uint8_t I2C_CH) {
     676:	df 93       	push	r29
     678:	cf 93       	push	r28
     67a:	00 d0       	rcall	.+0      	; 0x67c <TWI_SendStopCondition+0x6>
     67c:	cd b7       	in	r28, 0x3d	; 61
     67e:	de b7       	in	r29, 0x3e	; 62
     680:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t au8_ERROR_STAT=TWI_SUCCESS;//ERRROR STAT HAS A SUCCESS VALUE AS DEFAULT
     682:	19 82       	std	Y+1, r1	; 0x01
        if (I2C_CH>TWI_1){
     684:	8a 81       	ldd	r24, Y+2	; 0x02
     686:	82 30       	cpi	r24, 0x02	; 2
     688:	18 f0       	brcs	.+6      	; 0x690 <TWI_SendStopCondition+0x1a>
		au8_ERROR_STAT=TWI_INVALID_CHANNEL;
     68a:	8c ef       	ldi	r24, 0xFC	; 252
     68c:	89 83       	std	Y+1, r24	; 0x01
     68e:	0f c0       	rjmp	.+30     	; 0x6ae <TWI_SendStopCondition+0x38>
	}
	else{
        if(NOT_INIT==gu8_InitFlag){
     690:	80 91 71 00 	lds	r24, 0x0071
     694:	88 23       	and	r24, r24
     696:	19 f4       	brne	.+6      	; 0x69e <TWI_SendStopCondition+0x28>
            au8_ERROR_STAT=TWI_NOT_INIT;
     698:	8e ef       	ldi	r24, 0xFE	; 254
     69a:	89 83       	std	Y+1, r24	; 0x01
     69c:	08 c0       	rjmp	.+16     	; 0x6ae <TWI_SendStopCondition+0x38>
        }
        else if (INIT==gu8_InitFlag){
     69e:	80 91 71 00 	lds	r24, 0x0071
     6a2:	81 30       	cpi	r24, 0x01	; 1
     6a4:	21 f4       	brne	.+8      	; 0x6ae <TWI_SendStopCondition+0x38>
            TWI_Control_REGISTER = (EN_TWI | CLR_FLAG | SEND_STOP);
     6a6:	e6 e5       	ldi	r30, 0x56	; 86
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	84 e9       	ldi	r24, 0x94	; 148
     6ac:	80 83       	st	Z, r24
        }
	}
	return au8_ERROR_STAT;
     6ae:	89 81       	ldd	r24, Y+1	; 0x01
}
     6b0:	0f 90       	pop	r0
     6b2:	0f 90       	pop	r0
     6b4:	cf 91       	pop	r28
     6b6:	df 91       	pop	r29
     6b8:	08 95       	ret

000006ba <TWI_SendSLAWrite>:
TWI_ERROR_state_t TWI_SendSLAWrite(uint8_t I2C_CH, uint8_t SlvAdr) {
     6ba:	df 93       	push	r29
     6bc:	cf 93       	push	r28
     6be:	00 d0       	rcall	.+0      	; 0x6c0 <TWI_SendSLAWrite+0x6>
     6c0:	0f 92       	push	r0
     6c2:	cd b7       	in	r28, 0x3d	; 61
     6c4:	de b7       	in	r29, 0x3e	; 62
     6c6:	8a 83       	std	Y+2, r24	; 0x02
     6c8:	6b 83       	std	Y+3, r22	; 0x03
    uint8_t au8_ERROR_STAT=TWI_SUCCESS;//ERRROR STAT HAS A SUCCESS VALUE AS DEFAULT
     6ca:	19 82       	std	Y+1, r1	; 0x01
        if (I2C_CH>TWI_1){
     6cc:	8a 81       	ldd	r24, Y+2	; 0x02
     6ce:	82 30       	cpi	r24, 0x02	; 2
     6d0:	18 f0       	brcs	.+6      	; 0x6d8 <TWI_SendSLAWrite+0x1e>
		au8_ERROR_STAT=TWI_INVALID_CHANNEL;
     6d2:	8c ef       	ldi	r24, 0xFC	; 252
     6d4:	89 83       	std	Y+1, r24	; 0x01
     6d6:	19 c0       	rjmp	.+50     	; 0x70a <TWI_SendSLAWrite+0x50>
	}
	else{
        if(NOT_INIT==gu8_InitFlag){
     6d8:	80 91 71 00 	lds	r24, 0x0071
     6dc:	88 23       	and	r24, r24
     6de:	19 f4       	brne	.+6      	; 0x6e6 <TWI_SendSLAWrite+0x2c>
            au8_ERROR_STAT=TWI_NOT_INIT;
     6e0:	8e ef       	ldi	r24, 0xFE	; 254
     6e2:	89 83       	std	Y+1, r24	; 0x01
     6e4:	12 c0       	rjmp	.+36     	; 0x70a <TWI_SendSLAWrite+0x50>
        }
        else if (INIT==gu8_InitFlag){
     6e6:	80 91 71 00 	lds	r24, 0x0071
     6ea:	81 30       	cpi	r24, 0x01	; 1
     6ec:	71 f4       	brne	.+28     	; 0x70a <TWI_SendSLAWrite+0x50>
            TWI_Data_REGISTER = ((SlvAdr << 1) | 0);
     6ee:	e3 e2       	ldi	r30, 0x23	; 35
     6f0:	f0 e0       	ldi	r31, 0x00	; 0
     6f2:	8b 81       	ldd	r24, Y+3	; 0x03
     6f4:	88 0f       	add	r24, r24
     6f6:	80 83       	st	Z, r24
            TWI_Control_REGISTER = (EN_TWI | CLR_FLAG);// CLEAR FLAG TO SEND DATA
     6f8:	e6 e5       	ldi	r30, 0x56	; 86
     6fa:	f0 e0       	ldi	r31, 0x00	; 0
     6fc:	84 e8       	ldi	r24, 0x84	; 132
     6fe:	80 83       	st	Z, r24
            while (Get_Bit(TWI_Control_REGISTER,TWINT) == 0)
     700:	e6 e5       	ldi	r30, 0x56	; 86
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	80 81       	ld	r24, Z
     706:	88 23       	and	r24, r24
     708:	dc f7       	brge	.-10     	; 0x700 <TWI_SendSLAWrite+0x46>
                ;
        }
	}
    return au8_ERROR_STAT;
     70a:	89 81       	ldd	r24, Y+1	; 0x01

}
     70c:	0f 90       	pop	r0
     70e:	0f 90       	pop	r0
     710:	0f 90       	pop	r0
     712:	cf 91       	pop	r28
     714:	df 91       	pop	r29
     716:	08 95       	ret

00000718 <TWI_SendSLARead>:
TWI_ERROR_state_t TWI_SendSLARead(uint8_t I2C_CH, uint8_t SlvAdr) {
     718:	df 93       	push	r29
     71a:	cf 93       	push	r28
     71c:	00 d0       	rcall	.+0      	; 0x71e <TWI_SendSLARead+0x6>
     71e:	0f 92       	push	r0
     720:	cd b7       	in	r28, 0x3d	; 61
     722:	de b7       	in	r29, 0x3e	; 62
     724:	8a 83       	std	Y+2, r24	; 0x02
     726:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t au8_ERROR_STAT=TWI_SUCCESS;//ERRROR STAT HAS A SUCCESS VALUE AS DEFAULT
     728:	19 82       	std	Y+1, r1	; 0x01
    if (I2C_CH>TWI_1){
     72a:	8a 81       	ldd	r24, Y+2	; 0x02
     72c:	82 30       	cpi	r24, 0x02	; 2
     72e:	18 f0       	brcs	.+6      	; 0x736 <TWI_SendSLARead+0x1e>
		au8_ERROR_STAT=TWI_INVALID_CHANNEL;
     730:	8c ef       	ldi	r24, 0xFC	; 252
     732:	89 83       	std	Y+1, r24	; 0x01
     734:	1d c0       	rjmp	.+58     	; 0x770 <TWI_SendSLARead+0x58>
	}
	else{
        if(NOT_INIT==gu8_InitFlag){
     736:	80 91 71 00 	lds	r24, 0x0071
     73a:	88 23       	and	r24, r24
     73c:	19 f4       	brne	.+6      	; 0x744 <TWI_SendSLARead+0x2c>
            au8_ERROR_STAT=TWI_NOT_INIT;
     73e:	8e ef       	ldi	r24, 0xFE	; 254
     740:	89 83       	std	Y+1, r24	; 0x01
     742:	16 c0       	rjmp	.+44     	; 0x770 <TWI_SendSLARead+0x58>
        }
        else if (INIT==gu8_InitFlag){
     744:	80 91 71 00 	lds	r24, 0x0071
     748:	81 30       	cpi	r24, 0x01	; 1
     74a:	91 f4       	brne	.+36     	; 0x770 <TWI_SendSLARead+0x58>
        TWI_Data_REGISTER = ((SlvAdr << 1) | 1);
     74c:	e3 e2       	ldi	r30, 0x23	; 35
     74e:	f0 e0       	ldi	r31, 0x00	; 0
     750:	8b 81       	ldd	r24, Y+3	; 0x03
     752:	88 2f       	mov	r24, r24
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	88 0f       	add	r24, r24
     758:	99 1f       	adc	r25, r25
     75a:	81 60       	ori	r24, 0x01	; 1
     75c:	80 83       	st	Z, r24
        TWI_Control_REGISTER = (EN_TWI | CLR_FLAG);
     75e:	e6 e5       	ldi	r30, 0x56	; 86
     760:	f0 e0       	ldi	r31, 0x00	; 0
     762:	84 e8       	ldi	r24, 0x84	; 132
     764:	80 83       	st	Z, r24
        while (Get_Bit(TWI_Control_REGISTER,TWINT) == 0)
     766:	e6 e5       	ldi	r30, 0x56	; 86
     768:	f0 e0       	ldi	r31, 0x00	; 0
     76a:	80 81       	ld	r24, Z
     76c:	88 23       	and	r24, r24
     76e:	dc f7       	brge	.-10     	; 0x766 <TWI_SendSLARead+0x4e>
            ;
        }
	}
    return au8_ERROR_STAT;
     770:	89 81       	ldd	r24, Y+1	; 0x01

}
     772:	0f 90       	pop	r0
     774:	0f 90       	pop	r0
     776:	0f 90       	pop	r0
     778:	cf 91       	pop	r28
     77a:	df 91       	pop	r29
     77c:	08 95       	ret

0000077e <TWI_SendData>:
TWI_ERROR_state_t TWI_SendData(uint8_t I2C_CH, uint8_t Data){
     77e:	df 93       	push	r29
     780:	cf 93       	push	r28
     782:	00 d0       	rcall	.+0      	; 0x784 <TWI_SendData+0x6>
     784:	0f 92       	push	r0
     786:	cd b7       	in	r28, 0x3d	; 61
     788:	de b7       	in	r29, 0x3e	; 62
     78a:	8a 83       	std	Y+2, r24	; 0x02
     78c:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t au8_ERROR_STAT=TWI_SUCCESS;//ERRROR STAT HAS A SUCCESS VALUE AS DEFAULT
     78e:	19 82       	std	Y+1, r1	; 0x01
	    if (I2C_CH>TWI_1){
     790:	8a 81       	ldd	r24, Y+2	; 0x02
     792:	82 30       	cpi	r24, 0x02	; 2
     794:	18 f0       	brcs	.+6      	; 0x79c <TWI_SendData+0x1e>
		au8_ERROR_STAT=TWI_INVALID_CHANNEL;
     796:	8c ef       	ldi	r24, 0xFC	; 252
     798:	89 83       	std	Y+1, r24	; 0x01
     79a:	18 c0       	rjmp	.+48     	; 0x7cc <TWI_SendData+0x4e>
	}
	else{
        if(NOT_INIT==gu8_InitFlag){
     79c:	80 91 71 00 	lds	r24, 0x0071
     7a0:	88 23       	and	r24, r24
     7a2:	19 f4       	brne	.+6      	; 0x7aa <TWI_SendData+0x2c>
            au8_ERROR_STAT=TWI_NOT_INIT;
     7a4:	8e ef       	ldi	r24, 0xFE	; 254
     7a6:	89 83       	std	Y+1, r24	; 0x01
     7a8:	11 c0       	rjmp	.+34     	; 0x7cc <TWI_SendData+0x4e>
        }
        else if (INIT==gu8_InitFlag){
     7aa:	80 91 71 00 	lds	r24, 0x0071
     7ae:	81 30       	cpi	r24, 0x01	; 1
     7b0:	69 f4       	brne	.+26     	; 0x7cc <TWI_SendData+0x4e>
        TWI_Data_REGISTER = Data;
     7b2:	e3 e2       	ldi	r30, 0x23	; 35
     7b4:	f0 e0       	ldi	r31, 0x00	; 0
     7b6:	8b 81       	ldd	r24, Y+3	; 0x03
     7b8:	80 83       	st	Z, r24
        TWI_Control_REGISTER = (EN_TWI | CLR_FLAG);
     7ba:	e6 e5       	ldi	r30, 0x56	; 86
     7bc:	f0 e0       	ldi	r31, 0x00	; 0
     7be:	84 e8       	ldi	r24, 0x84	; 132
     7c0:	80 83       	st	Z, r24
        while (Get_Bit(TWI_Control_REGISTER,TWINT) == 0)
     7c2:	e6 e5       	ldi	r30, 0x56	; 86
     7c4:	f0 e0       	ldi	r31, 0x00	; 0
     7c6:	80 81       	ld	r24, Z
     7c8:	88 23       	and	r24, r24
     7ca:	dc f7       	brge	.-10     	; 0x7c2 <TWI_SendData+0x44>
            ;
        }
	}
    return au8_ERROR_STAT;
     7cc:	89 81       	ldd	r24, Y+1	; 0x01
}
     7ce:	0f 90       	pop	r0
     7d0:	0f 90       	pop	r0
     7d2:	0f 90       	pop	r0
     7d4:	cf 91       	pop	r28
     7d6:	df 91       	pop	r29
     7d8:	08 95       	ret

000007da <TWI_SendChar>:
TWI_ERROR_state_t TWI_SendChar(uint8_t I2C_CH, uint8_t SlvAdr, uint8_t Data) {
     7da:	df 93       	push	r29
     7dc:	cf 93       	push	r28
     7de:	00 d0       	rcall	.+0      	; 0x7e0 <TWI_SendChar+0x6>
     7e0:	00 d0       	rcall	.+0      	; 0x7e2 <TWI_SendChar+0x8>
     7e2:	0f 92       	push	r0
     7e4:	cd b7       	in	r28, 0x3d	; 61
     7e6:	de b7       	in	r29, 0x3e	; 62
     7e8:	8b 83       	std	Y+3, r24	; 0x03
     7ea:	6c 83       	std	Y+4, r22	; 0x04
     7ec:	4d 83       	std	Y+5, r20	; 0x05
    uint8_t au8_ERROR_STAT=TWI_SUCCESS;//ERRROR STAT HAS A SUCCESS VALUE AS DEFAULT
     7ee:	1a 82       	std	Y+2, r1	; 0x02
    uint8_t au8_counter =0;
     7f0:	19 82       	std	Y+1, r1	; 0x01

    if (I2C_CH>TWI_1){
     7f2:	8b 81       	ldd	r24, Y+3	; 0x03
     7f4:	82 30       	cpi	r24, 0x02	; 2
     7f6:	18 f0       	brcs	.+6      	; 0x7fe <TWI_SendChar+0x24>
		au8_ERROR_STAT=TWI_INVALID_CHANNEL;
     7f8:	8c ef       	ldi	r24, 0xFC	; 252
     7fa:	8a 83       	std	Y+2, r24	; 0x02
     7fc:	31 c0       	rjmp	.+98     	; 0x860 <TWI_SendChar+0x86>
	}
	else{
        if(NOT_INIT==gu8_InitFlag){
     7fe:	80 91 71 00 	lds	r24, 0x0071
     802:	88 23       	and	r24, r24
     804:	19 f4       	brne	.+6      	; 0x80c <TWI_SendChar+0x32>
            au8_ERROR_STAT=TWI_NOT_INIT;
     806:	8e ef       	ldi	r24, 0xFE	; 254
     808:	8a 83       	std	Y+2, r24	; 0x02
     80a:	2a c0       	rjmp	.+84     	; 0x860 <TWI_SendChar+0x86>
        }
        else if (INIT==gu8_InitFlag){
     80c:	80 91 71 00 	lds	r24, 0x0071
     810:	81 30       	cpi	r24, 0x01	; 1
     812:	31 f5       	brne	.+76     	; 0x860 <TWI_SendChar+0x86>
        /*SENDING START CONDITION*/
        	for(au8_counter=0;au8_counter<100;au8_counter++);
     814:	19 82       	std	Y+1, r1	; 0x01
     816:	03 c0       	rjmp	.+6      	; 0x81e <TWI_SendChar+0x44>
     818:	89 81       	ldd	r24, Y+1	; 0x01
     81a:	8f 5f       	subi	r24, 0xFF	; 255
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	89 81       	ldd	r24, Y+1	; 0x01
     820:	84 36       	cpi	r24, 0x64	; 100
     822:	d0 f3       	brcs	.-12     	; 0x818 <TWI_SendChar+0x3e>
        TWI_SendStartCondition(I2C_CH);
     824:	8b 81       	ldd	r24, Y+3	; 0x03
     826:	0e 94 11 03 	call	0x622	; 0x622 <TWI_SendStartCondition>
        /*--SEND SALVE ADDRESS WITH WRITE OPERATION--*/
        TWI_SendSLAWrite(I2C_CH, SlvAdr);
     82a:	8b 81       	ldd	r24, Y+3	; 0x03
     82c:	6c 81       	ldd	r22, Y+4	; 0x04
     82e:	0e 94 5d 03 	call	0x6ba	; 0x6ba <TWI_SendSLAWrite>
        	for(au8_counter=0;au8_counter<100;au8_counter++);
     832:	19 82       	std	Y+1, r1	; 0x01
     834:	03 c0       	rjmp	.+6      	; 0x83c <TWI_SendChar+0x62>
     836:	89 81       	ldd	r24, Y+1	; 0x01
     838:	8f 5f       	subi	r24, 0xFF	; 255
     83a:	89 83       	std	Y+1, r24	; 0x01
     83c:	89 81       	ldd	r24, Y+1	; 0x01
     83e:	84 36       	cpi	r24, 0x64	; 100
     840:	d0 f3       	brcs	.-12     	; 0x836 <TWI_SendChar+0x5c>
        /*--SENDING DATA--*/
        TWI_SendData(I2C_CH, Data);
     842:	8b 81       	ldd	r24, Y+3	; 0x03
     844:	6d 81       	ldd	r22, Y+5	; 0x05
     846:	0e 94 bf 03 	call	0x77e	; 0x77e <TWI_SendData>
        	for(au8_counter=0;au8_counter<100;au8_counter++);
     84a:	19 82       	std	Y+1, r1	; 0x01
     84c:	03 c0       	rjmp	.+6      	; 0x854 <TWI_SendChar+0x7a>
     84e:	89 81       	ldd	r24, Y+1	; 0x01
     850:	8f 5f       	subi	r24, 0xFF	; 255
     852:	89 83       	std	Y+1, r24	; 0x01
     854:	89 81       	ldd	r24, Y+1	; 0x01
     856:	84 36       	cpi	r24, 0x64	; 100
     858:	d0 f3       	brcs	.-12     	; 0x84e <TWI_SendChar+0x74>
        /*--SENDING STOP CONDITION*/
        TWI_SendStopCondition(I2C_CH);
     85a:	8b 81       	ldd	r24, Y+3	; 0x03
     85c:	0e 94 3b 03 	call	0x676	; 0x676 <TWI_SendStopCondition>
        }
	}
	return au8_ERROR_STAT;
     860:	8a 81       	ldd	r24, Y+2	; 0x02
}
     862:	0f 90       	pop	r0
     864:	0f 90       	pop	r0
     866:	0f 90       	pop	r0
     868:	0f 90       	pop	r0
     86a:	0f 90       	pop	r0
     86c:	cf 91       	pop	r28
     86e:	df 91       	pop	r29
     870:	08 95       	ret

00000872 <TWI_RecDataAck>:
TWI_ERROR_state_t TWI_RecDataAck(uint8_t I2C_CH, uint8_t* data) {
     872:	df 93       	push	r29
     874:	cf 93       	push	r28
     876:	00 d0       	rcall	.+0      	; 0x878 <TWI_RecDataAck+0x6>
     878:	00 d0       	rcall	.+0      	; 0x87a <TWI_RecDataAck+0x8>
     87a:	cd b7       	in	r28, 0x3d	; 61
     87c:	de b7       	in	r29, 0x3e	; 62
     87e:	8a 83       	std	Y+2, r24	; 0x02
     880:	7c 83       	std	Y+4, r23	; 0x04
     882:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t au8_ERROR_STAT=TWI_SUCCESS;//ERRROR STAT HAS A SUCCESS VALUE AS DEFAULT
     884:	19 82       	std	Y+1, r1	; 0x01
    if(NULL_PTR==data){
     886:	8b 81       	ldd	r24, Y+3	; 0x03
     888:	9c 81       	ldd	r25, Y+4	; 0x04
     88a:	00 97       	sbiw	r24, 0x00	; 0
     88c:	19 f4       	brne	.+6      	; 0x894 <TWI_RecDataAck+0x22>
        au8_ERROR_STAT=TWI_NULL_POINTER;
     88e:	8d ef       	ldi	r24, 0xFD	; 253
     890:	89 83       	std	Y+1, r24	; 0x01
     892:	23 c0       	rjmp	.+70     	; 0x8da <TWI_RecDataAck+0x68>
    }//if
    else{
        if (I2C_CH>TWI_1){
     894:	8a 81       	ldd	r24, Y+2	; 0x02
     896:	82 30       	cpi	r24, 0x02	; 2
     898:	18 f0       	brcs	.+6      	; 0x8a0 <TWI_RecDataAck+0x2e>
            au8_ERROR_STAT=TWI_INVALID_CHANNEL;
     89a:	8c ef       	ldi	r24, 0xFC	; 252
     89c:	89 83       	std	Y+1, r24	; 0x01
     89e:	1d c0       	rjmp	.+58     	; 0x8da <TWI_RecDataAck+0x68>
        }//if
        else{
            if(NOT_INIT==gu8_InitFlag){
     8a0:	80 91 71 00 	lds	r24, 0x0071
     8a4:	88 23       	and	r24, r24
     8a6:	19 f4       	brne	.+6      	; 0x8ae <TWI_RecDataAck+0x3c>
                au8_ERROR_STAT=TWI_NOT_INIT;
     8a8:	8e ef       	ldi	r24, 0xFE	; 254
     8aa:	89 83       	std	Y+1, r24	; 0x01
     8ac:	16 c0       	rjmp	.+44     	; 0x8da <TWI_RecDataAck+0x68>
            }//if
            else if (INIT==gu8_InitFlag){
     8ae:	80 91 71 00 	lds	r24, 0x0071
     8b2:	81 30       	cpi	r24, 0x01	; 1
     8b4:	91 f4       	brne	.+36     	; 0x8da <TWI_RecDataAck+0x68>
//                Set_Bit(TWI_Control_REGISTER, TWEA);
//                STWEet_Bit(TWI_Control_REGISTER, TWINT);
                TWI_Control_REGISTER|=(TWEA<<1)|(TWEA<<1);
     8b6:	a6 e5       	ldi	r26, 0x56	; 86
     8b8:	b0 e0       	ldi	r27, 0x00	; 0
     8ba:	e6 e5       	ldi	r30, 0x56	; 86
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	80 81       	ld	r24, Z
     8c0:	8c 60       	ori	r24, 0x0C	; 12
     8c2:	8c 93       	st	X, r24
                while (Get_Bit(TWI_Control_REGISTER,TWINT) == 0)
     8c4:	e6 e5       	ldi	r30, 0x56	; 86
     8c6:	f0 e0       	ldi	r31, 0x00	; 0
     8c8:	80 81       	ld	r24, Z
     8ca:	88 23       	and	r24, r24
     8cc:	dc f7       	brge	.-10     	; 0x8c4 <TWI_RecDataAck+0x52>
                    ;
                *data = TWI_Data_REGISTER;
     8ce:	e3 e2       	ldi	r30, 0x23	; 35
     8d0:	f0 e0       	ldi	r31, 0x00	; 0
     8d2:	80 81       	ld	r24, Z
     8d4:	eb 81       	ldd	r30, Y+3	; 0x03
     8d6:	fc 81       	ldd	r31, Y+4	; 0x04
     8d8:	80 83       	st	Z, r24
            else{
                //DO NOTHING
            }//else
        }//else
    }//else
	return au8_ERROR_STAT;
     8da:	89 81       	ldd	r24, Y+1	; 0x01
}
     8dc:	0f 90       	pop	r0
     8de:	0f 90       	pop	r0
     8e0:	0f 90       	pop	r0
     8e2:	0f 90       	pop	r0
     8e4:	cf 91       	pop	r28
     8e6:	df 91       	pop	r29
     8e8:	08 95       	ret

000008ea <TWI_RecChar>:
TWI_ERROR_state_t TWI_RecChar(uint8_t I2C_CH, uint8_t SlvAdr, uint8_t* Data) {
     8ea:	df 93       	push	r29
     8ec:	cf 93       	push	r28
     8ee:	00 d0       	rcall	.+0      	; 0x8f0 <TWI_RecChar+0x6>
     8f0:	00 d0       	rcall	.+0      	; 0x8f2 <TWI_RecChar+0x8>
     8f2:	0f 92       	push	r0
     8f4:	cd b7       	in	r28, 0x3d	; 61
     8f6:	de b7       	in	r29, 0x3e	; 62
     8f8:	8a 83       	std	Y+2, r24	; 0x02
     8fa:	6b 83       	std	Y+3, r22	; 0x03
     8fc:	5d 83       	std	Y+5, r21	; 0x05
     8fe:	4c 83       	std	Y+4, r20	; 0x04
    uint8_t au8_ERROR_STAT=TWI_SUCCESS;//ERRROR STAT HAS A SUCCESS VALUE AS DEFAULT
     900:	19 82       	std	Y+1, r1	; 0x01
    if(NULL_PTR==Data){
     902:	8c 81       	ldd	r24, Y+4	; 0x04
     904:	9d 81       	ldd	r25, Y+5	; 0x05
     906:	00 97       	sbiw	r24, 0x00	; 0
     908:	19 f4       	brne	.+6      	; 0x910 <TWI_RecChar+0x26>
        au8_ERROR_STAT=TWI_NULL_POINTER;
     90a:	8d ef       	ldi	r24, 0xFD	; 253
     90c:	89 83       	std	Y+1, r24	; 0x01
     90e:	21 c0       	rjmp	.+66     	; 0x952 <TWI_RecChar+0x68>
    }//if
    else{
        if (I2C_CH>TWI_1){
     910:	8a 81       	ldd	r24, Y+2	; 0x02
     912:	82 30       	cpi	r24, 0x02	; 2
     914:	18 f0       	brcs	.+6      	; 0x91c <TWI_RecChar+0x32>
            au8_ERROR_STAT=TWI_INVALID_CHANNEL;
     916:	8c ef       	ldi	r24, 0xFC	; 252
     918:	89 83       	std	Y+1, r24	; 0x01
     91a:	1b c0       	rjmp	.+54     	; 0x952 <TWI_RecChar+0x68>
        }//if
        else{
            if(NOT_INIT==gu8_InitFlag){
     91c:	80 91 71 00 	lds	r24, 0x0071
     920:	88 23       	and	r24, r24
     922:	19 f4       	brne	.+6      	; 0x92a <TWI_RecChar+0x40>
                au8_ERROR_STAT=TWI_NOT_INIT;
     924:	8e ef       	ldi	r24, 0xFE	; 254
     926:	89 83       	std	Y+1, r24	; 0x01
     928:	14 c0       	rjmp	.+40     	; 0x952 <TWI_RecChar+0x68>
            }//if
            else if (INIT==gu8_InitFlag){
     92a:	80 91 71 00 	lds	r24, 0x0071
     92e:	81 30       	cpi	r24, 0x01	; 1
     930:	81 f4       	brne	.+32     	; 0x952 <TWI_RecChar+0x68>
                TWI_SendStartCondition(I2C_CH);
     932:	8a 81       	ldd	r24, Y+2	; 0x02
     934:	0e 94 11 03 	call	0x622	; 0x622 <TWI_SendStartCondition>
                TWI_SendSLARead(I2C_CH, SlvAdr);
     938:	8a 81       	ldd	r24, Y+2	; 0x02
     93a:	6b 81       	ldd	r22, Y+3	; 0x03
     93c:	0e 94 8c 03 	call	0x718	; 0x718 <TWI_SendSLARead>
                TWI_RecDataAck(I2C_CH, Data);
     940:	2c 81       	ldd	r18, Y+4	; 0x04
     942:	3d 81       	ldd	r19, Y+5	; 0x05
     944:	8a 81       	ldd	r24, Y+2	; 0x02
     946:	b9 01       	movw	r22, r18
     948:	0e 94 39 04 	call	0x872	; 0x872 <TWI_RecDataAck>
                TWI_SendStopCondition(I2C_CH);
     94c:	8a 81       	ldd	r24, Y+2	; 0x02
     94e:	0e 94 3b 03 	call	0x676	; 0x676 <TWI_SendStopCondition>
            else{
                    //DO NOTHING
            }//else
        }//else
    }//else
	return au8_ERROR_STAT;
     952:	89 81       	ldd	r24, Y+1	; 0x01
}
     954:	0f 90       	pop	r0
     956:	0f 90       	pop	r0
     958:	0f 90       	pop	r0
     95a:	0f 90       	pop	r0
     95c:	0f 90       	pop	r0
     95e:	cf 91       	pop	r28
     960:	df 91       	pop	r29
     962:	08 95       	ret

00000964 <TWI_EnableInterrupt>:

TWI_ERROR_state_t TWI_EnableInterrupt(uint8_t I2C_CH) {
     964:	df 93       	push	r29
     966:	cf 93       	push	r28
     968:	00 d0       	rcall	.+0      	; 0x96a <TWI_EnableInterrupt+0x6>
     96a:	cd b7       	in	r28, 0x3d	; 61
     96c:	de b7       	in	r29, 0x3e	; 62
     96e:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t au8_ERROR_STAT=TWI_SUCCESS;//ERRROR STAT HAS A SUCCESS VALUE AS DEFAULT
     970:	19 82       	std	Y+1, r1	; 0x01
    if (I2C_CH>TWI_1){
     972:	8a 81       	ldd	r24, Y+2	; 0x02
     974:	82 30       	cpi	r24, 0x02	; 2
     976:	18 f0       	brcs	.+6      	; 0x97e <TWI_EnableInterrupt+0x1a>
		au8_ERROR_STAT=TWI_INVALID_CHANNEL;
     978:	8c ef       	ldi	r24, 0xFC	; 252
     97a:	89 83       	std	Y+1, r24	; 0x01
     97c:	12 c0       	rjmp	.+36     	; 0x9a2 <TWI_EnableInterrupt+0x3e>
	}
	else{
        if(NOT_INIT==gu8_InitFlag){
     97e:	80 91 71 00 	lds	r24, 0x0071
     982:	88 23       	and	r24, r24
     984:	19 f4       	brne	.+6      	; 0x98c <TWI_EnableInterrupt+0x28>
            au8_ERROR_STAT=TWI_NOT_INIT;
     986:	8e ef       	ldi	r24, 0xFE	; 254
     988:	89 83       	std	Y+1, r24	; 0x01
     98a:	0b c0       	rjmp	.+22     	; 0x9a2 <TWI_EnableInterrupt+0x3e>
        }
        else if (INIT==gu8_InitFlag){
     98c:	80 91 71 00 	lds	r24, 0x0071
     990:	81 30       	cpi	r24, 0x01	; 1
     992:	39 f4       	brne	.+14     	; 0x9a2 <TWI_EnableInterrupt+0x3e>
            Set_Bit(TWI_Control_REGISTER, TWIE); //Disable ISR for the TWI peripheral
     994:	a6 e5       	ldi	r26, 0x56	; 86
     996:	b0 e0       	ldi	r27, 0x00	; 0
     998:	e6 e5       	ldi	r30, 0x56	; 86
     99a:	f0 e0       	ldi	r31, 0x00	; 0
     99c:	80 81       	ld	r24, Z
     99e:	81 60       	ori	r24, 0x01	; 1
     9a0:	8c 93       	st	X, r24
        }//else if
        else{
            //DO NOTHING
        }//else
	}//else
	return au8_ERROR_STAT;
     9a2:	89 81       	ldd	r24, Y+1	; 0x01

}
     9a4:	0f 90       	pop	r0
     9a6:	0f 90       	pop	r0
     9a8:	cf 91       	pop	r28
     9aa:	df 91       	pop	r29
     9ac:	08 95       	ret

000009ae <TWI_DisableInterrupt>:
TWI_ERROR_state_t TWI_DisableInterrupt(uint8_t I2C_CH) {
     9ae:	df 93       	push	r29
     9b0:	cf 93       	push	r28
     9b2:	00 d0       	rcall	.+0      	; 0x9b4 <TWI_DisableInterrupt+0x6>
     9b4:	cd b7       	in	r28, 0x3d	; 61
     9b6:	de b7       	in	r29, 0x3e	; 62
     9b8:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t au8_ERROR_STAT=TWI_SUCCESS;//ERRROR STAT HAS A SUCCESS VALUE AS DEFAULT
     9ba:	19 82       	std	Y+1, r1	; 0x01
    if (I2C_CH>TWI_1){
     9bc:	8a 81       	ldd	r24, Y+2	; 0x02
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	18 f0       	brcs	.+6      	; 0x9c8 <TWI_DisableInterrupt+0x1a>
		au8_ERROR_STAT=TWI_INVALID_CHANNEL;
     9c2:	8c ef       	ldi	r24, 0xFC	; 252
     9c4:	89 83       	std	Y+1, r24	; 0x01
     9c6:	12 c0       	rjmp	.+36     	; 0x9ec <TWI_DisableInterrupt+0x3e>
	}
	else{
        if(NOT_INIT==gu8_InitFlag){
     9c8:	80 91 71 00 	lds	r24, 0x0071
     9cc:	88 23       	and	r24, r24
     9ce:	19 f4       	brne	.+6      	; 0x9d6 <TWI_DisableInterrupt+0x28>
            au8_ERROR_STAT=TWI_NOT_INIT;
     9d0:	8e ef       	ldi	r24, 0xFE	; 254
     9d2:	89 83       	std	Y+1, r24	; 0x01
     9d4:	0b c0       	rjmp	.+22     	; 0x9ec <TWI_DisableInterrupt+0x3e>
        }
        else if (INIT==gu8_InitFlag){
     9d6:	80 91 71 00 	lds	r24, 0x0071
     9da:	81 30       	cpi	r24, 0x01	; 1
     9dc:	39 f4       	brne	.+14     	; 0x9ec <TWI_DisableInterrupt+0x3e>
            Clr_Bit(TWI_Control_REGISTER, TWIE); //Disable ISR for the TWI peripheral
     9de:	a6 e5       	ldi	r26, 0x56	; 86
     9e0:	b0 e0       	ldi	r27, 0x00	; 0
     9e2:	e6 e5       	ldi	r30, 0x56	; 86
     9e4:	f0 e0       	ldi	r31, 0x00	; 0
     9e6:	80 81       	ld	r24, Z
     9e8:	8e 7f       	andi	r24, 0xFE	; 254
     9ea:	8c 93       	st	X, r24
        }//else if
        else{
            //DO NOTHING
        }//else
	}//else
	return au8_ERROR_STAT;
     9ec:	89 81       	ldd	r24, Y+1	; 0x01

}
     9ee:	0f 90       	pop	r0
     9f0:	0f 90       	pop	r0
     9f2:	cf 91       	pop	r28
     9f4:	df 91       	pop	r29
     9f6:	08 95       	ret

000009f8 <TWI_SlaOperDetermination>:
TWI_ERROR_state_t TWI_SlaOperDetermination(uint8_t I2C_CH, uint8_t* Oper) {
     9f8:	df 93       	push	r29
     9fa:	cf 93       	push	r28
     9fc:	00 d0       	rcall	.+0      	; 0x9fe <TWI_SlaOperDetermination+0x6>
     9fe:	00 d0       	rcall	.+0      	; 0xa00 <TWI_SlaOperDetermination+0x8>
     a00:	cd b7       	in	r28, 0x3d	; 61
     a02:	de b7       	in	r29, 0x3e	; 62
     a04:	8a 83       	std	Y+2, r24	; 0x02
     a06:	7c 83       	std	Y+4, r23	; 0x04
     a08:	6b 83       	std	Y+3, r22	; 0x03
    uint8_t au8_ERROR_STAT=TWI_SUCCESS;//ERRROR STAT HAS A SUCCESS VALUE AS DEFAULT
     a0a:	19 82       	std	Y+1, r1	; 0x01
    if(NULL_PTR==Oper){
     a0c:	8b 81       	ldd	r24, Y+3	; 0x03
     a0e:	9c 81       	ldd	r25, Y+4	; 0x04
     a10:	00 97       	sbiw	r24, 0x00	; 0
     a12:	19 f4       	brne	.+6      	; 0xa1a <TWI_SlaOperDetermination+0x22>
        au8_ERROR_STAT=TWI_NULL_POINTER;
     a14:	8d ef       	ldi	r24, 0xFD	; 253
     a16:	89 83       	std	Y+1, r24	; 0x01
     a18:	18 c0       	rjmp	.+48     	; 0xa4a <TWI_SlaOperDetermination+0x52>
    }//if
    else{
        if (I2C_CH>TWI_1){
     a1a:	8a 81       	ldd	r24, Y+2	; 0x02
     a1c:	82 30       	cpi	r24, 0x02	; 2
     a1e:	18 f0       	brcs	.+6      	; 0xa26 <TWI_SlaOperDetermination+0x2e>
            au8_ERROR_STAT=TWI_INVALID_CHANNEL;
     a20:	8c ef       	ldi	r24, 0xFC	; 252
     a22:	89 83       	std	Y+1, r24	; 0x01
     a24:	12 c0       	rjmp	.+36     	; 0xa4a <TWI_SlaOperDetermination+0x52>
        }//if
        else{
            if(NOT_INIT==gu8_InitFlag){
     a26:	80 91 71 00 	lds	r24, 0x0071
     a2a:	88 23       	and	r24, r24
     a2c:	19 f4       	brne	.+6      	; 0xa34 <TWI_SlaOperDetermination+0x3c>
                au8_ERROR_STAT=TWI_NOT_INIT;
     a2e:	8e ef       	ldi	r24, 0xFE	; 254
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	0b c0       	rjmp	.+22     	; 0xa4a <TWI_SlaOperDetermination+0x52>
            }//if
            else if (INIT==gu8_InitFlag){
     a34:	80 91 71 00 	lds	r24, 0x0071
     a38:	81 30       	cpi	r24, 0x01	; 1
     a3a:	39 f4       	brne	.+14     	; 0xa4a <TWI_SlaOperDetermination+0x52>
                *Oper = Get_Bit(TWI_Data_REGISTER, 0);
     a3c:	e3 e2       	ldi	r30, 0x23	; 35
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
     a40:	80 81       	ld	r24, Z
     a42:	81 70       	andi	r24, 0x01	; 1
     a44:	eb 81       	ldd	r30, Y+3	; 0x03
     a46:	fc 81       	ldd	r31, Y+4	; 0x04
     a48:	80 83       	st	Z, r24
            else{
                //DO NOTHING
            }//else
        }//else
    }//else
	return au8_ERROR_STAT;
     a4a:	89 81       	ldd	r24, Y+1	; 0x01
}
     a4c:	0f 90       	pop	r0
     a4e:	0f 90       	pop	r0
     a50:	0f 90       	pop	r0
     a52:	0f 90       	pop	r0
     a54:	cf 91       	pop	r28
     a56:	df 91       	pop	r29
     a58:	08 95       	ret

00000a5a <TWI_SetCallback>:
TWI_ERROR_state_t TWI_SetCallback(uint8_t I2CNumber, Ptr_VoidFuncVoid_t Callback) {
     a5a:	df 93       	push	r29
     a5c:	cf 93       	push	r28
     a5e:	00 d0       	rcall	.+0      	; 0xa60 <TWI_SetCallback+0x6>
     a60:	00 d0       	rcall	.+0      	; 0xa62 <TWI_SetCallback+0x8>
     a62:	cd b7       	in	r28, 0x3d	; 61
     a64:	de b7       	in	r29, 0x3e	; 62
     a66:	8a 83       	std	Y+2, r24	; 0x02
     a68:	7c 83       	std	Y+4, r23	; 0x04
     a6a:	6b 83       	std	Y+3, r22	; 0x03
    uint8_t au8_ERROR_STAT=TWI_SUCCESS;//ERRROR STAT HAS A SUCCESS VALUE AS DEFAULT
     a6c:	19 82       	std	Y+1, r1	; 0x01
    if(NULL_PTR==Callback){
     a6e:	8b 81       	ldd	r24, Y+3	; 0x03
     a70:	9c 81       	ldd	r25, Y+4	; 0x04
     a72:	00 97       	sbiw	r24, 0x00	; 0
     a74:	19 f4       	brne	.+6      	; 0xa7c <TWI_SetCallback+0x22>
        au8_ERROR_STAT=TWI_NULL_POINTER;
     a76:	8d ef       	ldi	r24, 0xFD	; 253
     a78:	89 83       	std	Y+1, r24	; 0x01
     a7a:	17 c0       	rjmp	.+46     	; 0xaaa <TWI_SetCallback+0x50>
    }//if
    else{
        if (I2CNumber>TWI_1){
     a7c:	8a 81       	ldd	r24, Y+2	; 0x02
     a7e:	82 30       	cpi	r24, 0x02	; 2
     a80:	18 f0       	brcs	.+6      	; 0xa88 <TWI_SetCallback+0x2e>
            au8_ERROR_STAT=TWI_INVALID_CHANNEL;
     a82:	8c ef       	ldi	r24, 0xFC	; 252
     a84:	89 83       	std	Y+1, r24	; 0x01
     a86:	11 c0       	rjmp	.+34     	; 0xaaa <TWI_SetCallback+0x50>
        }
        else{
            if(NOT_INIT==gu8_InitFlag){
     a88:	80 91 71 00 	lds	r24, 0x0071
     a8c:	88 23       	and	r24, r24
     a8e:	19 f4       	brne	.+6      	; 0xa96 <TWI_SetCallback+0x3c>
                au8_ERROR_STAT=TWI_NOT_INIT;
     a90:	8e ef       	ldi	r24, 0xFE	; 254
     a92:	89 83       	std	Y+1, r24	; 0x01
     a94:	0a c0       	rjmp	.+20     	; 0xaaa <TWI_SetCallback+0x50>
            }
            else if (INIT==gu8_InitFlag){
     a96:	80 91 71 00 	lds	r24, 0x0071
     a9a:	81 30       	cpi	r24, 0x01	; 1
     a9c:	31 f4       	brne	.+12     	; 0xaaa <TWI_SetCallback+0x50>
                G_TWI_CALLBACK = Callback;
     a9e:	8b 81       	ldd	r24, Y+3	; 0x03
     aa0:	9c 81       	ldd	r25, Y+4	; 0x04
     aa2:	90 93 70 00 	sts	0x0070, r25
     aa6:	80 93 6f 00 	sts	0x006F, r24
            else{
                //DO NOTHING
            }//else
        }//else
    }
	return au8_ERROR_STAT;
     aaa:	89 81       	ldd	r24, Y+1	; 0x01
}
     aac:	0f 90       	pop	r0
     aae:	0f 90       	pop	r0
     ab0:	0f 90       	pop	r0
     ab2:	0f 90       	pop	r0
     ab4:	cf 91       	pop	r28
     ab6:	df 91       	pop	r29
     ab8:	08 95       	ret

00000aba <__vector_19>:
void __vector_19(void) __attribute__((signal)); // Serial Transfer Complete
void __vector_19(void) {
     aba:	1f 92       	push	r1
     abc:	0f 92       	push	r0
     abe:	0f b6       	in	r0, 0x3f	; 63
     ac0:	0f 92       	push	r0
     ac2:	11 24       	eor	r1, r1
     ac4:	2f 93       	push	r18
     ac6:	3f 93       	push	r19
     ac8:	4f 93       	push	r20
     aca:	5f 93       	push	r21
     acc:	6f 93       	push	r22
     ace:	7f 93       	push	r23
     ad0:	8f 93       	push	r24
     ad2:	9f 93       	push	r25
     ad4:	af 93       	push	r26
     ad6:	bf 93       	push	r27
     ad8:	ef 93       	push	r30
     ada:	ff 93       	push	r31
     adc:	df 93       	push	r29
     ade:	cf 93       	push	r28
     ae0:	cd b7       	in	r28, 0x3d	; 61
     ae2:	de b7       	in	r29, 0x3e	; 62
	G_TWI_CALLBACK();
     ae4:	e0 91 6f 00 	lds	r30, 0x006F
     ae8:	f0 91 70 00 	lds	r31, 0x0070
     aec:	09 95       	icall
}
     aee:	cf 91       	pop	r28
     af0:	df 91       	pop	r29
     af2:	ff 91       	pop	r31
     af4:	ef 91       	pop	r30
     af6:	bf 91       	pop	r27
     af8:	af 91       	pop	r26
     afa:	9f 91       	pop	r25
     afc:	8f 91       	pop	r24
     afe:	7f 91       	pop	r23
     b00:	6f 91       	pop	r22
     b02:	5f 91       	pop	r21
     b04:	4f 91       	pop	r20
     b06:	3f 91       	pop	r19
     b08:	2f 91       	pop	r18
     b0a:	0f 90       	pop	r0
     b0c:	0f be       	out	0x3f, r0	; 63
     b0e:	0f 90       	pop	r0
     b10:	1f 90       	pop	r1
     b12:	18 95       	reti

00000b14 <SPI_Init>:
#endif

	return 0;
}
#endif
uint8_t SPI_Init(uint8_t SpiNumber) {
     b14:	df 93       	push	r29
     b16:	cf 93       	push	r28
     b18:	0f 92       	push	r0
     b1a:	cd b7       	in	r28, 0x3d	; 61
     b1c:	de b7       	in	r29, 0x3e	; 62
     b1e:	89 83       	std	Y+1, r24	; 0x01
#else
	Clr_Bit(SPSR, SPI2X);
#endif /*DOUBLE_SPEED*/

#else
	Clr_Bit(SPCR, MSTR);
     b20:	ad e2       	ldi	r26, 0x2D	; 45
     b22:	b0 e0       	ldi	r27, 0x00	; 0
     b24:	ed e2       	ldi	r30, 0x2D	; 45
     b26:	f0 e0       	ldi	r31, 0x00	; 0
     b28:	80 81       	ld	r24, Z
     b2a:	8f 7e       	andi	r24, 0xEF	; 239
     b2c:	8c 93       	st	X, r24
	Set_Bit(SPCR, SPE);
     b2e:	ad e2       	ldi	r26, 0x2D	; 45
     b30:	b0 e0       	ldi	r27, 0x00	; 0
     b32:	ed e2       	ldi	r30, 0x2D	; 45
     b34:	f0 e0       	ldi	r31, 0x00	; 0
     b36:	80 81       	ld	r24, Z
     b38:	80 64       	ori	r24, 0x40	; 64
     b3a:	8c 93       	st	X, r24
	DIO_SetPinDirection(SPI_CH0_MISO_PORT, SPI_CH0_MISO_PIN, PIN_OUTPUT);
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	66 e0       	ldi	r22, 0x06	; 6
     b40:	41 e0       	ldi	r20, 0x01	; 1
     b42:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_SetPinDirection>
	DIO_SetPinDirection(SPI_CH0_MOSI_PORT, SPI_CH0_MOSI_PIN, PIN_INPUT);
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	65 e0       	ldi	r22, 0x05	; 5
     b4a:	40 e0       	ldi	r20, 0x00	; 0
     b4c:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_SetPinDirection>
	DIO_SetPinDirection(SPI_CH0_SCK_PORT, SPI_CH0_SCK_PIN, PIN_INPUT);
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	67 e0       	ldi	r22, 0x07	; 7
     b54:	40 e0       	ldi	r20, 0x00	; 0
     b56:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_SetPinDirection>
	DIO_SetPinDirection(SPI_CH0_SS_PORT, SPI_CH0_SS_PIN, PIN_INPUT);
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	64 e0       	ldi	r22, 0x04	; 4
     b5e:	40 e0       	ldi	r20, 0x00	; 0
     b60:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_SetPinDirection>
#endif/*MODE_MSRT_SLAVE*/
	return 0;
     b64:	80 e0       	ldi	r24, 0x00	; 0
}
     b66:	0f 90       	pop	r0
     b68:	cf 91       	pop	r28
     b6a:	df 91       	pop	r29
     b6c:	08 95       	ret

00000b6e <SPI_TransmitChar>:

uint8_t SPI_TransmitChar(uint8_t SpiNumber, uint8_t TxChar, uint8_t slave_CH) {
     b6e:	df 93       	push	r29
     b70:	cf 93       	push	r28
     b72:	00 d0       	rcall	.+0      	; 0xb74 <SPI_TransmitChar+0x6>
     b74:	0f 92       	push	r0
     b76:	cd b7       	in	r28, 0x3d	; 61
     b78:	de b7       	in	r29, 0x3e	; 62
     b7a:	89 83       	std	Y+1, r24	; 0x01
     b7c:	6a 83       	std	Y+2, r22	; 0x02
     b7e:	4b 83       	std	Y+3, r20	; 0x03
		break;
		default:
		break;
	}
#else
	SPDR = TxChar;
     b80:	ef e2       	ldi	r30, 0x2F	; 47
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	8a 81       	ldd	r24, Y+2	; 0x02
     b86:	80 83       	st	Z, r24
	//trigger an external interrupt in master MCU
	while (!(SPSR & (1 << SPIF )))
     b88:	ee e2       	ldi	r30, 0x2E	; 46
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	88 23       	and	r24, r24
     b90:	dc f7       	brge	.-10     	; 0xb88 <SPI_TransmitChar+0x1a>
		;
#endif
	return 0;
     b92:	80 e0       	ldi	r24, 0x00	; 0
}
     b94:	0f 90       	pop	r0
     b96:	0f 90       	pop	r0
     b98:	0f 90       	pop	r0
     b9a:	cf 91       	pop	r28
     b9c:	df 91       	pop	r29
     b9e:	08 95       	ret

00000ba0 <SPI_TransmitString>:
uint8_t SPI_TransmitString(uint8_t SpiNumber, ptr_uint8_t TxString,
		uint8_t slave_CH) {
     ba0:	df 93       	push	r29
     ba2:	cf 93       	push	r28
     ba4:	00 d0       	rcall	.+0      	; 0xba6 <SPI_TransmitString+0x6>
     ba6:	00 d0       	rcall	.+0      	; 0xba8 <SPI_TransmitString+0x8>
     ba8:	0f 92       	push	r0
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
     bae:	8a 83       	std	Y+2, r24	; 0x02
     bb0:	7c 83       	std	Y+4, r23	; 0x04
     bb2:	6b 83       	std	Y+3, r22	; 0x03
     bb4:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t counter = 0;
     bb6:	19 82       	std	Y+1, r1	; 0x01
     bb8:	1f c0       	rjmp	.+62     	; 0xbf8 <SPI_TransmitString+0x58>
		default:
		break;
	}
#else
	while (counter >= 255) {
		if ((*(TxString + counter)) == NULL_TERMINATOR) {
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	28 2f       	mov	r18, r24
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	8b 81       	ldd	r24, Y+3	; 0x03
     bc2:	9c 81       	ldd	r25, Y+4	; 0x04
     bc4:	fc 01       	movw	r30, r24
     bc6:	e2 0f       	add	r30, r18
     bc8:	f3 1f       	adc	r31, r19
     bca:	80 81       	ld	r24, Z
     bcc:	88 23       	and	r24, r24
     bce:	b9 f0       	breq	.+46     	; 0xbfe <SPI_TransmitString+0x5e>
			break;
		}
		SPDR = *(TxString + counter);
     bd0:	af e2       	ldi	r26, 0x2F	; 47
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	28 2f       	mov	r18, r24
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	8b 81       	ldd	r24, Y+3	; 0x03
     bdc:	9c 81       	ldd	r25, Y+4	; 0x04
     bde:	fc 01       	movw	r30, r24
     be0:	e2 0f       	add	r30, r18
     be2:	f3 1f       	adc	r31, r19
     be4:	80 81       	ld	r24, Z
     be6:	8c 93       	st	X, r24
		counter++;
     be8:	89 81       	ldd	r24, Y+1	; 0x01
     bea:	8f 5f       	subi	r24, 0xFF	; 255
     bec:	89 83       	std	Y+1, r24	; 0x01
		//trigger an external interrupt in master MCU
		while (!(SPSR & (1 << SPIF )))
     bee:	ee e2       	ldi	r30, 0x2E	; 46
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	88 23       	and	r24, r24
     bf6:	dc f7       	brge	.-10     	; 0xbee <SPI_TransmitString+0x4e>
		break;
		default:
		break;
	}
#else
	while (counter >= 255) {
     bf8:	89 81       	ldd	r24, Y+1	; 0x01
     bfa:	8f 3f       	cpi	r24, 0xFF	; 255
     bfc:	f1 f2       	breq	.-68     	; 0xbba <SPI_TransmitString+0x1a>
		//trigger an external interrupt in master MCU
		while (!(SPSR & (1 << SPIF )))
			;
	}
#endif
	return 0;
     bfe:	80 e0       	ldi	r24, 0x00	; 0
}
     c00:	0f 90       	pop	r0
     c02:	0f 90       	pop	r0
     c04:	0f 90       	pop	r0
     c06:	0f 90       	pop	r0
     c08:	0f 90       	pop	r0
     c0a:	cf 91       	pop	r28
     c0c:	df 91       	pop	r29
     c0e:	08 95       	ret

00000c10 <SPI_ReceiveChar>:

uint8_t SPI_ReceiveChar(uint8_t SpiNumber, ptr_uint8_t RxData, uint8_t slave_CH) {
     c10:	df 93       	push	r29
     c12:	cf 93       	push	r28
     c14:	00 d0       	rcall	.+0      	; 0xc16 <SPI_ReceiveChar+0x6>
     c16:	00 d0       	rcall	.+0      	; 0xc18 <SPI_ReceiveChar+0x8>
     c18:	cd b7       	in	r28, 0x3d	; 61
     c1a:	de b7       	in	r29, 0x3e	; 62
     c1c:	89 83       	std	Y+1, r24	; 0x01
     c1e:	7b 83       	std	Y+3, r23	; 0x03
     c20:	6a 83       	std	Y+2, r22	; 0x02
     c22:	4c 83       	std	Y+4, r20	; 0x04
		break;
		default:
		break;
	}
#else
	while (!(SPSR & (1 << SPIF )))
     c24:	ee e2       	ldi	r30, 0x2E	; 46
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	88 23       	and	r24, r24
     c2c:	dc f7       	brge	.-10     	; 0xc24 <SPI_ReceiveChar+0x14>
		;
	*(RxData) = SPDR;
     c2e:	ef e2       	ldi	r30, 0x2F	; 47
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	80 81       	ld	r24, Z
     c34:	ea 81       	ldd	r30, Y+2	; 0x02
     c36:	fb 81       	ldd	r31, Y+3	; 0x03
     c38:	80 83       	st	Z, r24
#endif
	return 0;
     c3a:	80 e0       	ldi	r24, 0x00	; 0
}
     c3c:	0f 90       	pop	r0
     c3e:	0f 90       	pop	r0
     c40:	0f 90       	pop	r0
     c42:	0f 90       	pop	r0
     c44:	cf 91       	pop	r28
     c46:	df 91       	pop	r29
     c48:	08 95       	ret

00000c4a <SPI_ReceiveString>:
uint8_t SPI_ReceiveString(uint8_t SpiNumber, ptr_uint8_t RxString,
		uint8_t slave_CH) {
     c4a:	df 93       	push	r29
     c4c:	cf 93       	push	r28
     c4e:	00 d0       	rcall	.+0      	; 0xc50 <SPI_ReceiveString+0x6>
     c50:	00 d0       	rcall	.+0      	; 0xc52 <SPI_ReceiveString+0x8>
     c52:	0f 92       	push	r0
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	8a 83       	std	Y+2, r24	; 0x02
     c5a:	7c 83       	std	Y+4, r23	; 0x04
     c5c:	6b 83       	std	Y+3, r22	; 0x03
     c5e:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t counter = 0;
     c60:	19 82       	std	Y+1, r1	; 0x01
		default:
		break;
	}
#else
	while (1) {
		while ((Get_Bit(SPSR, SPIF)) != 1);
     c62:	ee e2       	ldi	r30, 0x2E	; 46
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	80 81       	ld	r24, Z
     c68:	88 1f       	adc	r24, r24
     c6a:	88 27       	eor	r24, r24
     c6c:	88 1f       	adc	r24, r24
     c6e:	81 30       	cpi	r24, 0x01	; 1
     c70:	c1 f7       	brne	.-16     	; 0xc62 <SPI_ReceiveString+0x18>
		*(RxString + counter) = SPDR;
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	8b 81       	ldd	r24, Y+3	; 0x03
     c7a:	9c 81       	ldd	r25, Y+4	; 0x04
     c7c:	dc 01       	movw	r26, r24
     c7e:	a2 0f       	add	r26, r18
     c80:	b3 1f       	adc	r27, r19
     c82:	ef e2       	ldi	r30, 0x2F	; 47
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	8c 93       	st	X, r24
		if ((*(RxString + counter)) == NULL_TERMINATOR) {
     c8a:	89 81       	ldd	r24, Y+1	; 0x01
     c8c:	28 2f       	mov	r18, r24
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	8b 81       	ldd	r24, Y+3	; 0x03
     c92:	9c 81       	ldd	r25, Y+4	; 0x04
     c94:	fc 01       	movw	r30, r24
     c96:	e2 0f       	add	r30, r18
     c98:	f3 1f       	adc	r31, r19
     c9a:	80 81       	ld	r24, Z
     c9c:	88 23       	and	r24, r24
     c9e:	21 f0       	breq	.+8      	; 0xca8 <SPI_ReceiveString+0x5e>
			break;
		}
		counter++;
     ca0:	89 81       	ldd	r24, Y+1	; 0x01
     ca2:	8f 5f       	subi	r24, 0xFF	; 255
     ca4:	89 83       	std	Y+1, r24	; 0x01
     ca6:	dd cf       	rjmp	.-70     	; 0xc62 <SPI_ReceiveString+0x18>
	}
#endif
	return 0;
     ca8:	80 e0       	ldi	r24, 0x00	; 0
}
     caa:	0f 90       	pop	r0
     cac:	0f 90       	pop	r0
     cae:	0f 90       	pop	r0
     cb0:	0f 90       	pop	r0
     cb2:	0f 90       	pop	r0
     cb4:	cf 91       	pop	r28
     cb6:	df 91       	pop	r29
     cb8:	08 95       	ret

00000cba <SPI_EnableInterrupt>:

uint8_t SPI_EnableInterrupt(uint8_t SpiNumber) {
     cba:	df 93       	push	r29
     cbc:	cf 93       	push	r28
     cbe:	0f 92       	push	r0
     cc0:	cd b7       	in	r28, 0x3d	; 61
     cc2:	de b7       	in	r29, 0x3e	; 62
     cc4:	89 83       	std	Y+1, r24	; 0x01
	Set_Bit(SPCR, SPIE);
     cc6:	ad e2       	ldi	r26, 0x2D	; 45
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	ed e2       	ldi	r30, 0x2D	; 45
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	80 68       	ori	r24, 0x80	; 128
     cd2:	8c 93       	st	X, r24
	return 0;
     cd4:	80 e0       	ldi	r24, 0x00	; 0
}
     cd6:	0f 90       	pop	r0
     cd8:	cf 91       	pop	r28
     cda:	df 91       	pop	r29
     cdc:	08 95       	ret

00000cde <SPI_DisableInterrupt>:
uint8_t SPI_DisableInterrupt(uint8_t SpiNumber) {
     cde:	df 93       	push	r29
     ce0:	cf 93       	push	r28
     ce2:	0f 92       	push	r0
     ce4:	cd b7       	in	r28, 0x3d	; 61
     ce6:	de b7       	in	r29, 0x3e	; 62
     ce8:	89 83       	std	Y+1, r24	; 0x01
	Clr_Bit(SPCR, SPIE);
     cea:	ad e2       	ldi	r26, 0x2D	; 45
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	ed e2       	ldi	r30, 0x2D	; 45
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	8f 77       	andi	r24, 0x7F	; 127
     cf6:	8c 93       	st	X, r24
	return 0;
     cf8:	80 e0       	ldi	r24, 0x00	; 0
}
     cfa:	0f 90       	pop	r0
     cfc:	cf 91       	pop	r28
     cfe:	df 91       	pop	r29
     d00:	08 95       	ret

00000d02 <SPI_SetCallback>:

uint8_t SPI_SetCallback(uint8_t SpiNumber, Ptr_VoidFuncVoid_t Callback) {
     d02:	df 93       	push	r29
     d04:	cf 93       	push	r28
     d06:	00 d0       	rcall	.+0      	; 0xd08 <SPI_SetCallback+0x6>
     d08:	0f 92       	push	r0
     d0a:	cd b7       	in	r28, 0x3d	; 61
     d0c:	de b7       	in	r29, 0x3e	; 62
     d0e:	89 83       	std	Y+1, r24	; 0x01
     d10:	7b 83       	std	Y+3, r23	; 0x03
     d12:	6a 83       	std	Y+2, r22	; 0x02
	G_SPI_CALLBACK=Callback;
     d14:	8a 81       	ldd	r24, Y+2	; 0x02
     d16:	9b 81       	ldd	r25, Y+3	; 0x03
     d18:	90 93 78 00 	sts	0x0078, r25
     d1c:	80 93 77 00 	sts	0x0077, r24
	return 0;
     d20:	80 e0       	ldi	r24, 0x00	; 0
}
     d22:	0f 90       	pop	r0
     d24:	0f 90       	pop	r0
     d26:	0f 90       	pop	r0
     d28:	cf 91       	pop	r28
     d2a:	df 91       	pop	r29
     d2c:	08 95       	ret

00000d2e <__vector_12>:

void __vector_12(void) __attribute__((signal)); // Serial Transfer Complete
void __vector_12(void) {
     d2e:	1f 92       	push	r1
     d30:	0f 92       	push	r0
     d32:	0f b6       	in	r0, 0x3f	; 63
     d34:	0f 92       	push	r0
     d36:	11 24       	eor	r1, r1
     d38:	2f 93       	push	r18
     d3a:	3f 93       	push	r19
     d3c:	4f 93       	push	r20
     d3e:	5f 93       	push	r21
     d40:	6f 93       	push	r22
     d42:	7f 93       	push	r23
     d44:	8f 93       	push	r24
     d46:	9f 93       	push	r25
     d48:	af 93       	push	r26
     d4a:	bf 93       	push	r27
     d4c:	ef 93       	push	r30
     d4e:	ff 93       	push	r31
     d50:	df 93       	push	r29
     d52:	cf 93       	push	r28
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
	G_SPI_CALLBACK();
     d58:	e0 91 77 00 	lds	r30, 0x0077
     d5c:	f0 91 78 00 	lds	r31, 0x0078
     d60:	09 95       	icall
}
     d62:	cf 91       	pop	r28
     d64:	df 91       	pop	r29
     d66:	ff 91       	pop	r31
     d68:	ef 91       	pop	r30
     d6a:	bf 91       	pop	r27
     d6c:	af 91       	pop	r26
     d6e:	9f 91       	pop	r25
     d70:	8f 91       	pop	r24
     d72:	7f 91       	pop	r23
     d74:	6f 91       	pop	r22
     d76:	5f 91       	pop	r21
     d78:	4f 91       	pop	r20
     d7a:	3f 91       	pop	r19
     d7c:	2f 91       	pop	r18
     d7e:	0f 90       	pop	r0
     d80:	0f be       	out	0x3f, r0	; 63
     d82:	0f 90       	pop	r0
     d84:	1f 90       	pop	r1
     d86:	18 95       	reti

00000d88 <GI_EnableGI>:
 */
#include"globalInterruptReg.h"
#include"globalInterrupt.h"

void GI_EnableGI (void)
{
     d88:	df 93       	push	r29
     d8a:	cf 93       	push	r28
     d8c:	cd b7       	in	r28, 0x3d	; 61
     d8e:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(SREG_REGISTER,I_BIT);
     d90:	af e5       	ldi	r26, 0x5F	; 95
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	ef e5       	ldi	r30, 0x5F	; 95
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	80 68       	ori	r24, 0x80	; 128
     d9c:	8c 93       	st	X, r24
}
     d9e:	cf 91       	pop	r28
     da0:	df 91       	pop	r29
     da2:	08 95       	ret

00000da4 <GI_DisableGI>:


void GI_DisableGI (void)
{
     da4:	df 93       	push	r29
     da6:	cf 93       	push	r28
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
	Clr_Bit(SREG_REGISTER, I_BIT);
     dac:	af e5       	ldi	r26, 0x5F	; 95
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	ef e5       	ldi	r30, 0x5F	; 95
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	8f 77       	andi	r24, 0x7F	; 127
     db8:	8c 93       	st	X, r24
}
     dba:	cf 91       	pop	r28
     dbc:	df 91       	pop	r29
     dbe:	08 95       	ret

00000dc0 <EX_vdDisable>:
#include"externalInterruptReg.h"
#include"externalInterrupt.h"


void EX_vdDisable(uint8_t CopyInterrupt)
{
     dc0:	df 93       	push	r29
     dc2:	cf 93       	push	r28
     dc4:	00 d0       	rcall	.+0      	; 0xdc6 <EX_vdDisable+0x6>
     dc6:	0f 92       	push	r0
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
     dcc:	89 83       	std	Y+1, r24	; 0x01
	if(CopyInterrupt <= EX_INT2)
     dce:	89 81       	ldd	r24, Y+1	; 0x01
     dd0:	83 30       	cpi	r24, 0x03	; 3
     dd2:	50 f5       	brcc	.+84     	; 0xe28 <EX_vdDisable+0x68>
	{
		switch (CopyInterrupt)
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	28 2f       	mov	r18, r24
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	3b 83       	std	Y+3, r19	; 0x03
     ddc:	2a 83       	std	Y+2, r18	; 0x02
     dde:	8a 81       	ldd	r24, Y+2	; 0x02
     de0:	9b 81       	ldd	r25, Y+3	; 0x03
     de2:	81 30       	cpi	r24, 0x01	; 1
     de4:	91 05       	cpc	r25, r1
     de6:	89 f0       	breq	.+34     	; 0xe0a <EX_vdDisable+0x4a>
     de8:	2a 81       	ldd	r18, Y+2	; 0x02
     dea:	3b 81       	ldd	r19, Y+3	; 0x03
     dec:	22 30       	cpi	r18, 0x02	; 2
     dee:	31 05       	cpc	r19, r1
     df0:	a1 f0       	breq	.+40     	; 0xe1a <EX_vdDisable+0x5a>
     df2:	8a 81       	ldd	r24, Y+2	; 0x02
     df4:	9b 81       	ldd	r25, Y+3	; 0x03
     df6:	00 97       	sbiw	r24, 0x00	; 0
     df8:	b9 f4       	brne	.+46     	; 0xe28 <EX_vdDisable+0x68>
		{
		case EX_INT0:
			Clr_Bit(GICR,6);
     dfa:	ab e5       	ldi	r26, 0x5B	; 91
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	eb e5       	ldi	r30, 0x5B	; 91
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	8f 7b       	andi	r24, 0xBF	; 191
     e06:	8c 93       	st	X, r24
     e08:	0f c0       	rjmp	.+30     	; 0xe28 <EX_vdDisable+0x68>
			break;
		case EX_INT1:
			Clr_Bit(GICR,7);
     e0a:	ab e5       	ldi	r26, 0x5B	; 91
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	eb e5       	ldi	r30, 0x5B	; 91
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	8f 77       	andi	r24, 0x7F	; 127
     e16:	8c 93       	st	X, r24
     e18:	07 c0       	rjmp	.+14     	; 0xe28 <EX_vdDisable+0x68>
			break;
		case EX_INT2:
			Clr_Bit(GICR,5);
     e1a:	ab e5       	ldi	r26, 0x5B	; 91
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	eb e5       	ldi	r30, 0x5B	; 91
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	8f 7d       	andi	r24, 0xDF	; 223
     e26:	8c 93       	st	X, r24
			break;
		default:
			break;
		}
	}
}
     e28:	0f 90       	pop	r0
     e2a:	0f 90       	pop	r0
     e2c:	0f 90       	pop	r0
     e2e:	cf 91       	pop	r28
     e30:	df 91       	pop	r29
     e32:	08 95       	ret

00000e34 <EX_vdConfigInterrupt>:

void EX_vdConfigInterrupt(uint8_t CopyInterrupt , uint8_t CopyControlSense)
{
     e34:	df 93       	push	r29
     e36:	cf 93       	push	r28
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	2a 97       	sbiw	r28, 0x0a	; 10
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	f8 94       	cli
     e42:	de bf       	out	0x3e, r29	; 62
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	cd bf       	out	0x3d, r28	; 61
     e48:	89 83       	std	Y+1, r24	; 0x01
     e4a:	6a 83       	std	Y+2, r22	; 0x02
	if(CopyInterrupt <= EX_INT2 && CopyControlSense <= EX_SENSE_LOGIACL_CHANGE)
     e4c:	89 81       	ldd	r24, Y+1	; 0x01
     e4e:	83 30       	cpi	r24, 0x03	; 3
     e50:	08 f0       	brcs	.+2      	; 0xe54 <EX_vdConfigInterrupt+0x20>
     e52:	03 c1       	rjmp	.+518    	; 0x105a <EX_vdConfigInterrupt+0x226>
     e54:	8a 81       	ldd	r24, Y+2	; 0x02
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	08 f0       	brcs	.+2      	; 0xe5c <EX_vdConfigInterrupt+0x28>
     e5a:	ff c0       	rjmp	.+510    	; 0x105a <EX_vdConfigInterrupt+0x226>
	{
		switch (CopyInterrupt)
     e5c:	89 81       	ldd	r24, Y+1	; 0x01
     e5e:	28 2f       	mov	r18, r24
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	3a 87       	std	Y+10, r19	; 0x0a
     e64:	29 87       	std	Y+9, r18	; 0x09
     e66:	89 85       	ldd	r24, Y+9	; 0x09
     e68:	9a 85       	ldd	r25, Y+10	; 0x0a
     e6a:	81 30       	cpi	r24, 0x01	; 1
     e6c:	91 05       	cpc	r25, r1
     e6e:	09 f4       	brne	.+2      	; 0xe72 <EX_vdConfigInterrupt+0x3e>
     e70:	6d c0       	rjmp	.+218    	; 0xf4c <EX_vdConfigInterrupt+0x118>
     e72:	29 85       	ldd	r18, Y+9	; 0x09
     e74:	3a 85       	ldd	r19, Y+10	; 0x0a
     e76:	22 30       	cpi	r18, 0x02	; 2
     e78:	31 05       	cpc	r19, r1
     e7a:	09 f4       	brne	.+2      	; 0xe7e <EX_vdConfigInterrupt+0x4a>
     e7c:	c9 c0       	rjmp	.+402    	; 0x1010 <EX_vdConfigInterrupt+0x1dc>
     e7e:	89 85       	ldd	r24, Y+9	; 0x09
     e80:	9a 85       	ldd	r25, Y+10	; 0x0a
     e82:	00 97       	sbiw	r24, 0x00	; 0
     e84:	09 f0       	breq	.+2      	; 0xe88 <EX_vdConfigInterrupt+0x54>
     e86:	e9 c0       	rjmp	.+466    	; 0x105a <EX_vdConfigInterrupt+0x226>
		{
			case EX_INT0:
				Set_Bit(GICR,6);
     e88:	ab e5       	ldi	r26, 0x5B	; 91
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	eb e5       	ldi	r30, 0x5B	; 91
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	80 64       	ori	r24, 0x40	; 64
     e94:	8c 93       	st	X, r24
				switch (CopyControlSense)
     e96:	8a 81       	ldd	r24, Y+2	; 0x02
     e98:	28 2f       	mov	r18, r24
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	38 87       	std	Y+8, r19	; 0x08
     e9e:	2f 83       	std	Y+7, r18	; 0x07
     ea0:	8f 81       	ldd	r24, Y+7	; 0x07
     ea2:	98 85       	ldd	r25, Y+8	; 0x08
     ea4:	81 30       	cpi	r24, 0x01	; 1
     ea6:	91 05       	cpc	r25, r1
     ea8:	21 f1       	breq	.+72     	; 0xef2 <EX_vdConfigInterrupt+0xbe>
     eaa:	2f 81       	ldd	r18, Y+7	; 0x07
     eac:	38 85       	ldd	r19, Y+8	; 0x08
     eae:	22 30       	cpi	r18, 0x02	; 2
     eb0:	31 05       	cpc	r19, r1
     eb2:	2c f4       	brge	.+10     	; 0xebe <EX_vdConfigInterrupt+0x8a>
     eb4:	8f 81       	ldd	r24, Y+7	; 0x07
     eb6:	98 85       	ldd	r25, Y+8	; 0x08
     eb8:	00 97       	sbiw	r24, 0x00	; 0
     eba:	61 f0       	breq	.+24     	; 0xed4 <EX_vdConfigInterrupt+0xa0>
     ebc:	ce c0       	rjmp	.+412    	; 0x105a <EX_vdConfigInterrupt+0x226>
     ebe:	2f 81       	ldd	r18, Y+7	; 0x07
     ec0:	38 85       	ldd	r19, Y+8	; 0x08
     ec2:	22 30       	cpi	r18, 0x02	; 2
     ec4:	31 05       	cpc	r19, r1
     ec6:	21 f1       	breq	.+72     	; 0xf10 <EX_vdConfigInterrupt+0xdc>
     ec8:	8f 81       	ldd	r24, Y+7	; 0x07
     eca:	98 85       	ldd	r25, Y+8	; 0x08
     ecc:	83 30       	cpi	r24, 0x03	; 3
     ece:	91 05       	cpc	r25, r1
     ed0:	71 f1       	breq	.+92     	; 0xf2e <EX_vdConfigInterrupt+0xfa>
     ed2:	c3 c0       	rjmp	.+390    	; 0x105a <EX_vdConfigInterrupt+0x226>
				{
					case EX_SENSE_FALLING_EDGE:
						Clr_Bit(MCUCR,0);
     ed4:	a5 e5       	ldi	r26, 0x55	; 85
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e5 e5       	ldi	r30, 0x55	; 85
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	8e 7f       	andi	r24, 0xFE	; 254
     ee0:	8c 93       	st	X, r24
						Set_Bit(MCUCR,1);
     ee2:	a5 e5       	ldi	r26, 0x55	; 85
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e5 e5       	ldi	r30, 0x55	; 85
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	82 60       	ori	r24, 0x02	; 2
     eee:	8c 93       	st	X, r24
     ef0:	b4 c0       	rjmp	.+360    	; 0x105a <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_RAISING_EDGE:
						Set_Bit(MCUCR,0);
     ef2:	a5 e5       	ldi	r26, 0x55	; 85
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e5 e5       	ldi	r30, 0x55	; 85
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	81 60       	ori	r24, 0x01	; 1
     efe:	8c 93       	st	X, r24
						Set_Bit(MCUCR,1);
     f00:	a5 e5       	ldi	r26, 0x55	; 85
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e5 e5       	ldi	r30, 0x55	; 85
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	82 60       	ori	r24, 0x02	; 2
     f0c:	8c 93       	st	X, r24
     f0e:	a5 c0       	rjmp	.+330    	; 0x105a <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_LOW_LEVEL:
						Clr_Bit(MCUCR,0);
     f10:	a5 e5       	ldi	r26, 0x55	; 85
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e5 e5       	ldi	r30, 0x55	; 85
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	8e 7f       	andi	r24, 0xFE	; 254
     f1c:	8c 93       	st	X, r24
						Clr_Bit(MCUCR,1);
     f1e:	a5 e5       	ldi	r26, 0x55	; 85
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e5 e5       	ldi	r30, 0x55	; 85
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	8d 7f       	andi	r24, 0xFD	; 253
     f2a:	8c 93       	st	X, r24
     f2c:	96 c0       	rjmp	.+300    	; 0x105a <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_LOGIACL_CHANGE:
						Set_Bit(MCUCR,0);
     f2e:	a5 e5       	ldi	r26, 0x55	; 85
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	e5 e5       	ldi	r30, 0x55	; 85
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	81 60       	ori	r24, 0x01	; 1
     f3a:	8c 93       	st	X, r24
						Clr_Bit(MCUCR,1);
     f3c:	a5 e5       	ldi	r26, 0x55	; 85
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e5 e5       	ldi	r30, 0x55	; 85
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	8d 7f       	andi	r24, 0xFD	; 253
     f48:	8c 93       	st	X, r24
     f4a:	87 c0       	rjmp	.+270    	; 0x105a <EX_vdConfigInterrupt+0x226>
						break;
				}
				break;
			case EX_INT1:
				Set_Bit(GICR,7);
     f4c:	ab e5       	ldi	r26, 0x5B	; 91
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	eb e5       	ldi	r30, 0x5B	; 91
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	80 68       	ori	r24, 0x80	; 128
     f58:	8c 93       	st	X, r24
				switch (CopyControlSense)
     f5a:	8a 81       	ldd	r24, Y+2	; 0x02
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	3e 83       	std	Y+6, r19	; 0x06
     f62:	2d 83       	std	Y+5, r18	; 0x05
     f64:	8d 81       	ldd	r24, Y+5	; 0x05
     f66:	9e 81       	ldd	r25, Y+6	; 0x06
     f68:	81 30       	cpi	r24, 0x01	; 1
     f6a:	91 05       	cpc	r25, r1
     f6c:	21 f1       	breq	.+72     	; 0xfb6 <EX_vdConfigInterrupt+0x182>
     f6e:	2d 81       	ldd	r18, Y+5	; 0x05
     f70:	3e 81       	ldd	r19, Y+6	; 0x06
     f72:	22 30       	cpi	r18, 0x02	; 2
     f74:	31 05       	cpc	r19, r1
     f76:	2c f4       	brge	.+10     	; 0xf82 <EX_vdConfigInterrupt+0x14e>
     f78:	8d 81       	ldd	r24, Y+5	; 0x05
     f7a:	9e 81       	ldd	r25, Y+6	; 0x06
     f7c:	00 97       	sbiw	r24, 0x00	; 0
     f7e:	61 f0       	breq	.+24     	; 0xf98 <EX_vdConfigInterrupt+0x164>
     f80:	6c c0       	rjmp	.+216    	; 0x105a <EX_vdConfigInterrupt+0x226>
     f82:	2d 81       	ldd	r18, Y+5	; 0x05
     f84:	3e 81       	ldd	r19, Y+6	; 0x06
     f86:	22 30       	cpi	r18, 0x02	; 2
     f88:	31 05       	cpc	r19, r1
     f8a:	21 f1       	breq	.+72     	; 0xfd4 <EX_vdConfigInterrupt+0x1a0>
     f8c:	8d 81       	ldd	r24, Y+5	; 0x05
     f8e:	9e 81       	ldd	r25, Y+6	; 0x06
     f90:	83 30       	cpi	r24, 0x03	; 3
     f92:	91 05       	cpc	r25, r1
     f94:	71 f1       	breq	.+92     	; 0xff2 <EX_vdConfigInterrupt+0x1be>
     f96:	61 c0       	rjmp	.+194    	; 0x105a <EX_vdConfigInterrupt+0x226>
				{
					case EX_SENSE_FALLING_EDGE:
						Clr_Bit(MCUCR,2);
     f98:	a5 e5       	ldi	r26, 0x55	; 85
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e5 e5       	ldi	r30, 0x55	; 85
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	8b 7f       	andi	r24, 0xFB	; 251
     fa4:	8c 93       	st	X, r24
						Set_Bit(MCUCR,3);
     fa6:	a5 e5       	ldi	r26, 0x55	; 85
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e5 e5       	ldi	r30, 0x55	; 85
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	88 60       	ori	r24, 0x08	; 8
     fb2:	8c 93       	st	X, r24
     fb4:	52 c0       	rjmp	.+164    	; 0x105a <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_RAISING_EDGE:
						Set_Bit(MCUCR,2);
     fb6:	a5 e5       	ldi	r26, 0x55	; 85
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e5 e5       	ldi	r30, 0x55	; 85
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	84 60       	ori	r24, 0x04	; 4
     fc2:	8c 93       	st	X, r24
						Set_Bit(MCUCR,3);
     fc4:	a5 e5       	ldi	r26, 0x55	; 85
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e5 e5       	ldi	r30, 0x55	; 85
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	88 60       	ori	r24, 0x08	; 8
     fd0:	8c 93       	st	X, r24
     fd2:	43 c0       	rjmp	.+134    	; 0x105a <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_LOW_LEVEL:
						Clr_Bit(MCUCR,2);
     fd4:	a5 e5       	ldi	r26, 0x55	; 85
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e5 e5       	ldi	r30, 0x55	; 85
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	8b 7f       	andi	r24, 0xFB	; 251
     fe0:	8c 93       	st	X, r24
						Clr_Bit(MCUCR,3);
     fe2:	a5 e5       	ldi	r26, 0x55	; 85
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	e5 e5       	ldi	r30, 0x55	; 85
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	87 7f       	andi	r24, 0xF7	; 247
     fee:	8c 93       	st	X, r24
     ff0:	34 c0       	rjmp	.+104    	; 0x105a <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_LOGIACL_CHANGE:
						Set_Bit(MCUCR,2);
     ff2:	a5 e5       	ldi	r26, 0x55	; 85
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e5 e5       	ldi	r30, 0x55	; 85
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	84 60       	ori	r24, 0x04	; 4
     ffe:	8c 93       	st	X, r24
						Clr_Bit(MCUCR,3);
    1000:	a5 e5       	ldi	r26, 0x55	; 85
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e5 e5       	ldi	r30, 0x55	; 85
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	87 7f       	andi	r24, 0xF7	; 247
    100c:	8c 93       	st	X, r24
    100e:	25 c0       	rjmp	.+74     	; 0x105a <EX_vdConfigInterrupt+0x226>
						break;
				}
				break;
			case EX_INT2:
				Set_Bit(GICR,5);
    1010:	ab e5       	ldi	r26, 0x5B	; 91
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	eb e5       	ldi	r30, 0x5B	; 91
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	80 62       	ori	r24, 0x20	; 32
    101c:	8c 93       	st	X, r24
				switch (CopyControlSense)
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	3c 83       	std	Y+4, r19	; 0x04
    1026:	2b 83       	std	Y+3, r18	; 0x03
    1028:	8b 81       	ldd	r24, Y+3	; 0x03
    102a:	9c 81       	ldd	r25, Y+4	; 0x04
    102c:	00 97       	sbiw	r24, 0x00	; 0
    102e:	31 f0       	breq	.+12     	; 0x103c <EX_vdConfigInterrupt+0x208>
    1030:	2b 81       	ldd	r18, Y+3	; 0x03
    1032:	3c 81       	ldd	r19, Y+4	; 0x04
    1034:	21 30       	cpi	r18, 0x01	; 1
    1036:	31 05       	cpc	r19, r1
    1038:	49 f0       	breq	.+18     	; 0x104c <EX_vdConfigInterrupt+0x218>
    103a:	0f c0       	rjmp	.+30     	; 0x105a <EX_vdConfigInterrupt+0x226>
				{
					case EX_SENSE_FALLING_EDGE:
						Clr_Bit(MCUCSR,6);
    103c:	a4 e5       	ldi	r26, 0x54	; 84
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	e4 e5       	ldi	r30, 0x54	; 84
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	8f 7b       	andi	r24, 0xBF	; 191
    1048:	8c 93       	st	X, r24
    104a:	07 c0       	rjmp	.+14     	; 0x105a <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_RAISING_EDGE:
						Set_Bit(MCUCSR,6);
    104c:	a4 e5       	ldi	r26, 0x54	; 84
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e4 e5       	ldi	r30, 0x54	; 84
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	80 64       	ori	r24, 0x40	; 64
    1058:	8c 93       	st	X, r24
						break;
				}
				break;
		}
	}
}
    105a:	2a 96       	adiw	r28, 0x0a	; 10
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	f8 94       	cli
    1060:	de bf       	out	0x3e, r29	; 62
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	cd bf       	out	0x3d, r28	; 61
    1066:	cf 91       	pop	r28
    1068:	df 91       	pop	r29
    106a:	08 95       	ret

0000106c <__vector_1>:
void __vector_1 (void)
{
    106c:	1f 92       	push	r1
    106e:	0f 92       	push	r0
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	0f 92       	push	r0
    1074:	11 24       	eor	r1, r1
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62

}
    107e:	cf 91       	pop	r28
    1080:	df 91       	pop	r29
    1082:	0f 90       	pop	r0
    1084:	0f be       	out	0x3f, r0	; 63
    1086:	0f 90       	pop	r0
    1088:	1f 90       	pop	r1
    108a:	18 95       	reti

0000108c <__vector_2>:
void __vector_2 (void)
{
    108c:	1f 92       	push	r1
    108e:	0f 92       	push	r0
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	0f 92       	push	r0
    1094:	11 24       	eor	r1, r1
    1096:	df 93       	push	r29
    1098:	cf 93       	push	r28
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62

}
    109e:	cf 91       	pop	r28
    10a0:	df 91       	pop	r29
    10a2:	0f 90       	pop	r0
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	0f 90       	pop	r0
    10a8:	1f 90       	pop	r1
    10aa:	18 95       	reti

000010ac <DIO_SetPortDirection>:


/* APIs IMPLEMENTATION */

/* API to Set Port Direction */
DIO_ERROR_state_t DIO_SetPortDirection(uint8_t PortID, uint8_t PortDirection) {
    10ac:	df 93       	push	r29
    10ae:	cf 93       	push	r28
    10b0:	00 d0       	rcall	.+0      	; 0x10b2 <DIO_SetPortDirection+0x6>
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <DIO_SetPortDirection+0x8>
    10b4:	0f 92       	push	r0
    10b6:	cd b7       	in	r28, 0x3d	; 61
    10b8:	de b7       	in	r29, 0x3e	; 62
    10ba:	89 83       	std	Y+1, r24	; 0x01
    10bc:	6a 83       	std	Y+2, r22	; 0x02
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA )) {
    10be:	89 81       	ldd	r24, Y+1	; 0x01
    10c0:	84 30       	cpi	r24, 0x04	; 4
    10c2:	a0 f5       	brcc	.+104    	; 0x112c <DIO_SetPortDirection+0x80>
		switch (PortID) {
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	3d 83       	std	Y+5, r19	; 0x05
    10cc:	2c 83       	std	Y+4, r18	; 0x04
    10ce:	8c 81       	ldd	r24, Y+4	; 0x04
    10d0:	9d 81       	ldd	r25, Y+5	; 0x05
    10d2:	81 30       	cpi	r24, 0x01	; 1
    10d4:	91 05       	cpc	r25, r1
    10d6:	d1 f0       	breq	.+52     	; 0x110c <DIO_SetPortDirection+0x60>
    10d8:	2c 81       	ldd	r18, Y+4	; 0x04
    10da:	3d 81       	ldd	r19, Y+5	; 0x05
    10dc:	22 30       	cpi	r18, 0x02	; 2
    10de:	31 05       	cpc	r19, r1
    10e0:	2c f4       	brge	.+10     	; 0x10ec <DIO_SetPortDirection+0x40>
    10e2:	8c 81       	ldd	r24, Y+4	; 0x04
    10e4:	9d 81       	ldd	r25, Y+5	; 0x05
    10e6:	00 97       	sbiw	r24, 0x00	; 0
    10e8:	61 f0       	breq	.+24     	; 0x1102 <DIO_SetPortDirection+0x56>
    10ea:	1e c0       	rjmp	.+60     	; 0x1128 <DIO_SetPortDirection+0x7c>
    10ec:	2c 81       	ldd	r18, Y+4	; 0x04
    10ee:	3d 81       	ldd	r19, Y+5	; 0x05
    10f0:	22 30       	cpi	r18, 0x02	; 2
    10f2:	31 05       	cpc	r19, r1
    10f4:	81 f0       	breq	.+32     	; 0x1116 <DIO_SetPortDirection+0x6a>
    10f6:	8c 81       	ldd	r24, Y+4	; 0x04
    10f8:	9d 81       	ldd	r25, Y+5	; 0x05
    10fa:	83 30       	cpi	r24, 0x03	; 3
    10fc:	91 05       	cpc	r25, r1
    10fe:	81 f0       	breq	.+32     	; 0x1120 <DIO_SetPortDirection+0x74>
    1100:	13 c0       	rjmp	.+38     	; 0x1128 <DIO_SetPortDirection+0x7c>
		case PORTA :
			PORTA_DIR = PortDirection;
    1102:	ea e3       	ldi	r30, 0x3A	; 58
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	8a 81       	ldd	r24, Y+2	; 0x02
    1108:	80 83       	st	Z, r24
    110a:	0e c0       	rjmp	.+28     	; 0x1128 <DIO_SetPortDirection+0x7c>
			break;
		case PORTB :
			PORTB_DIR = PortDirection;
    110c:	e7 e3       	ldi	r30, 0x37	; 55
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	80 83       	st	Z, r24
    1114:	09 c0       	rjmp	.+18     	; 0x1128 <DIO_SetPortDirection+0x7c>
			break;
		case PORTC :
			PORTC_DIR = PortDirection;
    1116:	e4 e3       	ldi	r30, 0x34	; 52
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	8a 81       	ldd	r24, Y+2	; 0x02
    111c:	80 83       	st	Z, r24
    111e:	04 c0       	rjmp	.+8      	; 0x1128 <DIO_SetPortDirection+0x7c>
			break;
		case PORTD :
			PORTD_DIR = PortDirection;
    1120:	e1 e3       	ldi	r30, 0x31	; 49
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	80 83       	st	Z, r24
			break;
		} //END of SWITCH
		return E_DIO_SUCCESS ;
    1128:	1b 82       	std	Y+3, r1	; 0x03
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <DIO_SetPortDirection+0x84>
	}	  //END of IF
	else {
		return E_DIO_INVALID_PORT_NUMBER ;
    112c:	91 e0       	ldi	r25, 0x01	; 1
    112e:	9b 83       	std	Y+3, r25	; 0x03
    1130:	8b 81       	ldd	r24, Y+3	; 0x03

	}	  //END of ELSE
}	  //END DIO_setPortDirection
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	0f 90       	pop	r0
    113c:	cf 91       	pop	r28
    113e:	df 91       	pop	r29
    1140:	08 95       	ret

00001142 <DIO_SetPinDirection>:

/* API to Set Pin Direction */
DIO_ERROR_state_t DIO_SetPinDirection(uint8_t PortID, uint8_t PinNumber,
		uint8_t PinDirection) {
    1142:	df 93       	push	r29
    1144:	cf 93       	push	r28
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
    114a:	28 97       	sbiw	r28, 0x08	; 8
    114c:	0f b6       	in	r0, 0x3f	; 63
    114e:	f8 94       	cli
    1150:	de bf       	out	0x3e, r29	; 62
    1152:	0f be       	out	0x3f, r0	; 63
    1154:	cd bf       	out	0x3d, r28	; 61
    1156:	89 83       	std	Y+1, r24	; 0x01
    1158:	6a 83       	std	Y+2, r22	; 0x02
    115a:	4b 83       	std	Y+3, r20	; 0x03
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA ) && (PinNumber >= PIN0 )
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	84 30       	cpi	r24, 0x04	; 4
    1160:	08 f0       	brcs	.+2      	; 0x1164 <DIO_SetPinDirection+0x22>
    1162:	f4 c0       	rjmp	.+488    	; 0x134c <DIO_SetPinDirection+0x20a>
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	88 30       	cpi	r24, 0x08	; 8
    1168:	08 f0       	brcs	.+2      	; 0x116c <DIO_SetPinDirection+0x2a>
    116a:	f0 c0       	rjmp	.+480    	; 0x134c <DIO_SetPinDirection+0x20a>
			&& (PinNumber <= PIN7 )) {
		if (PinDirection == PIN_OUTPUT) {
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	81 30       	cpi	r24, 0x01	; 1
    1170:	09 f0       	breq	.+2      	; 0x1174 <DIO_SetPinDirection+0x32>
    1172:	70 c0       	rjmp	.+224    	; 0x1254 <DIO_SetPinDirection+0x112>
			switch (PortID) {
    1174:	89 81       	ldd	r24, Y+1	; 0x01
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	38 87       	std	Y+8, r19	; 0x08
    117c:	2f 83       	std	Y+7, r18	; 0x07
    117e:	8f 81       	ldd	r24, Y+7	; 0x07
    1180:	98 85       	ldd	r25, Y+8	; 0x08
    1182:	81 30       	cpi	r24, 0x01	; 1
    1184:	91 05       	cpc	r25, r1
    1186:	49 f1       	breq	.+82     	; 0x11da <DIO_SetPinDirection+0x98>
    1188:	2f 81       	ldd	r18, Y+7	; 0x07
    118a:	38 85       	ldd	r19, Y+8	; 0x08
    118c:	22 30       	cpi	r18, 0x02	; 2
    118e:	31 05       	cpc	r19, r1
    1190:	2c f4       	brge	.+10     	; 0x119c <DIO_SetPinDirection+0x5a>
    1192:	8f 81       	ldd	r24, Y+7	; 0x07
    1194:	98 85       	ldd	r25, Y+8	; 0x08
    1196:	00 97       	sbiw	r24, 0x00	; 0
    1198:	61 f0       	breq	.+24     	; 0x11b2 <DIO_SetPinDirection+0x70>
    119a:	5a c0       	rjmp	.+180    	; 0x1250 <DIO_SetPinDirection+0x10e>
    119c:	2f 81       	ldd	r18, Y+7	; 0x07
    119e:	38 85       	ldd	r19, Y+8	; 0x08
    11a0:	22 30       	cpi	r18, 0x02	; 2
    11a2:	31 05       	cpc	r19, r1
    11a4:	71 f1       	breq	.+92     	; 0x1202 <DIO_SetPinDirection+0xc0>
    11a6:	8f 81       	ldd	r24, Y+7	; 0x07
    11a8:	98 85       	ldd	r25, Y+8	; 0x08
    11aa:	83 30       	cpi	r24, 0x03	; 3
    11ac:	91 05       	cpc	r25, r1
    11ae:	e9 f1       	breq	.+122    	; 0x122a <DIO_SetPinDirection+0xe8>
    11b0:	4f c0       	rjmp	.+158    	; 0x1250 <DIO_SetPinDirection+0x10e>
			case PORTA :
				Set_Bit(PORTA_DIR, PinNumber);
    11b2:	aa e3       	ldi	r26, 0x3A	; 58
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	ea e3       	ldi	r30, 0x3A	; 58
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	48 2f       	mov	r20, r24
    11be:	8a 81       	ldd	r24, Y+2	; 0x02
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	02 2e       	mov	r0, r18
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <DIO_SetPinDirection+0x8e>
    11cc:	88 0f       	add	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	0a 94       	dec	r0
    11d2:	e2 f7       	brpl	.-8      	; 0x11cc <DIO_SetPinDirection+0x8a>
    11d4:	84 2b       	or	r24, r20
    11d6:	8c 93       	st	X, r24
    11d8:	3b c0       	rjmp	.+118    	; 0x1250 <DIO_SetPinDirection+0x10e>
				break;
			case PORTB :
				Set_Bit(PORTB_DIR, PinNumber);
    11da:	a7 e3       	ldi	r26, 0x37	; 55
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e7 e3       	ldi	r30, 0x37	; 55
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	48 2f       	mov	r20, r24
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	02 2e       	mov	r0, r18
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <DIO_SetPinDirection+0xb6>
    11f4:	88 0f       	add	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	0a 94       	dec	r0
    11fa:	e2 f7       	brpl	.-8      	; 0x11f4 <DIO_SetPinDirection+0xb2>
    11fc:	84 2b       	or	r24, r20
    11fe:	8c 93       	st	X, r24
    1200:	27 c0       	rjmp	.+78     	; 0x1250 <DIO_SetPinDirection+0x10e>
				break;
			case PORTC :
				Set_Bit(PORTC_DIR, PinNumber);
    1202:	a4 e3       	ldi	r26, 0x34	; 52
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	e4 e3       	ldi	r30, 0x34	; 52
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	48 2f       	mov	r20, r24
    120e:	8a 81       	ldd	r24, Y+2	; 0x02
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	02 2e       	mov	r0, r18
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <DIO_SetPinDirection+0xde>
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	0a 94       	dec	r0
    1222:	e2 f7       	brpl	.-8      	; 0x121c <DIO_SetPinDirection+0xda>
    1224:	84 2b       	or	r24, r20
    1226:	8c 93       	st	X, r24
    1228:	13 c0       	rjmp	.+38     	; 0x1250 <DIO_SetPinDirection+0x10e>
				break;
			case PORTD :
				Set_Bit(PORTD_DIR, PinNumber);
    122a:	a1 e3       	ldi	r26, 0x31	; 49
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	e1 e3       	ldi	r30, 0x31	; 49
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	48 2f       	mov	r20, r24
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	02 2e       	mov	r0, r18
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <DIO_SetPinDirection+0x106>
    1244:	88 0f       	add	r24, r24
    1246:	99 1f       	adc	r25, r25
    1248:	0a 94       	dec	r0
    124a:	e2 f7       	brpl	.-8      	; 0x1244 <DIO_SetPinDirection+0x102>
    124c:	84 2b       	or	r24, r20
    124e:	8c 93       	st	X, r24
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
    1250:	1e 82       	std	Y+6, r1	; 0x06
    1252:	7e c0       	rjmp	.+252    	; 0x1350 <DIO_SetPinDirection+0x20e>
		} // END of IF that check for the direction if it is INPUT
		else if (PinDirection == PIN_INPUT) {
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	88 23       	and	r24, r24
    1258:	09 f0       	breq	.+2      	; 0x125c <DIO_SetPinDirection+0x11a>
    125a:	75 c0       	rjmp	.+234    	; 0x1346 <DIO_SetPinDirection+0x204>
			switch (PortID) {
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	3d 83       	std	Y+5, r19	; 0x05
    1264:	2c 83       	std	Y+4, r18	; 0x04
    1266:	8c 81       	ldd	r24, Y+4	; 0x04
    1268:	9d 81       	ldd	r25, Y+5	; 0x05
    126a:	81 30       	cpi	r24, 0x01	; 1
    126c:	91 05       	cpc	r25, r1
    126e:	59 f1       	breq	.+86     	; 0x12c6 <DIO_SetPinDirection+0x184>
    1270:	2c 81       	ldd	r18, Y+4	; 0x04
    1272:	3d 81       	ldd	r19, Y+5	; 0x05
    1274:	22 30       	cpi	r18, 0x02	; 2
    1276:	31 05       	cpc	r19, r1
    1278:	2c f4       	brge	.+10     	; 0x1284 <DIO_SetPinDirection+0x142>
    127a:	8c 81       	ldd	r24, Y+4	; 0x04
    127c:	9d 81       	ldd	r25, Y+5	; 0x05
    127e:	00 97       	sbiw	r24, 0x00	; 0
    1280:	69 f0       	breq	.+26     	; 0x129c <DIO_SetPinDirection+0x15a>
    1282:	5f c0       	rjmp	.+190    	; 0x1342 <DIO_SetPinDirection+0x200>
    1284:	2c 81       	ldd	r18, Y+4	; 0x04
    1286:	3d 81       	ldd	r19, Y+5	; 0x05
    1288:	22 30       	cpi	r18, 0x02	; 2
    128a:	31 05       	cpc	r19, r1
    128c:	89 f1       	breq	.+98     	; 0x12f0 <DIO_SetPinDirection+0x1ae>
    128e:	8c 81       	ldd	r24, Y+4	; 0x04
    1290:	9d 81       	ldd	r25, Y+5	; 0x05
    1292:	83 30       	cpi	r24, 0x03	; 3
    1294:	91 05       	cpc	r25, r1
    1296:	09 f4       	brne	.+2      	; 0x129a <DIO_SetPinDirection+0x158>
    1298:	40 c0       	rjmp	.+128    	; 0x131a <DIO_SetPinDirection+0x1d8>
    129a:	53 c0       	rjmp	.+166    	; 0x1342 <DIO_SetPinDirection+0x200>
			case PORTA :
				Clr_Bit(PORTA_DIR, PinNumber);
    129c:	aa e3       	ldi	r26, 0x3A	; 58
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	ea e3       	ldi	r30, 0x3A	; 58
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	48 2f       	mov	r20, r24
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	02 2e       	mov	r0, r18
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <DIO_SetPinDirection+0x178>
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	0a 94       	dec	r0
    12bc:	e2 f7       	brpl	.-8      	; 0x12b6 <DIO_SetPinDirection+0x174>
    12be:	80 95       	com	r24
    12c0:	84 23       	and	r24, r20
    12c2:	8c 93       	st	X, r24
    12c4:	3e c0       	rjmp	.+124    	; 0x1342 <DIO_SetPinDirection+0x200>
				break;
			case PORTB :
				Clr_Bit(PORTB_DIR, PinNumber);
    12c6:	a7 e3       	ldi	r26, 0x37	; 55
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	e7 e3       	ldi	r30, 0x37	; 55
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	48 2f       	mov	r20, r24
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	28 2f       	mov	r18, r24
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	02 2e       	mov	r0, r18
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <DIO_SetPinDirection+0x1a2>
    12e0:	88 0f       	add	r24, r24
    12e2:	99 1f       	adc	r25, r25
    12e4:	0a 94       	dec	r0
    12e6:	e2 f7       	brpl	.-8      	; 0x12e0 <DIO_SetPinDirection+0x19e>
    12e8:	80 95       	com	r24
    12ea:	84 23       	and	r24, r20
    12ec:	8c 93       	st	X, r24
    12ee:	29 c0       	rjmp	.+82     	; 0x1342 <DIO_SetPinDirection+0x200>
				break;
			case PORTC :
				Clr_Bit(PORTC_DIR, PinNumber);
    12f0:	a4 e3       	ldi	r26, 0x34	; 52
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	e4 e3       	ldi	r30, 0x34	; 52
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	48 2f       	mov	r20, r24
    12fc:	8a 81       	ldd	r24, Y+2	; 0x02
    12fe:	28 2f       	mov	r18, r24
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	02 2e       	mov	r0, r18
    1308:	02 c0       	rjmp	.+4      	; 0x130e <DIO_SetPinDirection+0x1cc>
    130a:	88 0f       	add	r24, r24
    130c:	99 1f       	adc	r25, r25
    130e:	0a 94       	dec	r0
    1310:	e2 f7       	brpl	.-8      	; 0x130a <DIO_SetPinDirection+0x1c8>
    1312:	80 95       	com	r24
    1314:	84 23       	and	r24, r20
    1316:	8c 93       	st	X, r24
    1318:	14 c0       	rjmp	.+40     	; 0x1342 <DIO_SetPinDirection+0x200>
				break;
			case PORTD :
				Clr_Bit(PORTD_DIR, PinNumber);
    131a:	a1 e3       	ldi	r26, 0x31	; 49
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	e1 e3       	ldi	r30, 0x31	; 49
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	48 2f       	mov	r20, r24
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	02 2e       	mov	r0, r18
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <DIO_SetPinDirection+0x1f6>
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	0a 94       	dec	r0
    133a:	e2 f7       	brpl	.-8      	; 0x1334 <DIO_SetPinDirection+0x1f2>
    133c:	80 95       	com	r24
    133e:	84 23       	and	r24, r20
    1340:	8c 93       	st	X, r24
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
    1342:	1e 82       	std	Y+6, r1	; 0x06
    1344:	05 c0       	rjmp	.+10     	; 0x1350 <DIO_SetPinDirection+0x20e>
		} // END of ELSE IF that check for the direction if it is INPUT
		else {
			return E_DIO_INVALID_PIN_DIRECTION ;
    1346:	92 e0       	ldi	r25, 0x02	; 2
    1348:	9e 83       	std	Y+6, r25	; 0x06
    134a:	02 c0       	rjmp	.+4      	; 0x1350 <DIO_SetPinDirection+0x20e>
		} //END OF ELSE

	}	  //END of IF That checking the port and pin number

	else {
		return E_DIO_INVALID_PORT_NUMBER ;
    134c:	21 e0       	ldi	r18, 0x01	; 1
    134e:	2e 83       	std	Y+6, r18	; 0x06
    1350:	8e 81       	ldd	r24, Y+6	; 0x06

	}	  //END of ELSE
}	  //END DIO_setPinDirection
    1352:	28 96       	adiw	r28, 0x08	; 8
    1354:	0f b6       	in	r0, 0x3f	; 63
    1356:	f8 94       	cli
    1358:	de bf       	out	0x3e, r29	; 62
    135a:	0f be       	out	0x3f, r0	; 63
    135c:	cd bf       	out	0x3d, r28	; 61
    135e:	cf 91       	pop	r28
    1360:	df 91       	pop	r29
    1362:	08 95       	ret

00001364 <DIO_writePort>:

/* API to Write Port  Value */
DIO_ERROR_state_t DIO_writePort(uint8_t PortID, uint8_t PortValue) {
    1364:	df 93       	push	r29
    1366:	cf 93       	push	r28
    1368:	00 d0       	rcall	.+0      	; 0x136a <DIO_writePort+0x6>
    136a:	00 d0       	rcall	.+0      	; 0x136c <DIO_writePort+0x8>
    136c:	0f 92       	push	r0
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
    1372:	89 83       	std	Y+1, r24	; 0x01
    1374:	6a 83       	std	Y+2, r22	; 0x02
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA )) {
    1376:	89 81       	ldd	r24, Y+1	; 0x01
    1378:	84 30       	cpi	r24, 0x04	; 4
    137a:	a0 f5       	brcc	.+104    	; 0x13e4 <DIO_writePort+0x80>
		switch (PortID) {
    137c:	89 81       	ldd	r24, Y+1	; 0x01
    137e:	28 2f       	mov	r18, r24
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	3d 83       	std	Y+5, r19	; 0x05
    1384:	2c 83       	std	Y+4, r18	; 0x04
    1386:	8c 81       	ldd	r24, Y+4	; 0x04
    1388:	9d 81       	ldd	r25, Y+5	; 0x05
    138a:	81 30       	cpi	r24, 0x01	; 1
    138c:	91 05       	cpc	r25, r1
    138e:	d1 f0       	breq	.+52     	; 0x13c4 <DIO_writePort+0x60>
    1390:	2c 81       	ldd	r18, Y+4	; 0x04
    1392:	3d 81       	ldd	r19, Y+5	; 0x05
    1394:	22 30       	cpi	r18, 0x02	; 2
    1396:	31 05       	cpc	r19, r1
    1398:	2c f4       	brge	.+10     	; 0x13a4 <DIO_writePort+0x40>
    139a:	8c 81       	ldd	r24, Y+4	; 0x04
    139c:	9d 81       	ldd	r25, Y+5	; 0x05
    139e:	00 97       	sbiw	r24, 0x00	; 0
    13a0:	61 f0       	breq	.+24     	; 0x13ba <DIO_writePort+0x56>
    13a2:	1e c0       	rjmp	.+60     	; 0x13e0 <DIO_writePort+0x7c>
    13a4:	2c 81       	ldd	r18, Y+4	; 0x04
    13a6:	3d 81       	ldd	r19, Y+5	; 0x05
    13a8:	22 30       	cpi	r18, 0x02	; 2
    13aa:	31 05       	cpc	r19, r1
    13ac:	81 f0       	breq	.+32     	; 0x13ce <DIO_writePort+0x6a>
    13ae:	8c 81       	ldd	r24, Y+4	; 0x04
    13b0:	9d 81       	ldd	r25, Y+5	; 0x05
    13b2:	83 30       	cpi	r24, 0x03	; 3
    13b4:	91 05       	cpc	r25, r1
    13b6:	81 f0       	breq	.+32     	; 0x13d8 <DIO_writePort+0x74>
    13b8:	13 c0       	rjmp	.+38     	; 0x13e0 <DIO_writePort+0x7c>
		case PORTA :
			PORTA_DATA = PortValue;
    13ba:	eb e3       	ldi	r30, 0x3B	; 59
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	80 83       	st	Z, r24
    13c2:	0e c0       	rjmp	.+28     	; 0x13e0 <DIO_writePort+0x7c>
			break;
		case PORTB :
			PORTB_DATA = PortValue;
    13c4:	e8 e3       	ldi	r30, 0x38	; 56
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	80 83       	st	Z, r24
    13cc:	09 c0       	rjmp	.+18     	; 0x13e0 <DIO_writePort+0x7c>
			break;
		case PORTC :
			PORTC_DATA = PortValue;
    13ce:	e5 e3       	ldi	r30, 0x35	; 53
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	80 83       	st	Z, r24
    13d6:	04 c0       	rjmp	.+8      	; 0x13e0 <DIO_writePort+0x7c>
			break;
		case PORTD :
			PORTD_DATA = PortValue;
    13d8:	e2 e3       	ldi	r30, 0x32	; 50
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	80 83       	st	Z, r24
			break;

		} //END of SWITCH
		return E_DIO_SUCCESS ;
    13e0:	1b 82       	std	Y+3, r1	; 0x03
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <DIO_writePort+0x84>
	}	  //END of IF
	else {
		return E_DIO_INVALID_PORT_NUMBER ;
    13e4:	91 e0       	ldi	r25, 0x01	; 1
    13e6:	9b 83       	std	Y+3, r25	; 0x03
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03

	}	  //END of ELSE
}	  //END DIO_writePortValue
    13ea:	0f 90       	pop	r0
    13ec:	0f 90       	pop	r0
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	cf 91       	pop	r28
    13f6:	df 91       	pop	r29
    13f8:	08 95       	ret

000013fa <DIO_WritePin>:

/* API to Write Pin  Value */
DIO_ERROR_state_t DIO_WritePin(uint8_t PortID, uint8_t PinNumber,
		uint8_t PinDirection) {
    13fa:	df 93       	push	r29
    13fc:	cf 93       	push	r28
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
    1402:	28 97       	sbiw	r28, 0x08	; 8
    1404:	0f b6       	in	r0, 0x3f	; 63
    1406:	f8 94       	cli
    1408:	de bf       	out	0x3e, r29	; 62
    140a:	0f be       	out	0x3f, r0	; 63
    140c:	cd bf       	out	0x3d, r28	; 61
    140e:	89 83       	std	Y+1, r24	; 0x01
    1410:	6a 83       	std	Y+2, r22	; 0x02
    1412:	4b 83       	std	Y+3, r20	; 0x03
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA ) && (PinNumber >= PIN0 )
    1414:	89 81       	ldd	r24, Y+1	; 0x01
    1416:	84 30       	cpi	r24, 0x04	; 4
    1418:	08 f0       	brcs	.+2      	; 0x141c <DIO_WritePin+0x22>
    141a:	f4 c0       	rjmp	.+488    	; 0x1604 <DIO_WritePin+0x20a>
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	88 30       	cpi	r24, 0x08	; 8
    1420:	08 f0       	brcs	.+2      	; 0x1424 <DIO_WritePin+0x2a>
    1422:	f0 c0       	rjmp	.+480    	; 0x1604 <DIO_WritePin+0x20a>
			&& (PinNumber <= PIN7 )) {
		if (PinDirection == PIN_HIGH) {
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
    1426:	81 30       	cpi	r24, 0x01	; 1
    1428:	09 f0       	breq	.+2      	; 0x142c <DIO_WritePin+0x32>
    142a:	70 c0       	rjmp	.+224    	; 0x150c <DIO_WritePin+0x112>
			switch (PortID) {
    142c:	89 81       	ldd	r24, Y+1	; 0x01
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	38 87       	std	Y+8, r19	; 0x08
    1434:	2f 83       	std	Y+7, r18	; 0x07
    1436:	8f 81       	ldd	r24, Y+7	; 0x07
    1438:	98 85       	ldd	r25, Y+8	; 0x08
    143a:	81 30       	cpi	r24, 0x01	; 1
    143c:	91 05       	cpc	r25, r1
    143e:	49 f1       	breq	.+82     	; 0x1492 <DIO_WritePin+0x98>
    1440:	2f 81       	ldd	r18, Y+7	; 0x07
    1442:	38 85       	ldd	r19, Y+8	; 0x08
    1444:	22 30       	cpi	r18, 0x02	; 2
    1446:	31 05       	cpc	r19, r1
    1448:	2c f4       	brge	.+10     	; 0x1454 <DIO_WritePin+0x5a>
    144a:	8f 81       	ldd	r24, Y+7	; 0x07
    144c:	98 85       	ldd	r25, Y+8	; 0x08
    144e:	00 97       	sbiw	r24, 0x00	; 0
    1450:	61 f0       	breq	.+24     	; 0x146a <DIO_WritePin+0x70>
    1452:	5a c0       	rjmp	.+180    	; 0x1508 <DIO_WritePin+0x10e>
    1454:	2f 81       	ldd	r18, Y+7	; 0x07
    1456:	38 85       	ldd	r19, Y+8	; 0x08
    1458:	22 30       	cpi	r18, 0x02	; 2
    145a:	31 05       	cpc	r19, r1
    145c:	71 f1       	breq	.+92     	; 0x14ba <DIO_WritePin+0xc0>
    145e:	8f 81       	ldd	r24, Y+7	; 0x07
    1460:	98 85       	ldd	r25, Y+8	; 0x08
    1462:	83 30       	cpi	r24, 0x03	; 3
    1464:	91 05       	cpc	r25, r1
    1466:	e9 f1       	breq	.+122    	; 0x14e2 <DIO_WritePin+0xe8>
    1468:	4f c0       	rjmp	.+158    	; 0x1508 <DIO_WritePin+0x10e>
			case PORTA :
				Set_Bit(PORTA_DATA, PinNumber);
    146a:	ab e3       	ldi	r26, 0x3B	; 59
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	eb e3       	ldi	r30, 0x3B	; 59
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	48 2f       	mov	r20, r24
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	02 2e       	mov	r0, r18
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <DIO_WritePin+0x8e>
    1484:	88 0f       	add	r24, r24
    1486:	99 1f       	adc	r25, r25
    1488:	0a 94       	dec	r0
    148a:	e2 f7       	brpl	.-8      	; 0x1484 <DIO_WritePin+0x8a>
    148c:	84 2b       	or	r24, r20
    148e:	8c 93       	st	X, r24
    1490:	3b c0       	rjmp	.+118    	; 0x1508 <DIO_WritePin+0x10e>
				break;
			case PORTB :
				Set_Bit(PORTB_DATA, PinNumber);
    1492:	a8 e3       	ldi	r26, 0x38	; 56
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	e8 e3       	ldi	r30, 0x38	; 56
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	48 2f       	mov	r20, r24
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	02 2e       	mov	r0, r18
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <DIO_WritePin+0xb6>
    14ac:	88 0f       	add	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	0a 94       	dec	r0
    14b2:	e2 f7       	brpl	.-8      	; 0x14ac <DIO_WritePin+0xb2>
    14b4:	84 2b       	or	r24, r20
    14b6:	8c 93       	st	X, r24
    14b8:	27 c0       	rjmp	.+78     	; 0x1508 <DIO_WritePin+0x10e>
				break;
			case PORTC :
				Set_Bit(PORTC_DATA, PinNumber);
    14ba:	a5 e3       	ldi	r26, 0x35	; 53
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	e5 e3       	ldi	r30, 0x35	; 53
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	48 2f       	mov	r20, r24
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	28 2f       	mov	r18, r24
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	02 2e       	mov	r0, r18
    14d2:	02 c0       	rjmp	.+4      	; 0x14d8 <DIO_WritePin+0xde>
    14d4:	88 0f       	add	r24, r24
    14d6:	99 1f       	adc	r25, r25
    14d8:	0a 94       	dec	r0
    14da:	e2 f7       	brpl	.-8      	; 0x14d4 <DIO_WritePin+0xda>
    14dc:	84 2b       	or	r24, r20
    14de:	8c 93       	st	X, r24
    14e0:	13 c0       	rjmp	.+38     	; 0x1508 <DIO_WritePin+0x10e>
				break;
			case PORTD :
				Set_Bit(PORTD_DATA, PinNumber);
    14e2:	a2 e3       	ldi	r26, 0x32	; 50
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	e2 e3       	ldi	r30, 0x32	; 50
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	48 2f       	mov	r20, r24
    14ee:	8a 81       	ldd	r24, Y+2	; 0x02
    14f0:	28 2f       	mov	r18, r24
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	02 2e       	mov	r0, r18
    14fa:	02 c0       	rjmp	.+4      	; 0x1500 <DIO_WritePin+0x106>
    14fc:	88 0f       	add	r24, r24
    14fe:	99 1f       	adc	r25, r25
    1500:	0a 94       	dec	r0
    1502:	e2 f7       	brpl	.-8      	; 0x14fc <DIO_WritePin+0x102>
    1504:	84 2b       	or	r24, r20
    1506:	8c 93       	st	X, r24
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
    1508:	1e 82       	std	Y+6, r1	; 0x06
    150a:	7e c0       	rjmp	.+252    	; 0x1608 <DIO_WritePin+0x20e>
		} // END of IF that check for the direction if it is INPUT
		else if (PinDirection == PIN_LOW) {
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
    150e:	88 23       	and	r24, r24
    1510:	09 f0       	breq	.+2      	; 0x1514 <DIO_WritePin+0x11a>
    1512:	75 c0       	rjmp	.+234    	; 0x15fe <DIO_WritePin+0x204>
			switch (PortID) {
    1514:	89 81       	ldd	r24, Y+1	; 0x01
    1516:	28 2f       	mov	r18, r24
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	3d 83       	std	Y+5, r19	; 0x05
    151c:	2c 83       	std	Y+4, r18	; 0x04
    151e:	8c 81       	ldd	r24, Y+4	; 0x04
    1520:	9d 81       	ldd	r25, Y+5	; 0x05
    1522:	81 30       	cpi	r24, 0x01	; 1
    1524:	91 05       	cpc	r25, r1
    1526:	59 f1       	breq	.+86     	; 0x157e <DIO_WritePin+0x184>
    1528:	2c 81       	ldd	r18, Y+4	; 0x04
    152a:	3d 81       	ldd	r19, Y+5	; 0x05
    152c:	22 30       	cpi	r18, 0x02	; 2
    152e:	31 05       	cpc	r19, r1
    1530:	2c f4       	brge	.+10     	; 0x153c <DIO_WritePin+0x142>
    1532:	8c 81       	ldd	r24, Y+4	; 0x04
    1534:	9d 81       	ldd	r25, Y+5	; 0x05
    1536:	00 97       	sbiw	r24, 0x00	; 0
    1538:	69 f0       	breq	.+26     	; 0x1554 <DIO_WritePin+0x15a>
    153a:	5f c0       	rjmp	.+190    	; 0x15fa <DIO_WritePin+0x200>
    153c:	2c 81       	ldd	r18, Y+4	; 0x04
    153e:	3d 81       	ldd	r19, Y+5	; 0x05
    1540:	22 30       	cpi	r18, 0x02	; 2
    1542:	31 05       	cpc	r19, r1
    1544:	89 f1       	breq	.+98     	; 0x15a8 <DIO_WritePin+0x1ae>
    1546:	8c 81       	ldd	r24, Y+4	; 0x04
    1548:	9d 81       	ldd	r25, Y+5	; 0x05
    154a:	83 30       	cpi	r24, 0x03	; 3
    154c:	91 05       	cpc	r25, r1
    154e:	09 f4       	brne	.+2      	; 0x1552 <DIO_WritePin+0x158>
    1550:	40 c0       	rjmp	.+128    	; 0x15d2 <DIO_WritePin+0x1d8>
    1552:	53 c0       	rjmp	.+166    	; 0x15fa <DIO_WritePin+0x200>
			case PORTA :
				Clr_Bit(PORTA_DATA, PinNumber);
    1554:	ab e3       	ldi	r26, 0x3B	; 59
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	eb e3       	ldi	r30, 0x3B	; 59
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	48 2f       	mov	r20, r24
    1560:	8a 81       	ldd	r24, Y+2	; 0x02
    1562:	28 2f       	mov	r18, r24
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	02 2e       	mov	r0, r18
    156c:	02 c0       	rjmp	.+4      	; 0x1572 <DIO_WritePin+0x178>
    156e:	88 0f       	add	r24, r24
    1570:	99 1f       	adc	r25, r25
    1572:	0a 94       	dec	r0
    1574:	e2 f7       	brpl	.-8      	; 0x156e <DIO_WritePin+0x174>
    1576:	80 95       	com	r24
    1578:	84 23       	and	r24, r20
    157a:	8c 93       	st	X, r24
    157c:	3e c0       	rjmp	.+124    	; 0x15fa <DIO_WritePin+0x200>
				break;
			case PORTB :
				Clr_Bit(PORTB_DATA, PinNumber);
    157e:	a8 e3       	ldi	r26, 0x38	; 56
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	e8 e3       	ldi	r30, 0x38	; 56
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	48 2f       	mov	r20, r24
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	28 2f       	mov	r18, r24
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	02 2e       	mov	r0, r18
    1596:	02 c0       	rjmp	.+4      	; 0x159c <DIO_WritePin+0x1a2>
    1598:	88 0f       	add	r24, r24
    159a:	99 1f       	adc	r25, r25
    159c:	0a 94       	dec	r0
    159e:	e2 f7       	brpl	.-8      	; 0x1598 <DIO_WritePin+0x19e>
    15a0:	80 95       	com	r24
    15a2:	84 23       	and	r24, r20
    15a4:	8c 93       	st	X, r24
    15a6:	29 c0       	rjmp	.+82     	; 0x15fa <DIO_WritePin+0x200>
				break;
			case PORTC :
				Clr_Bit(PORTC_DATA, PinNumber);
    15a8:	a5 e3       	ldi	r26, 0x35	; 53
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	e5 e3       	ldi	r30, 0x35	; 53
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	48 2f       	mov	r20, r24
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	02 2e       	mov	r0, r18
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <DIO_WritePin+0x1cc>
    15c2:	88 0f       	add	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	0a 94       	dec	r0
    15c8:	e2 f7       	brpl	.-8      	; 0x15c2 <DIO_WritePin+0x1c8>
    15ca:	80 95       	com	r24
    15cc:	84 23       	and	r24, r20
    15ce:	8c 93       	st	X, r24
    15d0:	14 c0       	rjmp	.+40     	; 0x15fa <DIO_WritePin+0x200>
				break;
			case PORTD :
				Clr_Bit(PORTD_DATA, PinNumber);
    15d2:	a2 e3       	ldi	r26, 0x32	; 50
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	e2 e3       	ldi	r30, 0x32	; 50
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	48 2f       	mov	r20, r24
    15de:	8a 81       	ldd	r24, Y+2	; 0x02
    15e0:	28 2f       	mov	r18, r24
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	02 2e       	mov	r0, r18
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <DIO_WritePin+0x1f6>
    15ec:	88 0f       	add	r24, r24
    15ee:	99 1f       	adc	r25, r25
    15f0:	0a 94       	dec	r0
    15f2:	e2 f7       	brpl	.-8      	; 0x15ec <DIO_WritePin+0x1f2>
    15f4:	80 95       	com	r24
    15f6:	84 23       	and	r24, r20
    15f8:	8c 93       	st	X, r24
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
    15fa:	1e 82       	std	Y+6, r1	; 0x06
    15fc:	05 c0       	rjmp	.+10     	; 0x1608 <DIO_WritePin+0x20e>
		} // END of ELSE IF that check for the direction if it is INPUT
		else {
			return E_DIO_INVALID_PIN_DIRECTION ;
    15fe:	92 e0       	ldi	r25, 0x02	; 2
    1600:	9e 83       	std	Y+6, r25	; 0x06
    1602:	02 c0       	rjmp	.+4      	; 0x1608 <DIO_WritePin+0x20e>
		} //END OF ELSE

	}	  //END of IF That checking the port and pin number

	else {
		return E_DIO_INVALID_PORT_NUMBER ;
    1604:	21 e0       	ldi	r18, 0x01	; 1
    1606:	2e 83       	std	Y+6, r18	; 0x06
    1608:	8e 81       	ldd	r24, Y+6	; 0x06

	}	  //END of ELSE
}	  //END of DIO_writePinValue
    160a:	28 96       	adiw	r28, 0x08	; 8
    160c:	0f b6       	in	r0, 0x3f	; 63
    160e:	f8 94       	cli
    1610:	de bf       	out	0x3e, r29	; 62
    1612:	0f be       	out	0x3f, r0	; 63
    1614:	cd bf       	out	0x3d, r28	; 61
    1616:	cf 91       	pop	r28
    1618:	df 91       	pop	r29
    161a:	08 95       	ret

0000161c <DIO_ReadPort>:

/* API to Read Port  Value */
DIO_ERROR_state_t DIO_ReadPort(uint8_t PortID, uint8_t* PortState) {
    161c:	df 93       	push	r29
    161e:	cf 93       	push	r28
    1620:	00 d0       	rcall	.+0      	; 0x1622 <DIO_ReadPort+0x6>
    1622:	00 d0       	rcall	.+0      	; 0x1624 <DIO_ReadPort+0x8>
    1624:	00 d0       	rcall	.+0      	; 0x1626 <DIO_ReadPort+0xa>
    1626:	cd b7       	in	r28, 0x3d	; 61
    1628:	de b7       	in	r29, 0x3e	; 62
    162a:	89 83       	std	Y+1, r24	; 0x01
    162c:	7b 83       	std	Y+3, r23	; 0x03
    162e:	6a 83       	std	Y+2, r22	; 0x02
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA )) {
    1630:	89 81       	ldd	r24, Y+1	; 0x01
    1632:	84 30       	cpi	r24, 0x04	; 4
    1634:	e0 f5       	brcc	.+120    	; 0x16ae <DIO_ReadPort+0x92>
		switch (PortID) {
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	28 2f       	mov	r18, r24
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	3e 83       	std	Y+6, r19	; 0x06
    163e:	2d 83       	std	Y+5, r18	; 0x05
    1640:	8d 81       	ldd	r24, Y+5	; 0x05
    1642:	9e 81       	ldd	r25, Y+6	; 0x06
    1644:	81 30       	cpi	r24, 0x01	; 1
    1646:	91 05       	cpc	r25, r1
    1648:	e1 f0       	breq	.+56     	; 0x1682 <DIO_ReadPort+0x66>
    164a:	2d 81       	ldd	r18, Y+5	; 0x05
    164c:	3e 81       	ldd	r19, Y+6	; 0x06
    164e:	22 30       	cpi	r18, 0x02	; 2
    1650:	31 05       	cpc	r19, r1
    1652:	2c f4       	brge	.+10     	; 0x165e <DIO_ReadPort+0x42>
    1654:	8d 81       	ldd	r24, Y+5	; 0x05
    1656:	9e 81       	ldd	r25, Y+6	; 0x06
    1658:	00 97       	sbiw	r24, 0x00	; 0
    165a:	61 f0       	breq	.+24     	; 0x1674 <DIO_ReadPort+0x58>
    165c:	26 c0       	rjmp	.+76     	; 0x16aa <DIO_ReadPort+0x8e>
    165e:	2d 81       	ldd	r18, Y+5	; 0x05
    1660:	3e 81       	ldd	r19, Y+6	; 0x06
    1662:	22 30       	cpi	r18, 0x02	; 2
    1664:	31 05       	cpc	r19, r1
    1666:	a1 f0       	breq	.+40     	; 0x1690 <DIO_ReadPort+0x74>
    1668:	8d 81       	ldd	r24, Y+5	; 0x05
    166a:	9e 81       	ldd	r25, Y+6	; 0x06
    166c:	83 30       	cpi	r24, 0x03	; 3
    166e:	91 05       	cpc	r25, r1
    1670:	b1 f0       	breq	.+44     	; 0x169e <DIO_ReadPort+0x82>
    1672:	1b c0       	rjmp	.+54     	; 0x16aa <DIO_ReadPort+0x8e>
		case PORTA :
			*(PortState) = PORTA_STAT;
    1674:	e9 e3       	ldi	r30, 0x39	; 57
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	ea 81       	ldd	r30, Y+2	; 0x02
    167c:	fb 81       	ldd	r31, Y+3	; 0x03
    167e:	80 83       	st	Z, r24
    1680:	14 c0       	rjmp	.+40     	; 0x16aa <DIO_ReadPort+0x8e>
			break;
		case PORTB :
			*(PortState) = PORTB_STAT;
    1682:	e6 e3       	ldi	r30, 0x36	; 54
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	ea 81       	ldd	r30, Y+2	; 0x02
    168a:	fb 81       	ldd	r31, Y+3	; 0x03
    168c:	80 83       	st	Z, r24
    168e:	0d c0       	rjmp	.+26     	; 0x16aa <DIO_ReadPort+0x8e>
			break;
		case PORTC :
			*(PortState) = PORTC_STAT;
    1690:	e3 e3       	ldi	r30, 0x33	; 51
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	ea 81       	ldd	r30, Y+2	; 0x02
    1698:	fb 81       	ldd	r31, Y+3	; 0x03
    169a:	80 83       	st	Z, r24
    169c:	06 c0       	rjmp	.+12     	; 0x16aa <DIO_ReadPort+0x8e>
			break;
		case PORTD :
			*(PortState) = PORTD_STAT;
    169e:	e0 e3       	ldi	r30, 0x30	; 48
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	ea 81       	ldd	r30, Y+2	; 0x02
    16a6:	fb 81       	ldd	r31, Y+3	; 0x03
    16a8:	80 83       	st	Z, r24
			break;

		} //END of SWITCH
		return E_DIO_SUCCESS ;
    16aa:	1c 82       	std	Y+4, r1	; 0x04
    16ac:	02 c0       	rjmp	.+4      	; 0x16b2 <DIO_ReadPort+0x96>
	}	  //END of IF
	else {
		return E_DIO_INVALID_PORT_NUMBER ;
    16ae:	91 e0       	ldi	r25, 0x01	; 1
    16b0:	9c 83       	std	Y+4, r25	; 0x04
    16b2:	8c 81       	ldd	r24, Y+4	; 0x04

	}	  //END of ELSE
}	  //END of DIO_readPort
    16b4:	26 96       	adiw	r28, 0x06	; 6
    16b6:	0f b6       	in	r0, 0x3f	; 63
    16b8:	f8 94       	cli
    16ba:	de bf       	out	0x3e, r29	; 62
    16bc:	0f be       	out	0x3f, r0	; 63
    16be:	cd bf       	out	0x3d, r28	; 61
    16c0:	cf 91       	pop	r28
    16c2:	df 91       	pop	r29
    16c4:	08 95       	ret

000016c6 <DIO_ReadPin>:

/* API to Read Pin  Value */
DIO_ERROR_state_t DIO_ReadPin(uint8_t PortID, uint8_t PinNumber,
		uint8_t* PinState) {
    16c6:	df 93       	push	r29
    16c8:	cf 93       	push	r28
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62
    16ce:	27 97       	sbiw	r28, 0x07	; 7
    16d0:	0f b6       	in	r0, 0x3f	; 63
    16d2:	f8 94       	cli
    16d4:	de bf       	out	0x3e, r29	; 62
    16d6:	0f be       	out	0x3f, r0	; 63
    16d8:	cd bf       	out	0x3d, r28	; 61
    16da:	89 83       	std	Y+1, r24	; 0x01
    16dc:	6a 83       	std	Y+2, r22	; 0x02
    16de:	5c 83       	std	Y+4, r21	; 0x04
    16e0:	4b 83       	std	Y+3, r20	; 0x03
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA ) && (PinNumber >= PIN0 )
    16e2:	89 81       	ldd	r24, Y+1	; 0x01
    16e4:	84 30       	cpi	r24, 0x04	; 4
    16e6:	08 f0       	brcs	.+2      	; 0x16ea <DIO_ReadPin+0x24>
    16e8:	76 c0       	rjmp	.+236    	; 0x17d6 <DIO_ReadPin+0x110>
    16ea:	8a 81       	ldd	r24, Y+2	; 0x02
    16ec:	88 30       	cpi	r24, 0x08	; 8
    16ee:	08 f0       	brcs	.+2      	; 0x16f2 <DIO_ReadPin+0x2c>
    16f0:	72 c0       	rjmp	.+228    	; 0x17d6 <DIO_ReadPin+0x110>
			&& (PinNumber <= PIN7 )) {

		switch (PortID) {
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
    16f4:	28 2f       	mov	r18, r24
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	3f 83       	std	Y+7, r19	; 0x07
    16fa:	2e 83       	std	Y+6, r18	; 0x06
    16fc:	4e 81       	ldd	r20, Y+6	; 0x06
    16fe:	5f 81       	ldd	r21, Y+7	; 0x07
    1700:	41 30       	cpi	r20, 0x01	; 1
    1702:	51 05       	cpc	r21, r1
    1704:	59 f1       	breq	.+86     	; 0x175c <DIO_ReadPin+0x96>
    1706:	8e 81       	ldd	r24, Y+6	; 0x06
    1708:	9f 81       	ldd	r25, Y+7	; 0x07
    170a:	82 30       	cpi	r24, 0x02	; 2
    170c:	91 05       	cpc	r25, r1
    170e:	34 f4       	brge	.+12     	; 0x171c <DIO_ReadPin+0x56>
    1710:	2e 81       	ldd	r18, Y+6	; 0x06
    1712:	3f 81       	ldd	r19, Y+7	; 0x07
    1714:	21 15       	cp	r18, r1
    1716:	31 05       	cpc	r19, r1
    1718:	69 f0       	breq	.+26     	; 0x1734 <DIO_ReadPin+0x6e>
    171a:	5b c0       	rjmp	.+182    	; 0x17d2 <DIO_ReadPin+0x10c>
    171c:	4e 81       	ldd	r20, Y+6	; 0x06
    171e:	5f 81       	ldd	r21, Y+7	; 0x07
    1720:	42 30       	cpi	r20, 0x02	; 2
    1722:	51 05       	cpc	r21, r1
    1724:	79 f1       	breq	.+94     	; 0x1784 <DIO_ReadPin+0xbe>
    1726:	8e 81       	ldd	r24, Y+6	; 0x06
    1728:	9f 81       	ldd	r25, Y+7	; 0x07
    172a:	83 30       	cpi	r24, 0x03	; 3
    172c:	91 05       	cpc	r25, r1
    172e:	09 f4       	brne	.+2      	; 0x1732 <DIO_ReadPin+0x6c>
    1730:	3d c0       	rjmp	.+122    	; 0x17ac <DIO_ReadPin+0xe6>
    1732:	4f c0       	rjmp	.+158    	; 0x17d2 <DIO_ReadPin+0x10c>
		case PORTA :
			*(PinState) = Get_Bit(PORTA_STAT, PinNumber);
    1734:	e9 e3       	ldi	r30, 0x39	; 57
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	28 2f       	mov	r18, r24
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	88 2f       	mov	r24, r24
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	a9 01       	movw	r20, r18
    1746:	02 c0       	rjmp	.+4      	; 0x174c <DIO_ReadPin+0x86>
    1748:	55 95       	asr	r21
    174a:	47 95       	ror	r20
    174c:	8a 95       	dec	r24
    174e:	e2 f7       	brpl	.-8      	; 0x1748 <DIO_ReadPin+0x82>
    1750:	ca 01       	movw	r24, r20
    1752:	81 70       	andi	r24, 0x01	; 1
    1754:	eb 81       	ldd	r30, Y+3	; 0x03
    1756:	fc 81       	ldd	r31, Y+4	; 0x04
    1758:	80 83       	st	Z, r24
    175a:	3b c0       	rjmp	.+118    	; 0x17d2 <DIO_ReadPin+0x10c>
			break;
		case PORTB :
			*(PinState) = Get_Bit(PORTB_STAT, PinNumber);
    175c:	e6 e3       	ldi	r30, 0x36	; 54
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	8a 81       	ldd	r24, Y+2	; 0x02
    1768:	88 2f       	mov	r24, r24
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	a9 01       	movw	r20, r18
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <DIO_ReadPin+0xae>
    1770:	55 95       	asr	r21
    1772:	47 95       	ror	r20
    1774:	8a 95       	dec	r24
    1776:	e2 f7       	brpl	.-8      	; 0x1770 <DIO_ReadPin+0xaa>
    1778:	ca 01       	movw	r24, r20
    177a:	81 70       	andi	r24, 0x01	; 1
    177c:	eb 81       	ldd	r30, Y+3	; 0x03
    177e:	fc 81       	ldd	r31, Y+4	; 0x04
    1780:	80 83       	st	Z, r24
    1782:	27 c0       	rjmp	.+78     	; 0x17d2 <DIO_ReadPin+0x10c>
			break;
		case PORTC :
			*(PinState) = Get_Bit(PORTC_STAT, PinNumber);
    1784:	e3 e3       	ldi	r30, 0x33	; 51
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	28 2f       	mov	r18, r24
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	88 2f       	mov	r24, r24
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	a9 01       	movw	r20, r18
    1796:	02 c0       	rjmp	.+4      	; 0x179c <DIO_ReadPin+0xd6>
    1798:	55 95       	asr	r21
    179a:	47 95       	ror	r20
    179c:	8a 95       	dec	r24
    179e:	e2 f7       	brpl	.-8      	; 0x1798 <DIO_ReadPin+0xd2>
    17a0:	ca 01       	movw	r24, r20
    17a2:	81 70       	andi	r24, 0x01	; 1
    17a4:	eb 81       	ldd	r30, Y+3	; 0x03
    17a6:	fc 81       	ldd	r31, Y+4	; 0x04
    17a8:	80 83       	st	Z, r24
    17aa:	13 c0       	rjmp	.+38     	; 0x17d2 <DIO_ReadPin+0x10c>
			break;
		case PORTD :
			*(PinState) = Get_Bit(PORTD_STAT, PinNumber);
    17ac:	e0 e3       	ldi	r30, 0x30	; 48
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	28 2f       	mov	r18, r24
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	8a 81       	ldd	r24, Y+2	; 0x02
    17b8:	88 2f       	mov	r24, r24
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	a9 01       	movw	r20, r18
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <DIO_ReadPin+0xfe>
    17c0:	55 95       	asr	r21
    17c2:	47 95       	ror	r20
    17c4:	8a 95       	dec	r24
    17c6:	e2 f7       	brpl	.-8      	; 0x17c0 <DIO_ReadPin+0xfa>
    17c8:	ca 01       	movw	r24, r20
    17ca:	81 70       	andi	r24, 0x01	; 1
    17cc:	eb 81       	ldd	r30, Y+3	; 0x03
    17ce:	fc 81       	ldd	r31, Y+4	; 0x04
    17d0:	80 83       	st	Z, r24
			break;

		} //END of SWITCH
		return E_DIO_SUCCESS ;
    17d2:	1d 82       	std	Y+5, r1	; 0x05
    17d4:	02 c0       	rjmp	.+4      	; 0x17da <DIO_ReadPin+0x114>

	}	  //END of IF That checking the port and pin number

	else {
		return E_DIO_INVALID_PORT_NUMBER ;
    17d6:	51 e0       	ldi	r21, 0x01	; 1
    17d8:	5d 83       	std	Y+5, r21	; 0x05
    17da:	8d 81       	ldd	r24, Y+5	; 0x05

	}	  //END of ELSE
}    //END of DIO_readPint
    17dc:	27 96       	adiw	r28, 0x07	; 7
    17de:	0f b6       	in	r0, 0x3f	; 63
    17e0:	f8 94       	cli
    17e2:	de bf       	out	0x3e, r29	; 62
    17e4:	0f be       	out	0x3f, r0	; 63
    17e6:	cd bf       	out	0x3d, r28	; 61
    17e8:	cf 91       	pop	r28
    17ea:	df 91       	pop	r29
    17ec:	08 95       	ret

000017ee <DIO_TogglePin>:

/* API to toggle pin*/
DIO_ERROR_state_t DIO_TogglePin(uint8_t PortID, uint8_t PinNumber){
    17ee:	df 93       	push	r29
    17f0:	cf 93       	push	r28
    17f2:	00 d0       	rcall	.+0      	; 0x17f4 <DIO_TogglePin+0x6>
    17f4:	00 d0       	rcall	.+0      	; 0x17f6 <DIO_TogglePin+0x8>
    17f6:	0f 92       	push	r0
    17f8:	cd b7       	in	r28, 0x3d	; 61
    17fa:	de b7       	in	r29, 0x3e	; 62
    17fc:	89 83       	std	Y+1, r24	; 0x01
    17fe:	6a 83       	std	Y+2, r22	; 0x02
	//Check for the ports if it is between 0 to 3
		if ((PortID <= PORTD ) && (PortID >= PORTA ) && (PinNumber >= PIN0 )
    1800:	89 81       	ldd	r24, Y+1	; 0x01
    1802:	84 30       	cpi	r24, 0x04	; 4
    1804:	08 f0       	brcs	.+2      	; 0x1808 <DIO_TogglePin+0x1a>
    1806:	74 c0       	rjmp	.+232    	; 0x18f0 <DIO_TogglePin+0x102>
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	88 30       	cpi	r24, 0x08	; 8
    180c:	08 f0       	brcs	.+2      	; 0x1810 <DIO_TogglePin+0x22>
    180e:	70 c0       	rjmp	.+224    	; 0x18f0 <DIO_TogglePin+0x102>
				&& (PinNumber <= PIN7 )) {
			switch (PortID) {
    1810:	89 81       	ldd	r24, Y+1	; 0x01
    1812:	28 2f       	mov	r18, r24
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	3d 83       	std	Y+5, r19	; 0x05
    1818:	2c 83       	std	Y+4, r18	; 0x04
    181a:	8c 81       	ldd	r24, Y+4	; 0x04
    181c:	9d 81       	ldd	r25, Y+5	; 0x05
    181e:	81 30       	cpi	r24, 0x01	; 1
    1820:	91 05       	cpc	r25, r1
    1822:	49 f1       	breq	.+82     	; 0x1876 <DIO_TogglePin+0x88>
    1824:	2c 81       	ldd	r18, Y+4	; 0x04
    1826:	3d 81       	ldd	r19, Y+5	; 0x05
    1828:	22 30       	cpi	r18, 0x02	; 2
    182a:	31 05       	cpc	r19, r1
    182c:	2c f4       	brge	.+10     	; 0x1838 <DIO_TogglePin+0x4a>
    182e:	8c 81       	ldd	r24, Y+4	; 0x04
    1830:	9d 81       	ldd	r25, Y+5	; 0x05
    1832:	00 97       	sbiw	r24, 0x00	; 0
    1834:	61 f0       	breq	.+24     	; 0x184e <DIO_TogglePin+0x60>
    1836:	5a c0       	rjmp	.+180    	; 0x18ec <DIO_TogglePin+0xfe>
    1838:	2c 81       	ldd	r18, Y+4	; 0x04
    183a:	3d 81       	ldd	r19, Y+5	; 0x05
    183c:	22 30       	cpi	r18, 0x02	; 2
    183e:	31 05       	cpc	r19, r1
    1840:	71 f1       	breq	.+92     	; 0x189e <DIO_TogglePin+0xb0>
    1842:	8c 81       	ldd	r24, Y+4	; 0x04
    1844:	9d 81       	ldd	r25, Y+5	; 0x05
    1846:	83 30       	cpi	r24, 0x03	; 3
    1848:	91 05       	cpc	r25, r1
    184a:	e9 f1       	breq	.+122    	; 0x18c6 <DIO_TogglePin+0xd8>
    184c:	4f c0       	rjmp	.+158    	; 0x18ec <DIO_TogglePin+0xfe>
			case PORTA :
				Toggle_Bit(PORTA_DATA, PinNumber);
    184e:	ab e3       	ldi	r26, 0x3B	; 59
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	eb e3       	ldi	r30, 0x3B	; 59
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	48 2f       	mov	r20, r24
    185a:	8a 81       	ldd	r24, Y+2	; 0x02
    185c:	28 2f       	mov	r18, r24
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	02 2e       	mov	r0, r18
    1866:	02 c0       	rjmp	.+4      	; 0x186c <DIO_TogglePin+0x7e>
    1868:	88 0f       	add	r24, r24
    186a:	99 1f       	adc	r25, r25
    186c:	0a 94       	dec	r0
    186e:	e2 f7       	brpl	.-8      	; 0x1868 <DIO_TogglePin+0x7a>
    1870:	84 27       	eor	r24, r20
    1872:	8c 93       	st	X, r24
    1874:	3b c0       	rjmp	.+118    	; 0x18ec <DIO_TogglePin+0xfe>
				break;
			case PORTB :
				Toggle_Bit(PORTB_DATA, PinNumber);
    1876:	a8 e3       	ldi	r26, 0x38	; 56
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	e8 e3       	ldi	r30, 0x38	; 56
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	48 2f       	mov	r20, r24
    1882:	8a 81       	ldd	r24, Y+2	; 0x02
    1884:	28 2f       	mov	r18, r24
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	02 2e       	mov	r0, r18
    188e:	02 c0       	rjmp	.+4      	; 0x1894 <DIO_TogglePin+0xa6>
    1890:	88 0f       	add	r24, r24
    1892:	99 1f       	adc	r25, r25
    1894:	0a 94       	dec	r0
    1896:	e2 f7       	brpl	.-8      	; 0x1890 <DIO_TogglePin+0xa2>
    1898:	84 27       	eor	r24, r20
    189a:	8c 93       	st	X, r24
    189c:	27 c0       	rjmp	.+78     	; 0x18ec <DIO_TogglePin+0xfe>
				break;
			case PORTC :
				Toggle_Bit(PORTC_DATA, PinNumber);
    189e:	a5 e3       	ldi	r26, 0x35	; 53
    18a0:	b0 e0       	ldi	r27, 0x00	; 0
    18a2:	e5 e3       	ldi	r30, 0x35	; 53
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	48 2f       	mov	r20, r24
    18aa:	8a 81       	ldd	r24, Y+2	; 0x02
    18ac:	28 2f       	mov	r18, r24
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	02 2e       	mov	r0, r18
    18b6:	02 c0       	rjmp	.+4      	; 0x18bc <DIO_TogglePin+0xce>
    18b8:	88 0f       	add	r24, r24
    18ba:	99 1f       	adc	r25, r25
    18bc:	0a 94       	dec	r0
    18be:	e2 f7       	brpl	.-8      	; 0x18b8 <DIO_TogglePin+0xca>
    18c0:	84 27       	eor	r24, r20
    18c2:	8c 93       	st	X, r24
    18c4:	13 c0       	rjmp	.+38     	; 0x18ec <DIO_TogglePin+0xfe>
				break;
			case PORTD :
				Toggle_Bit(PORTD_DATA, PinNumber);
    18c6:	a2 e3       	ldi	r26, 0x32	; 50
    18c8:	b0 e0       	ldi	r27, 0x00	; 0
    18ca:	e2 e3       	ldi	r30, 0x32	; 50
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	48 2f       	mov	r20, r24
    18d2:	8a 81       	ldd	r24, Y+2	; 0x02
    18d4:	28 2f       	mov	r18, r24
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	02 2e       	mov	r0, r18
    18de:	02 c0       	rjmp	.+4      	; 0x18e4 <DIO_TogglePin+0xf6>
    18e0:	88 0f       	add	r24, r24
    18e2:	99 1f       	adc	r25, r25
    18e4:	0a 94       	dec	r0
    18e6:	e2 f7       	brpl	.-8      	; 0x18e0 <DIO_TogglePin+0xf2>
    18e8:	84 27       	eor	r24, r20
    18ea:	8c 93       	st	X, r24
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
    18ec:	1b 82       	std	Y+3, r1	; 0x03
    18ee:	02 c0       	rjmp	.+4      	; 0x18f4 <DIO_TogglePin+0x106>

		}	  //END of IF That checking the port and pin number

		else {
			return E_DIO_INVALID_PORT_NUMBER ;
    18f0:	91 e0       	ldi	r25, 0x01	; 1
    18f2:	9b 83       	std	Y+3, r25	; 0x03
    18f4:	8b 81       	ldd	r24, Y+3	; 0x03

		}	  //END of ELSE

}
    18f6:	0f 90       	pop	r0
    18f8:	0f 90       	pop	r0
    18fa:	0f 90       	pop	r0
    18fc:	0f 90       	pop	r0
    18fe:	0f 90       	pop	r0
    1900:	cf 91       	pop	r28
    1902:	df 91       	pop	r29
    1904:	08 95       	ret

00001906 <DIO_EnablePinPullup>:
DIO_ERROR_state_t DIO_EnablePinPullup(uint8_t PortID, uint8_t PinNumber){
    1906:	df 93       	push	r29
    1908:	cf 93       	push	r28
    190a:	00 d0       	rcall	.+0      	; 0x190c <DIO_EnablePinPullup+0x6>
    190c:	00 d0       	rcall	.+0      	; 0x190e <DIO_EnablePinPullup+0x8>
    190e:	0f 92       	push	r0
    1910:	cd b7       	in	r28, 0x3d	; 61
    1912:	de b7       	in	r29, 0x3e	; 62
    1914:	89 83       	std	Y+1, r24	; 0x01
    1916:	6a 83       	std	Y+2, r22	; 0x02
	//Check for the ports if it is between 0 to 3
		if ((PortID <= PORTD ) && (PortID >= PORTA ) && (PinNumber >= PIN0 )
    1918:	89 81       	ldd	r24, Y+1	; 0x01
    191a:	84 30       	cpi	r24, 0x04	; 4
    191c:	08 f0       	brcs	.+2      	; 0x1920 <DIO_EnablePinPullup+0x1a>
    191e:	d1 c0       	rjmp	.+418    	; 0x1ac2 <DIO_EnablePinPullup+0x1bc>
    1920:	8a 81       	ldd	r24, Y+2	; 0x02
    1922:	88 30       	cpi	r24, 0x08	; 8
    1924:	08 f0       	brcs	.+2      	; 0x1928 <DIO_EnablePinPullup+0x22>
    1926:	cd c0       	rjmp	.+410    	; 0x1ac2 <DIO_EnablePinPullup+0x1bc>
				&& (PinNumber <= PIN7 )) {
			switch (PortID) {
    1928:	89 81       	ldd	r24, Y+1	; 0x01
    192a:	28 2f       	mov	r18, r24
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	3d 83       	std	Y+5, r19	; 0x05
    1930:	2c 83       	std	Y+4, r18	; 0x04
    1932:	4c 81       	ldd	r20, Y+4	; 0x04
    1934:	5d 81       	ldd	r21, Y+5	; 0x05
    1936:	41 30       	cpi	r20, 0x01	; 1
    1938:	51 05       	cpc	r21, r1
    193a:	09 f4       	brne	.+2      	; 0x193e <DIO_EnablePinPullup+0x38>
    193c:	42 c0       	rjmp	.+132    	; 0x19c2 <DIO_EnablePinPullup+0xbc>
    193e:	8c 81       	ldd	r24, Y+4	; 0x04
    1940:	9d 81       	ldd	r25, Y+5	; 0x05
    1942:	82 30       	cpi	r24, 0x02	; 2
    1944:	91 05       	cpc	r25, r1
    1946:	34 f4       	brge	.+12     	; 0x1954 <DIO_EnablePinPullup+0x4e>
    1948:	2c 81       	ldd	r18, Y+4	; 0x04
    194a:	3d 81       	ldd	r19, Y+5	; 0x05
    194c:	21 15       	cp	r18, r1
    194e:	31 05       	cpc	r19, r1
    1950:	71 f0       	breq	.+28     	; 0x196e <DIO_EnablePinPullup+0x68>
    1952:	b5 c0       	rjmp	.+362    	; 0x1abe <DIO_EnablePinPullup+0x1b8>
    1954:	4c 81       	ldd	r20, Y+4	; 0x04
    1956:	5d 81       	ldd	r21, Y+5	; 0x05
    1958:	42 30       	cpi	r20, 0x02	; 2
    195a:	51 05       	cpc	r21, r1
    195c:	09 f4       	brne	.+2      	; 0x1960 <DIO_EnablePinPullup+0x5a>
    195e:	5b c0       	rjmp	.+182    	; 0x1a16 <DIO_EnablePinPullup+0x110>
    1960:	8c 81       	ldd	r24, Y+4	; 0x04
    1962:	9d 81       	ldd	r25, Y+5	; 0x05
    1964:	83 30       	cpi	r24, 0x03	; 3
    1966:	91 05       	cpc	r25, r1
    1968:	09 f4       	brne	.+2      	; 0x196c <DIO_EnablePinPullup+0x66>
    196a:	7f c0       	rjmp	.+254    	; 0x1a6a <DIO_EnablePinPullup+0x164>
    196c:	a8 c0       	rjmp	.+336    	; 0x1abe <DIO_EnablePinPullup+0x1b8>
			case PORTA :
				if(Get_Bit(PORTA_DIR, PinNumber)==PIN_INPUT){
    196e:	ea e3       	ldi	r30, 0x3A	; 58
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	28 2f       	mov	r18, r24
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	8a 81       	ldd	r24, Y+2	; 0x02
    197a:	88 2f       	mov	r24, r24
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	a9 01       	movw	r20, r18
    1980:	02 c0       	rjmp	.+4      	; 0x1986 <DIO_EnablePinPullup+0x80>
    1982:	55 95       	asr	r21
    1984:	47 95       	ror	r20
    1986:	8a 95       	dec	r24
    1988:	e2 f7       	brpl	.-8      	; 0x1982 <DIO_EnablePinPullup+0x7c>
    198a:	ca 01       	movw	r24, r20
    198c:	81 70       	andi	r24, 0x01	; 1
    198e:	90 70       	andi	r25, 0x00	; 0
    1990:	00 97       	sbiw	r24, 0x00	; 0
    1992:	a1 f4       	brne	.+40     	; 0x19bc <DIO_EnablePinPullup+0xb6>
					Set_Bit(PORTA_DATA, PinNumber);
    1994:	ab e3       	ldi	r26, 0x3B	; 59
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	eb e3       	ldi	r30, 0x3B	; 59
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	48 2f       	mov	r20, r24
    19a0:	8a 81       	ldd	r24, Y+2	; 0x02
    19a2:	28 2f       	mov	r18, r24
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	02 2e       	mov	r0, r18
    19ac:	02 c0       	rjmp	.+4      	; 0x19b2 <DIO_EnablePinPullup+0xac>
    19ae:	88 0f       	add	r24, r24
    19b0:	99 1f       	adc	r25, r25
    19b2:	0a 94       	dec	r0
    19b4:	e2 f7       	brpl	.-8      	; 0x19ae <DIO_EnablePinPullup+0xa8>
    19b6:	84 2b       	or	r24, r20
    19b8:	8c 93       	st	X, r24
    19ba:	81 c0       	rjmp	.+258    	; 0x1abe <DIO_EnablePinPullup+0x1b8>
				}// END of IF which checking if the  pin is INPUT
				else{
					return E_DIO_SET_TO_NON_INPUT;
    19bc:	53 e0       	ldi	r21, 0x03	; 3
    19be:	5b 83       	std	Y+3, r21	; 0x03
    19c0:	82 c0       	rjmp	.+260    	; 0x1ac6 <DIO_EnablePinPullup+0x1c0>
				}
				break;
			case PORTB :
				if(Get_Bit(PORTB_DIR, PinNumber)==PIN_INPUT){
    19c2:	e7 e3       	ldi	r30, 0x37	; 55
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
    19c8:	28 2f       	mov	r18, r24
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	8a 81       	ldd	r24, Y+2	; 0x02
    19ce:	88 2f       	mov	r24, r24
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	a9 01       	movw	r20, r18
    19d4:	02 c0       	rjmp	.+4      	; 0x19da <DIO_EnablePinPullup+0xd4>
    19d6:	55 95       	asr	r21
    19d8:	47 95       	ror	r20
    19da:	8a 95       	dec	r24
    19dc:	e2 f7       	brpl	.-8      	; 0x19d6 <DIO_EnablePinPullup+0xd0>
    19de:	ca 01       	movw	r24, r20
    19e0:	81 70       	andi	r24, 0x01	; 1
    19e2:	90 70       	andi	r25, 0x00	; 0
    19e4:	00 97       	sbiw	r24, 0x00	; 0
    19e6:	a1 f4       	brne	.+40     	; 0x1a10 <DIO_EnablePinPullup+0x10a>
					Set_Bit(PORTB_DATA, PinNumber);
    19e8:	a8 e3       	ldi	r26, 0x38	; 56
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	e8 e3       	ldi	r30, 0x38	; 56
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	48 2f       	mov	r20, r24
    19f4:	8a 81       	ldd	r24, Y+2	; 0x02
    19f6:	28 2f       	mov	r18, r24
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	02 2e       	mov	r0, r18
    1a00:	02 c0       	rjmp	.+4      	; 0x1a06 <DIO_EnablePinPullup+0x100>
    1a02:	88 0f       	add	r24, r24
    1a04:	99 1f       	adc	r25, r25
    1a06:	0a 94       	dec	r0
    1a08:	e2 f7       	brpl	.-8      	; 0x1a02 <DIO_EnablePinPullup+0xfc>
    1a0a:	84 2b       	or	r24, r20
    1a0c:	8c 93       	st	X, r24
    1a0e:	57 c0       	rjmp	.+174    	; 0x1abe <DIO_EnablePinPullup+0x1b8>
				}// END of IF which checking if the  pin is INPUT
				else{
					return E_DIO_SET_TO_NON_INPUT;
    1a10:	53 e0       	ldi	r21, 0x03	; 3
    1a12:	5b 83       	std	Y+3, r21	; 0x03
    1a14:	58 c0       	rjmp	.+176    	; 0x1ac6 <DIO_EnablePinPullup+0x1c0>
				}
				break;
			case PORTC :
				if(Get_Bit(PORTC_DIR, PinNumber)==PIN_INPUT){
    1a16:	e4 e3       	ldi	r30, 0x34	; 52
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	28 2f       	mov	r18, r24
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	8a 81       	ldd	r24, Y+2	; 0x02
    1a22:	88 2f       	mov	r24, r24
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	a9 01       	movw	r20, r18
    1a28:	02 c0       	rjmp	.+4      	; 0x1a2e <DIO_EnablePinPullup+0x128>
    1a2a:	55 95       	asr	r21
    1a2c:	47 95       	ror	r20
    1a2e:	8a 95       	dec	r24
    1a30:	e2 f7       	brpl	.-8      	; 0x1a2a <DIO_EnablePinPullup+0x124>
    1a32:	ca 01       	movw	r24, r20
    1a34:	81 70       	andi	r24, 0x01	; 1
    1a36:	90 70       	andi	r25, 0x00	; 0
    1a38:	00 97       	sbiw	r24, 0x00	; 0
    1a3a:	a1 f4       	brne	.+40     	; 0x1a64 <DIO_EnablePinPullup+0x15e>
					Set_Bit(PORTC_DATA, PinNumber);
    1a3c:	a5 e3       	ldi	r26, 0x35	; 53
    1a3e:	b0 e0       	ldi	r27, 0x00	; 0
    1a40:	e5 e3       	ldi	r30, 0x35	; 53
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	80 81       	ld	r24, Z
    1a46:	48 2f       	mov	r20, r24
    1a48:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4a:	28 2f       	mov	r18, r24
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	02 2e       	mov	r0, r18
    1a54:	02 c0       	rjmp	.+4      	; 0x1a5a <DIO_EnablePinPullup+0x154>
    1a56:	88 0f       	add	r24, r24
    1a58:	99 1f       	adc	r25, r25
    1a5a:	0a 94       	dec	r0
    1a5c:	e2 f7       	brpl	.-8      	; 0x1a56 <DIO_EnablePinPullup+0x150>
    1a5e:	84 2b       	or	r24, r20
    1a60:	8c 93       	st	X, r24
    1a62:	2d c0       	rjmp	.+90     	; 0x1abe <DIO_EnablePinPullup+0x1b8>
				}// END of IF which checking if the  pin is INPUT
				else{
					return E_DIO_SET_TO_NON_INPUT;
    1a64:	53 e0       	ldi	r21, 0x03	; 3
    1a66:	5b 83       	std	Y+3, r21	; 0x03
    1a68:	2e c0       	rjmp	.+92     	; 0x1ac6 <DIO_EnablePinPullup+0x1c0>
				}
				break;
			case PORTD :
				if(Get_Bit(PORTD_DIR, PinNumber)==PIN_INPUT){
    1a6a:	e1 e3       	ldi	r30, 0x31	; 49
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	28 2f       	mov	r18, r24
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	8a 81       	ldd	r24, Y+2	; 0x02
    1a76:	88 2f       	mov	r24, r24
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	a9 01       	movw	r20, r18
    1a7c:	02 c0       	rjmp	.+4      	; 0x1a82 <DIO_EnablePinPullup+0x17c>
    1a7e:	55 95       	asr	r21
    1a80:	47 95       	ror	r20
    1a82:	8a 95       	dec	r24
    1a84:	e2 f7       	brpl	.-8      	; 0x1a7e <DIO_EnablePinPullup+0x178>
    1a86:	ca 01       	movw	r24, r20
    1a88:	81 70       	andi	r24, 0x01	; 1
    1a8a:	90 70       	andi	r25, 0x00	; 0
    1a8c:	00 97       	sbiw	r24, 0x00	; 0
    1a8e:	a1 f4       	brne	.+40     	; 0x1ab8 <DIO_EnablePinPullup+0x1b2>
					Set_Bit(PORTD_DATA, PinNumber);
    1a90:	a2 e3       	ldi	r26, 0x32	; 50
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	e2 e3       	ldi	r30, 0x32	; 50
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	48 2f       	mov	r20, r24
    1a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9e:	28 2f       	mov	r18, r24
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	02 2e       	mov	r0, r18
    1aa8:	02 c0       	rjmp	.+4      	; 0x1aae <DIO_EnablePinPullup+0x1a8>
    1aaa:	88 0f       	add	r24, r24
    1aac:	99 1f       	adc	r25, r25
    1aae:	0a 94       	dec	r0
    1ab0:	e2 f7       	brpl	.-8      	; 0x1aaa <DIO_EnablePinPullup+0x1a4>
    1ab2:	84 2b       	or	r24, r20
    1ab4:	8c 93       	st	X, r24
    1ab6:	03 c0       	rjmp	.+6      	; 0x1abe <DIO_EnablePinPullup+0x1b8>
				}// END of IF which checking if the  pin is INPUT
				else{
					return E_DIO_SET_TO_NON_INPUT;
    1ab8:	53 e0       	ldi	r21, 0x03	; 3
    1aba:	5b 83       	std	Y+3, r21	; 0x03
    1abc:	04 c0       	rjmp	.+8      	; 0x1ac6 <DIO_EnablePinPullup+0x1c0>
				}
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
    1abe:	1b 82       	std	Y+3, r1	; 0x03
    1ac0:	02 c0       	rjmp	.+4      	; 0x1ac6 <DIO_EnablePinPullup+0x1c0>

		}	  //END of IF That checking the port and pin number

		else {
			return E_DIO_INVALID_PORT_NUMBER ;
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	8b 83       	std	Y+3, r24	; 0x03
    1ac6:	8b 81       	ldd	r24, Y+3	; 0x03

		}	  //END of ELSE

}
    1ac8:	0f 90       	pop	r0
    1aca:	0f 90       	pop	r0
    1acc:	0f 90       	pop	r0
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	cf 91       	pop	r28
    1ad4:	df 91       	pop	r29
    1ad6:	08 95       	ret

00001ad8 <LED_Init>:
#define PIN_LOW  (uint8_t)0




uint8_t LED_Init(void){
    1ad8:	df 93       	push	r29
    1ada:	cf 93       	push	r28
    1adc:	cd b7       	in	r28, 0x3d	; 61
    1ade:	de b7       	in	r29, 0x3e	; 62
#if LED_1
	DIO_SetPinDirection(LED_1_PORT,LED_1_PIN,PIN_OUTPUT);
    1ae0:	80 e0       	ldi	r24, 0x00	; 0
    1ae2:	60 e0       	ldi	r22, 0x00	; 0
    1ae4:	41 e0       	ldi	r20, 0x01	; 1
    1ae6:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_SetPinDirection>
#endif
#if LED_2
	DIO_SetPinDirection(LED_2_PORT,LED_2_PIN,PIN_OUTPUT);
    1aea:	80 e0       	ldi	r24, 0x00	; 0
    1aec:	61 e0       	ldi	r22, 0x01	; 1
    1aee:	41 e0       	ldi	r20, 0x01	; 1
    1af0:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_SetPinDirection>
#endif
#if LED_3
	DIO_SetPinDirection(LED_3_PORT,LED_3_PIN,PIN_OUTPUT);
    1af4:	80 e0       	ldi	r24, 0x00	; 0
    1af6:	62 e0       	ldi	r22, 0x02	; 2
    1af8:	41 e0       	ldi	r20, 0x01	; 1
    1afa:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_SetPinDirection>
#endif
	return 0;
    1afe:	80 e0       	ldi	r24, 0x00	; 0
}
    1b00:	cf 91       	pop	r28
    1b02:	df 91       	pop	r29
    1b04:	08 95       	ret

00001b06 <LED_On>:
uint8_t LED_On(uint8_t LedNumber){
    1b06:	df 93       	push	r29
    1b08:	cf 93       	push	r28
    1b0a:	00 d0       	rcall	.+0      	; 0x1b0c <LED_On+0x6>
    1b0c:	0f 92       	push	r0
    1b0e:	cd b7       	in	r28, 0x3d	; 61
    1b10:	de b7       	in	r29, 0x3e	; 62
    1b12:	89 83       	std	Y+1, r24	; 0x01
	switch (LedNumber){
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	28 2f       	mov	r18, r24
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	3b 83       	std	Y+3, r19	; 0x03
    1b1c:	2a 83       	std	Y+2, r18	; 0x02
    1b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b20:	9b 81       	ldd	r25, Y+3	; 0x03
    1b22:	82 30       	cpi	r24, 0x02	; 2
    1b24:	91 05       	cpc	r25, r1
    1b26:	81 f0       	breq	.+32     	; 0x1b48 <LED_On+0x42>
    1b28:	2a 81       	ldd	r18, Y+2	; 0x02
    1b2a:	3b 81       	ldd	r19, Y+3	; 0x03
    1b2c:	23 30       	cpi	r18, 0x03	; 3
    1b2e:	31 05       	cpc	r19, r1
    1b30:	89 f0       	breq	.+34     	; 0x1b54 <LED_On+0x4e>
    1b32:	8a 81       	ldd	r24, Y+2	; 0x02
    1b34:	9b 81       	ldd	r25, Y+3	; 0x03
    1b36:	81 30       	cpi	r24, 0x01	; 1
    1b38:	91 05       	cpc	r25, r1
    1b3a:	89 f4       	brne	.+34     	; 0x1b5e <LED_On+0x58>
	case LED_1:
		DIO_WritePin(LED_1_PORT,LED_1_PIN,PIN_HIGH);
    1b3c:	80 e0       	ldi	r24, 0x00	; 0
    1b3e:	60 e0       	ldi	r22, 0x00	; 0
    1b40:	41 e0       	ldi	r20, 0x01	; 1
    1b42:	0e 94 fd 09 	call	0x13fa	; 0x13fa <DIO_WritePin>
    1b46:	0b c0       	rjmp	.+22     	; 0x1b5e <LED_On+0x58>
		break;
	case LED_2:
		DIO_WritePin(LED_2_PORT,LED_2_PIN,PIN_HIGH);
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	61 e0       	ldi	r22, 0x01	; 1
    1b4c:	41 e0       	ldi	r20, 0x01	; 1
    1b4e:	0e 94 fd 09 	call	0x13fa	; 0x13fa <DIO_WritePin>
    1b52:	05 c0       	rjmp	.+10     	; 0x1b5e <LED_On+0x58>
		break;
	case LED_3:
		DIO_WritePin(LED_3_PORT,LED_3_PIN,PIN_HIGH);
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	62 e0       	ldi	r22, 0x02	; 2
    1b58:	41 e0       	ldi	r20, 0x01	; 1
    1b5a:	0e 94 fd 09 	call	0x13fa	; 0x13fa <DIO_WritePin>
		break;
	}
	return 0;
    1b5e:	80 e0       	ldi	r24, 0x00	; 0

}
    1b60:	0f 90       	pop	r0
    1b62:	0f 90       	pop	r0
    1b64:	0f 90       	pop	r0
    1b66:	cf 91       	pop	r28
    1b68:	df 91       	pop	r29
    1b6a:	08 95       	ret

00001b6c <LED_Off>:
uint8_t LED_Off(uint8_t LedNumber){
    1b6c:	df 93       	push	r29
    1b6e:	cf 93       	push	r28
    1b70:	00 d0       	rcall	.+0      	; 0x1b72 <LED_Off+0x6>
    1b72:	0f 92       	push	r0
    1b74:	cd b7       	in	r28, 0x3d	; 61
    1b76:	de b7       	in	r29, 0x3e	; 62
    1b78:	89 83       	std	Y+1, r24	; 0x01
	switch (LedNumber){
    1b7a:	89 81       	ldd	r24, Y+1	; 0x01
    1b7c:	28 2f       	mov	r18, r24
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	3b 83       	std	Y+3, r19	; 0x03
    1b82:	2a 83       	std	Y+2, r18	; 0x02
    1b84:	8a 81       	ldd	r24, Y+2	; 0x02
    1b86:	9b 81       	ldd	r25, Y+3	; 0x03
    1b88:	82 30       	cpi	r24, 0x02	; 2
    1b8a:	91 05       	cpc	r25, r1
    1b8c:	81 f0       	breq	.+32     	; 0x1bae <LED_Off+0x42>
    1b8e:	2a 81       	ldd	r18, Y+2	; 0x02
    1b90:	3b 81       	ldd	r19, Y+3	; 0x03
    1b92:	23 30       	cpi	r18, 0x03	; 3
    1b94:	31 05       	cpc	r19, r1
    1b96:	89 f0       	breq	.+34     	; 0x1bba <LED_Off+0x4e>
    1b98:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b9c:	81 30       	cpi	r24, 0x01	; 1
    1b9e:	91 05       	cpc	r25, r1
    1ba0:	89 f4       	brne	.+34     	; 0x1bc4 <LED_Off+0x58>
	case LED_1:
		DIO_WritePin(LED_1_PORT,LED_1_PIN,PIN_LOW);
    1ba2:	80 e0       	ldi	r24, 0x00	; 0
    1ba4:	60 e0       	ldi	r22, 0x00	; 0
    1ba6:	40 e0       	ldi	r20, 0x00	; 0
    1ba8:	0e 94 fd 09 	call	0x13fa	; 0x13fa <DIO_WritePin>
    1bac:	0b c0       	rjmp	.+22     	; 0x1bc4 <LED_Off+0x58>
		break;
	case LED_2:
		DIO_WritePin(LED_2_PORT,LED_2_PIN,PIN_LOW);
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	61 e0       	ldi	r22, 0x01	; 1
    1bb2:	40 e0       	ldi	r20, 0x00	; 0
    1bb4:	0e 94 fd 09 	call	0x13fa	; 0x13fa <DIO_WritePin>
    1bb8:	05 c0       	rjmp	.+10     	; 0x1bc4 <LED_Off+0x58>
		break;
	case LED_3:
		DIO_WritePin(LED_3_PORT,LED_3_PIN,PIN_LOW);
    1bba:	80 e0       	ldi	r24, 0x00	; 0
    1bbc:	62 e0       	ldi	r22, 0x02	; 2
    1bbe:	40 e0       	ldi	r20, 0x00	; 0
    1bc0:	0e 94 fd 09 	call	0x13fa	; 0x13fa <DIO_WritePin>
		break;
	}

	return 0;
    1bc4:	80 e0       	ldi	r24, 0x00	; 0
}
    1bc6:	0f 90       	pop	r0
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
    1bcc:	cf 91       	pop	r28
    1bce:	df 91       	pop	r29
    1bd0:	08 95       	ret

00001bd2 <LED_Toggle>:
uint8_t LED_Toggle(uint8_t LedNumber){
    1bd2:	df 93       	push	r29
    1bd4:	cf 93       	push	r28
    1bd6:	00 d0       	rcall	.+0      	; 0x1bd8 <LED_Toggle+0x6>
    1bd8:	0f 92       	push	r0
    1bda:	cd b7       	in	r28, 0x3d	; 61
    1bdc:	de b7       	in	r29, 0x3e	; 62
    1bde:	89 83       	std	Y+1, r24	; 0x01
	switch (LedNumber){
    1be0:	89 81       	ldd	r24, Y+1	; 0x01
    1be2:	28 2f       	mov	r18, r24
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	3b 83       	std	Y+3, r19	; 0x03
    1be8:	2a 83       	std	Y+2, r18	; 0x02
    1bea:	8a 81       	ldd	r24, Y+2	; 0x02
    1bec:	9b 81       	ldd	r25, Y+3	; 0x03
    1bee:	82 30       	cpi	r24, 0x02	; 2
    1bf0:	91 05       	cpc	r25, r1
    1bf2:	79 f0       	breq	.+30     	; 0x1c12 <LED_Toggle+0x40>
    1bf4:	2a 81       	ldd	r18, Y+2	; 0x02
    1bf6:	3b 81       	ldd	r19, Y+3	; 0x03
    1bf8:	23 30       	cpi	r18, 0x03	; 3
    1bfa:	31 05       	cpc	r19, r1
    1bfc:	79 f0       	breq	.+30     	; 0x1c1c <LED_Toggle+0x4a>
    1bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1c00:	9b 81       	ldd	r25, Y+3	; 0x03
    1c02:	81 30       	cpi	r24, 0x01	; 1
    1c04:	91 05       	cpc	r25, r1
    1c06:	71 f4       	brne	.+28     	; 0x1c24 <LED_Toggle+0x52>
	case LED_1:
		DIO_TogglePin(LED_1_PORT,LED_1_PIN);
    1c08:	80 e0       	ldi	r24, 0x00	; 0
    1c0a:	60 e0       	ldi	r22, 0x00	; 0
    1c0c:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <DIO_TogglePin>
    1c10:	09 c0       	rjmp	.+18     	; 0x1c24 <LED_Toggle+0x52>
		break;
	case LED_2:
		DIO_TogglePin(LED_2_PORT,LED_2_PIN);
    1c12:	80 e0       	ldi	r24, 0x00	; 0
    1c14:	61 e0       	ldi	r22, 0x01	; 1
    1c16:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <DIO_TogglePin>
    1c1a:	04 c0       	rjmp	.+8      	; 0x1c24 <LED_Toggle+0x52>
		break;
	case LED_3:
		DIO_TogglePin(LED_3_PORT,LED_3_PIN);
    1c1c:	80 e0       	ldi	r24, 0x00	; 0
    1c1e:	62 e0       	ldi	r22, 0x02	; 2
    1c20:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <DIO_TogglePin>
		break;
	}
	return 0;
    1c24:	80 e0       	ldi	r24, 0x00	; 0

}
    1c26:	0f 90       	pop	r0
    1c28:	0f 90       	pop	r0
    1c2a:	0f 90       	pop	r0
    1c2c:	cf 91       	pop	r28
    1c2e:	df 91       	pop	r29
    1c30:	08 95       	ret

00001c32 <LED_Status>:
uint8_t LED_Status(uint8_t LedNumber, uint8_t* LedState){
    1c32:	df 93       	push	r29
    1c34:	cf 93       	push	r28
    1c36:	00 d0       	rcall	.+0      	; 0x1c38 <LED_Status+0x6>
    1c38:	00 d0       	rcall	.+0      	; 0x1c3a <LED_Status+0x8>
    1c3a:	0f 92       	push	r0
    1c3c:	cd b7       	in	r28, 0x3d	; 61
    1c3e:	de b7       	in	r29, 0x3e	; 62
    1c40:	89 83       	std	Y+1, r24	; 0x01
    1c42:	7b 83       	std	Y+3, r23	; 0x03
    1c44:	6a 83       	std	Y+2, r22	; 0x02
	switch (LedNumber){
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	28 2f       	mov	r18, r24
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	3d 83       	std	Y+5, r19	; 0x05
    1c4e:	2c 83       	std	Y+4, r18	; 0x04
    1c50:	8c 81       	ldd	r24, Y+4	; 0x04
    1c52:	9d 81       	ldd	r25, Y+5	; 0x05
    1c54:	82 30       	cpi	r24, 0x02	; 2
    1c56:	91 05       	cpc	r25, r1
    1c58:	91 f0       	breq	.+36     	; 0x1c7e <LED_Status+0x4c>
    1c5a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c5c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c5e:	23 30       	cpi	r18, 0x03	; 3
    1c60:	31 05       	cpc	r19, r1
    1c62:	a9 f0       	breq	.+42     	; 0x1c8e <LED_Status+0x5c>
    1c64:	8c 81       	ldd	r24, Y+4	; 0x04
    1c66:	9d 81       	ldd	r25, Y+5	; 0x05
    1c68:	81 30       	cpi	r24, 0x01	; 1
    1c6a:	91 05       	cpc	r25, r1
    1c6c:	b9 f4       	brne	.+46     	; 0x1c9c <LED_Status+0x6a>
	case LED_1:
		DIO_ReadPin(LED_1_PORT,LED_1_PIN,LedState);
    1c6e:	2a 81       	ldd	r18, Y+2	; 0x02
    1c70:	3b 81       	ldd	r19, Y+3	; 0x03
    1c72:	80 e0       	ldi	r24, 0x00	; 0
    1c74:	60 e0       	ldi	r22, 0x00	; 0
    1c76:	a9 01       	movw	r20, r18
    1c78:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <DIO_ReadPin>
    1c7c:	0f c0       	rjmp	.+30     	; 0x1c9c <LED_Status+0x6a>
		break;
	case LED_2:
		DIO_ReadPin(LED_2_PORT,LED_2_PIN,LedState);
    1c7e:	2a 81       	ldd	r18, Y+2	; 0x02
    1c80:	3b 81       	ldd	r19, Y+3	; 0x03
    1c82:	80 e0       	ldi	r24, 0x00	; 0
    1c84:	61 e0       	ldi	r22, 0x01	; 1
    1c86:	a9 01       	movw	r20, r18
    1c88:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <DIO_ReadPin>
    1c8c:	07 c0       	rjmp	.+14     	; 0x1c9c <LED_Status+0x6a>
		break;
	case LED_3:
		DIO_ReadPin(LED_3_PORT,LED_3_PIN,LedState);
    1c8e:	2a 81       	ldd	r18, Y+2	; 0x02
    1c90:	3b 81       	ldd	r19, Y+3	; 0x03
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	62 e0       	ldi	r22, 0x02	; 2
    1c96:	a9 01       	movw	r20, r18
    1c98:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <DIO_ReadPin>
		break;
	}
	return 0;
    1c9c:	80 e0       	ldi	r24, 0x00	; 0

}
    1c9e:	0f 90       	pop	r0
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	cf 91       	pop	r28
    1caa:	df 91       	pop	r29
    1cac:	08 95       	ret

00001cae <App_Init>:
 *      Author: Ahmed
 */
#include "twi_master_app.h"
uint8_t data=0x55;

void App_Init(void){
    1cae:	df 93       	push	r29
    1cb0:	cf 93       	push	r28
    1cb2:	cd b7       	in	r28, 0x3d	; 61
    1cb4:	de b7       	in	r29, 0x3e	; 62

	TWI_Init(0);
    1cb6:	80 e0       	ldi	r24, 0x00	; 0
    1cb8:	0e 94 d5 02 	call	0x5aa	; 0x5aa <TWI_Init>
}
    1cbc:	cf 91       	pop	r28
    1cbe:	df 91       	pop	r29
    1cc0:	08 95       	ret

00001cc2 <App_Update>:
void App_Update(void){
    1cc2:	df 93       	push	r29
    1cc4:	cf 93       	push	r28
    1cc6:	cd b7       	in	r28, 0x3d	; 61
    1cc8:	de b7       	in	r29, 0x3e	; 62
	TWI_SendChar(TWI_1,24,data);
    1cca:	90 91 60 00 	lds	r25, 0x0060
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	68 e1       	ldi	r22, 0x18	; 24
    1cd2:	49 2f       	mov	r20, r25
    1cd4:	0e 94 ed 03 	call	0x7da	; 0x7da <TWI_SendChar>
}
    1cd8:	cf 91       	pop	r28
    1cda:	df 91       	pop	r29
    1cdc:	08 95       	ret

00001cde <main>:
/*- INCLUDES 
 -----------------------------------------------*/
#include "App/MASTER_APP/twi_master_app.h"


int main() {
    1cde:	df 93       	push	r29
    1ce0:	cf 93       	push	r28
    1ce2:	cd b7       	in	r28, 0x3d	; 61
    1ce4:	de b7       	in	r29, 0x3e	; 62
	App_Init();
    1ce6:	0e 94 57 0e 	call	0x1cae	; 0x1cae <App_Init>
			App_Update();
    1cea:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <App_Update>
    1cee:	ff cf       	rjmp	.-2      	; 0x1cee <main+0x10>

00001cf0 <_exit>:
    1cf0:	f8 94       	cli

00001cf2 <__stop_program>:
    1cf2:	ff cf       	rjmp	.-2      	; 0x1cf2 <__stop_program>
