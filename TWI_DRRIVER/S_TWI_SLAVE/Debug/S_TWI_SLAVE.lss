
S_TWI_SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001cd8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000012  00800060  00800060  00001d4c  2**0
                  ALLOC
  2 .stab         00003648  00000000  00000000  00001d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000013a9  00000000  00000000  00005394  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 0d 08 	jmp	0x101a	; 0x101a <__vector_1>
       8:	0c 94 1d 08 	jmp	0x103a	; 0x103a <__vector_2>
       c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      30:	0c 94 6e 06 	jmp	0xcdc	; 0xcdc <__vector_12>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 34 05 	jmp	0xa68	; 0xa68 <__vector_19>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a2 37       	cpi	r26, 0x72	; 114
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <main>
      74:	0c 94 6a 0e 	jmp	0x1cd4	; 0x1cd4 <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <UART_Init>:
      7c:	df 93       	push	r29
      7e:	cf 93       	push	r28
      80:	00 d0       	rcall	.+0      	; 0x82 <UART_Init+0x6>
      82:	cd b7       	in	r28, 0x3d	; 61
      84:	de b7       	in	r29, 0x3e	; 62
      86:	8a 83       	std	Y+2, r24	; 0x02
      88:	19 82       	std	Y+1, r1	; 0x01
      8a:	8a 81       	ldd	r24, Y+2	; 0x02
      8c:	88 23       	and	r24, r24
      8e:	19 f0       	breq	.+6      	; 0x96 <UART_Init+0x1a>
      90:	8c ef       	ldi	r24, 0xFC	; 252
      92:	89 83       	std	Y+1, r24	; 0x01
      94:	35 c0       	rjmp	.+106    	; 0x100 <UART_Init+0x84>
      96:	80 91 66 00 	lds	r24, 0x0066
      9a:	81 30       	cpi	r24, 0x01	; 1
      9c:	19 f4       	brne	.+6      	; 0xa4 <UART_Init+0x28>
      9e:	8f ef       	ldi	r24, 0xFF	; 255
      a0:	89 83       	std	Y+1, r24	; 0x01
      a2:	2e c0       	rjmp	.+92     	; 0x100 <UART_Init+0x84>
      a4:	80 91 66 00 	lds	r24, 0x0066
      a8:	88 23       	and	r24, r24
      aa:	51 f5       	brne	.+84     	; 0x100 <UART_Init+0x84>
      ac:	aa e2       	ldi	r26, 0x2A	; 42
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	ea e2       	ldi	r30, 0x2A	; 42
      b2:	f0 e0       	ldi	r31, 0x00	; 0
      b4:	80 81       	ld	r24, Z
      b6:	80 61       	ori	r24, 0x10	; 16
      b8:	8c 93       	st	X, r24
      ba:	aa e2       	ldi	r26, 0x2A	; 42
      bc:	b0 e0       	ldi	r27, 0x00	; 0
      be:	ea e2       	ldi	r30, 0x2A	; 42
      c0:	f0 e0       	ldi	r31, 0x00	; 0
      c2:	80 81       	ld	r24, Z
      c4:	88 60       	ori	r24, 0x08	; 8
      c6:	8c 93       	st	X, r24
      c8:	ab e2       	ldi	r26, 0x2B	; 43
      ca:	b0 e0       	ldi	r27, 0x00	; 0
      cc:	eb e2       	ldi	r30, 0x2B	; 43
      ce:	f0 e0       	ldi	r31, 0x00	; 0
      d0:	80 81       	ld	r24, Z
      d2:	8d 7f       	andi	r24, 0xFD	; 253
      d4:	8c 93       	st	X, r24
      d6:	aa e2       	ldi	r26, 0x2A	; 42
      d8:	b0 e0       	ldi	r27, 0x00	; 0
      da:	ea e2       	ldi	r30, 0x2A	; 42
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	80 81       	ld	r24, Z
      e0:	8b 7f       	andi	r24, 0xFB	; 251
      e2:	8c 93       	st	X, r24
      e4:	a0 e4       	ldi	r26, 0x40	; 64
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	e0 e4       	ldi	r30, 0x40	; 64
      ea:	f0 e0       	ldi	r31, 0x00	; 0
      ec:	80 81       	ld	r24, Z
      ee:	86 68       	ori	r24, 0x86	; 134
      f0:	8c 93       	st	X, r24
      f2:	e9 e2       	ldi	r30, 0x29	; 41
      f4:	f0 e0       	ldi	r31, 0x00	; 0
      f6:	83 e3       	ldi	r24, 0x33	; 51
      f8:	80 83       	st	Z, r24
      fa:	81 e0       	ldi	r24, 0x01	; 1
      fc:	80 93 66 00 	sts	0x0066, r24
     100:	89 81       	ldd	r24, Y+1	; 0x01
     102:	0f 90       	pop	r0
     104:	0f 90       	pop	r0
     106:	cf 91       	pop	r28
     108:	df 91       	pop	r29
     10a:	08 95       	ret

0000010c <UART_TransmitChar>:
	}
	return au8_ERROR_STAT;
}
UART_ERROR_state_t UART_TransmitChar(uint8_t UartNumber, uint8_t TxChar) {
    uint8_t au8_ERROR_STAT=UART_SUCCESS;//ERRROR STAT HAS A SUCCESS VALUE AS DEFAULT
    if (UartNumber>UART_1){
     10c:	df 93       	push	r29
     10e:	cf 93       	push	r28
     110:	00 d0       	rcall	.+0      	; 0x112 <UART_TransmitChar+0x6>
     112:	0f 92       	push	r0
     114:	cd b7       	in	r28, 0x3d	; 61
     116:	de b7       	in	r29, 0x3e	; 62
     118:	8a 83       	std	Y+2, r24	; 0x02
     11a:	6b 83       	std	Y+3, r22	; 0x03
		au8_ERROR_STAT=UART_INVALID_CHANNEL;
     11c:	19 82       	std	Y+1, r1	; 0x01
	}
     11e:	8a 81       	ldd	r24, Y+2	; 0x02
     120:	88 23       	and	r24, r24
     122:	19 f0       	breq	.+6      	; 0x12a <UART_TransmitChar+0x1e>
	else{
     124:	8c ef       	ldi	r24, 0xFC	; 252
     126:	89 83       	std	Y+1, r24	; 0x01
     128:	1b c0       	rjmp	.+54     	; 0x160 <UART_TransmitChar+0x54>
        if(NOT_INIT==gu8_InitFlag){
            au8_ERROR_STAT=UART_NOT_INIT;
        }
     12a:	80 91 66 00 	lds	r24, 0x0066
     12e:	88 23       	and	r24, r24
     130:	19 f4       	brne	.+6      	; 0x138 <UART_TransmitChar+0x2c>
        else if (INIT==gu8_InitFlag){
     132:	8e ef       	ldi	r24, 0xFE	; 254
     134:	89 83       	std	Y+1, r24	; 0x01
     136:	14 c0       	rjmp	.+40     	; 0x160 <UART_TransmitChar+0x54>
        UDR = TxChar;
        while ((Get_Bit(UCSRA, UDRE)) != 1) {
     138:	80 91 66 00 	lds	r24, 0x0066
     13c:	81 30       	cpi	r24, 0x01	; 1
     13e:	81 f4       	brne	.+32     	; 0x160 <UART_TransmitChar+0x54>
        }
     140:	ec e2       	ldi	r30, 0x2C	; 44
     142:	f0 e0       	ldi	r31, 0x00	; 0
     144:	8b 81       	ldd	r24, Y+3	; 0x03
     146:	80 83       	st	Z, r24
        }
     148:	eb e2       	ldi	r30, 0x2B	; 43
     14a:	f0 e0       	ldi	r31, 0x00	; 0
     14c:	80 81       	ld	r24, Z
     14e:	82 95       	swap	r24
     150:	86 95       	lsr	r24
     152:	87 70       	andi	r24, 0x07	; 7
     154:	88 2f       	mov	r24, r24
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	81 70       	andi	r24, 0x01	; 1
     15a:	90 70       	andi	r25, 0x00	; 0
     15c:	00 97       	sbiw	r24, 0x00	; 0
     15e:	a1 f3       	breq	.-24     	; 0x148 <UART_TransmitChar+0x3c>
            //DO NOTHING
        }
	}
	return au8_ERROR_STAT;
}
UART_ERROR_state_t UART_TransmitString(uint8_t UartNumber, ptr_uint8_t TxString) {
     160:	89 81       	ldd	r24, Y+1	; 0x01
    uint8_t au8_ERROR_STAT=UART_SUCCESS;//ERRROR STAT HAS A SUCCESS VALUE AS DEFAULT
     162:	0f 90       	pop	r0
     164:	0f 90       	pop	r0
     166:	0f 90       	pop	r0
     168:	cf 91       	pop	r28
     16a:	df 91       	pop	r29
     16c:	08 95       	ret

0000016e <UART_TransmitString>:
    if(NULL_PTR==TxString){//CHECK IF THE POINTER IS NOT = NULL
     16e:	df 93       	push	r29
     170:	cf 93       	push	r28
     172:	00 d0       	rcall	.+0      	; 0x174 <UART_TransmitString+0x6>
     174:	00 d0       	rcall	.+0      	; 0x176 <UART_TransmitString+0x8>
     176:	0f 92       	push	r0
     178:	cd b7       	in	r28, 0x3d	; 61
     17a:	de b7       	in	r29, 0x3e	; 62
     17c:	8b 83       	std	Y+3, r24	; 0x03
     17e:	7d 83       	std	Y+5, r23	; 0x05
     180:	6c 83       	std	Y+4, r22	; 0x04
        au8_ERROR_STAT=UART_NULL_POINTER;//IF IT IS NULL POINTER STORE NULL POINTERR TO THE ERROR STAT
     182:	1a 82       	std	Y+2, r1	; 0x02
    }
     184:	8c 81       	ldd	r24, Y+4	; 0x04
     186:	9d 81       	ldd	r25, Y+5	; 0x05
     188:	00 97       	sbiw	r24, 0x00	; 0
     18a:	19 f4       	brne	.+6      	; 0x192 <UART_TransmitString+0x24>
    else{
     18c:	8d ef       	ldi	r24, 0xFD	; 253
     18e:	8a 83       	std	Y+2, r24	; 0x02
     190:	39 c0       	rjmp	.+114    	; 0x204 <UART_TransmitString+0x96>
        if (UartNumber>UART_1){//CHECK IF USER ENTERED RIGHT UART CHANNEL
            au8_ERROR_STAT=UART_INVALID_CHANNEL;
        }
     192:	8b 81       	ldd	r24, Y+3	; 0x03
     194:	88 23       	and	r24, r24
     196:	19 f0       	breq	.+6      	; 0x19e <UART_TransmitString+0x30>
        else{
     198:	8c ef       	ldi	r24, 0xFC	; 252
     19a:	8a 83       	std	Y+2, r24	; 0x02
     19c:	33 c0       	rjmp	.+102    	; 0x204 <UART_TransmitString+0x96>
            if(NOT_INIT==gu8_InitFlag){
                au8_ERROR_STAT=UART_NOT_INIT;
            }
     19e:	80 91 66 00 	lds	r24, 0x0066
     1a2:	88 23       	and	r24, r24
     1a4:	19 f4       	brne	.+6      	; 0x1ac <UART_TransmitString+0x3e>
            else if (INIT==gu8_InitFlag){//CHECK IF THE UART HAS BEEN INITIALIZED
     1a6:	8e ef       	ldi	r24, 0xFE	; 254
     1a8:	8a 83       	std	Y+2, r24	; 0x02
     1aa:	2c c0       	rjmp	.+88     	; 0x204 <UART_TransmitString+0x96>
            uint8_t au8_counter = 0;
            while ((*(TxString + au8_counter)) != NULL_TERMINATOR) {
     1ac:	80 91 66 00 	lds	r24, 0x0066
     1b0:	81 30       	cpi	r24, 0x01	; 1
     1b2:	41 f5       	brne	.+80     	; 0x204 <UART_TransmitString+0x96>
                UDR = *(TxString + au8_counter);//TxString[au8_counter]
     1b4:	19 82       	std	Y+1, r1	; 0x01
     1b6:	1b c0       	rjmp	.+54     	; 0x1ee <UART_TransmitString+0x80>
                while ((Get_Bit(UCSRA, UDRE)) != 1) ;
                au8_counter++;
     1b8:	ac e2       	ldi	r26, 0x2C	; 44
     1ba:	b0 e0       	ldi	r27, 0x00	; 0
     1bc:	89 81       	ldd	r24, Y+1	; 0x01
     1be:	28 2f       	mov	r18, r24
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	8c 81       	ldd	r24, Y+4	; 0x04
     1c4:	9d 81       	ldd	r25, Y+5	; 0x05
     1c6:	fc 01       	movw	r30, r24
     1c8:	e2 0f       	add	r30, r18
     1ca:	f3 1f       	adc	r31, r19
     1cc:	80 81       	ld	r24, Z
     1ce:	8c 93       	st	X, r24
            }
     1d0:	eb e2       	ldi	r30, 0x2B	; 43
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	80 81       	ld	r24, Z
     1d6:	82 95       	swap	r24
     1d8:	86 95       	lsr	r24
     1da:	87 70       	andi	r24, 0x07	; 7
     1dc:	88 2f       	mov	r24, r24
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	81 70       	andi	r24, 0x01	; 1
     1e2:	90 70       	andi	r25, 0x00	; 0
     1e4:	00 97       	sbiw	r24, 0x00	; 0
     1e6:	a1 f3       	breq	.-24     	; 0x1d0 <UART_TransmitString+0x62>
            }
     1e8:	89 81       	ldd	r24, Y+1	; 0x01
     1ea:	8f 5f       	subi	r24, 0xFF	; 255
     1ec:	89 83       	std	Y+1, r24	; 0x01
            }
            else if (INIT==gu8_InitFlag){//CHECK IF THE UART HAS BEEN INITIALIZED
            uint8_t au8_counter = 0;
            while ((*(TxString + au8_counter)) != NULL_TERMINATOR) {
                UDR = *(TxString + au8_counter);//TxString[au8_counter]
                while ((Get_Bit(UCSRA, UDRE)) != 1) ;
     1ee:	89 81       	ldd	r24, Y+1	; 0x01
     1f0:	28 2f       	mov	r18, r24
     1f2:	30 e0       	ldi	r19, 0x00	; 0
     1f4:	8c 81       	ldd	r24, Y+4	; 0x04
     1f6:	9d 81       	ldd	r25, Y+5	; 0x05
     1f8:	fc 01       	movw	r30, r24
     1fa:	e2 0f       	add	r30, r18
     1fc:	f3 1f       	adc	r31, r19
     1fe:	80 81       	ld	r24, Z
     200:	88 23       	and	r24, r24
     202:	d1 f6       	brne	.-76     	; 0x1b8 <UART_TransmitString+0x4a>
            }
        }
    }
	return au8_ERROR_STAT;
}
UART_ERROR_state_t UART_ReceiveChar(uint8_t UartNumber, ptr_uint8_t RxChar) {
     204:	8a 81       	ldd	r24, Y+2	; 0x02
    uint8_t au8_ERROR_STAT=UART_SUCCESS;//ERRROR STAT HAS A SUCCESS VALUE AS DEFAULT
     206:	0f 90       	pop	r0
     208:	0f 90       	pop	r0
     20a:	0f 90       	pop	r0
     20c:	0f 90       	pop	r0
     20e:	0f 90       	pop	r0
     210:	cf 91       	pop	r28
     212:	df 91       	pop	r29
     214:	08 95       	ret

00000216 <UART_ReceiveChar>:
    if(NULL_PTR==RxChar){//CHECK IF THE POINTER IS NOT = NULL
     216:	df 93       	push	r29
     218:	cf 93       	push	r28
     21a:	00 d0       	rcall	.+0      	; 0x21c <UART_ReceiveChar+0x6>
     21c:	00 d0       	rcall	.+0      	; 0x21e <UART_ReceiveChar+0x8>
     21e:	cd b7       	in	r28, 0x3d	; 61
     220:	de b7       	in	r29, 0x3e	; 62
     222:	8a 83       	std	Y+2, r24	; 0x02
     224:	7c 83       	std	Y+4, r23	; 0x04
     226:	6b 83       	std	Y+3, r22	; 0x03
        au8_ERROR_STAT=UART_NULL_POINTER;
     228:	19 82       	std	Y+1, r1	; 0x01
    }
     22a:	8b 81       	ldd	r24, Y+3	; 0x03
     22c:	9c 81       	ldd	r25, Y+4	; 0x04
     22e:	00 97       	sbiw	r24, 0x00	; 0
     230:	19 f4       	brne	.+6      	; 0x238 <UART_ReceiveChar+0x22>
    else{
     232:	8d ef       	ldi	r24, 0xFD	; 253
     234:	89 83       	std	Y+1, r24	; 0x01
     236:	1c c0       	rjmp	.+56     	; 0x270 <UART_ReceiveChar+0x5a>
        if (UartNumber>UART_1){//CHECK IF USER ENTERED RIGHT UART CHANNEL
            au8_ERROR_STAT=UART_INVALID_CHANNEL;
        }//if
     238:	8a 81       	ldd	r24, Y+2	; 0x02
     23a:	88 23       	and	r24, r24
     23c:	19 f0       	breq	.+6      	; 0x244 <UART_ReceiveChar+0x2e>
        else{
     23e:	8c ef       	ldi	r24, 0xFC	; 252
     240:	89 83       	std	Y+1, r24	; 0x01
     242:	16 c0       	rjmp	.+44     	; 0x270 <UART_ReceiveChar+0x5a>
            if(NOT_INIT==gu8_InitFlag){//CHECK IF THE UART HAS BEEN INITIALIZED
                au8_ERROR_STAT=UART_NOT_INIT;
            }//if
     244:	80 91 66 00 	lds	r24, 0x0066
     248:	88 23       	and	r24, r24
     24a:	19 f4       	brne	.+6      	; 0x252 <UART_ReceiveChar+0x3c>
            else if (INIT==gu8_InitFlag){
     24c:	8e ef       	ldi	r24, 0xFE	; 254
     24e:	89 83       	std	Y+1, r24	; 0x01
     250:	0f c0       	rjmp	.+30     	; 0x270 <UART_ReceiveChar+0x5a>
            while ( !(UCSRA & (1<<RXC)) );//WAIT FOR THE FLAG
            *(RxChar) = (uint8_t)UDR;//STORE DATA CAME BY UART
     252:	80 91 66 00 	lds	r24, 0x0066
     256:	81 30       	cpi	r24, 0x01	; 1
     258:	59 f4       	brne	.+22     	; 0x270 <UART_ReceiveChar+0x5a>
            }//else if
     25a:	eb e2       	ldi	r30, 0x2B	; 43
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	80 81       	ld	r24, Z
     260:	88 23       	and	r24, r24
     262:	dc f7       	brge	.-10     	; 0x25a <UART_ReceiveChar+0x44>
            else{
     264:	ec e2       	ldi	r30, 0x2C	; 44
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	80 81       	ld	r24, Z
     26a:	eb 81       	ldd	r30, Y+3	; 0x03
     26c:	fc 81       	ldd	r31, Y+4	; 0x04
     26e:	80 83       	st	Z, r24
            }//else
        }//else
    }
	return au8_ERROR_STAT;
}
UART_ERROR_state_t UART_ReceiveString(uint8_t UartNumber, ptr_uint8_t RxString) {
     270:	89 81       	ldd	r24, Y+1	; 0x01
	uint8_t au8_ERROR_STAT = UART_SUCCESS; //ERRROR STAT HAS A SUCCESS VALUE AS DEFAULT
     272:	0f 90       	pop	r0
     274:	0f 90       	pop	r0
     276:	0f 90       	pop	r0
     278:	0f 90       	pop	r0
     27a:	cf 91       	pop	r28
     27c:	df 91       	pop	r29
     27e:	08 95       	ret

00000280 <UART_ReceiveString>:
	if (NULL_PTR == RxString) {//CHECK IF THE POINTER IS NOT = NULL
     280:	df 93       	push	r29
     282:	cf 93       	push	r28
     284:	00 d0       	rcall	.+0      	; 0x286 <UART_ReceiveString+0x6>
     286:	00 d0       	rcall	.+0      	; 0x288 <UART_ReceiveString+0x8>
     288:	0f 92       	push	r0
     28a:	cd b7       	in	r28, 0x3d	; 61
     28c:	de b7       	in	r29, 0x3e	; 62
     28e:	8b 83       	std	Y+3, r24	; 0x03
     290:	7d 83       	std	Y+5, r23	; 0x05
     292:	6c 83       	std	Y+4, r22	; 0x04
		au8_ERROR_STAT = UART_NULL_POINTER;
     294:	1a 82       	std	Y+2, r1	; 0x02
	} else {
     296:	8c 81       	ldd	r24, Y+4	; 0x04
     298:	9d 81       	ldd	r25, Y+5	; 0x05
     29a:	00 97       	sbiw	r24, 0x00	; 0
     29c:	19 f4       	brne	.+6      	; 0x2a4 <UART_ReceiveString+0x24>
		if (UartNumber > UART_1) {//CHECK IF USER ENTERED RIGHT UART CHANNEL
     29e:	8d ef       	ldi	r24, 0xFD	; 253
     2a0:	8a 83       	std	Y+2, r24	; 0x02
     2a2:	5e c0       	rjmp	.+188    	; 0x360 <UART_ReceiveString+0xe0>
			au8_ERROR_STAT = UART_INVALID_CHANNEL;
		} else {
			if (NOT_INIT == gu8_InitFlag) {//CHECK IF THE UART HAS BEEN INITIALIZED
     2a4:	8b 81       	ldd	r24, Y+3	; 0x03
     2a6:	88 23       	and	r24, r24
     2a8:	19 f0       	breq	.+6      	; 0x2b0 <UART_ReceiveString+0x30>
				au8_ERROR_STAT = UART_NOT_INIT;
     2aa:	8c ef       	ldi	r24, 0xFC	; 252
     2ac:	8a 83       	std	Y+2, r24	; 0x02
     2ae:	58 c0       	rjmp	.+176    	; 0x360 <UART_ReceiveString+0xe0>
			} //if
			else {
				uint8_t au8_counter = 0;//THIS COUNTER FOR THE ARRAY INDEX
     2b0:	80 91 66 00 	lds	r24, 0x0066
     2b4:	88 23       	and	r24, r24
     2b6:	19 f4       	brne	.+6      	; 0x2be <UART_ReceiveString+0x3e>
				while (1) {
     2b8:	8e ef       	ldi	r24, 0xFE	; 254
     2ba:	8a 83       	std	Y+2, r24	; 0x02
     2bc:	51 c0       	rjmp	.+162    	; 0x360 <UART_ReceiveString+0xe0>
					while (!(UCSRA & (1 << RXC )));//WAIT FOR THE FLAG
					RxString[au8_counter] = UDR;//STORE DATA IN THE ARRAY
     2be:	80 91 66 00 	lds	r24, 0x0066
     2c2:	81 30       	cpi	r24, 0x01	; 1
     2c4:	09 f0       	breq	.+2      	; 0x2c8 <UART_ReceiveString+0x48>
     2c6:	4c c0       	rjmp	.+152    	; 0x360 <UART_ReceiveString+0xe0>
					if (RxString[au8_counter] == (NEW_LINE)) {//CHECK IF THE USER ENTERED NEW LINE CHAR '\r'
     2c8:	19 82       	std	Y+1, r1	; 0x01
						RxString[au8_counter] = NULL_TERMINATOR;//REPLACE THE NEW LINE CHAR WITH NULL TERMINATOR
						break;//BREAK FROM THE WHILE(1)
     2ca:	eb e2       	ldi	r30, 0x2B	; 43
     2cc:	f0 e0       	ldi	r31, 0x00	; 0
     2ce:	80 81       	ld	r24, Z
     2d0:	88 23       	and	r24, r24
     2d2:	dc f7       	brge	.-10     	; 0x2ca <UART_ReceiveString+0x4a>
					}
     2d4:	89 81       	ldd	r24, Y+1	; 0x01
     2d6:	28 2f       	mov	r18, r24
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	8c 81       	ldd	r24, Y+4	; 0x04
     2dc:	9d 81       	ldd	r25, Y+5	; 0x05
     2de:	dc 01       	movw	r26, r24
     2e0:	a2 0f       	add	r26, r18
     2e2:	b3 1f       	adc	r27, r19
     2e4:	ec e2       	ldi	r30, 0x2C	; 44
     2e6:	f0 e0       	ldi	r31, 0x00	; 0
     2e8:	80 81       	ld	r24, Z
     2ea:	8c 93       	st	X, r24
					au8_counter++;//GO TO THE NEXT PLACE IN THE ARRAY
     2ec:	89 81       	ldd	r24, Y+1	; 0x01
     2ee:	28 2f       	mov	r18, r24
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	8c 81       	ldd	r24, Y+4	; 0x04
     2f4:	9d 81       	ldd	r25, Y+5	; 0x05
     2f6:	fc 01       	movw	r30, r24
     2f8:	e2 0f       	add	r30, r18
     2fa:	f3 1f       	adc	r31, r19
     2fc:	90 81       	ld	r25, Z
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	69 2f       	mov	r22, r25
     302:	0e 94 86 00 	call	0x10c	; 0x10c <UART_TransmitChar>
					if ((RxString[au8_counter - 1] == (BACKSPACE)) && au8_counter > 1) {//CHECK IF USER ENTERED BACK SPACE AND IT IS NOT THE FIRST PLACE IN THE ARRAY
     306:	89 81       	ldd	r24, Y+1	; 0x01
     308:	8f 5f       	subi	r24, 0xFF	; 255
     30a:	89 83       	std	Y+1, r24	; 0x01
						au8_counter = au8_counter - 2;
     30c:	ec e2       	ldi	r30, 0x2C	; 44
     30e:	f0 e0       	ldi	r31, 0x00	; 0
     310:	80 81       	ld	r24, Z
     312:	8d 30       	cpi	r24, 0x0D	; 13
     314:	69 f4       	brne	.+26     	; 0x330 <UART_ReceiveString+0xb0>
					} else if ((RxString[au8_counter - 1] == (BACKSPACE))//CHECK IF USER ENTERED BACK SPACE AND IT IS THE FIRST PLACE IN THE ARRAY
     316:	89 81       	ldd	r24, Y+1	; 0x01
     318:	88 2f       	mov	r24, r24
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	9c 01       	movw	r18, r24
     31e:	21 50       	subi	r18, 0x01	; 1
     320:	30 40       	sbci	r19, 0x00	; 0
     322:	8c 81       	ldd	r24, Y+4	; 0x04
     324:	9d 81       	ldd	r25, Y+5	; 0x05
     326:	fc 01       	movw	r30, r24
     328:	e2 0f       	add	r30, r18
     32a:	f3 1f       	adc	r31, r19
     32c:	10 82       	st	Z, r1
     32e:	18 c0       	rjmp	.+48     	; 0x360 <UART_ReceiveString+0xe0>
							&& au8_counter <= 1) {
						au8_counter = 0;//RETURN TO THE FIRST PLACE
					} else {
     330:	ec e2       	ldi	r30, 0x2C	; 44
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	80 81       	ld	r24, Z
     336:	88 30       	cpi	r24, 0x08	; 8
     338:	39 f4       	brne	.+14     	; 0x348 <UART_ReceiveString+0xc8>
     33a:	89 81       	ldd	r24, Y+1	; 0x01
     33c:	82 30       	cpi	r24, 0x02	; 2
     33e:	20 f0       	brcs	.+8      	; 0x348 <UART_ReceiveString+0xc8>
						//DO NOTHING
     340:	89 81       	ldd	r24, Y+1	; 0x01
     342:	82 50       	subi	r24, 0x02	; 2
     344:	89 83       	std	Y+1, r24	; 0x01
     346:	c1 cf       	rjmp	.-126    	; 0x2ca <UART_ReceiveString+0x4a>
					}//ELSE
				}//WHILE
     348:	ec e2       	ldi	r30, 0x2C	; 44
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	80 81       	ld	r24, Z
     34e:	88 30       	cpi	r24, 0x08	; 8
     350:	09 f0       	breq	.+2      	; 0x354 <UART_ReceiveString+0xd4>
     352:	bb cf       	rjmp	.-138    	; 0x2ca <UART_ReceiveString+0x4a>
     354:	89 81       	ldd	r24, Y+1	; 0x01
     356:	82 30       	cpi	r24, 0x02	; 2
     358:	08 f0       	brcs	.+2      	; 0x35c <UART_ReceiveString+0xdc>
     35a:	b7 cf       	rjmp	.-146    	; 0x2ca <UART_ReceiveString+0x4a>
			}//ELSE
     35c:	19 82       	std	Y+1, r1	; 0x01
     35e:	b5 cf       	rjmp	.-150    	; 0x2ca <UART_ReceiveString+0x4a>
	if(NOT_INIT==gu8_InitFlag){//CHECK IF THE UART HAS BEEN INITIALIZED
		au8_ERROR_STAT=UART_NOT_INIT;
	}
	else if (INIT==gu8_InitFlag){
        switch (UartNumber) {
        case UART_1 :
     360:	8a 81       	ldd	r24, Y+2	; 0x02
            switch (UartInterruptType) {
     362:	0f 90       	pop	r0
     364:	0f 90       	pop	r0
     366:	0f 90       	pop	r0
     368:	0f 90       	pop	r0
     36a:	0f 90       	pop	r0
     36c:	cf 91       	pop	r28
     36e:	df 91       	pop	r29
     370:	08 95       	ret

00000372 <UART_EnableInterrupt>:
            case RECIVE_INT :
     372:	df 93       	push	r29
     374:	cf 93       	push	r28
     376:	00 d0       	rcall	.+0      	; 0x378 <UART_EnableInterrupt+0x6>
     378:	00 d0       	rcall	.+0      	; 0x37a <UART_EnableInterrupt+0x8>
     37a:	0f 92       	push	r0
     37c:	cd b7       	in	r28, 0x3d	; 61
     37e:	de b7       	in	r29, 0x3e	; 62
     380:	8a 83       	std	Y+2, r24	; 0x02
     382:	6b 83       	std	Y+3, r22	; 0x03
                Set_Bit(UCSRB, RXCIE);
     384:	19 82       	std	Y+1, r1	; 0x01
                break;
     386:	80 91 66 00 	lds	r24, 0x0066
     38a:	88 23       	and	r24, r24
     38c:	19 f4       	brne	.+6      	; 0x394 <UART_EnableInterrupt+0x22>
            case TRANSMIT_INT :
     38e:	8e ef       	ldi	r24, 0xFE	; 254
     390:	89 83       	std	Y+1, r24	; 0x01
     392:	39 c0       	rjmp	.+114    	; 0x406 <UART_EnableInterrupt+0x94>
                Set_Bit(UCSRB, TXCIE);
                break;
     394:	80 91 66 00 	lds	r24, 0x0066
     398:	81 30       	cpi	r24, 0x01	; 1
     39a:	a9 f5       	brne	.+106    	; 0x406 <UART_EnableInterrupt+0x94>
            case EMPTY_BUFFERR_INT :
     39c:	8a 81       	ldd	r24, Y+2	; 0x02
     39e:	88 2f       	mov	r24, r24
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	00 97       	sbiw	r24, 0x00	; 0
     3a4:	71 f5       	brne	.+92     	; 0x402 <UART_EnableInterrupt+0x90>
                Set_Bit(UCSRB, UDRIE);
                break;
     3a6:	8b 81       	ldd	r24, Y+3	; 0x03
     3a8:	28 2f       	mov	r18, r24
     3aa:	30 e0       	ldi	r19, 0x00	; 0
     3ac:	3d 83       	std	Y+5, r19	; 0x05
     3ae:	2c 83       	std	Y+4, r18	; 0x04
     3b0:	8c 81       	ldd	r24, Y+4	; 0x04
     3b2:	9d 81       	ldd	r25, Y+5	; 0x05
     3b4:	81 30       	cpi	r24, 0x01	; 1
     3b6:	91 05       	cpc	r25, r1
     3b8:	89 f0       	breq	.+34     	; 0x3dc <UART_EnableInterrupt+0x6a>
     3ba:	2c 81       	ldd	r18, Y+4	; 0x04
     3bc:	3d 81       	ldd	r19, Y+5	; 0x05
     3be:	22 30       	cpi	r18, 0x02	; 2
     3c0:	31 05       	cpc	r19, r1
     3c2:	a1 f0       	breq	.+40     	; 0x3ec <UART_EnableInterrupt+0x7a>
     3c4:	8c 81       	ldd	r24, Y+4	; 0x04
     3c6:	9d 81       	ldd	r25, Y+5	; 0x05
     3c8:	00 97       	sbiw	r24, 0x00	; 0
     3ca:	c1 f4       	brne	.+48     	; 0x3fc <UART_EnableInterrupt+0x8a>
            default:
                au8_ERROR_STAT=UART_INTERRUPT_CHANNEL;//THIS HAPPENS WHEN USER ENTER WRONG INTRRUPT TYPE
     3cc:	aa e2       	ldi	r26, 0x2A	; 42
     3ce:	b0 e0       	ldi	r27, 0x00	; 0
     3d0:	ea e2       	ldi	r30, 0x2A	; 42
     3d2:	f0 e0       	ldi	r31, 0x00	; 0
     3d4:	80 81       	ld	r24, Z
     3d6:	80 68       	ori	r24, 0x80	; 128
     3d8:	8c 93       	st	X, r24
     3da:	15 c0       	rjmp	.+42     	; 0x406 <UART_EnableInterrupt+0x94>
                break;
            }//switch
            break;
     3dc:	aa e2       	ldi	r26, 0x2A	; 42
     3de:	b0 e0       	ldi	r27, 0x00	; 0
     3e0:	ea e2       	ldi	r30, 0x2A	; 42
     3e2:	f0 e0       	ldi	r31, 0x00	; 0
     3e4:	80 81       	ld	r24, Z
     3e6:	80 64       	ori	r24, 0x40	; 64
     3e8:	8c 93       	st	X, r24
     3ea:	0d c0       	rjmp	.+26     	; 0x406 <UART_EnableInterrupt+0x94>
        default:
            au8_ERROR_STAT=UART_INVALID_CHANNEL;//THIS HAPPENS WHEN USER ENTER WRONG UART CHANNEL
            break;
     3ec:	aa e2       	ldi	r26, 0x2A	; 42
     3ee:	b0 e0       	ldi	r27, 0x00	; 0
     3f0:	ea e2       	ldi	r30, 0x2A	; 42
     3f2:	f0 e0       	ldi	r31, 0x00	; 0
     3f4:	80 81       	ld	r24, Z
     3f6:	80 62       	ori	r24, 0x20	; 32
     3f8:	8c 93       	st	X, r24
     3fa:	05 c0       	rjmp	.+10     	; 0x406 <UART_EnableInterrupt+0x94>
        }//switch
	}//else if
	else{
     3fc:	8b ef       	ldi	r24, 0xFB	; 251
     3fe:	89 83       	std	Y+1, r24	; 0x01
     400:	02 c0       	rjmp	.+4      	; 0x406 <UART_EnableInterrupt+0x94>
        //DO NOTHING
	}
	return au8_ERROR_STAT;
}
/*THIS API DISABLE CHOSEN INTERRUPT*/
UART_ERROR_state_t UART_DisableInterrupt(uint8_t UartNumber, uint8_t UartInterruptType) {
     402:	8c ef       	ldi	r24, 0xFC	; 252
     404:	89 83       	std	Y+1, r24	; 0x01
	if(NOT_INIT==gu8_InitFlag){
		au8_ERROR_STAT=UART_NOT_INIT;
	}
	else if (INIT==gu8_InitFlag){
        switch (UartNumber) {
        case UART_1 :
     406:	89 81       	ldd	r24, Y+1	; 0x01
            switch (UartInterruptType) {
     408:	0f 90       	pop	r0
     40a:	0f 90       	pop	r0
     40c:	0f 90       	pop	r0
     40e:	0f 90       	pop	r0
     410:	0f 90       	pop	r0
     412:	cf 91       	pop	r28
     414:	df 91       	pop	r29
     416:	08 95       	ret

00000418 <UART_DisableInterrupt>:
            case RECIVE_INT :
     418:	df 93       	push	r29
     41a:	cf 93       	push	r28
     41c:	00 d0       	rcall	.+0      	; 0x41e <UART_DisableInterrupt+0x6>
     41e:	00 d0       	rcall	.+0      	; 0x420 <UART_DisableInterrupt+0x8>
     420:	0f 92       	push	r0
     422:	cd b7       	in	r28, 0x3d	; 61
     424:	de b7       	in	r29, 0x3e	; 62
     426:	8a 83       	std	Y+2, r24	; 0x02
     428:	6b 83       	std	Y+3, r22	; 0x03
                Clr_Bit(UCSRB, RXCIE);
     42a:	19 82       	std	Y+1, r1	; 0x01
                break;
     42c:	80 91 66 00 	lds	r24, 0x0066
     430:	88 23       	and	r24, r24
     432:	19 f4       	brne	.+6      	; 0x43a <UART_DisableInterrupt+0x22>
            case TRANSMIT_INT :
     434:	8e ef       	ldi	r24, 0xFE	; 254
     436:	89 83       	std	Y+1, r24	; 0x01
     438:	39 c0       	rjmp	.+114    	; 0x4ac <__stack+0x4d>
                Clr_Bit(UCSRB, TXCIE);
                break;
     43a:	80 91 66 00 	lds	r24, 0x0066
     43e:	81 30       	cpi	r24, 0x01	; 1
     440:	a9 f5       	brne	.+106    	; 0x4ac <__stack+0x4d>
            case EMPTY_BUFFERR_INT :
     442:	8a 81       	ldd	r24, Y+2	; 0x02
     444:	88 2f       	mov	r24, r24
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	00 97       	sbiw	r24, 0x00	; 0
     44a:	71 f5       	brne	.+92     	; 0x4a8 <__stack+0x49>
                Clr_Bit(UCSRB, UDRIE);
                break;
     44c:	8b 81       	ldd	r24, Y+3	; 0x03
     44e:	28 2f       	mov	r18, r24
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	3d 83       	std	Y+5, r19	; 0x05
     454:	2c 83       	std	Y+4, r18	; 0x04
     456:	8c 81       	ldd	r24, Y+4	; 0x04
     458:	9d 81       	ldd	r25, Y+5	; 0x05
     45a:	81 30       	cpi	r24, 0x01	; 1
     45c:	91 05       	cpc	r25, r1
     45e:	89 f0       	breq	.+34     	; 0x482 <__stack+0x23>
     460:	2c 81       	ldd	r18, Y+4	; 0x04
     462:	3d 81       	ldd	r19, Y+5	; 0x05
     464:	22 30       	cpi	r18, 0x02	; 2
     466:	31 05       	cpc	r19, r1
     468:	a1 f0       	breq	.+40     	; 0x492 <__stack+0x33>
     46a:	8c 81       	ldd	r24, Y+4	; 0x04
     46c:	9d 81       	ldd	r25, Y+5	; 0x05
     46e:	00 97       	sbiw	r24, 0x00	; 0
     470:	c1 f4       	brne	.+48     	; 0x4a2 <__stack+0x43>
            default:
                au8_ERROR_STAT=UART_INTERRUPT_CHANNEL;
     472:	aa e2       	ldi	r26, 0x2A	; 42
     474:	b0 e0       	ldi	r27, 0x00	; 0
     476:	ea e2       	ldi	r30, 0x2A	; 42
     478:	f0 e0       	ldi	r31, 0x00	; 0
     47a:	80 81       	ld	r24, Z
     47c:	8f 77       	andi	r24, 0x7F	; 127
     47e:	8c 93       	st	X, r24
     480:	15 c0       	rjmp	.+42     	; 0x4ac <__stack+0x4d>
                break;
            }
            break;
     482:	aa e2       	ldi	r26, 0x2A	; 42
     484:	b0 e0       	ldi	r27, 0x00	; 0
     486:	ea e2       	ldi	r30, 0x2A	; 42
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	80 81       	ld	r24, Z
     48c:	8f 7b       	andi	r24, 0xBF	; 191
     48e:	8c 93       	st	X, r24
     490:	0d c0       	rjmp	.+26     	; 0x4ac <__stack+0x4d>
        default:
            au8_ERROR_STAT=UART_INVALID_CHANNEL;
            break;
     492:	aa e2       	ldi	r26, 0x2A	; 42
     494:	b0 e0       	ldi	r27, 0x00	; 0
     496:	ea e2       	ldi	r30, 0x2A	; 42
     498:	f0 e0       	ldi	r31, 0x00	; 0
     49a:	80 81       	ld	r24, Z
     49c:	8f 7d       	andi	r24, 0xDF	; 223
     49e:	8c 93       	st	X, r24
     4a0:	05 c0       	rjmp	.+10     	; 0x4ac <__stack+0x4d>
        }//switch
	}
	else{
     4a2:	8b ef       	ldi	r24, 0xFB	; 251
     4a4:	89 83       	std	Y+1, r24	; 0x01
     4a6:	02 c0       	rjmp	.+4      	; 0x4ac <__stack+0x4d>
        //DO NOTHING
	}
	return au8_ERROR_STAT;
}
UART_ERROR_state_t UART_SetCallback(uint8_t UartNumber,uint8_t UartInterruptType,Ptr_VoidFuncVoid_t Callback){
     4a8:	8c ef       	ldi	r24, 0xFC	; 252
     4aa:	89 83       	std	Y+1, r24	; 0x01
    if(NULL_PTR==Callback){
        au8_ERROR_STAT=UART_NULL_POINTER;
    }//if
    else{
        if(NOT_INIT==gu8_InitFlag){
            au8_ERROR_STAT=UART_NOT_INIT;
     4ac:	89 81       	ldd	r24, Y+1	; 0x01
        }//if
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	cf 91       	pop	r28
     4ba:	df 91       	pop	r29
     4bc:	08 95       	ret

000004be <UART_SetCallback>:
        else if (INIT==gu8_InitFlag){
     4be:	df 93       	push	r29
     4c0:	cf 93       	push	r28
     4c2:	cd b7       	in	r28, 0x3d	; 61
     4c4:	de b7       	in	r29, 0x3e	; 62
     4c6:	27 97       	sbiw	r28, 0x07	; 7
     4c8:	0f b6       	in	r0, 0x3f	; 63
     4ca:	f8 94       	cli
     4cc:	de bf       	out	0x3e, r29	; 62
     4ce:	0f be       	out	0x3f, r0	; 63
     4d0:	cd bf       	out	0x3d, r28	; 61
     4d2:	8a 83       	std	Y+2, r24	; 0x02
     4d4:	6b 83       	std	Y+3, r22	; 0x03
     4d6:	5d 83       	std	Y+5, r21	; 0x05
     4d8:	4c 83       	std	Y+4, r20	; 0x04
            switch (UartNumber) {
     4da:	19 82       	std	Y+1, r1	; 0x01
            case UART_1 :
     4dc:	8c 81       	ldd	r24, Y+4	; 0x04
     4de:	9d 81       	ldd	r25, Y+5	; 0x05
     4e0:	00 97       	sbiw	r24, 0x00	; 0
     4e2:	19 f4       	brne	.+6      	; 0x4ea <UART_SetCallback+0x2c>
                switch (UartInterruptType) {
     4e4:	8d ef       	ldi	r24, 0xFD	; 253
     4e6:	89 83       	std	Y+1, r24	; 0x01
     4e8:	3d c0       	rjmp	.+122    	; 0x564 <UART_SetCallback+0xa6>
                case RECIVE_INT :
                    Gptr_uartRxInt=Callback;
                    break;
     4ea:	80 91 66 00 	lds	r24, 0x0066
     4ee:	88 23       	and	r24, r24
     4f0:	19 f4       	brne	.+6      	; 0x4f8 <UART_SetCallback+0x3a>
                case TRANSMIT_INT :
     4f2:	8e ef       	ldi	r24, 0xFE	; 254
     4f4:	89 83       	std	Y+1, r24	; 0x01
     4f6:	36 c0       	rjmp	.+108    	; 0x564 <UART_SetCallback+0xa6>
                    Gptr_uartTxInt=Callback;
                    break;
     4f8:	80 91 66 00 	lds	r24, 0x0066
     4fc:	81 30       	cpi	r24, 0x01	; 1
     4fe:	91 f5       	brne	.+100    	; 0x564 <UART_SetCallback+0xa6>
                case EMPTY_BUFFERR_INT :
     500:	8a 81       	ldd	r24, Y+2	; 0x02
     502:	88 2f       	mov	r24, r24
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	00 97       	sbiw	r24, 0x00	; 0
     508:	59 f5       	brne	.+86     	; 0x560 <UART_SetCallback+0xa2>
                    Gptr_uartDataEmptyRegInt=Callback;
                    break;
     50a:	8b 81       	ldd	r24, Y+3	; 0x03
     50c:	28 2f       	mov	r18, r24
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	3f 83       	std	Y+7, r19	; 0x07
     512:	2e 83       	std	Y+6, r18	; 0x06
     514:	8e 81       	ldd	r24, Y+6	; 0x06
     516:	9f 81       	ldd	r25, Y+7	; 0x07
     518:	81 30       	cpi	r24, 0x01	; 1
     51a:	91 05       	cpc	r25, r1
     51c:	81 f0       	breq	.+32     	; 0x53e <UART_SetCallback+0x80>
     51e:	2e 81       	ldd	r18, Y+6	; 0x06
     520:	3f 81       	ldd	r19, Y+7	; 0x07
     522:	22 30       	cpi	r18, 0x02	; 2
     524:	31 05       	cpc	r19, r1
     526:	91 f0       	breq	.+36     	; 0x54c <UART_SetCallback+0x8e>
     528:	8e 81       	ldd	r24, Y+6	; 0x06
     52a:	9f 81       	ldd	r25, Y+7	; 0x07
     52c:	00 97       	sbiw	r24, 0x00	; 0
     52e:	a9 f4       	brne	.+42     	; 0x55a <UART_SetCallback+0x9c>
                default:
                    au8_ERROR_STAT=UART_INTERRUPT_CHANNEL;
     530:	8c 81       	ldd	r24, Y+4	; 0x04
     532:	9d 81       	ldd	r25, Y+5	; 0x05
     534:	90 93 61 00 	sts	0x0061, r25
     538:	80 93 60 00 	sts	0x0060, r24
     53c:	13 c0       	rjmp	.+38     	; 0x564 <UART_SetCallback+0xa6>
                    break;
                }
                break;
     53e:	8c 81       	ldd	r24, Y+4	; 0x04
     540:	9d 81       	ldd	r25, Y+5	; 0x05
     542:	90 93 65 00 	sts	0x0065, r25
     546:	80 93 64 00 	sts	0x0064, r24
     54a:	0c c0       	rjmp	.+24     	; 0x564 <UART_SetCallback+0xa6>
            default:
                au8_ERROR_STAT=UART_INVALID_CHANNEL;
                break;
     54c:	8c 81       	ldd	r24, Y+4	; 0x04
     54e:	9d 81       	ldd	r25, Y+5	; 0x05
     550:	90 93 63 00 	sts	0x0063, r25
     554:	80 93 62 00 	sts	0x0062, r24
     558:	05 c0       	rjmp	.+10     	; 0x564 <UART_SetCallback+0xa6>
            }//switch
        }
        else{
     55a:	8b ef       	ldi	r24, 0xFB	; 251
     55c:	89 83       	std	Y+1, r24	; 0x01
     55e:	02 c0       	rjmp	.+4      	; 0x564 <UART_SetCallback+0xa6>
            //DO NOTHING
        }
    }
    return au8_ERROR_STAT;
}
     560:	8c ef       	ldi	r24, 0xFC	; 252
     562:	89 83       	std	Y+1, r24	; 0x01
     564:	89 81       	ldd	r24, Y+1	; 0x01
     566:	27 96       	adiw	r28, 0x07	; 7
     568:	0f b6       	in	r0, 0x3f	; 63
     56a:	f8 94       	cli
     56c:	de bf       	out	0x3e, r29	; 62
     56e:	0f be       	out	0x3f, r0	; 63
     570:	cd bf       	out	0x3d, r28	; 61
     572:	cf 91       	pop	r28
     574:	df 91       	pop	r29
     576:	08 95       	ret

00000578 <TWI_SetSlaveAddress>:
#define SEND_START 0b00100000
#define SEND_ACK   0b01000000
#define CLR_FLAG   0b10000000

/*----APIs IMPLEMENTATION----*/
void TWI_SetSlaveAddress(void) {
     578:	df 93       	push	r29
     57a:	cf 93       	push	r28
     57c:	cd b7       	in	r28, 0x3d	; 61
     57e:	de b7       	in	r29, 0x3e	; 62

	TWI_Adress_REGISTER = (SlaveAddr << 1); //Shift the register left
     580:	e2 e2       	ldi	r30, 0x22	; 34
     582:	f0 e0       	ldi	r31, 0x00	; 0
     584:	80 e3       	ldi	r24, 0x30	; 48
     586:	80 83       	st	Z, r24

}
     588:	cf 91       	pop	r28
     58a:	df 91       	pop	r29
     58c:	08 95       	ret

0000058e <TWI_Init>:
TWI_ERROR_state_t TWI_Init(uint8_t I2C_CH) {
     58e:	df 93       	push	r29
     590:	cf 93       	push	r28
     592:	00 d0       	rcall	.+0      	; 0x594 <TWI_Init+0x6>
     594:	cd b7       	in	r28, 0x3d	; 61
     596:	de b7       	in	r29, 0x3e	; 62
     598:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t au8_ERROR_STAT=TWI_SUCCESS;//ERRROR STAT HAS A SUCCESS VALUE AS DEFAULT
     59a:	19 82       	std	Y+1, r1	; 0x01
    if (I2C_CH>TWI_1){
     59c:	8a 81       	ldd	r24, Y+2	; 0x02
     59e:	82 30       	cpi	r24, 0x02	; 2
     5a0:	18 f0       	brcs	.+6      	; 0x5a8 <TWI_Init+0x1a>

		au8_ERROR_STAT=TWI_INVALID_CHANNEL;
     5a2:	8c ef       	ldi	r24, 0xFC	; 252
     5a4:	89 83       	std	Y+1, r24	; 0x01
     5a6:	29 c0       	rjmp	.+82     	; 0x5fa <TWI_Init+0x6c>
	}
	else{
        if (INIT==gu8_InitFlag){
     5a8:	80 91 69 00 	lds	r24, 0x0069
     5ac:	81 30       	cpi	r24, 0x01	; 1
     5ae:	19 f4       	brne	.+6      	; 0x5b6 <TWI_Init+0x28>

            au8_ERROR_STAT=TWI_SEC_INIT;
     5b0:	8f ef       	ldi	r24, 0xFF	; 255
     5b2:	89 83       	std	Y+1, r24	; 0x01
     5b4:	22 c0       	rjmp	.+68     	; 0x5fa <TWI_Init+0x6c>
        }
        else if (NOT_INIT==gu8_InitFlag){
     5b6:	80 91 69 00 	lds	r24, 0x0069
     5ba:	88 23       	and	r24, r24
     5bc:	f1 f4       	brne	.+60     	; 0x5fa <TWI_Init+0x6c>
	/*-----SET ADDRESS IN CASE OF IT'S IN SLAVE MODE---- */
            TWI_SetSlaveAddress();
     5be:	0e 94 bc 02 	call	0x578	; 0x578 <TWI_SetSlaveAddress>
            /*-----SETTING THE FREQ-----*/
            TWI_Bit_Rate_REGISTER = Bit_rate;
     5c2:	e0 e2       	ldi	r30, 0x20	; 32
     5c4:	f0 e0       	ldi	r31, 0x00	; 0
     5c6:	8e e1       	ldi	r24, 0x1E	; 30
     5c8:	80 83       	st	Z, r24
            TWI_Status_REGISTER &= Prescaler;
     5ca:	a1 e2       	ldi	r26, 0x21	; 33
     5cc:	b0 e0       	ldi	r27, 0x00	; 0
     5ce:	e1 e2       	ldi	r30, 0x21	; 33
     5d0:	f0 e0       	ldi	r31, 0x00	; 0
     5d2:	80 81       	ld	r24, Z
     5d4:	8c 7f       	andi	r24, 0xFC	; 252
     5d6:	8c 93       	st	X, r24
            /*Initial Value for TWI_Control_REGISTER is zeros so I set only what I need and ignore the rest*/
            /*-----ENABLE ACKNOWLEDGE----*/
            Set_Bit(TWI_Control_REGISTER, TWEA);
     5d8:	a6 e5       	ldi	r26, 0x56	; 86
     5da:	b0 e0       	ldi	r27, 0x00	; 0
     5dc:	e6 e5       	ldi	r30, 0x56	; 86
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	80 81       	ld	r24, Z
     5e2:	80 64       	ori	r24, 0x40	; 64
     5e4:	8c 93       	st	X, r24
            /*-----ENABLE THE PREIPHERAL ITSELF-----*/
            Set_Bit(TWI_Control_REGISTER, TWEN);
     5e6:	a6 e5       	ldi	r26, 0x56	; 86
     5e8:	b0 e0       	ldi	r27, 0x00	; 0
     5ea:	e6 e5       	ldi	r30, 0x56	; 86
     5ec:	f0 e0       	ldi	r31, 0x00	; 0
     5ee:	80 81       	ld	r24, Z
     5f0:	84 60       	ori	r24, 0x04	; 4
     5f2:	8c 93       	st	X, r24
            gu8_InitFlag = INIT;
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	80 93 69 00 	sts	0x0069, r24
        }
	}
	return au8_ERROR_STAT;
     5fa:	89 81       	ldd	r24, Y+1	; 0x01
}
     5fc:	0f 90       	pop	r0
     5fe:	0f 90       	pop	r0
     600:	cf 91       	pop	r28
     602:	df 91       	pop	r29
     604:	08 95       	ret

00000606 <TWI_SendStartCondition>:
TWI_ERROR_state_t TWI_SendStartCondition(uint8_t I2C_CH) {
     606:	df 93       	push	r29
     608:	cf 93       	push	r28
     60a:	00 d0       	rcall	.+0      	; 0x60c <TWI_SendStartCondition+0x6>
     60c:	cd b7       	in	r28, 0x3d	; 61
     60e:	de b7       	in	r29, 0x3e	; 62
     610:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t au8_ERROR_STAT=TWI_SUCCESS;//ERRROR STAT HAS A SUCCESS VALUE AS DEFAULT
     612:	19 82       	std	Y+1, r1	; 0x01
    if (I2C_CH>TWI_1){
     614:	8a 81       	ldd	r24, Y+2	; 0x02
     616:	82 30       	cpi	r24, 0x02	; 2
     618:	18 f0       	brcs	.+6      	; 0x620 <TWI_SendStartCondition+0x1a>
		au8_ERROR_STAT=TWI_INVALID_CHANNEL;
     61a:	8c ef       	ldi	r24, 0xFC	; 252
     61c:	89 83       	std	Y+1, r24	; 0x01
     61e:	17 c0       	rjmp	.+46     	; 0x64e <TWI_SendStartCondition+0x48>
	}
	else{
        if(NOT_INIT==gu8_InitFlag){
     620:	80 91 69 00 	lds	r24, 0x0069
     624:	88 23       	and	r24, r24
     626:	19 f4       	brne	.+6      	; 0x62e <TWI_SendStartCondition+0x28>
            au8_ERROR_STAT=TWI_NOT_INIT;
     628:	8e ef       	ldi	r24, 0xFE	; 254
     62a:	89 83       	std	Y+1, r24	; 0x01
     62c:	10 c0       	rjmp	.+32     	; 0x64e <TWI_SendStartCondition+0x48>
        }
        else if (INIT==gu8_InitFlag){
     62e:	80 91 69 00 	lds	r24, 0x0069
     632:	81 30       	cpi	r24, 0x01	; 1
     634:	61 f4       	brne	.+24     	; 0x64e <TWI_SendStartCondition+0x48>
            TWI_Control_REGISTER = (EN_TWI | SEND_START | CLR_FLAG);
     636:	e6 e5       	ldi	r30, 0x56	; 86
     638:	f0 e0       	ldi	r31, 0x00	; 0
     63a:	84 ea       	ldi	r24, 0xA4	; 164
     63c:	80 83       	st	Z, r24
            while ((Get_Bit(TWI_Control_REGISTER, TWINT)) != 1)
     63e:	e6 e5       	ldi	r30, 0x56	; 86
     640:	f0 e0       	ldi	r31, 0x00	; 0
     642:	80 81       	ld	r24, Z
     644:	88 1f       	adc	r24, r24
     646:	88 27       	eor	r24, r24
     648:	88 1f       	adc	r24, r24
     64a:	81 30       	cpi	r24, 0x01	; 1
     64c:	c1 f7       	brne	.-16     	; 0x63e <TWI_SendStartCondition+0x38>
                ;/*Wait for TWINT Flag set.
		 This indicates that the START condition has been transmitted*/
        }
    }
		 return au8_ERROR_STAT;
     64e:	89 81       	ldd	r24, Y+1	; 0x01
}
     650:	0f 90       	pop	r0
     652:	0f 90       	pop	r0
     654:	cf 91       	pop	r28
     656:	df 91       	pop	r29
     658:	08 95       	ret

0000065a <TWI_SendStopCondition>:
TWI_ERROR_state_t TWI_SendStopCondition(uint8_t I2C_CH) {
     65a:	df 93       	push	r29
     65c:	cf 93       	push	r28
     65e:	00 d0       	rcall	.+0      	; 0x660 <TWI_SendStopCondition+0x6>
     660:	cd b7       	in	r28, 0x3d	; 61
     662:	de b7       	in	r29, 0x3e	; 62
     664:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t au8_ERROR_STAT=TWI_SUCCESS;//ERRROR STAT HAS A SUCCESS VALUE AS DEFAULT
     666:	19 82       	std	Y+1, r1	; 0x01
        if (I2C_CH>TWI_1){
     668:	8a 81       	ldd	r24, Y+2	; 0x02
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	18 f0       	brcs	.+6      	; 0x674 <TWI_SendStopCondition+0x1a>
		au8_ERROR_STAT=TWI_INVALID_CHANNEL;
     66e:	8c ef       	ldi	r24, 0xFC	; 252
     670:	89 83       	std	Y+1, r24	; 0x01
     672:	0f c0       	rjmp	.+30     	; 0x692 <TWI_SendStopCondition+0x38>
	}
	else{
        if(NOT_INIT==gu8_InitFlag){
     674:	80 91 69 00 	lds	r24, 0x0069
     678:	88 23       	and	r24, r24
     67a:	19 f4       	brne	.+6      	; 0x682 <TWI_SendStopCondition+0x28>
            au8_ERROR_STAT=TWI_NOT_INIT;
     67c:	8e ef       	ldi	r24, 0xFE	; 254
     67e:	89 83       	std	Y+1, r24	; 0x01
     680:	08 c0       	rjmp	.+16     	; 0x692 <TWI_SendStopCondition+0x38>
        }
        else if (INIT==gu8_InitFlag){
     682:	80 91 69 00 	lds	r24, 0x0069
     686:	81 30       	cpi	r24, 0x01	; 1
     688:	21 f4       	brne	.+8      	; 0x692 <TWI_SendStopCondition+0x38>
            TWI_Control_REGISTER = (EN_TWI | CLR_FLAG | SEND_STOP);
     68a:	e6 e5       	ldi	r30, 0x56	; 86
     68c:	f0 e0       	ldi	r31, 0x00	; 0
     68e:	84 e9       	ldi	r24, 0x94	; 148
     690:	80 83       	st	Z, r24
        }
	}
	return au8_ERROR_STAT;
     692:	89 81       	ldd	r24, Y+1	; 0x01
}
     694:	0f 90       	pop	r0
     696:	0f 90       	pop	r0
     698:	cf 91       	pop	r28
     69a:	df 91       	pop	r29
     69c:	08 95       	ret

0000069e <TWI_SendSLAWrite>:
TWI_ERROR_state_t TWI_SendSLAWrite(uint8_t I2C_CH, uint8_t SlvAdr) {
     69e:	df 93       	push	r29
     6a0:	cf 93       	push	r28
     6a2:	00 d0       	rcall	.+0      	; 0x6a4 <TWI_SendSLAWrite+0x6>
     6a4:	0f 92       	push	r0
     6a6:	cd b7       	in	r28, 0x3d	; 61
     6a8:	de b7       	in	r29, 0x3e	; 62
     6aa:	8a 83       	std	Y+2, r24	; 0x02
     6ac:	6b 83       	std	Y+3, r22	; 0x03
    uint8_t au8_ERROR_STAT=TWI_SUCCESS;//ERRROR STAT HAS A SUCCESS VALUE AS DEFAULT
     6ae:	19 82       	std	Y+1, r1	; 0x01
        if (I2C_CH>TWI_1){
     6b0:	8a 81       	ldd	r24, Y+2	; 0x02
     6b2:	82 30       	cpi	r24, 0x02	; 2
     6b4:	18 f0       	brcs	.+6      	; 0x6bc <TWI_SendSLAWrite+0x1e>
		au8_ERROR_STAT=TWI_INVALID_CHANNEL;
     6b6:	8c ef       	ldi	r24, 0xFC	; 252
     6b8:	89 83       	std	Y+1, r24	; 0x01
     6ba:	19 c0       	rjmp	.+50     	; 0x6ee <TWI_SendSLAWrite+0x50>
	}
	else{
        if(NOT_INIT==gu8_InitFlag){
     6bc:	80 91 69 00 	lds	r24, 0x0069
     6c0:	88 23       	and	r24, r24
     6c2:	19 f4       	brne	.+6      	; 0x6ca <TWI_SendSLAWrite+0x2c>
            au8_ERROR_STAT=TWI_NOT_INIT;
     6c4:	8e ef       	ldi	r24, 0xFE	; 254
     6c6:	89 83       	std	Y+1, r24	; 0x01
     6c8:	12 c0       	rjmp	.+36     	; 0x6ee <TWI_SendSLAWrite+0x50>
        }
        else if (INIT==gu8_InitFlag){
     6ca:	80 91 69 00 	lds	r24, 0x0069
     6ce:	81 30       	cpi	r24, 0x01	; 1
     6d0:	71 f4       	brne	.+28     	; 0x6ee <TWI_SendSLAWrite+0x50>
            TWI_Data_REGISTER = ((SlvAdr << 1) | 0);
     6d2:	e3 e2       	ldi	r30, 0x23	; 35
     6d4:	f0 e0       	ldi	r31, 0x00	; 0
     6d6:	8b 81       	ldd	r24, Y+3	; 0x03
     6d8:	88 0f       	add	r24, r24
     6da:	80 83       	st	Z, r24
            TWI_Control_REGISTER = (EN_TWI | CLR_FLAG);// CLEAR FLAG TO SEND DATA
     6dc:	e6 e5       	ldi	r30, 0x56	; 86
     6de:	f0 e0       	ldi	r31, 0x00	; 0
     6e0:	84 e8       	ldi	r24, 0x84	; 132
     6e2:	80 83       	st	Z, r24
            while (Get_Bit(TWI_Control_REGISTER,TWINT) == 0)
     6e4:	e6 e5       	ldi	r30, 0x56	; 86
     6e6:	f0 e0       	ldi	r31, 0x00	; 0
     6e8:	80 81       	ld	r24, Z
     6ea:	88 23       	and	r24, r24
     6ec:	dc f7       	brge	.-10     	; 0x6e4 <TWI_SendSLAWrite+0x46>
                ;
        }
	}
    return au8_ERROR_STAT;
     6ee:	89 81       	ldd	r24, Y+1	; 0x01

}
     6f0:	0f 90       	pop	r0
     6f2:	0f 90       	pop	r0
     6f4:	0f 90       	pop	r0
     6f6:	cf 91       	pop	r28
     6f8:	df 91       	pop	r29
     6fa:	08 95       	ret

000006fc <TWI_SendSLARead>:
TWI_ERROR_state_t TWI_SendSLARead(uint8_t I2C_CH, uint8_t SlvAdr) {
     6fc:	df 93       	push	r29
     6fe:	cf 93       	push	r28
     700:	00 d0       	rcall	.+0      	; 0x702 <TWI_SendSLARead+0x6>
     702:	0f 92       	push	r0
     704:	cd b7       	in	r28, 0x3d	; 61
     706:	de b7       	in	r29, 0x3e	; 62
     708:	8a 83       	std	Y+2, r24	; 0x02
     70a:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t au8_ERROR_STAT=TWI_SUCCESS;//ERRROR STAT HAS A SUCCESS VALUE AS DEFAULT
     70c:	19 82       	std	Y+1, r1	; 0x01
    if (I2C_CH>TWI_1){
     70e:	8a 81       	ldd	r24, Y+2	; 0x02
     710:	82 30       	cpi	r24, 0x02	; 2
     712:	18 f0       	brcs	.+6      	; 0x71a <TWI_SendSLARead+0x1e>
		au8_ERROR_STAT=TWI_INVALID_CHANNEL;
     714:	8c ef       	ldi	r24, 0xFC	; 252
     716:	89 83       	std	Y+1, r24	; 0x01
     718:	1d c0       	rjmp	.+58     	; 0x754 <TWI_SendSLARead+0x58>
	}
	else{
        if(NOT_INIT==gu8_InitFlag){
     71a:	80 91 69 00 	lds	r24, 0x0069
     71e:	88 23       	and	r24, r24
     720:	19 f4       	brne	.+6      	; 0x728 <TWI_SendSLARead+0x2c>
            au8_ERROR_STAT=TWI_NOT_INIT;
     722:	8e ef       	ldi	r24, 0xFE	; 254
     724:	89 83       	std	Y+1, r24	; 0x01
     726:	16 c0       	rjmp	.+44     	; 0x754 <TWI_SendSLARead+0x58>
        }
        else if (INIT==gu8_InitFlag){
     728:	80 91 69 00 	lds	r24, 0x0069
     72c:	81 30       	cpi	r24, 0x01	; 1
     72e:	91 f4       	brne	.+36     	; 0x754 <TWI_SendSLARead+0x58>
        TWI_Data_REGISTER = ((SlvAdr << 1) | 1);
     730:	e3 e2       	ldi	r30, 0x23	; 35
     732:	f0 e0       	ldi	r31, 0x00	; 0
     734:	8b 81       	ldd	r24, Y+3	; 0x03
     736:	88 2f       	mov	r24, r24
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	88 0f       	add	r24, r24
     73c:	99 1f       	adc	r25, r25
     73e:	81 60       	ori	r24, 0x01	; 1
     740:	80 83       	st	Z, r24
        TWI_Control_REGISTER = (EN_TWI | CLR_FLAG);
     742:	e6 e5       	ldi	r30, 0x56	; 86
     744:	f0 e0       	ldi	r31, 0x00	; 0
     746:	84 e8       	ldi	r24, 0x84	; 132
     748:	80 83       	st	Z, r24
        while (Get_Bit(TWI_Control_REGISTER,TWINT) == 0)
     74a:	e6 e5       	ldi	r30, 0x56	; 86
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	80 81       	ld	r24, Z
     750:	88 23       	and	r24, r24
     752:	dc f7       	brge	.-10     	; 0x74a <TWI_SendSLARead+0x4e>
            ;
        }
	}
    return au8_ERROR_STAT;
     754:	89 81       	ldd	r24, Y+1	; 0x01

}
     756:	0f 90       	pop	r0
     758:	0f 90       	pop	r0
     75a:	0f 90       	pop	r0
     75c:	cf 91       	pop	r28
     75e:	df 91       	pop	r29
     760:	08 95       	ret

00000762 <TWI_SendData>:
TWI_ERROR_state_t TWI_SendData(uint8_t I2C_CH, uint8_t Data){
     762:	df 93       	push	r29
     764:	cf 93       	push	r28
     766:	00 d0       	rcall	.+0      	; 0x768 <TWI_SendData+0x6>
     768:	0f 92       	push	r0
     76a:	cd b7       	in	r28, 0x3d	; 61
     76c:	de b7       	in	r29, 0x3e	; 62
     76e:	8a 83       	std	Y+2, r24	; 0x02
     770:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t au8_ERROR_STAT=TWI_SUCCESS;//ERRROR STAT HAS A SUCCESS VALUE AS DEFAULT
     772:	19 82       	std	Y+1, r1	; 0x01
	    if (I2C_CH>TWI_1){
     774:	8a 81       	ldd	r24, Y+2	; 0x02
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	18 f0       	brcs	.+6      	; 0x780 <TWI_SendData+0x1e>
		au8_ERROR_STAT=TWI_INVALID_CHANNEL;
     77a:	8c ef       	ldi	r24, 0xFC	; 252
     77c:	89 83       	std	Y+1, r24	; 0x01
     77e:	18 c0       	rjmp	.+48     	; 0x7b0 <TWI_SendData+0x4e>
	}
	else{
        if(NOT_INIT==gu8_InitFlag){
     780:	80 91 69 00 	lds	r24, 0x0069
     784:	88 23       	and	r24, r24
     786:	19 f4       	brne	.+6      	; 0x78e <TWI_SendData+0x2c>
            au8_ERROR_STAT=TWI_NOT_INIT;
     788:	8e ef       	ldi	r24, 0xFE	; 254
     78a:	89 83       	std	Y+1, r24	; 0x01
     78c:	11 c0       	rjmp	.+34     	; 0x7b0 <TWI_SendData+0x4e>
        }
        else if (INIT==gu8_InitFlag){
     78e:	80 91 69 00 	lds	r24, 0x0069
     792:	81 30       	cpi	r24, 0x01	; 1
     794:	69 f4       	brne	.+26     	; 0x7b0 <TWI_SendData+0x4e>
        TWI_Data_REGISTER = Data;
     796:	e3 e2       	ldi	r30, 0x23	; 35
     798:	f0 e0       	ldi	r31, 0x00	; 0
     79a:	8b 81       	ldd	r24, Y+3	; 0x03
     79c:	80 83       	st	Z, r24
        TWI_Control_REGISTER = (EN_TWI | CLR_FLAG);
     79e:	e6 e5       	ldi	r30, 0x56	; 86
     7a0:	f0 e0       	ldi	r31, 0x00	; 0
     7a2:	84 e8       	ldi	r24, 0x84	; 132
     7a4:	80 83       	st	Z, r24
        while (Get_Bit(TWI_Control_REGISTER,TWINT) == 0)
     7a6:	e6 e5       	ldi	r30, 0x56	; 86
     7a8:	f0 e0       	ldi	r31, 0x00	; 0
     7aa:	80 81       	ld	r24, Z
     7ac:	88 23       	and	r24, r24
     7ae:	dc f7       	brge	.-10     	; 0x7a6 <TWI_SendData+0x44>
            ;
        }
	}
    return au8_ERROR_STAT;
     7b0:	89 81       	ldd	r24, Y+1	; 0x01
}
     7b2:	0f 90       	pop	r0
     7b4:	0f 90       	pop	r0
     7b6:	0f 90       	pop	r0
     7b8:	cf 91       	pop	r28
     7ba:	df 91       	pop	r29
     7bc:	08 95       	ret

000007be <TWI_SendChar>:
TWI_ERROR_state_t TWI_SendChar(uint8_t I2C_CH, uint8_t SlvAdr, uint8_t Data) {
     7be:	df 93       	push	r29
     7c0:	cf 93       	push	r28
     7c2:	00 d0       	rcall	.+0      	; 0x7c4 <TWI_SendChar+0x6>
     7c4:	00 d0       	rcall	.+0      	; 0x7c6 <TWI_SendChar+0x8>
     7c6:	cd b7       	in	r28, 0x3d	; 61
     7c8:	de b7       	in	r29, 0x3e	; 62
     7ca:	8a 83       	std	Y+2, r24	; 0x02
     7cc:	6b 83       	std	Y+3, r22	; 0x03
     7ce:	4c 83       	std	Y+4, r20	; 0x04
    uint8_t au8_ERROR_STAT=TWI_SUCCESS;//ERRROR STAT HAS A SUCCESS VALUE AS DEFAULT
     7d0:	19 82       	std	Y+1, r1	; 0x01
    if (I2C_CH>TWI_1){
     7d2:	8a 81       	ldd	r24, Y+2	; 0x02
     7d4:	82 30       	cpi	r24, 0x02	; 2
     7d6:	18 f0       	brcs	.+6      	; 0x7de <TWI_SendChar+0x20>
		au8_ERROR_STAT=TWI_INVALID_CHANNEL;
     7d8:	8c ef       	ldi	r24, 0xFC	; 252
     7da:	89 83       	std	Y+1, r24	; 0x01
     7dc:	19 c0       	rjmp	.+50     	; 0x810 <TWI_SendChar+0x52>

	}
	else{
        if(NOT_INIT==gu8_InitFlag){
     7de:	80 91 69 00 	lds	r24, 0x0069
     7e2:	88 23       	and	r24, r24
     7e4:	19 f4       	brne	.+6      	; 0x7ec <TWI_SendChar+0x2e>
            au8_ERROR_STAT=TWI_NOT_INIT;
     7e6:	8e ef       	ldi	r24, 0xFE	; 254
     7e8:	89 83       	std	Y+1, r24	; 0x01
     7ea:	12 c0       	rjmp	.+36     	; 0x810 <TWI_SendChar+0x52>
        }
        else if (INIT==gu8_InitFlag){
     7ec:	80 91 69 00 	lds	r24, 0x0069
     7f0:	81 30       	cpi	r24, 0x01	; 1
     7f2:	71 f4       	brne	.+28     	; 0x810 <TWI_SendChar+0x52>
        /*SENDING START CONDITION*/
        TWI_SendStartCondition(I2C_CH);
     7f4:	8a 81       	ldd	r24, Y+2	; 0x02
     7f6:	0e 94 03 03 	call	0x606	; 0x606 <TWI_SendStartCondition>

        /*--SEND SALVE ADDRESS WITH WRITE OPERATION--*/
        TWI_SendSLAWrite(I2C_CH, SlvAdr);
     7fa:	8a 81       	ldd	r24, Y+2	; 0x02
     7fc:	6b 81       	ldd	r22, Y+3	; 0x03
     7fe:	0e 94 4f 03 	call	0x69e	; 0x69e <TWI_SendSLAWrite>
        /*--SENDING DATA--*/
        TWI_SendData(I2C_CH, Data);
     802:	8a 81       	ldd	r24, Y+2	; 0x02
     804:	6c 81       	ldd	r22, Y+4	; 0x04
     806:	0e 94 b1 03 	call	0x762	; 0x762 <TWI_SendData>
        /*--SENDING STOP CONDITION*/
        TWI_SendStopCondition(I2C_CH);
     80a:	8a 81       	ldd	r24, Y+2	; 0x02
     80c:	0e 94 2d 03 	call	0x65a	; 0x65a <TWI_SendStopCondition>
        }
	}
	return au8_ERROR_STAT;
     810:	89 81       	ldd	r24, Y+1	; 0x01
}
     812:	0f 90       	pop	r0
     814:	0f 90       	pop	r0
     816:	0f 90       	pop	r0
     818:	0f 90       	pop	r0
     81a:	cf 91       	pop	r28
     81c:	df 91       	pop	r29
     81e:	08 95       	ret

00000820 <TWI_RecDataAck>:
TWI_ERROR_state_t TWI_RecDataAck(uint8_t I2C_CH, uint8_t* data) {
     820:	df 93       	push	r29
     822:	cf 93       	push	r28
     824:	00 d0       	rcall	.+0      	; 0x826 <TWI_RecDataAck+0x6>
     826:	00 d0       	rcall	.+0      	; 0x828 <TWI_RecDataAck+0x8>
     828:	cd b7       	in	r28, 0x3d	; 61
     82a:	de b7       	in	r29, 0x3e	; 62
     82c:	8a 83       	std	Y+2, r24	; 0x02
     82e:	7c 83       	std	Y+4, r23	; 0x04
     830:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t au8_ERROR_STAT=TWI_SUCCESS;//ERRROR STAT HAS A SUCCESS VALUE AS DEFAULT
     832:	19 82       	std	Y+1, r1	; 0x01
    if(NULL_PTR==data){
     834:	8b 81       	ldd	r24, Y+3	; 0x03
     836:	9c 81       	ldd	r25, Y+4	; 0x04
     838:	00 97       	sbiw	r24, 0x00	; 0
     83a:	19 f4       	brne	.+6      	; 0x842 <TWI_RecDataAck+0x22>
        au8_ERROR_STAT=TWI_NULL_POINTER;
     83c:	8d ef       	ldi	r24, 0xFD	; 253
     83e:	89 83       	std	Y+1, r24	; 0x01
     840:	23 c0       	rjmp	.+70     	; 0x888 <TWI_RecDataAck+0x68>
    }//if
    else{
        if (I2C_CH>TWI_1){
     842:	8a 81       	ldd	r24, Y+2	; 0x02
     844:	82 30       	cpi	r24, 0x02	; 2
     846:	18 f0       	brcs	.+6      	; 0x84e <TWI_RecDataAck+0x2e>
            au8_ERROR_STAT=TWI_INVALID_CHANNEL;
     848:	8c ef       	ldi	r24, 0xFC	; 252
     84a:	89 83       	std	Y+1, r24	; 0x01
     84c:	1d c0       	rjmp	.+58     	; 0x888 <TWI_RecDataAck+0x68>
        }//if
        else{
            if(NOT_INIT==gu8_InitFlag){
     84e:	80 91 69 00 	lds	r24, 0x0069
     852:	88 23       	and	r24, r24
     854:	19 f4       	brne	.+6      	; 0x85c <TWI_RecDataAck+0x3c>
                au8_ERROR_STAT=TWI_NOT_INIT;
     856:	8e ef       	ldi	r24, 0xFE	; 254
     858:	89 83       	std	Y+1, r24	; 0x01
     85a:	16 c0       	rjmp	.+44     	; 0x888 <TWI_RecDataAck+0x68>
            }//if
            else if (INIT==gu8_InitFlag){
     85c:	80 91 69 00 	lds	r24, 0x0069
     860:	81 30       	cpi	r24, 0x01	; 1
     862:	91 f4       	brne	.+36     	; 0x888 <TWI_RecDataAck+0x68>
//                Set_Bit(TWI_Control_REGISTER, TWEA);
//                Set_Bit(TWI_Control_REGISTER, TWINT);
                TWI_Control_REGISTER|=(TWEA<<1)|(TWEA<<1);
     864:	a6 e5       	ldi	r26, 0x56	; 86
     866:	b0 e0       	ldi	r27, 0x00	; 0
     868:	e6 e5       	ldi	r30, 0x56	; 86
     86a:	f0 e0       	ldi	r31, 0x00	; 0
     86c:	80 81       	ld	r24, Z
     86e:	8c 60       	ori	r24, 0x0C	; 12
     870:	8c 93       	st	X, r24

                while (Get_Bit(TWI_Control_REGISTER,TWINT) == 0)
     872:	e6 e5       	ldi	r30, 0x56	; 86
     874:	f0 e0       	ldi	r31, 0x00	; 0
     876:	80 81       	ld	r24, Z
     878:	88 23       	and	r24, r24
     87a:	dc f7       	brge	.-10     	; 0x872 <TWI_RecDataAck+0x52>
                    ;
                *data = TWI_Data_REGISTER;
     87c:	e3 e2       	ldi	r30, 0x23	; 35
     87e:	f0 e0       	ldi	r31, 0x00	; 0
     880:	80 81       	ld	r24, Z
     882:	eb 81       	ldd	r30, Y+3	; 0x03
     884:	fc 81       	ldd	r31, Y+4	; 0x04
     886:	80 83       	st	Z, r24
            else{
                //DO NOTHING
            }//else
        }//else
    }//else
	return au8_ERROR_STAT;
     888:	89 81       	ldd	r24, Y+1	; 0x01
}
     88a:	0f 90       	pop	r0
     88c:	0f 90       	pop	r0
     88e:	0f 90       	pop	r0
     890:	0f 90       	pop	r0
     892:	cf 91       	pop	r28
     894:	df 91       	pop	r29
     896:	08 95       	ret

00000898 <TWI_RecChar>:
TWI_ERROR_state_t TWI_RecChar(uint8_t I2C_CH, uint8_t SlvAdr, uint8_t* Data) {
     898:	df 93       	push	r29
     89a:	cf 93       	push	r28
     89c:	00 d0       	rcall	.+0      	; 0x89e <TWI_RecChar+0x6>
     89e:	00 d0       	rcall	.+0      	; 0x8a0 <TWI_RecChar+0x8>
     8a0:	0f 92       	push	r0
     8a2:	cd b7       	in	r28, 0x3d	; 61
     8a4:	de b7       	in	r29, 0x3e	; 62
     8a6:	8a 83       	std	Y+2, r24	; 0x02
     8a8:	6b 83       	std	Y+3, r22	; 0x03
     8aa:	5d 83       	std	Y+5, r21	; 0x05
     8ac:	4c 83       	std	Y+4, r20	; 0x04
    uint8_t au8_ERROR_STAT=TWI_SUCCESS;//ERRROR STAT HAS A SUCCESS VALUE AS DEFAULT
     8ae:	19 82       	std	Y+1, r1	; 0x01
    if(NULL_PTR==Data){
     8b0:	8c 81       	ldd	r24, Y+4	; 0x04
     8b2:	9d 81       	ldd	r25, Y+5	; 0x05
     8b4:	00 97       	sbiw	r24, 0x00	; 0
     8b6:	19 f4       	brne	.+6      	; 0x8be <TWI_RecChar+0x26>
        au8_ERROR_STAT=TWI_NULL_POINTER;
     8b8:	8d ef       	ldi	r24, 0xFD	; 253
     8ba:	89 83       	std	Y+1, r24	; 0x01
     8bc:	21 c0       	rjmp	.+66     	; 0x900 <TWI_RecChar+0x68>
    }//if
    else{
        if (I2C_CH>TWI_1){
     8be:	8a 81       	ldd	r24, Y+2	; 0x02
     8c0:	82 30       	cpi	r24, 0x02	; 2
     8c2:	18 f0       	brcs	.+6      	; 0x8ca <TWI_RecChar+0x32>
            au8_ERROR_STAT=TWI_INVALID_CHANNEL;
     8c4:	8c ef       	ldi	r24, 0xFC	; 252
     8c6:	89 83       	std	Y+1, r24	; 0x01
     8c8:	1b c0       	rjmp	.+54     	; 0x900 <TWI_RecChar+0x68>
        }//if
        else{
            if(NOT_INIT==gu8_InitFlag){
     8ca:	80 91 69 00 	lds	r24, 0x0069
     8ce:	88 23       	and	r24, r24
     8d0:	19 f4       	brne	.+6      	; 0x8d8 <TWI_RecChar+0x40>
                au8_ERROR_STAT=TWI_NOT_INIT;
     8d2:	8e ef       	ldi	r24, 0xFE	; 254
     8d4:	89 83       	std	Y+1, r24	; 0x01
     8d6:	14 c0       	rjmp	.+40     	; 0x900 <TWI_RecChar+0x68>
            }//if
            else if (INIT==gu8_InitFlag){
     8d8:	80 91 69 00 	lds	r24, 0x0069
     8dc:	81 30       	cpi	r24, 0x01	; 1
     8de:	81 f4       	brne	.+32     	; 0x900 <TWI_RecChar+0x68>
                TWI_SendStartCondition(I2C_CH);
     8e0:	8a 81       	ldd	r24, Y+2	; 0x02
     8e2:	0e 94 03 03 	call	0x606	; 0x606 <TWI_SendStartCondition>
                TWI_SendSLARead(I2C_CH, SlvAdr);
     8e6:	8a 81       	ldd	r24, Y+2	; 0x02
     8e8:	6b 81       	ldd	r22, Y+3	; 0x03
     8ea:	0e 94 7e 03 	call	0x6fc	; 0x6fc <TWI_SendSLARead>
                TWI_RecDataAck(I2C_CH, Data);
     8ee:	2c 81       	ldd	r18, Y+4	; 0x04
     8f0:	3d 81       	ldd	r19, Y+5	; 0x05
     8f2:	8a 81       	ldd	r24, Y+2	; 0x02
     8f4:	b9 01       	movw	r22, r18
     8f6:	0e 94 10 04 	call	0x820	; 0x820 <TWI_RecDataAck>
                TWI_SendStopCondition(I2C_CH);
     8fa:	8a 81       	ldd	r24, Y+2	; 0x02
     8fc:	0e 94 2d 03 	call	0x65a	; 0x65a <TWI_SendStopCondition>
            else{
                    //DO NOTHING
            }//else
        }//else
    }//else
	return au8_ERROR_STAT;
     900:	89 81       	ldd	r24, Y+1	; 0x01
}
     902:	0f 90       	pop	r0
     904:	0f 90       	pop	r0
     906:	0f 90       	pop	r0
     908:	0f 90       	pop	r0
     90a:	0f 90       	pop	r0
     90c:	cf 91       	pop	r28
     90e:	df 91       	pop	r29
     910:	08 95       	ret

00000912 <TWI_EnableInterrupt>:

TWI_ERROR_state_t TWI_EnableInterrupt(uint8_t I2C_CH) {
     912:	df 93       	push	r29
     914:	cf 93       	push	r28
     916:	00 d0       	rcall	.+0      	; 0x918 <TWI_EnableInterrupt+0x6>
     918:	cd b7       	in	r28, 0x3d	; 61
     91a:	de b7       	in	r29, 0x3e	; 62
     91c:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t au8_ERROR_STAT=TWI_SUCCESS;//ERRROR STAT HAS A SUCCESS VALUE AS DEFAULT
     91e:	19 82       	std	Y+1, r1	; 0x01
    if (I2C_CH>TWI_1){
     920:	8a 81       	ldd	r24, Y+2	; 0x02
     922:	82 30       	cpi	r24, 0x02	; 2
     924:	18 f0       	brcs	.+6      	; 0x92c <TWI_EnableInterrupt+0x1a>
		au8_ERROR_STAT=TWI_INVALID_CHANNEL;
     926:	8c ef       	ldi	r24, 0xFC	; 252
     928:	89 83       	std	Y+1, r24	; 0x01
     92a:	12 c0       	rjmp	.+36     	; 0x950 <TWI_EnableInterrupt+0x3e>
	}
	else{
        if(NOT_INIT==gu8_InitFlag){
     92c:	80 91 69 00 	lds	r24, 0x0069
     930:	88 23       	and	r24, r24
     932:	19 f4       	brne	.+6      	; 0x93a <TWI_EnableInterrupt+0x28>
            au8_ERROR_STAT=TWI_NOT_INIT;
     934:	8e ef       	ldi	r24, 0xFE	; 254
     936:	89 83       	std	Y+1, r24	; 0x01
     938:	0b c0       	rjmp	.+22     	; 0x950 <TWI_EnableInterrupt+0x3e>
        }
        else if (INIT==gu8_InitFlag){
     93a:	80 91 69 00 	lds	r24, 0x0069
     93e:	81 30       	cpi	r24, 0x01	; 1
     940:	39 f4       	brne	.+14     	; 0x950 <TWI_EnableInterrupt+0x3e>
            Set_Bit(TWI_Control_REGISTER, TWIE); //Disable ISR for the TWI peripheral
     942:	a6 e5       	ldi	r26, 0x56	; 86
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e6 e5       	ldi	r30, 0x56	; 86
     948:	f0 e0       	ldi	r31, 0x00	; 0
     94a:	80 81       	ld	r24, Z
     94c:	81 60       	ori	r24, 0x01	; 1
     94e:	8c 93       	st	X, r24
        }//else if
        else{
            //DO NOTHING
        }//else
	}//else
	return au8_ERROR_STAT;
     950:	89 81       	ldd	r24, Y+1	; 0x01

}
     952:	0f 90       	pop	r0
     954:	0f 90       	pop	r0
     956:	cf 91       	pop	r28
     958:	df 91       	pop	r29
     95a:	08 95       	ret

0000095c <TWI_DisableInterrupt>:
TWI_ERROR_state_t TWI_DisableInterrupt(uint8_t I2C_CH) {
     95c:	df 93       	push	r29
     95e:	cf 93       	push	r28
     960:	00 d0       	rcall	.+0      	; 0x962 <TWI_DisableInterrupt+0x6>
     962:	cd b7       	in	r28, 0x3d	; 61
     964:	de b7       	in	r29, 0x3e	; 62
     966:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t au8_ERROR_STAT=TWI_SUCCESS;//ERRROR STAT HAS A SUCCESS VALUE AS DEFAULT
     968:	19 82       	std	Y+1, r1	; 0x01
    if (I2C_CH>TWI_1){
     96a:	8a 81       	ldd	r24, Y+2	; 0x02
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	18 f0       	brcs	.+6      	; 0x976 <TWI_DisableInterrupt+0x1a>
		au8_ERROR_STAT=TWI_INVALID_CHANNEL;
     970:	8c ef       	ldi	r24, 0xFC	; 252
     972:	89 83       	std	Y+1, r24	; 0x01
     974:	12 c0       	rjmp	.+36     	; 0x99a <TWI_DisableInterrupt+0x3e>
	}
	else{
        if(NOT_INIT==gu8_InitFlag){
     976:	80 91 69 00 	lds	r24, 0x0069
     97a:	88 23       	and	r24, r24
     97c:	19 f4       	brne	.+6      	; 0x984 <TWI_DisableInterrupt+0x28>
            au8_ERROR_STAT=TWI_NOT_INIT;
     97e:	8e ef       	ldi	r24, 0xFE	; 254
     980:	89 83       	std	Y+1, r24	; 0x01
     982:	0b c0       	rjmp	.+22     	; 0x99a <TWI_DisableInterrupt+0x3e>
        }
        else if (INIT==gu8_InitFlag){
     984:	80 91 69 00 	lds	r24, 0x0069
     988:	81 30       	cpi	r24, 0x01	; 1
     98a:	39 f4       	brne	.+14     	; 0x99a <TWI_DisableInterrupt+0x3e>
            Clr_Bit(TWI_Control_REGISTER, TWIE); //Disable ISR for the TWI peripheral
     98c:	a6 e5       	ldi	r26, 0x56	; 86
     98e:	b0 e0       	ldi	r27, 0x00	; 0
     990:	e6 e5       	ldi	r30, 0x56	; 86
     992:	f0 e0       	ldi	r31, 0x00	; 0
     994:	80 81       	ld	r24, Z
     996:	8e 7f       	andi	r24, 0xFE	; 254
     998:	8c 93       	st	X, r24
        }//else if
        else{
            //DO NOTHING
        }//else
	}//else
	return au8_ERROR_STAT;
     99a:	89 81       	ldd	r24, Y+1	; 0x01

}
     99c:	0f 90       	pop	r0
     99e:	0f 90       	pop	r0
     9a0:	cf 91       	pop	r28
     9a2:	df 91       	pop	r29
     9a4:	08 95       	ret

000009a6 <TWI_SlaOperDetermination>:
TWI_ERROR_state_t TWI_SlaOperDetermination(uint8_t I2C_CH, uint8_t* Oper) {
     9a6:	df 93       	push	r29
     9a8:	cf 93       	push	r28
     9aa:	00 d0       	rcall	.+0      	; 0x9ac <TWI_SlaOperDetermination+0x6>
     9ac:	00 d0       	rcall	.+0      	; 0x9ae <TWI_SlaOperDetermination+0x8>
     9ae:	cd b7       	in	r28, 0x3d	; 61
     9b0:	de b7       	in	r29, 0x3e	; 62
     9b2:	8a 83       	std	Y+2, r24	; 0x02
     9b4:	7c 83       	std	Y+4, r23	; 0x04
     9b6:	6b 83       	std	Y+3, r22	; 0x03
    uint8_t au8_ERROR_STAT=TWI_SUCCESS;//ERRROR STAT HAS A SUCCESS VALUE AS DEFAULT
     9b8:	19 82       	std	Y+1, r1	; 0x01
    if(NULL_PTR==Oper){
     9ba:	8b 81       	ldd	r24, Y+3	; 0x03
     9bc:	9c 81       	ldd	r25, Y+4	; 0x04
     9be:	00 97       	sbiw	r24, 0x00	; 0
     9c0:	19 f4       	brne	.+6      	; 0x9c8 <TWI_SlaOperDetermination+0x22>
        au8_ERROR_STAT=TWI_NULL_POINTER;
     9c2:	8d ef       	ldi	r24, 0xFD	; 253
     9c4:	89 83       	std	Y+1, r24	; 0x01
     9c6:	18 c0       	rjmp	.+48     	; 0x9f8 <TWI_SlaOperDetermination+0x52>
    }//if
    else{
        if (I2C_CH>TWI_1){
     9c8:	8a 81       	ldd	r24, Y+2	; 0x02
     9ca:	82 30       	cpi	r24, 0x02	; 2
     9cc:	18 f0       	brcs	.+6      	; 0x9d4 <TWI_SlaOperDetermination+0x2e>
            au8_ERROR_STAT=TWI_INVALID_CHANNEL;
     9ce:	8c ef       	ldi	r24, 0xFC	; 252
     9d0:	89 83       	std	Y+1, r24	; 0x01
     9d2:	12 c0       	rjmp	.+36     	; 0x9f8 <TWI_SlaOperDetermination+0x52>
        }//if
        else{
            if(NOT_INIT==gu8_InitFlag){
     9d4:	80 91 69 00 	lds	r24, 0x0069
     9d8:	88 23       	and	r24, r24
     9da:	19 f4       	brne	.+6      	; 0x9e2 <TWI_SlaOperDetermination+0x3c>
                au8_ERROR_STAT=TWI_NOT_INIT;
     9dc:	8e ef       	ldi	r24, 0xFE	; 254
     9de:	89 83       	std	Y+1, r24	; 0x01
     9e0:	0b c0       	rjmp	.+22     	; 0x9f8 <TWI_SlaOperDetermination+0x52>
            }//if
            else if (INIT==gu8_InitFlag){
     9e2:	80 91 69 00 	lds	r24, 0x0069
     9e6:	81 30       	cpi	r24, 0x01	; 1
     9e8:	39 f4       	brne	.+14     	; 0x9f8 <TWI_SlaOperDetermination+0x52>
                *Oper = Get_Bit(TWI_Data_REGISTER, 0);
     9ea:	e3 e2       	ldi	r30, 0x23	; 35
     9ec:	f0 e0       	ldi	r31, 0x00	; 0
     9ee:	80 81       	ld	r24, Z
     9f0:	81 70       	andi	r24, 0x01	; 1
     9f2:	eb 81       	ldd	r30, Y+3	; 0x03
     9f4:	fc 81       	ldd	r31, Y+4	; 0x04
     9f6:	80 83       	st	Z, r24
            else{
                //DO NOTHING
            }//else
        }//else
    }//else
	return au8_ERROR_STAT;
     9f8:	89 81       	ldd	r24, Y+1	; 0x01
}
     9fa:	0f 90       	pop	r0
     9fc:	0f 90       	pop	r0
     9fe:	0f 90       	pop	r0
     a00:	0f 90       	pop	r0
     a02:	cf 91       	pop	r28
     a04:	df 91       	pop	r29
     a06:	08 95       	ret

00000a08 <TWI_SetCallback>:
TWI_ERROR_state_t TWI_SetCallback(uint8_t I2CNumber, Ptr_VoidFuncVoid_t Callback) {
     a08:	df 93       	push	r29
     a0a:	cf 93       	push	r28
     a0c:	00 d0       	rcall	.+0      	; 0xa0e <TWI_SetCallback+0x6>
     a0e:	00 d0       	rcall	.+0      	; 0xa10 <TWI_SetCallback+0x8>
     a10:	cd b7       	in	r28, 0x3d	; 61
     a12:	de b7       	in	r29, 0x3e	; 62
     a14:	8a 83       	std	Y+2, r24	; 0x02
     a16:	7c 83       	std	Y+4, r23	; 0x04
     a18:	6b 83       	std	Y+3, r22	; 0x03
    uint8_t au8_ERROR_STAT=TWI_SUCCESS;//ERRROR STAT HAS A SUCCESS VALUE AS DEFAULT
     a1a:	19 82       	std	Y+1, r1	; 0x01
    if(NULL_PTR==Callback){
     a1c:	8b 81       	ldd	r24, Y+3	; 0x03
     a1e:	9c 81       	ldd	r25, Y+4	; 0x04
     a20:	00 97       	sbiw	r24, 0x00	; 0
     a22:	19 f4       	brne	.+6      	; 0xa2a <TWI_SetCallback+0x22>
        au8_ERROR_STAT=TWI_NULL_POINTER;
     a24:	8d ef       	ldi	r24, 0xFD	; 253
     a26:	89 83       	std	Y+1, r24	; 0x01
     a28:	17 c0       	rjmp	.+46     	; 0xa58 <TWI_SetCallback+0x50>
    }//if
    else{
        if (I2CNumber>TWI_1){
     a2a:	8a 81       	ldd	r24, Y+2	; 0x02
     a2c:	82 30       	cpi	r24, 0x02	; 2
     a2e:	18 f0       	brcs	.+6      	; 0xa36 <TWI_SetCallback+0x2e>
            au8_ERROR_STAT=TWI_INVALID_CHANNEL;
     a30:	8c ef       	ldi	r24, 0xFC	; 252
     a32:	89 83       	std	Y+1, r24	; 0x01
     a34:	11 c0       	rjmp	.+34     	; 0xa58 <TWI_SetCallback+0x50>
        }
        else{
            if(NOT_INIT==gu8_InitFlag){
     a36:	80 91 69 00 	lds	r24, 0x0069
     a3a:	88 23       	and	r24, r24
     a3c:	19 f4       	brne	.+6      	; 0xa44 <TWI_SetCallback+0x3c>
                au8_ERROR_STAT=TWI_NOT_INIT;
     a3e:	8e ef       	ldi	r24, 0xFE	; 254
     a40:	89 83       	std	Y+1, r24	; 0x01
     a42:	0a c0       	rjmp	.+20     	; 0xa58 <TWI_SetCallback+0x50>
            }
            else if (INIT==gu8_InitFlag){
     a44:	80 91 69 00 	lds	r24, 0x0069
     a48:	81 30       	cpi	r24, 0x01	; 1
     a4a:	31 f4       	brne	.+12     	; 0xa58 <TWI_SetCallback+0x50>
                G_TWI_CALLBACK = Callback;
     a4c:	8b 81       	ldd	r24, Y+3	; 0x03
     a4e:	9c 81       	ldd	r25, Y+4	; 0x04
     a50:	90 93 68 00 	sts	0x0068, r25
     a54:	80 93 67 00 	sts	0x0067, r24
            else{
                //DO NOTHING
            }//else
        }//else
    }
	return au8_ERROR_STAT;
     a58:	89 81       	ldd	r24, Y+1	; 0x01
}
     a5a:	0f 90       	pop	r0
     a5c:	0f 90       	pop	r0
     a5e:	0f 90       	pop	r0
     a60:	0f 90       	pop	r0
     a62:	cf 91       	pop	r28
     a64:	df 91       	pop	r29
     a66:	08 95       	ret

00000a68 <__vector_19>:
void __vector_19(void) __attribute__((signal)); // Serial Transfer Complete
void __vector_19(void) {
     a68:	1f 92       	push	r1
     a6a:	0f 92       	push	r0
     a6c:	0f b6       	in	r0, 0x3f	; 63
     a6e:	0f 92       	push	r0
     a70:	11 24       	eor	r1, r1
     a72:	2f 93       	push	r18
     a74:	3f 93       	push	r19
     a76:	4f 93       	push	r20
     a78:	5f 93       	push	r21
     a7a:	6f 93       	push	r22
     a7c:	7f 93       	push	r23
     a7e:	8f 93       	push	r24
     a80:	9f 93       	push	r25
     a82:	af 93       	push	r26
     a84:	bf 93       	push	r27
     a86:	ef 93       	push	r30
     a88:	ff 93       	push	r31
     a8a:	df 93       	push	r29
     a8c:	cf 93       	push	r28
     a8e:	cd b7       	in	r28, 0x3d	; 61
     a90:	de b7       	in	r29, 0x3e	; 62
	G_TWI_CALLBACK();
     a92:	e0 91 67 00 	lds	r30, 0x0067
     a96:	f0 91 68 00 	lds	r31, 0x0068
     a9a:	09 95       	icall
}
     a9c:	cf 91       	pop	r28
     a9e:	df 91       	pop	r29
     aa0:	ff 91       	pop	r31
     aa2:	ef 91       	pop	r30
     aa4:	bf 91       	pop	r27
     aa6:	af 91       	pop	r26
     aa8:	9f 91       	pop	r25
     aaa:	8f 91       	pop	r24
     aac:	7f 91       	pop	r23
     aae:	6f 91       	pop	r22
     ab0:	5f 91       	pop	r21
     ab2:	4f 91       	pop	r20
     ab4:	3f 91       	pop	r19
     ab6:	2f 91       	pop	r18
     ab8:	0f 90       	pop	r0
     aba:	0f be       	out	0x3f, r0	; 63
     abc:	0f 90       	pop	r0
     abe:	1f 90       	pop	r1
     ac0:	18 95       	reti

00000ac2 <SPI_Init>:
#endif

	return 0;
}
#endif
uint8_t SPI_Init(uint8_t SpiNumber) {
     ac2:	df 93       	push	r29
     ac4:	cf 93       	push	r28
     ac6:	0f 92       	push	r0
     ac8:	cd b7       	in	r28, 0x3d	; 61
     aca:	de b7       	in	r29, 0x3e	; 62
     acc:	89 83       	std	Y+1, r24	; 0x01
#else
	Clr_Bit(SPSR, SPI2X);
#endif /*DOUBLE_SPEED*/

#else
	Clr_Bit(SPCR, MSTR);
     ace:	ad e2       	ldi	r26, 0x2D	; 45
     ad0:	b0 e0       	ldi	r27, 0x00	; 0
     ad2:	ed e2       	ldi	r30, 0x2D	; 45
     ad4:	f0 e0       	ldi	r31, 0x00	; 0
     ad6:	80 81       	ld	r24, Z
     ad8:	8f 7e       	andi	r24, 0xEF	; 239
     ada:	8c 93       	st	X, r24
	Set_Bit(SPCR, SPE);
     adc:	ad e2       	ldi	r26, 0x2D	; 45
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	ed e2       	ldi	r30, 0x2D	; 45
     ae2:	f0 e0       	ldi	r31, 0x00	; 0
     ae4:	80 81       	ld	r24, Z
     ae6:	80 64       	ori	r24, 0x40	; 64
     ae8:	8c 93       	st	X, r24
	DIO_SetPinDirection(SPI_CH0_MISO_PORT, SPI_CH0_MISO_PIN, PIN_OUTPUT);
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	66 e0       	ldi	r22, 0x06	; 6
     aee:	41 e0       	ldi	r20, 0x01	; 1
     af0:	0e 94 78 08 	call	0x10f0	; 0x10f0 <DIO_SetPinDirection>
	DIO_SetPinDirection(SPI_CH0_MOSI_PORT, SPI_CH0_MOSI_PIN, PIN_INPUT);
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	65 e0       	ldi	r22, 0x05	; 5
     af8:	40 e0       	ldi	r20, 0x00	; 0
     afa:	0e 94 78 08 	call	0x10f0	; 0x10f0 <DIO_SetPinDirection>
	DIO_SetPinDirection(SPI_CH0_SCK_PORT, SPI_CH0_SCK_PIN, PIN_INPUT);
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	67 e0       	ldi	r22, 0x07	; 7
     b02:	40 e0       	ldi	r20, 0x00	; 0
     b04:	0e 94 78 08 	call	0x10f0	; 0x10f0 <DIO_SetPinDirection>
	DIO_SetPinDirection(SPI_CH0_SS_PORT, SPI_CH0_SS_PIN, PIN_INPUT);
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	64 e0       	ldi	r22, 0x04	; 4
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	0e 94 78 08 	call	0x10f0	; 0x10f0 <DIO_SetPinDirection>
#endif/*MODE_MSRT_SLAVE*/
	return 0;
     b12:	80 e0       	ldi	r24, 0x00	; 0
}
     b14:	0f 90       	pop	r0
     b16:	cf 91       	pop	r28
     b18:	df 91       	pop	r29
     b1a:	08 95       	ret

00000b1c <SPI_TransmitChar>:

uint8_t SPI_TransmitChar(uint8_t SpiNumber, uint8_t TxChar, uint8_t slave_CH) {
     b1c:	df 93       	push	r29
     b1e:	cf 93       	push	r28
     b20:	00 d0       	rcall	.+0      	; 0xb22 <SPI_TransmitChar+0x6>
     b22:	0f 92       	push	r0
     b24:	cd b7       	in	r28, 0x3d	; 61
     b26:	de b7       	in	r29, 0x3e	; 62
     b28:	89 83       	std	Y+1, r24	; 0x01
     b2a:	6a 83       	std	Y+2, r22	; 0x02
     b2c:	4b 83       	std	Y+3, r20	; 0x03
		break;
		default:
		break;
	}
#else
	SPDR = TxChar;
     b2e:	ef e2       	ldi	r30, 0x2F	; 47
     b30:	f0 e0       	ldi	r31, 0x00	; 0
     b32:	8a 81       	ldd	r24, Y+2	; 0x02
     b34:	80 83       	st	Z, r24
	//trigger an external interrupt in master MCU
	while (!(SPSR & (1 << SPIF )))
     b36:	ee e2       	ldi	r30, 0x2E	; 46
     b38:	f0 e0       	ldi	r31, 0x00	; 0
     b3a:	80 81       	ld	r24, Z
     b3c:	88 23       	and	r24, r24
     b3e:	dc f7       	brge	.-10     	; 0xb36 <SPI_TransmitChar+0x1a>
		;
#endif
	return 0;
     b40:	80 e0       	ldi	r24, 0x00	; 0
}
     b42:	0f 90       	pop	r0
     b44:	0f 90       	pop	r0
     b46:	0f 90       	pop	r0
     b48:	cf 91       	pop	r28
     b4a:	df 91       	pop	r29
     b4c:	08 95       	ret

00000b4e <SPI_TransmitString>:
uint8_t SPI_TransmitString(uint8_t SpiNumber, ptr_uint8_t TxString,
		uint8_t slave_CH) {
     b4e:	df 93       	push	r29
     b50:	cf 93       	push	r28
     b52:	00 d0       	rcall	.+0      	; 0xb54 <SPI_TransmitString+0x6>
     b54:	00 d0       	rcall	.+0      	; 0xb56 <SPI_TransmitString+0x8>
     b56:	0f 92       	push	r0
     b58:	cd b7       	in	r28, 0x3d	; 61
     b5a:	de b7       	in	r29, 0x3e	; 62
     b5c:	8a 83       	std	Y+2, r24	; 0x02
     b5e:	7c 83       	std	Y+4, r23	; 0x04
     b60:	6b 83       	std	Y+3, r22	; 0x03
     b62:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t counter = 0;
     b64:	19 82       	std	Y+1, r1	; 0x01
     b66:	1f c0       	rjmp	.+62     	; 0xba6 <SPI_TransmitString+0x58>
		default:
		break;
	}
#else
	while (counter >= 255) {
		if ((*(TxString + counter)) == NULL_TERMINATOR) {
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	28 2f       	mov	r18, r24
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	8b 81       	ldd	r24, Y+3	; 0x03
     b70:	9c 81       	ldd	r25, Y+4	; 0x04
     b72:	fc 01       	movw	r30, r24
     b74:	e2 0f       	add	r30, r18
     b76:	f3 1f       	adc	r31, r19
     b78:	80 81       	ld	r24, Z
     b7a:	88 23       	and	r24, r24
     b7c:	b9 f0       	breq	.+46     	; 0xbac <SPI_TransmitString+0x5e>
			break;
		}
		SPDR = *(TxString + counter);
     b7e:	af e2       	ldi	r26, 0x2F	; 47
     b80:	b0 e0       	ldi	r27, 0x00	; 0
     b82:	89 81       	ldd	r24, Y+1	; 0x01
     b84:	28 2f       	mov	r18, r24
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	8b 81       	ldd	r24, Y+3	; 0x03
     b8a:	9c 81       	ldd	r25, Y+4	; 0x04
     b8c:	fc 01       	movw	r30, r24
     b8e:	e2 0f       	add	r30, r18
     b90:	f3 1f       	adc	r31, r19
     b92:	80 81       	ld	r24, Z
     b94:	8c 93       	st	X, r24
		counter++;
     b96:	89 81       	ldd	r24, Y+1	; 0x01
     b98:	8f 5f       	subi	r24, 0xFF	; 255
     b9a:	89 83       	std	Y+1, r24	; 0x01
		//trigger an external interrupt in master MCU
		while (!(SPSR & (1 << SPIF )))
     b9c:	ee e2       	ldi	r30, 0x2E	; 46
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	80 81       	ld	r24, Z
     ba2:	88 23       	and	r24, r24
     ba4:	dc f7       	brge	.-10     	; 0xb9c <SPI_TransmitString+0x4e>
		break;
		default:
		break;
	}
#else
	while (counter >= 255) {
     ba6:	89 81       	ldd	r24, Y+1	; 0x01
     ba8:	8f 3f       	cpi	r24, 0xFF	; 255
     baa:	f1 f2       	breq	.-68     	; 0xb68 <SPI_TransmitString+0x1a>
		//trigger an external interrupt in master MCU
		while (!(SPSR & (1 << SPIF )))
			;
	}
#endif
	return 0;
     bac:	80 e0       	ldi	r24, 0x00	; 0
}
     bae:	0f 90       	pop	r0
     bb0:	0f 90       	pop	r0
     bb2:	0f 90       	pop	r0
     bb4:	0f 90       	pop	r0
     bb6:	0f 90       	pop	r0
     bb8:	cf 91       	pop	r28
     bba:	df 91       	pop	r29
     bbc:	08 95       	ret

00000bbe <SPI_ReceiveChar>:

uint8_t SPI_ReceiveChar(uint8_t SpiNumber, ptr_uint8_t RxData, uint8_t slave_CH) {
     bbe:	df 93       	push	r29
     bc0:	cf 93       	push	r28
     bc2:	00 d0       	rcall	.+0      	; 0xbc4 <SPI_ReceiveChar+0x6>
     bc4:	00 d0       	rcall	.+0      	; 0xbc6 <SPI_ReceiveChar+0x8>
     bc6:	cd b7       	in	r28, 0x3d	; 61
     bc8:	de b7       	in	r29, 0x3e	; 62
     bca:	89 83       	std	Y+1, r24	; 0x01
     bcc:	7b 83       	std	Y+3, r23	; 0x03
     bce:	6a 83       	std	Y+2, r22	; 0x02
     bd0:	4c 83       	std	Y+4, r20	; 0x04
		break;
		default:
		break;
	}
#else
	while (!(SPSR & (1 << SPIF )))
     bd2:	ee e2       	ldi	r30, 0x2E	; 46
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	88 23       	and	r24, r24
     bda:	dc f7       	brge	.-10     	; 0xbd2 <SPI_ReceiveChar+0x14>
		;
	*(RxData) = SPDR;
     bdc:	ef e2       	ldi	r30, 0x2F	; 47
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	ea 81       	ldd	r30, Y+2	; 0x02
     be4:	fb 81       	ldd	r31, Y+3	; 0x03
     be6:	80 83       	st	Z, r24
#endif
	return 0;
     be8:	80 e0       	ldi	r24, 0x00	; 0
}
     bea:	0f 90       	pop	r0
     bec:	0f 90       	pop	r0
     bee:	0f 90       	pop	r0
     bf0:	0f 90       	pop	r0
     bf2:	cf 91       	pop	r28
     bf4:	df 91       	pop	r29
     bf6:	08 95       	ret

00000bf8 <SPI_ReceiveString>:
uint8_t SPI_ReceiveString(uint8_t SpiNumber, ptr_uint8_t RxString,
		uint8_t slave_CH) {
     bf8:	df 93       	push	r29
     bfa:	cf 93       	push	r28
     bfc:	00 d0       	rcall	.+0      	; 0xbfe <SPI_ReceiveString+0x6>
     bfe:	00 d0       	rcall	.+0      	; 0xc00 <SPI_ReceiveString+0x8>
     c00:	0f 92       	push	r0
     c02:	cd b7       	in	r28, 0x3d	; 61
     c04:	de b7       	in	r29, 0x3e	; 62
     c06:	8a 83       	std	Y+2, r24	; 0x02
     c08:	7c 83       	std	Y+4, r23	; 0x04
     c0a:	6b 83       	std	Y+3, r22	; 0x03
     c0c:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t counter = 0;
     c0e:	19 82       	std	Y+1, r1	; 0x01
		default:
		break;
	}
#else
	while (1) {
		while ((Get_Bit(SPSR, SPIF)) != 1);
     c10:	ee e2       	ldi	r30, 0x2E	; 46
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	88 1f       	adc	r24, r24
     c18:	88 27       	eor	r24, r24
     c1a:	88 1f       	adc	r24, r24
     c1c:	81 30       	cpi	r24, 0x01	; 1
     c1e:	c1 f7       	brne	.-16     	; 0xc10 <SPI_ReceiveString+0x18>
		*(RxString + counter) = SPDR;
     c20:	89 81       	ldd	r24, Y+1	; 0x01
     c22:	28 2f       	mov	r18, r24
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	8b 81       	ldd	r24, Y+3	; 0x03
     c28:	9c 81       	ldd	r25, Y+4	; 0x04
     c2a:	dc 01       	movw	r26, r24
     c2c:	a2 0f       	add	r26, r18
     c2e:	b3 1f       	adc	r27, r19
     c30:	ef e2       	ldi	r30, 0x2F	; 47
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	80 81       	ld	r24, Z
     c36:	8c 93       	st	X, r24
		if ((*(RxString + counter)) == NULL_TERMINATOR) {
     c38:	89 81       	ldd	r24, Y+1	; 0x01
     c3a:	28 2f       	mov	r18, r24
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	8b 81       	ldd	r24, Y+3	; 0x03
     c40:	9c 81       	ldd	r25, Y+4	; 0x04
     c42:	fc 01       	movw	r30, r24
     c44:	e2 0f       	add	r30, r18
     c46:	f3 1f       	adc	r31, r19
     c48:	80 81       	ld	r24, Z
     c4a:	88 23       	and	r24, r24
     c4c:	21 f0       	breq	.+8      	; 0xc56 <SPI_ReceiveString+0x5e>
			break;
		}
		counter++;
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	8f 5f       	subi	r24, 0xFF	; 255
     c52:	89 83       	std	Y+1, r24	; 0x01
     c54:	dd cf       	rjmp	.-70     	; 0xc10 <SPI_ReceiveString+0x18>
	}
#endif
	return 0;
     c56:	80 e0       	ldi	r24, 0x00	; 0
}
     c58:	0f 90       	pop	r0
     c5a:	0f 90       	pop	r0
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
     c62:	cf 91       	pop	r28
     c64:	df 91       	pop	r29
     c66:	08 95       	ret

00000c68 <SPI_EnableInterrupt>:

uint8_t SPI_EnableInterrupt(uint8_t SpiNumber) {
     c68:	df 93       	push	r29
     c6a:	cf 93       	push	r28
     c6c:	0f 92       	push	r0
     c6e:	cd b7       	in	r28, 0x3d	; 61
     c70:	de b7       	in	r29, 0x3e	; 62
     c72:	89 83       	std	Y+1, r24	; 0x01
	Set_Bit(SPCR, SPIE);
     c74:	ad e2       	ldi	r26, 0x2D	; 45
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	ed e2       	ldi	r30, 0x2D	; 45
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	80 68       	ori	r24, 0x80	; 128
     c80:	8c 93       	st	X, r24
	return 0;
     c82:	80 e0       	ldi	r24, 0x00	; 0
}
     c84:	0f 90       	pop	r0
     c86:	cf 91       	pop	r28
     c88:	df 91       	pop	r29
     c8a:	08 95       	ret

00000c8c <SPI_DisableInterrupt>:
uint8_t SPI_DisableInterrupt(uint8_t SpiNumber) {
     c8c:	df 93       	push	r29
     c8e:	cf 93       	push	r28
     c90:	0f 92       	push	r0
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	89 83       	std	Y+1, r24	; 0x01
	Clr_Bit(SPCR, SPIE);
     c98:	ad e2       	ldi	r26, 0x2D	; 45
     c9a:	b0 e0       	ldi	r27, 0x00	; 0
     c9c:	ed e2       	ldi	r30, 0x2D	; 45
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	8f 77       	andi	r24, 0x7F	; 127
     ca4:	8c 93       	st	X, r24
	return 0;
     ca6:	80 e0       	ldi	r24, 0x00	; 0
}
     ca8:	0f 90       	pop	r0
     caa:	cf 91       	pop	r28
     cac:	df 91       	pop	r29
     cae:	08 95       	ret

00000cb0 <SPI_SetCallback>:

uint8_t SPI_SetCallback(uint8_t SpiNumber, Ptr_VoidFuncVoid_t Callback) {
     cb0:	df 93       	push	r29
     cb2:	cf 93       	push	r28
     cb4:	00 d0       	rcall	.+0      	; 0xcb6 <SPI_SetCallback+0x6>
     cb6:	0f 92       	push	r0
     cb8:	cd b7       	in	r28, 0x3d	; 61
     cba:	de b7       	in	r29, 0x3e	; 62
     cbc:	89 83       	std	Y+1, r24	; 0x01
     cbe:	7b 83       	std	Y+3, r23	; 0x03
     cc0:	6a 83       	std	Y+2, r22	; 0x02
	G_SPI_CALLBACK=Callback;
     cc2:	8a 81       	ldd	r24, Y+2	; 0x02
     cc4:	9b 81       	ldd	r25, Y+3	; 0x03
     cc6:	90 93 71 00 	sts	0x0071, r25
     cca:	80 93 70 00 	sts	0x0070, r24
	return 0;
     cce:	80 e0       	ldi	r24, 0x00	; 0
}
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
     cd4:	0f 90       	pop	r0
     cd6:	cf 91       	pop	r28
     cd8:	df 91       	pop	r29
     cda:	08 95       	ret

00000cdc <__vector_12>:

void __vector_12(void) __attribute__((signal)); // Serial Transfer Complete
void __vector_12(void) {
     cdc:	1f 92       	push	r1
     cde:	0f 92       	push	r0
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	0f 92       	push	r0
     ce4:	11 24       	eor	r1, r1
     ce6:	2f 93       	push	r18
     ce8:	3f 93       	push	r19
     cea:	4f 93       	push	r20
     cec:	5f 93       	push	r21
     cee:	6f 93       	push	r22
     cf0:	7f 93       	push	r23
     cf2:	8f 93       	push	r24
     cf4:	9f 93       	push	r25
     cf6:	af 93       	push	r26
     cf8:	bf 93       	push	r27
     cfa:	ef 93       	push	r30
     cfc:	ff 93       	push	r31
     cfe:	df 93       	push	r29
     d00:	cf 93       	push	r28
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
	G_SPI_CALLBACK();
     d06:	e0 91 70 00 	lds	r30, 0x0070
     d0a:	f0 91 71 00 	lds	r31, 0x0071
     d0e:	09 95       	icall
}
     d10:	cf 91       	pop	r28
     d12:	df 91       	pop	r29
     d14:	ff 91       	pop	r31
     d16:	ef 91       	pop	r30
     d18:	bf 91       	pop	r27
     d1a:	af 91       	pop	r26
     d1c:	9f 91       	pop	r25
     d1e:	8f 91       	pop	r24
     d20:	7f 91       	pop	r23
     d22:	6f 91       	pop	r22
     d24:	5f 91       	pop	r21
     d26:	4f 91       	pop	r20
     d28:	3f 91       	pop	r19
     d2a:	2f 91       	pop	r18
     d2c:	0f 90       	pop	r0
     d2e:	0f be       	out	0x3f, r0	; 63
     d30:	0f 90       	pop	r0
     d32:	1f 90       	pop	r1
     d34:	18 95       	reti

00000d36 <GI_EnableGI>:
 */
#include"globalInterruptReg.h"
#include"globalInterrupt.h"

void GI_EnableGI (void)
{
     d36:	df 93       	push	r29
     d38:	cf 93       	push	r28
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(SREG_REGISTER,I_BIT);
     d3e:	af e5       	ldi	r26, 0x5F	; 95
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	ef e5       	ldi	r30, 0x5F	; 95
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	80 68       	ori	r24, 0x80	; 128
     d4a:	8c 93       	st	X, r24
}
     d4c:	cf 91       	pop	r28
     d4e:	df 91       	pop	r29
     d50:	08 95       	ret

00000d52 <GI_DisableGI>:


void GI_DisableGI (void)
{
     d52:	df 93       	push	r29
     d54:	cf 93       	push	r28
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
	Clr_Bit(SREG_REGISTER, I_BIT);
     d5a:	af e5       	ldi	r26, 0x5F	; 95
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	ef e5       	ldi	r30, 0x5F	; 95
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	8f 77       	andi	r24, 0x7F	; 127
     d66:	8c 93       	st	X, r24
}
     d68:	cf 91       	pop	r28
     d6a:	df 91       	pop	r29
     d6c:	08 95       	ret

00000d6e <EX_vdDisable>:
#include"externalInterruptReg.h"
#include"externalInterrupt.h"


void EX_vdDisable(uint8_t CopyInterrupt)
{
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	00 d0       	rcall	.+0      	; 0xd74 <EX_vdDisable+0x6>
     d74:	0f 92       	push	r0
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
     d7a:	89 83       	std	Y+1, r24	; 0x01
	if(CopyInterrupt <= EX_INT2)
     d7c:	89 81       	ldd	r24, Y+1	; 0x01
     d7e:	83 30       	cpi	r24, 0x03	; 3
     d80:	50 f5       	brcc	.+84     	; 0xdd6 <EX_vdDisable+0x68>
	{
		switch (CopyInterrupt)
     d82:	89 81       	ldd	r24, Y+1	; 0x01
     d84:	28 2f       	mov	r18, r24
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	3b 83       	std	Y+3, r19	; 0x03
     d8a:	2a 83       	std	Y+2, r18	; 0x02
     d8c:	8a 81       	ldd	r24, Y+2	; 0x02
     d8e:	9b 81       	ldd	r25, Y+3	; 0x03
     d90:	81 30       	cpi	r24, 0x01	; 1
     d92:	91 05       	cpc	r25, r1
     d94:	89 f0       	breq	.+34     	; 0xdb8 <EX_vdDisable+0x4a>
     d96:	2a 81       	ldd	r18, Y+2	; 0x02
     d98:	3b 81       	ldd	r19, Y+3	; 0x03
     d9a:	22 30       	cpi	r18, 0x02	; 2
     d9c:	31 05       	cpc	r19, r1
     d9e:	a1 f0       	breq	.+40     	; 0xdc8 <EX_vdDisable+0x5a>
     da0:	8a 81       	ldd	r24, Y+2	; 0x02
     da2:	9b 81       	ldd	r25, Y+3	; 0x03
     da4:	00 97       	sbiw	r24, 0x00	; 0
     da6:	b9 f4       	brne	.+46     	; 0xdd6 <EX_vdDisable+0x68>
		{
		case EX_INT0:
			Clr_Bit(GICR,6);
     da8:	ab e5       	ldi	r26, 0x5B	; 91
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	eb e5       	ldi	r30, 0x5B	; 91
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	8f 7b       	andi	r24, 0xBF	; 191
     db4:	8c 93       	st	X, r24
     db6:	0f c0       	rjmp	.+30     	; 0xdd6 <EX_vdDisable+0x68>
			break;
		case EX_INT1:
			Clr_Bit(GICR,7);
     db8:	ab e5       	ldi	r26, 0x5B	; 91
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	eb e5       	ldi	r30, 0x5B	; 91
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	8f 77       	andi	r24, 0x7F	; 127
     dc4:	8c 93       	st	X, r24
     dc6:	07 c0       	rjmp	.+14     	; 0xdd6 <EX_vdDisable+0x68>
			break;
		case EX_INT2:
			Clr_Bit(GICR,5);
     dc8:	ab e5       	ldi	r26, 0x5B	; 91
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	eb e5       	ldi	r30, 0x5B	; 91
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	8f 7d       	andi	r24, 0xDF	; 223
     dd4:	8c 93       	st	X, r24
			break;
		default:
			break;
		}
	}
}
     dd6:	0f 90       	pop	r0
     dd8:	0f 90       	pop	r0
     dda:	0f 90       	pop	r0
     ddc:	cf 91       	pop	r28
     dde:	df 91       	pop	r29
     de0:	08 95       	ret

00000de2 <EX_vdConfigInterrupt>:

void EX_vdConfigInterrupt(uint8_t CopyInterrupt , uint8_t CopyControlSense)
{
     de2:	df 93       	push	r29
     de4:	cf 93       	push	r28
     de6:	cd b7       	in	r28, 0x3d	; 61
     de8:	de b7       	in	r29, 0x3e	; 62
     dea:	2a 97       	sbiw	r28, 0x0a	; 10
     dec:	0f b6       	in	r0, 0x3f	; 63
     dee:	f8 94       	cli
     df0:	de bf       	out	0x3e, r29	; 62
     df2:	0f be       	out	0x3f, r0	; 63
     df4:	cd bf       	out	0x3d, r28	; 61
     df6:	89 83       	std	Y+1, r24	; 0x01
     df8:	6a 83       	std	Y+2, r22	; 0x02
	if(CopyInterrupt <= EX_INT2 && CopyControlSense <= EX_SENSE_LOGIACL_CHANGE)
     dfa:	89 81       	ldd	r24, Y+1	; 0x01
     dfc:	83 30       	cpi	r24, 0x03	; 3
     dfe:	08 f0       	brcs	.+2      	; 0xe02 <EX_vdConfigInterrupt+0x20>
     e00:	03 c1       	rjmp	.+518    	; 0x1008 <EX_vdConfigInterrupt+0x226>
     e02:	8a 81       	ldd	r24, Y+2	; 0x02
     e04:	84 30       	cpi	r24, 0x04	; 4
     e06:	08 f0       	brcs	.+2      	; 0xe0a <EX_vdConfigInterrupt+0x28>
     e08:	ff c0       	rjmp	.+510    	; 0x1008 <EX_vdConfigInterrupt+0x226>
	{
		switch (CopyInterrupt)
     e0a:	89 81       	ldd	r24, Y+1	; 0x01
     e0c:	28 2f       	mov	r18, r24
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	3a 87       	std	Y+10, r19	; 0x0a
     e12:	29 87       	std	Y+9, r18	; 0x09
     e14:	89 85       	ldd	r24, Y+9	; 0x09
     e16:	9a 85       	ldd	r25, Y+10	; 0x0a
     e18:	81 30       	cpi	r24, 0x01	; 1
     e1a:	91 05       	cpc	r25, r1
     e1c:	09 f4       	brne	.+2      	; 0xe20 <EX_vdConfigInterrupt+0x3e>
     e1e:	6d c0       	rjmp	.+218    	; 0xefa <EX_vdConfigInterrupt+0x118>
     e20:	29 85       	ldd	r18, Y+9	; 0x09
     e22:	3a 85       	ldd	r19, Y+10	; 0x0a
     e24:	22 30       	cpi	r18, 0x02	; 2
     e26:	31 05       	cpc	r19, r1
     e28:	09 f4       	brne	.+2      	; 0xe2c <EX_vdConfigInterrupt+0x4a>
     e2a:	c9 c0       	rjmp	.+402    	; 0xfbe <EX_vdConfigInterrupt+0x1dc>
     e2c:	89 85       	ldd	r24, Y+9	; 0x09
     e2e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e30:	00 97       	sbiw	r24, 0x00	; 0
     e32:	09 f0       	breq	.+2      	; 0xe36 <EX_vdConfigInterrupt+0x54>
     e34:	e9 c0       	rjmp	.+466    	; 0x1008 <EX_vdConfigInterrupt+0x226>
		{
			case EX_INT0:
				Set_Bit(GICR,6);
     e36:	ab e5       	ldi	r26, 0x5B	; 91
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	eb e5       	ldi	r30, 0x5B	; 91
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	80 64       	ori	r24, 0x40	; 64
     e42:	8c 93       	st	X, r24
				switch (CopyControlSense)
     e44:	8a 81       	ldd	r24, Y+2	; 0x02
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	38 87       	std	Y+8, r19	; 0x08
     e4c:	2f 83       	std	Y+7, r18	; 0x07
     e4e:	8f 81       	ldd	r24, Y+7	; 0x07
     e50:	98 85       	ldd	r25, Y+8	; 0x08
     e52:	81 30       	cpi	r24, 0x01	; 1
     e54:	91 05       	cpc	r25, r1
     e56:	21 f1       	breq	.+72     	; 0xea0 <EX_vdConfigInterrupt+0xbe>
     e58:	2f 81       	ldd	r18, Y+7	; 0x07
     e5a:	38 85       	ldd	r19, Y+8	; 0x08
     e5c:	22 30       	cpi	r18, 0x02	; 2
     e5e:	31 05       	cpc	r19, r1
     e60:	2c f4       	brge	.+10     	; 0xe6c <EX_vdConfigInterrupt+0x8a>
     e62:	8f 81       	ldd	r24, Y+7	; 0x07
     e64:	98 85       	ldd	r25, Y+8	; 0x08
     e66:	00 97       	sbiw	r24, 0x00	; 0
     e68:	61 f0       	breq	.+24     	; 0xe82 <EX_vdConfigInterrupt+0xa0>
     e6a:	ce c0       	rjmp	.+412    	; 0x1008 <EX_vdConfigInterrupt+0x226>
     e6c:	2f 81       	ldd	r18, Y+7	; 0x07
     e6e:	38 85       	ldd	r19, Y+8	; 0x08
     e70:	22 30       	cpi	r18, 0x02	; 2
     e72:	31 05       	cpc	r19, r1
     e74:	21 f1       	breq	.+72     	; 0xebe <EX_vdConfigInterrupt+0xdc>
     e76:	8f 81       	ldd	r24, Y+7	; 0x07
     e78:	98 85       	ldd	r25, Y+8	; 0x08
     e7a:	83 30       	cpi	r24, 0x03	; 3
     e7c:	91 05       	cpc	r25, r1
     e7e:	71 f1       	breq	.+92     	; 0xedc <EX_vdConfigInterrupt+0xfa>
     e80:	c3 c0       	rjmp	.+390    	; 0x1008 <EX_vdConfigInterrupt+0x226>
				{
					case EX_SENSE_FALLING_EDGE:
						Clr_Bit(MCUCR,0);
     e82:	a5 e5       	ldi	r26, 0x55	; 85
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e5 e5       	ldi	r30, 0x55	; 85
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	8e 7f       	andi	r24, 0xFE	; 254
     e8e:	8c 93       	st	X, r24
						Set_Bit(MCUCR,1);
     e90:	a5 e5       	ldi	r26, 0x55	; 85
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e5 e5       	ldi	r30, 0x55	; 85
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	82 60       	ori	r24, 0x02	; 2
     e9c:	8c 93       	st	X, r24
     e9e:	b4 c0       	rjmp	.+360    	; 0x1008 <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_RAISING_EDGE:
						Set_Bit(MCUCR,0);
     ea0:	a5 e5       	ldi	r26, 0x55	; 85
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	e5 e5       	ldi	r30, 0x55	; 85
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	81 60       	ori	r24, 0x01	; 1
     eac:	8c 93       	st	X, r24
						Set_Bit(MCUCR,1);
     eae:	a5 e5       	ldi	r26, 0x55	; 85
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	e5 e5       	ldi	r30, 0x55	; 85
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	82 60       	ori	r24, 0x02	; 2
     eba:	8c 93       	st	X, r24
     ebc:	a5 c0       	rjmp	.+330    	; 0x1008 <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_LOW_LEVEL:
						Clr_Bit(MCUCR,0);
     ebe:	a5 e5       	ldi	r26, 0x55	; 85
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	e5 e5       	ldi	r30, 0x55	; 85
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	8e 7f       	andi	r24, 0xFE	; 254
     eca:	8c 93       	st	X, r24
						Clr_Bit(MCUCR,1);
     ecc:	a5 e5       	ldi	r26, 0x55	; 85
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	e5 e5       	ldi	r30, 0x55	; 85
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	8d 7f       	andi	r24, 0xFD	; 253
     ed8:	8c 93       	st	X, r24
     eda:	96 c0       	rjmp	.+300    	; 0x1008 <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_LOGIACL_CHANGE:
						Set_Bit(MCUCR,0);
     edc:	a5 e5       	ldi	r26, 0x55	; 85
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e5 e5       	ldi	r30, 0x55	; 85
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	81 60       	ori	r24, 0x01	; 1
     ee8:	8c 93       	st	X, r24
						Clr_Bit(MCUCR,1);
     eea:	a5 e5       	ldi	r26, 0x55	; 85
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e5 e5       	ldi	r30, 0x55	; 85
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	8d 7f       	andi	r24, 0xFD	; 253
     ef6:	8c 93       	st	X, r24
     ef8:	87 c0       	rjmp	.+270    	; 0x1008 <EX_vdConfigInterrupt+0x226>
						break;
				}
				break;
			case EX_INT1:
				Set_Bit(GICR,7);
     efa:	ab e5       	ldi	r26, 0x5B	; 91
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	eb e5       	ldi	r30, 0x5B	; 91
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	80 68       	ori	r24, 0x80	; 128
     f06:	8c 93       	st	X, r24
				switch (CopyControlSense)
     f08:	8a 81       	ldd	r24, Y+2	; 0x02
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	3e 83       	std	Y+6, r19	; 0x06
     f10:	2d 83       	std	Y+5, r18	; 0x05
     f12:	8d 81       	ldd	r24, Y+5	; 0x05
     f14:	9e 81       	ldd	r25, Y+6	; 0x06
     f16:	81 30       	cpi	r24, 0x01	; 1
     f18:	91 05       	cpc	r25, r1
     f1a:	21 f1       	breq	.+72     	; 0xf64 <EX_vdConfigInterrupt+0x182>
     f1c:	2d 81       	ldd	r18, Y+5	; 0x05
     f1e:	3e 81       	ldd	r19, Y+6	; 0x06
     f20:	22 30       	cpi	r18, 0x02	; 2
     f22:	31 05       	cpc	r19, r1
     f24:	2c f4       	brge	.+10     	; 0xf30 <EX_vdConfigInterrupt+0x14e>
     f26:	8d 81       	ldd	r24, Y+5	; 0x05
     f28:	9e 81       	ldd	r25, Y+6	; 0x06
     f2a:	00 97       	sbiw	r24, 0x00	; 0
     f2c:	61 f0       	breq	.+24     	; 0xf46 <EX_vdConfigInterrupt+0x164>
     f2e:	6c c0       	rjmp	.+216    	; 0x1008 <EX_vdConfigInterrupt+0x226>
     f30:	2d 81       	ldd	r18, Y+5	; 0x05
     f32:	3e 81       	ldd	r19, Y+6	; 0x06
     f34:	22 30       	cpi	r18, 0x02	; 2
     f36:	31 05       	cpc	r19, r1
     f38:	21 f1       	breq	.+72     	; 0xf82 <EX_vdConfigInterrupt+0x1a0>
     f3a:	8d 81       	ldd	r24, Y+5	; 0x05
     f3c:	9e 81       	ldd	r25, Y+6	; 0x06
     f3e:	83 30       	cpi	r24, 0x03	; 3
     f40:	91 05       	cpc	r25, r1
     f42:	71 f1       	breq	.+92     	; 0xfa0 <EX_vdConfigInterrupt+0x1be>
     f44:	61 c0       	rjmp	.+194    	; 0x1008 <EX_vdConfigInterrupt+0x226>
				{
					case EX_SENSE_FALLING_EDGE:
						Clr_Bit(MCUCR,2);
     f46:	a5 e5       	ldi	r26, 0x55	; 85
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e5 e5       	ldi	r30, 0x55	; 85
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	8b 7f       	andi	r24, 0xFB	; 251
     f52:	8c 93       	st	X, r24
						Set_Bit(MCUCR,3);
     f54:	a5 e5       	ldi	r26, 0x55	; 85
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e5 e5       	ldi	r30, 0x55	; 85
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	88 60       	ori	r24, 0x08	; 8
     f60:	8c 93       	st	X, r24
     f62:	52 c0       	rjmp	.+164    	; 0x1008 <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_RAISING_EDGE:
						Set_Bit(MCUCR,2);
     f64:	a5 e5       	ldi	r26, 0x55	; 85
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e5 e5       	ldi	r30, 0x55	; 85
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	84 60       	ori	r24, 0x04	; 4
     f70:	8c 93       	st	X, r24
						Set_Bit(MCUCR,3);
     f72:	a5 e5       	ldi	r26, 0x55	; 85
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e5 e5       	ldi	r30, 0x55	; 85
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	88 60       	ori	r24, 0x08	; 8
     f7e:	8c 93       	st	X, r24
     f80:	43 c0       	rjmp	.+134    	; 0x1008 <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_LOW_LEVEL:
						Clr_Bit(MCUCR,2);
     f82:	a5 e5       	ldi	r26, 0x55	; 85
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	e5 e5       	ldi	r30, 0x55	; 85
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	8b 7f       	andi	r24, 0xFB	; 251
     f8e:	8c 93       	st	X, r24
						Clr_Bit(MCUCR,3);
     f90:	a5 e5       	ldi	r26, 0x55	; 85
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	e5 e5       	ldi	r30, 0x55	; 85
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	87 7f       	andi	r24, 0xF7	; 247
     f9c:	8c 93       	st	X, r24
     f9e:	34 c0       	rjmp	.+104    	; 0x1008 <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_LOGIACL_CHANGE:
						Set_Bit(MCUCR,2);
     fa0:	a5 e5       	ldi	r26, 0x55	; 85
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e5 e5       	ldi	r30, 0x55	; 85
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	84 60       	ori	r24, 0x04	; 4
     fac:	8c 93       	st	X, r24
						Clr_Bit(MCUCR,3);
     fae:	a5 e5       	ldi	r26, 0x55	; 85
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	e5 e5       	ldi	r30, 0x55	; 85
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	87 7f       	andi	r24, 0xF7	; 247
     fba:	8c 93       	st	X, r24
     fbc:	25 c0       	rjmp	.+74     	; 0x1008 <EX_vdConfigInterrupt+0x226>
						break;
				}
				break;
			case EX_INT2:
				Set_Bit(GICR,5);
     fbe:	ab e5       	ldi	r26, 0x5B	; 91
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	eb e5       	ldi	r30, 0x5B	; 91
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	80 62       	ori	r24, 0x20	; 32
     fca:	8c 93       	st	X, r24
				switch (CopyControlSense)
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	3c 83       	std	Y+4, r19	; 0x04
     fd4:	2b 83       	std	Y+3, r18	; 0x03
     fd6:	8b 81       	ldd	r24, Y+3	; 0x03
     fd8:	9c 81       	ldd	r25, Y+4	; 0x04
     fda:	00 97       	sbiw	r24, 0x00	; 0
     fdc:	31 f0       	breq	.+12     	; 0xfea <EX_vdConfigInterrupt+0x208>
     fde:	2b 81       	ldd	r18, Y+3	; 0x03
     fe0:	3c 81       	ldd	r19, Y+4	; 0x04
     fe2:	21 30       	cpi	r18, 0x01	; 1
     fe4:	31 05       	cpc	r19, r1
     fe6:	49 f0       	breq	.+18     	; 0xffa <EX_vdConfigInterrupt+0x218>
     fe8:	0f c0       	rjmp	.+30     	; 0x1008 <EX_vdConfigInterrupt+0x226>
				{
					case EX_SENSE_FALLING_EDGE:
						Clr_Bit(MCUCSR,6);
     fea:	a4 e5       	ldi	r26, 0x54	; 84
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	e4 e5       	ldi	r30, 0x54	; 84
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	8f 7b       	andi	r24, 0xBF	; 191
     ff6:	8c 93       	st	X, r24
     ff8:	07 c0       	rjmp	.+14     	; 0x1008 <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_RAISING_EDGE:
						Set_Bit(MCUCSR,6);
     ffa:	a4 e5       	ldi	r26, 0x54	; 84
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e4 e5       	ldi	r30, 0x54	; 84
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	80 64       	ori	r24, 0x40	; 64
    1006:	8c 93       	st	X, r24
						break;
				}
				break;
		}
	}
}
    1008:	2a 96       	adiw	r28, 0x0a	; 10
    100a:	0f b6       	in	r0, 0x3f	; 63
    100c:	f8 94       	cli
    100e:	de bf       	out	0x3e, r29	; 62
    1010:	0f be       	out	0x3f, r0	; 63
    1012:	cd bf       	out	0x3d, r28	; 61
    1014:	cf 91       	pop	r28
    1016:	df 91       	pop	r29
    1018:	08 95       	ret

0000101a <__vector_1>:
void __vector_1 (void)
{
    101a:	1f 92       	push	r1
    101c:	0f 92       	push	r0
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	0f 92       	push	r0
    1022:	11 24       	eor	r1, r1
    1024:	df 93       	push	r29
    1026:	cf 93       	push	r28
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62

}
    102c:	cf 91       	pop	r28
    102e:	df 91       	pop	r29
    1030:	0f 90       	pop	r0
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	0f 90       	pop	r0
    1036:	1f 90       	pop	r1
    1038:	18 95       	reti

0000103a <__vector_2>:
void __vector_2 (void)
{
    103a:	1f 92       	push	r1
    103c:	0f 92       	push	r0
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	0f 92       	push	r0
    1042:	11 24       	eor	r1, r1
    1044:	df 93       	push	r29
    1046:	cf 93       	push	r28
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62

}
    104c:	cf 91       	pop	r28
    104e:	df 91       	pop	r29
    1050:	0f 90       	pop	r0
    1052:	0f be       	out	0x3f, r0	; 63
    1054:	0f 90       	pop	r0
    1056:	1f 90       	pop	r1
    1058:	18 95       	reti

0000105a <DIO_SetPortDirection>:


/* APIs IMPLEMENTATION */

/* API to Set Port Direction */
DIO_ERROR_state_t DIO_SetPortDirection(uint8_t PortID, uint8_t PortDirection) {
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	00 d0       	rcall	.+0      	; 0x1060 <DIO_SetPortDirection+0x6>
    1060:	00 d0       	rcall	.+0      	; 0x1062 <DIO_SetPortDirection+0x8>
    1062:	0f 92       	push	r0
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
    1068:	89 83       	std	Y+1, r24	; 0x01
    106a:	6a 83       	std	Y+2, r22	; 0x02
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA )) {
    106c:	89 81       	ldd	r24, Y+1	; 0x01
    106e:	84 30       	cpi	r24, 0x04	; 4
    1070:	a0 f5       	brcc	.+104    	; 0x10da <DIO_SetPortDirection+0x80>
		switch (PortID) {
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	28 2f       	mov	r18, r24
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	3d 83       	std	Y+5, r19	; 0x05
    107a:	2c 83       	std	Y+4, r18	; 0x04
    107c:	8c 81       	ldd	r24, Y+4	; 0x04
    107e:	9d 81       	ldd	r25, Y+5	; 0x05
    1080:	81 30       	cpi	r24, 0x01	; 1
    1082:	91 05       	cpc	r25, r1
    1084:	d1 f0       	breq	.+52     	; 0x10ba <DIO_SetPortDirection+0x60>
    1086:	2c 81       	ldd	r18, Y+4	; 0x04
    1088:	3d 81       	ldd	r19, Y+5	; 0x05
    108a:	22 30       	cpi	r18, 0x02	; 2
    108c:	31 05       	cpc	r19, r1
    108e:	2c f4       	brge	.+10     	; 0x109a <DIO_SetPortDirection+0x40>
    1090:	8c 81       	ldd	r24, Y+4	; 0x04
    1092:	9d 81       	ldd	r25, Y+5	; 0x05
    1094:	00 97       	sbiw	r24, 0x00	; 0
    1096:	61 f0       	breq	.+24     	; 0x10b0 <DIO_SetPortDirection+0x56>
    1098:	1e c0       	rjmp	.+60     	; 0x10d6 <DIO_SetPortDirection+0x7c>
    109a:	2c 81       	ldd	r18, Y+4	; 0x04
    109c:	3d 81       	ldd	r19, Y+5	; 0x05
    109e:	22 30       	cpi	r18, 0x02	; 2
    10a0:	31 05       	cpc	r19, r1
    10a2:	81 f0       	breq	.+32     	; 0x10c4 <DIO_SetPortDirection+0x6a>
    10a4:	8c 81       	ldd	r24, Y+4	; 0x04
    10a6:	9d 81       	ldd	r25, Y+5	; 0x05
    10a8:	83 30       	cpi	r24, 0x03	; 3
    10aa:	91 05       	cpc	r25, r1
    10ac:	81 f0       	breq	.+32     	; 0x10ce <DIO_SetPortDirection+0x74>
    10ae:	13 c0       	rjmp	.+38     	; 0x10d6 <DIO_SetPortDirection+0x7c>
		case PORTA :
			PORTA_DIR = PortDirection;
    10b0:	ea e3       	ldi	r30, 0x3A	; 58
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	8a 81       	ldd	r24, Y+2	; 0x02
    10b6:	80 83       	st	Z, r24
    10b8:	0e c0       	rjmp	.+28     	; 0x10d6 <DIO_SetPortDirection+0x7c>
			break;
		case PORTB :
			PORTB_DIR = PortDirection;
    10ba:	e7 e3       	ldi	r30, 0x37	; 55
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	80 83       	st	Z, r24
    10c2:	09 c0       	rjmp	.+18     	; 0x10d6 <DIO_SetPortDirection+0x7c>
			break;
		case PORTC :
			PORTC_DIR = PortDirection;
    10c4:	e4 e3       	ldi	r30, 0x34	; 52
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	80 83       	st	Z, r24
    10cc:	04 c0       	rjmp	.+8      	; 0x10d6 <DIO_SetPortDirection+0x7c>
			break;
		case PORTD :
			PORTD_DIR = PortDirection;
    10ce:	e1 e3       	ldi	r30, 0x31	; 49
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	80 83       	st	Z, r24
			break;
		} //END of SWITCH
		return E_DIO_SUCCESS ;
    10d6:	1b 82       	std	Y+3, r1	; 0x03
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <DIO_SetPortDirection+0x84>
	}	  //END of IF
	else {
		return E_DIO_INVALID_PORT_NUMBER ;
    10da:	91 e0       	ldi	r25, 0x01	; 1
    10dc:	9b 83       	std	Y+3, r25	; 0x03
    10de:	8b 81       	ldd	r24, Y+3	; 0x03

	}	  //END of ELSE
}	  //END DIO_setPortDirection
    10e0:	0f 90       	pop	r0
    10e2:	0f 90       	pop	r0
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	cf 91       	pop	r28
    10ec:	df 91       	pop	r29
    10ee:	08 95       	ret

000010f0 <DIO_SetPinDirection>:

/* API to Set Pin Direction */
DIO_ERROR_state_t DIO_SetPinDirection(uint8_t PortID, uint8_t PinNumber,
		uint8_t PinDirection) {
    10f0:	df 93       	push	r29
    10f2:	cf 93       	push	r28
    10f4:	cd b7       	in	r28, 0x3d	; 61
    10f6:	de b7       	in	r29, 0x3e	; 62
    10f8:	28 97       	sbiw	r28, 0x08	; 8
    10fa:	0f b6       	in	r0, 0x3f	; 63
    10fc:	f8 94       	cli
    10fe:	de bf       	out	0x3e, r29	; 62
    1100:	0f be       	out	0x3f, r0	; 63
    1102:	cd bf       	out	0x3d, r28	; 61
    1104:	89 83       	std	Y+1, r24	; 0x01
    1106:	6a 83       	std	Y+2, r22	; 0x02
    1108:	4b 83       	std	Y+3, r20	; 0x03
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA ) && (PinNumber >= PIN0 )
    110a:	89 81       	ldd	r24, Y+1	; 0x01
    110c:	84 30       	cpi	r24, 0x04	; 4
    110e:	08 f0       	brcs	.+2      	; 0x1112 <DIO_SetPinDirection+0x22>
    1110:	f4 c0       	rjmp	.+488    	; 0x12fa <DIO_SetPinDirection+0x20a>
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	88 30       	cpi	r24, 0x08	; 8
    1116:	08 f0       	brcs	.+2      	; 0x111a <DIO_SetPinDirection+0x2a>
    1118:	f0 c0       	rjmp	.+480    	; 0x12fa <DIO_SetPinDirection+0x20a>
			&& (PinNumber <= PIN7 )) {
		if (PinDirection == PIN_OUTPUT) {
    111a:	8b 81       	ldd	r24, Y+3	; 0x03
    111c:	81 30       	cpi	r24, 0x01	; 1
    111e:	09 f0       	breq	.+2      	; 0x1122 <DIO_SetPinDirection+0x32>
    1120:	70 c0       	rjmp	.+224    	; 0x1202 <DIO_SetPinDirection+0x112>
			switch (PortID) {
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	38 87       	std	Y+8, r19	; 0x08
    112a:	2f 83       	std	Y+7, r18	; 0x07
    112c:	8f 81       	ldd	r24, Y+7	; 0x07
    112e:	98 85       	ldd	r25, Y+8	; 0x08
    1130:	81 30       	cpi	r24, 0x01	; 1
    1132:	91 05       	cpc	r25, r1
    1134:	49 f1       	breq	.+82     	; 0x1188 <DIO_SetPinDirection+0x98>
    1136:	2f 81       	ldd	r18, Y+7	; 0x07
    1138:	38 85       	ldd	r19, Y+8	; 0x08
    113a:	22 30       	cpi	r18, 0x02	; 2
    113c:	31 05       	cpc	r19, r1
    113e:	2c f4       	brge	.+10     	; 0x114a <DIO_SetPinDirection+0x5a>
    1140:	8f 81       	ldd	r24, Y+7	; 0x07
    1142:	98 85       	ldd	r25, Y+8	; 0x08
    1144:	00 97       	sbiw	r24, 0x00	; 0
    1146:	61 f0       	breq	.+24     	; 0x1160 <DIO_SetPinDirection+0x70>
    1148:	5a c0       	rjmp	.+180    	; 0x11fe <DIO_SetPinDirection+0x10e>
    114a:	2f 81       	ldd	r18, Y+7	; 0x07
    114c:	38 85       	ldd	r19, Y+8	; 0x08
    114e:	22 30       	cpi	r18, 0x02	; 2
    1150:	31 05       	cpc	r19, r1
    1152:	71 f1       	breq	.+92     	; 0x11b0 <DIO_SetPinDirection+0xc0>
    1154:	8f 81       	ldd	r24, Y+7	; 0x07
    1156:	98 85       	ldd	r25, Y+8	; 0x08
    1158:	83 30       	cpi	r24, 0x03	; 3
    115a:	91 05       	cpc	r25, r1
    115c:	e9 f1       	breq	.+122    	; 0x11d8 <DIO_SetPinDirection+0xe8>
    115e:	4f c0       	rjmp	.+158    	; 0x11fe <DIO_SetPinDirection+0x10e>
			case PORTA :
				Set_Bit(PORTA_DIR, PinNumber);
    1160:	aa e3       	ldi	r26, 0x3A	; 58
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	ea e3       	ldi	r30, 0x3A	; 58
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	48 2f       	mov	r20, r24
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	02 2e       	mov	r0, r18
    1178:	02 c0       	rjmp	.+4      	; 0x117e <DIO_SetPinDirection+0x8e>
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	0a 94       	dec	r0
    1180:	e2 f7       	brpl	.-8      	; 0x117a <DIO_SetPinDirection+0x8a>
    1182:	84 2b       	or	r24, r20
    1184:	8c 93       	st	X, r24
    1186:	3b c0       	rjmp	.+118    	; 0x11fe <DIO_SetPinDirection+0x10e>
				break;
			case PORTB :
				Set_Bit(PORTB_DIR, PinNumber);
    1188:	a7 e3       	ldi	r26, 0x37	; 55
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e7 e3       	ldi	r30, 0x37	; 55
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	48 2f       	mov	r20, r24
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	02 2e       	mov	r0, r18
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <DIO_SetPinDirection+0xb6>
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	0a 94       	dec	r0
    11a8:	e2 f7       	brpl	.-8      	; 0x11a2 <DIO_SetPinDirection+0xb2>
    11aa:	84 2b       	or	r24, r20
    11ac:	8c 93       	st	X, r24
    11ae:	27 c0       	rjmp	.+78     	; 0x11fe <DIO_SetPinDirection+0x10e>
				break;
			case PORTC :
				Set_Bit(PORTC_DIR, PinNumber);
    11b0:	a4 e3       	ldi	r26, 0x34	; 52
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	e4 e3       	ldi	r30, 0x34	; 52
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	48 2f       	mov	r20, r24
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	02 2e       	mov	r0, r18
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <DIO_SetPinDirection+0xde>
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	0a 94       	dec	r0
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <DIO_SetPinDirection+0xda>
    11d2:	84 2b       	or	r24, r20
    11d4:	8c 93       	st	X, r24
    11d6:	13 c0       	rjmp	.+38     	; 0x11fe <DIO_SetPinDirection+0x10e>
				break;
			case PORTD :
				Set_Bit(PORTD_DIR, PinNumber);
    11d8:	a1 e3       	ldi	r26, 0x31	; 49
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	e1 e3       	ldi	r30, 0x31	; 49
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	48 2f       	mov	r20, r24
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	02 2e       	mov	r0, r18
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <DIO_SetPinDirection+0x106>
    11f2:	88 0f       	add	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	0a 94       	dec	r0
    11f8:	e2 f7       	brpl	.-8      	; 0x11f2 <DIO_SetPinDirection+0x102>
    11fa:	84 2b       	or	r24, r20
    11fc:	8c 93       	st	X, r24
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
    11fe:	1e 82       	std	Y+6, r1	; 0x06
    1200:	7e c0       	rjmp	.+252    	; 0x12fe <DIO_SetPinDirection+0x20e>
		} // END of IF that check for the direction if it is INPUT
		else if (PinDirection == PIN_INPUT) {
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	88 23       	and	r24, r24
    1206:	09 f0       	breq	.+2      	; 0x120a <DIO_SetPinDirection+0x11a>
    1208:	75 c0       	rjmp	.+234    	; 0x12f4 <DIO_SetPinDirection+0x204>
			switch (PortID) {
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	3d 83       	std	Y+5, r19	; 0x05
    1212:	2c 83       	std	Y+4, r18	; 0x04
    1214:	8c 81       	ldd	r24, Y+4	; 0x04
    1216:	9d 81       	ldd	r25, Y+5	; 0x05
    1218:	81 30       	cpi	r24, 0x01	; 1
    121a:	91 05       	cpc	r25, r1
    121c:	59 f1       	breq	.+86     	; 0x1274 <DIO_SetPinDirection+0x184>
    121e:	2c 81       	ldd	r18, Y+4	; 0x04
    1220:	3d 81       	ldd	r19, Y+5	; 0x05
    1222:	22 30       	cpi	r18, 0x02	; 2
    1224:	31 05       	cpc	r19, r1
    1226:	2c f4       	brge	.+10     	; 0x1232 <DIO_SetPinDirection+0x142>
    1228:	8c 81       	ldd	r24, Y+4	; 0x04
    122a:	9d 81       	ldd	r25, Y+5	; 0x05
    122c:	00 97       	sbiw	r24, 0x00	; 0
    122e:	69 f0       	breq	.+26     	; 0x124a <DIO_SetPinDirection+0x15a>
    1230:	5f c0       	rjmp	.+190    	; 0x12f0 <DIO_SetPinDirection+0x200>
    1232:	2c 81       	ldd	r18, Y+4	; 0x04
    1234:	3d 81       	ldd	r19, Y+5	; 0x05
    1236:	22 30       	cpi	r18, 0x02	; 2
    1238:	31 05       	cpc	r19, r1
    123a:	89 f1       	breq	.+98     	; 0x129e <DIO_SetPinDirection+0x1ae>
    123c:	8c 81       	ldd	r24, Y+4	; 0x04
    123e:	9d 81       	ldd	r25, Y+5	; 0x05
    1240:	83 30       	cpi	r24, 0x03	; 3
    1242:	91 05       	cpc	r25, r1
    1244:	09 f4       	brne	.+2      	; 0x1248 <DIO_SetPinDirection+0x158>
    1246:	40 c0       	rjmp	.+128    	; 0x12c8 <DIO_SetPinDirection+0x1d8>
    1248:	53 c0       	rjmp	.+166    	; 0x12f0 <DIO_SetPinDirection+0x200>
			case PORTA :
				Clr_Bit(PORTA_DIR, PinNumber);
    124a:	aa e3       	ldi	r26, 0x3A	; 58
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	ea e3       	ldi	r30, 0x3A	; 58
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	48 2f       	mov	r20, r24
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	02 2e       	mov	r0, r18
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <DIO_SetPinDirection+0x178>
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	0a 94       	dec	r0
    126a:	e2 f7       	brpl	.-8      	; 0x1264 <DIO_SetPinDirection+0x174>
    126c:	80 95       	com	r24
    126e:	84 23       	and	r24, r20
    1270:	8c 93       	st	X, r24
    1272:	3e c0       	rjmp	.+124    	; 0x12f0 <DIO_SetPinDirection+0x200>
				break;
			case PORTB :
				Clr_Bit(PORTB_DIR, PinNumber);
    1274:	a7 e3       	ldi	r26, 0x37	; 55
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	e7 e3       	ldi	r30, 0x37	; 55
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	48 2f       	mov	r20, r24
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	28 2f       	mov	r18, r24
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	02 2e       	mov	r0, r18
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <DIO_SetPinDirection+0x1a2>
    128e:	88 0f       	add	r24, r24
    1290:	99 1f       	adc	r25, r25
    1292:	0a 94       	dec	r0
    1294:	e2 f7       	brpl	.-8      	; 0x128e <DIO_SetPinDirection+0x19e>
    1296:	80 95       	com	r24
    1298:	84 23       	and	r24, r20
    129a:	8c 93       	st	X, r24
    129c:	29 c0       	rjmp	.+82     	; 0x12f0 <DIO_SetPinDirection+0x200>
				break;
			case PORTC :
				Clr_Bit(PORTC_DIR, PinNumber);
    129e:	a4 e3       	ldi	r26, 0x34	; 52
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	e4 e3       	ldi	r30, 0x34	; 52
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	48 2f       	mov	r20, r24
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	02 2e       	mov	r0, r18
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <DIO_SetPinDirection+0x1cc>
    12b8:	88 0f       	add	r24, r24
    12ba:	99 1f       	adc	r25, r25
    12bc:	0a 94       	dec	r0
    12be:	e2 f7       	brpl	.-8      	; 0x12b8 <DIO_SetPinDirection+0x1c8>
    12c0:	80 95       	com	r24
    12c2:	84 23       	and	r24, r20
    12c4:	8c 93       	st	X, r24
    12c6:	14 c0       	rjmp	.+40     	; 0x12f0 <DIO_SetPinDirection+0x200>
				break;
			case PORTD :
				Clr_Bit(PORTD_DIR, PinNumber);
    12c8:	a1 e3       	ldi	r26, 0x31	; 49
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	e1 e3       	ldi	r30, 0x31	; 49
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	48 2f       	mov	r20, r24
    12d4:	8a 81       	ldd	r24, Y+2	; 0x02
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	02 2e       	mov	r0, r18
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <DIO_SetPinDirection+0x1f6>
    12e2:	88 0f       	add	r24, r24
    12e4:	99 1f       	adc	r25, r25
    12e6:	0a 94       	dec	r0
    12e8:	e2 f7       	brpl	.-8      	; 0x12e2 <DIO_SetPinDirection+0x1f2>
    12ea:	80 95       	com	r24
    12ec:	84 23       	and	r24, r20
    12ee:	8c 93       	st	X, r24
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
    12f0:	1e 82       	std	Y+6, r1	; 0x06
    12f2:	05 c0       	rjmp	.+10     	; 0x12fe <DIO_SetPinDirection+0x20e>
		} // END of ELSE IF that check for the direction if it is INPUT
		else {
			return E_DIO_INVALID_PIN_DIRECTION ;
    12f4:	92 e0       	ldi	r25, 0x02	; 2
    12f6:	9e 83       	std	Y+6, r25	; 0x06
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <DIO_SetPinDirection+0x20e>
		} //END OF ELSE

	}	  //END of IF That checking the port and pin number

	else {
		return E_DIO_INVALID_PORT_NUMBER ;
    12fa:	21 e0       	ldi	r18, 0x01	; 1
    12fc:	2e 83       	std	Y+6, r18	; 0x06
    12fe:	8e 81       	ldd	r24, Y+6	; 0x06

	}	  //END of ELSE
}	  //END DIO_setPinDirection
    1300:	28 96       	adiw	r28, 0x08	; 8
    1302:	0f b6       	in	r0, 0x3f	; 63
    1304:	f8 94       	cli
    1306:	de bf       	out	0x3e, r29	; 62
    1308:	0f be       	out	0x3f, r0	; 63
    130a:	cd bf       	out	0x3d, r28	; 61
    130c:	cf 91       	pop	r28
    130e:	df 91       	pop	r29
    1310:	08 95       	ret

00001312 <DIO_writePort>:

/* API to Write Port  Value */
DIO_ERROR_state_t DIO_writePort(uint8_t PortID, uint8_t PortValue) {
    1312:	df 93       	push	r29
    1314:	cf 93       	push	r28
    1316:	00 d0       	rcall	.+0      	; 0x1318 <DIO_writePort+0x6>
    1318:	00 d0       	rcall	.+0      	; 0x131a <DIO_writePort+0x8>
    131a:	0f 92       	push	r0
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
    1320:	89 83       	std	Y+1, r24	; 0x01
    1322:	6a 83       	std	Y+2, r22	; 0x02
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA )) {
    1324:	89 81       	ldd	r24, Y+1	; 0x01
    1326:	84 30       	cpi	r24, 0x04	; 4
    1328:	a0 f5       	brcc	.+104    	; 0x1392 <DIO_writePort+0x80>
		switch (PortID) {
    132a:	89 81       	ldd	r24, Y+1	; 0x01
    132c:	28 2f       	mov	r18, r24
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	3d 83       	std	Y+5, r19	; 0x05
    1332:	2c 83       	std	Y+4, r18	; 0x04
    1334:	8c 81       	ldd	r24, Y+4	; 0x04
    1336:	9d 81       	ldd	r25, Y+5	; 0x05
    1338:	81 30       	cpi	r24, 0x01	; 1
    133a:	91 05       	cpc	r25, r1
    133c:	d1 f0       	breq	.+52     	; 0x1372 <DIO_writePort+0x60>
    133e:	2c 81       	ldd	r18, Y+4	; 0x04
    1340:	3d 81       	ldd	r19, Y+5	; 0x05
    1342:	22 30       	cpi	r18, 0x02	; 2
    1344:	31 05       	cpc	r19, r1
    1346:	2c f4       	brge	.+10     	; 0x1352 <DIO_writePort+0x40>
    1348:	8c 81       	ldd	r24, Y+4	; 0x04
    134a:	9d 81       	ldd	r25, Y+5	; 0x05
    134c:	00 97       	sbiw	r24, 0x00	; 0
    134e:	61 f0       	breq	.+24     	; 0x1368 <DIO_writePort+0x56>
    1350:	1e c0       	rjmp	.+60     	; 0x138e <DIO_writePort+0x7c>
    1352:	2c 81       	ldd	r18, Y+4	; 0x04
    1354:	3d 81       	ldd	r19, Y+5	; 0x05
    1356:	22 30       	cpi	r18, 0x02	; 2
    1358:	31 05       	cpc	r19, r1
    135a:	81 f0       	breq	.+32     	; 0x137c <DIO_writePort+0x6a>
    135c:	8c 81       	ldd	r24, Y+4	; 0x04
    135e:	9d 81       	ldd	r25, Y+5	; 0x05
    1360:	83 30       	cpi	r24, 0x03	; 3
    1362:	91 05       	cpc	r25, r1
    1364:	81 f0       	breq	.+32     	; 0x1386 <DIO_writePort+0x74>
    1366:	13 c0       	rjmp	.+38     	; 0x138e <DIO_writePort+0x7c>
		case PORTA :
			PORTA_DATA = PortValue;
    1368:	eb e3       	ldi	r30, 0x3B	; 59
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	8a 81       	ldd	r24, Y+2	; 0x02
    136e:	80 83       	st	Z, r24
    1370:	0e c0       	rjmp	.+28     	; 0x138e <DIO_writePort+0x7c>
			break;
		case PORTB :
			PORTB_DATA = PortValue;
    1372:	e8 e3       	ldi	r30, 0x38	; 56
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	8a 81       	ldd	r24, Y+2	; 0x02
    1378:	80 83       	st	Z, r24
    137a:	09 c0       	rjmp	.+18     	; 0x138e <DIO_writePort+0x7c>
			break;
		case PORTC :
			PORTC_DATA = PortValue;
    137c:	e5 e3       	ldi	r30, 0x35	; 53
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	80 83       	st	Z, r24
    1384:	04 c0       	rjmp	.+8      	; 0x138e <DIO_writePort+0x7c>
			break;
		case PORTD :
			PORTD_DATA = PortValue;
    1386:	e2 e3       	ldi	r30, 0x32	; 50
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	80 83       	st	Z, r24
			break;

		} //END of SWITCH
		return E_DIO_SUCCESS ;
    138e:	1b 82       	std	Y+3, r1	; 0x03
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <DIO_writePort+0x84>
	}	  //END of IF
	else {
		return E_DIO_INVALID_PORT_NUMBER ;
    1392:	91 e0       	ldi	r25, 0x01	; 1
    1394:	9b 83       	std	Y+3, r25	; 0x03
    1396:	8b 81       	ldd	r24, Y+3	; 0x03

	}	  //END of ELSE
}	  //END DIO_writePortValue
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	cf 91       	pop	r28
    13a4:	df 91       	pop	r29
    13a6:	08 95       	ret

000013a8 <DIO_WritePin>:

/* API to Write Pin  Value */
DIO_ERROR_state_t DIO_WritePin(uint8_t PortID, uint8_t PinNumber,
		uint8_t PinDirection) {
    13a8:	df 93       	push	r29
    13aa:	cf 93       	push	r28
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
    13b0:	28 97       	sbiw	r28, 0x08	; 8
    13b2:	0f b6       	in	r0, 0x3f	; 63
    13b4:	f8 94       	cli
    13b6:	de bf       	out	0x3e, r29	; 62
    13b8:	0f be       	out	0x3f, r0	; 63
    13ba:	cd bf       	out	0x3d, r28	; 61
    13bc:	89 83       	std	Y+1, r24	; 0x01
    13be:	6a 83       	std	Y+2, r22	; 0x02
    13c0:	4b 83       	std	Y+3, r20	; 0x03
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA ) && (PinNumber >= PIN0 )
    13c2:	89 81       	ldd	r24, Y+1	; 0x01
    13c4:	84 30       	cpi	r24, 0x04	; 4
    13c6:	08 f0       	brcs	.+2      	; 0x13ca <DIO_WritePin+0x22>
    13c8:	f4 c0       	rjmp	.+488    	; 0x15b2 <DIO_WritePin+0x20a>
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	88 30       	cpi	r24, 0x08	; 8
    13ce:	08 f0       	brcs	.+2      	; 0x13d2 <DIO_WritePin+0x2a>
    13d0:	f0 c0       	rjmp	.+480    	; 0x15b2 <DIO_WritePin+0x20a>
			&& (PinNumber <= PIN7 )) {
		if (PinDirection == PIN_HIGH) {
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	81 30       	cpi	r24, 0x01	; 1
    13d6:	09 f0       	breq	.+2      	; 0x13da <DIO_WritePin+0x32>
    13d8:	70 c0       	rjmp	.+224    	; 0x14ba <DIO_WritePin+0x112>
			switch (PortID) {
    13da:	89 81       	ldd	r24, Y+1	; 0x01
    13dc:	28 2f       	mov	r18, r24
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	38 87       	std	Y+8, r19	; 0x08
    13e2:	2f 83       	std	Y+7, r18	; 0x07
    13e4:	8f 81       	ldd	r24, Y+7	; 0x07
    13e6:	98 85       	ldd	r25, Y+8	; 0x08
    13e8:	81 30       	cpi	r24, 0x01	; 1
    13ea:	91 05       	cpc	r25, r1
    13ec:	49 f1       	breq	.+82     	; 0x1440 <DIO_WritePin+0x98>
    13ee:	2f 81       	ldd	r18, Y+7	; 0x07
    13f0:	38 85       	ldd	r19, Y+8	; 0x08
    13f2:	22 30       	cpi	r18, 0x02	; 2
    13f4:	31 05       	cpc	r19, r1
    13f6:	2c f4       	brge	.+10     	; 0x1402 <DIO_WritePin+0x5a>
    13f8:	8f 81       	ldd	r24, Y+7	; 0x07
    13fa:	98 85       	ldd	r25, Y+8	; 0x08
    13fc:	00 97       	sbiw	r24, 0x00	; 0
    13fe:	61 f0       	breq	.+24     	; 0x1418 <DIO_WritePin+0x70>
    1400:	5a c0       	rjmp	.+180    	; 0x14b6 <DIO_WritePin+0x10e>
    1402:	2f 81       	ldd	r18, Y+7	; 0x07
    1404:	38 85       	ldd	r19, Y+8	; 0x08
    1406:	22 30       	cpi	r18, 0x02	; 2
    1408:	31 05       	cpc	r19, r1
    140a:	71 f1       	breq	.+92     	; 0x1468 <DIO_WritePin+0xc0>
    140c:	8f 81       	ldd	r24, Y+7	; 0x07
    140e:	98 85       	ldd	r25, Y+8	; 0x08
    1410:	83 30       	cpi	r24, 0x03	; 3
    1412:	91 05       	cpc	r25, r1
    1414:	e9 f1       	breq	.+122    	; 0x1490 <DIO_WritePin+0xe8>
    1416:	4f c0       	rjmp	.+158    	; 0x14b6 <DIO_WritePin+0x10e>
			case PORTA :
				Set_Bit(PORTA_DATA, PinNumber);
    1418:	ab e3       	ldi	r26, 0x3B	; 59
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	eb e3       	ldi	r30, 0x3B	; 59
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	48 2f       	mov	r20, r24
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	02 2e       	mov	r0, r18
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <DIO_WritePin+0x8e>
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	0a 94       	dec	r0
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <DIO_WritePin+0x8a>
    143a:	84 2b       	or	r24, r20
    143c:	8c 93       	st	X, r24
    143e:	3b c0       	rjmp	.+118    	; 0x14b6 <DIO_WritePin+0x10e>
				break;
			case PORTB :
				Set_Bit(PORTB_DATA, PinNumber);
    1440:	a8 e3       	ldi	r26, 0x38	; 56
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	e8 e3       	ldi	r30, 0x38	; 56
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	48 2f       	mov	r20, r24
    144c:	8a 81       	ldd	r24, Y+2	; 0x02
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	02 2e       	mov	r0, r18
    1458:	02 c0       	rjmp	.+4      	; 0x145e <DIO_WritePin+0xb6>
    145a:	88 0f       	add	r24, r24
    145c:	99 1f       	adc	r25, r25
    145e:	0a 94       	dec	r0
    1460:	e2 f7       	brpl	.-8      	; 0x145a <DIO_WritePin+0xb2>
    1462:	84 2b       	or	r24, r20
    1464:	8c 93       	st	X, r24
    1466:	27 c0       	rjmp	.+78     	; 0x14b6 <DIO_WritePin+0x10e>
				break;
			case PORTC :
				Set_Bit(PORTC_DATA, PinNumber);
    1468:	a5 e3       	ldi	r26, 0x35	; 53
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e5 e3       	ldi	r30, 0x35	; 53
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	48 2f       	mov	r20, r24
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	02 2e       	mov	r0, r18
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <DIO_WritePin+0xde>
    1482:	88 0f       	add	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	0a 94       	dec	r0
    1488:	e2 f7       	brpl	.-8      	; 0x1482 <DIO_WritePin+0xda>
    148a:	84 2b       	or	r24, r20
    148c:	8c 93       	st	X, r24
    148e:	13 c0       	rjmp	.+38     	; 0x14b6 <DIO_WritePin+0x10e>
				break;
			case PORTD :
				Set_Bit(PORTD_DATA, PinNumber);
    1490:	a2 e3       	ldi	r26, 0x32	; 50
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	e2 e3       	ldi	r30, 0x32	; 50
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	48 2f       	mov	r20, r24
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	02 2e       	mov	r0, r18
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <DIO_WritePin+0x106>
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	0a 94       	dec	r0
    14b0:	e2 f7       	brpl	.-8      	; 0x14aa <DIO_WritePin+0x102>
    14b2:	84 2b       	or	r24, r20
    14b4:	8c 93       	st	X, r24
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
    14b6:	1e 82       	std	Y+6, r1	; 0x06
    14b8:	7e c0       	rjmp	.+252    	; 0x15b6 <DIO_WritePin+0x20e>
		} // END of IF that check for the direction if it is INPUT
		else if (PinDirection == PIN_LOW) {
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	88 23       	and	r24, r24
    14be:	09 f0       	breq	.+2      	; 0x14c2 <DIO_WritePin+0x11a>
    14c0:	75 c0       	rjmp	.+234    	; 0x15ac <DIO_WritePin+0x204>
			switch (PortID) {
    14c2:	89 81       	ldd	r24, Y+1	; 0x01
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	3d 83       	std	Y+5, r19	; 0x05
    14ca:	2c 83       	std	Y+4, r18	; 0x04
    14cc:	8c 81       	ldd	r24, Y+4	; 0x04
    14ce:	9d 81       	ldd	r25, Y+5	; 0x05
    14d0:	81 30       	cpi	r24, 0x01	; 1
    14d2:	91 05       	cpc	r25, r1
    14d4:	59 f1       	breq	.+86     	; 0x152c <DIO_WritePin+0x184>
    14d6:	2c 81       	ldd	r18, Y+4	; 0x04
    14d8:	3d 81       	ldd	r19, Y+5	; 0x05
    14da:	22 30       	cpi	r18, 0x02	; 2
    14dc:	31 05       	cpc	r19, r1
    14de:	2c f4       	brge	.+10     	; 0x14ea <DIO_WritePin+0x142>
    14e0:	8c 81       	ldd	r24, Y+4	; 0x04
    14e2:	9d 81       	ldd	r25, Y+5	; 0x05
    14e4:	00 97       	sbiw	r24, 0x00	; 0
    14e6:	69 f0       	breq	.+26     	; 0x1502 <DIO_WritePin+0x15a>
    14e8:	5f c0       	rjmp	.+190    	; 0x15a8 <DIO_WritePin+0x200>
    14ea:	2c 81       	ldd	r18, Y+4	; 0x04
    14ec:	3d 81       	ldd	r19, Y+5	; 0x05
    14ee:	22 30       	cpi	r18, 0x02	; 2
    14f0:	31 05       	cpc	r19, r1
    14f2:	89 f1       	breq	.+98     	; 0x1556 <DIO_WritePin+0x1ae>
    14f4:	8c 81       	ldd	r24, Y+4	; 0x04
    14f6:	9d 81       	ldd	r25, Y+5	; 0x05
    14f8:	83 30       	cpi	r24, 0x03	; 3
    14fa:	91 05       	cpc	r25, r1
    14fc:	09 f4       	brne	.+2      	; 0x1500 <DIO_WritePin+0x158>
    14fe:	40 c0       	rjmp	.+128    	; 0x1580 <DIO_WritePin+0x1d8>
    1500:	53 c0       	rjmp	.+166    	; 0x15a8 <DIO_WritePin+0x200>
			case PORTA :
				Clr_Bit(PORTA_DATA, PinNumber);
    1502:	ab e3       	ldi	r26, 0x3B	; 59
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	eb e3       	ldi	r30, 0x3B	; 59
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	48 2f       	mov	r20, r24
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	02 2e       	mov	r0, r18
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <DIO_WritePin+0x178>
    151c:	88 0f       	add	r24, r24
    151e:	99 1f       	adc	r25, r25
    1520:	0a 94       	dec	r0
    1522:	e2 f7       	brpl	.-8      	; 0x151c <DIO_WritePin+0x174>
    1524:	80 95       	com	r24
    1526:	84 23       	and	r24, r20
    1528:	8c 93       	st	X, r24
    152a:	3e c0       	rjmp	.+124    	; 0x15a8 <DIO_WritePin+0x200>
				break;
			case PORTB :
				Clr_Bit(PORTB_DATA, PinNumber);
    152c:	a8 e3       	ldi	r26, 0x38	; 56
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	e8 e3       	ldi	r30, 0x38	; 56
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	48 2f       	mov	r20, r24
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	28 2f       	mov	r18, r24
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	02 2e       	mov	r0, r18
    1544:	02 c0       	rjmp	.+4      	; 0x154a <DIO_WritePin+0x1a2>
    1546:	88 0f       	add	r24, r24
    1548:	99 1f       	adc	r25, r25
    154a:	0a 94       	dec	r0
    154c:	e2 f7       	brpl	.-8      	; 0x1546 <DIO_WritePin+0x19e>
    154e:	80 95       	com	r24
    1550:	84 23       	and	r24, r20
    1552:	8c 93       	st	X, r24
    1554:	29 c0       	rjmp	.+82     	; 0x15a8 <DIO_WritePin+0x200>
				break;
			case PORTC :
				Clr_Bit(PORTC_DATA, PinNumber);
    1556:	a5 e3       	ldi	r26, 0x35	; 53
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	e5 e3       	ldi	r30, 0x35	; 53
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	48 2f       	mov	r20, r24
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
    1564:	28 2f       	mov	r18, r24
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	02 2e       	mov	r0, r18
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <DIO_WritePin+0x1cc>
    1570:	88 0f       	add	r24, r24
    1572:	99 1f       	adc	r25, r25
    1574:	0a 94       	dec	r0
    1576:	e2 f7       	brpl	.-8      	; 0x1570 <DIO_WritePin+0x1c8>
    1578:	80 95       	com	r24
    157a:	84 23       	and	r24, r20
    157c:	8c 93       	st	X, r24
    157e:	14 c0       	rjmp	.+40     	; 0x15a8 <DIO_WritePin+0x200>
				break;
			case PORTD :
				Clr_Bit(PORTD_DATA, PinNumber);
    1580:	a2 e3       	ldi	r26, 0x32	; 50
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	e2 e3       	ldi	r30, 0x32	; 50
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	48 2f       	mov	r20, r24
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	28 2f       	mov	r18, r24
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	02 2e       	mov	r0, r18
    1598:	02 c0       	rjmp	.+4      	; 0x159e <DIO_WritePin+0x1f6>
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	0a 94       	dec	r0
    15a0:	e2 f7       	brpl	.-8      	; 0x159a <DIO_WritePin+0x1f2>
    15a2:	80 95       	com	r24
    15a4:	84 23       	and	r24, r20
    15a6:	8c 93       	st	X, r24
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
    15a8:	1e 82       	std	Y+6, r1	; 0x06
    15aa:	05 c0       	rjmp	.+10     	; 0x15b6 <DIO_WritePin+0x20e>
		} // END of ELSE IF that check for the direction if it is INPUT
		else {
			return E_DIO_INVALID_PIN_DIRECTION ;
    15ac:	92 e0       	ldi	r25, 0x02	; 2
    15ae:	9e 83       	std	Y+6, r25	; 0x06
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <DIO_WritePin+0x20e>
		} //END OF ELSE

	}	  //END of IF That checking the port and pin number

	else {
		return E_DIO_INVALID_PORT_NUMBER ;
    15b2:	21 e0       	ldi	r18, 0x01	; 1
    15b4:	2e 83       	std	Y+6, r18	; 0x06
    15b6:	8e 81       	ldd	r24, Y+6	; 0x06

	}	  //END of ELSE
}	  //END of DIO_writePinValue
    15b8:	28 96       	adiw	r28, 0x08	; 8
    15ba:	0f b6       	in	r0, 0x3f	; 63
    15bc:	f8 94       	cli
    15be:	de bf       	out	0x3e, r29	; 62
    15c0:	0f be       	out	0x3f, r0	; 63
    15c2:	cd bf       	out	0x3d, r28	; 61
    15c4:	cf 91       	pop	r28
    15c6:	df 91       	pop	r29
    15c8:	08 95       	ret

000015ca <DIO_ReadPort>:

/* API to Read Port  Value */
DIO_ERROR_state_t DIO_ReadPort(uint8_t PortID, uint8_t* PortState) {
    15ca:	df 93       	push	r29
    15cc:	cf 93       	push	r28
    15ce:	00 d0       	rcall	.+0      	; 0x15d0 <DIO_ReadPort+0x6>
    15d0:	00 d0       	rcall	.+0      	; 0x15d2 <DIO_ReadPort+0x8>
    15d2:	00 d0       	rcall	.+0      	; 0x15d4 <DIO_ReadPort+0xa>
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
    15d8:	89 83       	std	Y+1, r24	; 0x01
    15da:	7b 83       	std	Y+3, r23	; 0x03
    15dc:	6a 83       	std	Y+2, r22	; 0x02
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA )) {
    15de:	89 81       	ldd	r24, Y+1	; 0x01
    15e0:	84 30       	cpi	r24, 0x04	; 4
    15e2:	e0 f5       	brcc	.+120    	; 0x165c <DIO_ReadPort+0x92>
		switch (PortID) {
    15e4:	89 81       	ldd	r24, Y+1	; 0x01
    15e6:	28 2f       	mov	r18, r24
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	3e 83       	std	Y+6, r19	; 0x06
    15ec:	2d 83       	std	Y+5, r18	; 0x05
    15ee:	8d 81       	ldd	r24, Y+5	; 0x05
    15f0:	9e 81       	ldd	r25, Y+6	; 0x06
    15f2:	81 30       	cpi	r24, 0x01	; 1
    15f4:	91 05       	cpc	r25, r1
    15f6:	e1 f0       	breq	.+56     	; 0x1630 <DIO_ReadPort+0x66>
    15f8:	2d 81       	ldd	r18, Y+5	; 0x05
    15fa:	3e 81       	ldd	r19, Y+6	; 0x06
    15fc:	22 30       	cpi	r18, 0x02	; 2
    15fe:	31 05       	cpc	r19, r1
    1600:	2c f4       	brge	.+10     	; 0x160c <DIO_ReadPort+0x42>
    1602:	8d 81       	ldd	r24, Y+5	; 0x05
    1604:	9e 81       	ldd	r25, Y+6	; 0x06
    1606:	00 97       	sbiw	r24, 0x00	; 0
    1608:	61 f0       	breq	.+24     	; 0x1622 <DIO_ReadPort+0x58>
    160a:	26 c0       	rjmp	.+76     	; 0x1658 <DIO_ReadPort+0x8e>
    160c:	2d 81       	ldd	r18, Y+5	; 0x05
    160e:	3e 81       	ldd	r19, Y+6	; 0x06
    1610:	22 30       	cpi	r18, 0x02	; 2
    1612:	31 05       	cpc	r19, r1
    1614:	a1 f0       	breq	.+40     	; 0x163e <DIO_ReadPort+0x74>
    1616:	8d 81       	ldd	r24, Y+5	; 0x05
    1618:	9e 81       	ldd	r25, Y+6	; 0x06
    161a:	83 30       	cpi	r24, 0x03	; 3
    161c:	91 05       	cpc	r25, r1
    161e:	b1 f0       	breq	.+44     	; 0x164c <DIO_ReadPort+0x82>
    1620:	1b c0       	rjmp	.+54     	; 0x1658 <DIO_ReadPort+0x8e>
		case PORTA :
			*(PortState) = PORTA_STAT;
    1622:	e9 e3       	ldi	r30, 0x39	; 57
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	ea 81       	ldd	r30, Y+2	; 0x02
    162a:	fb 81       	ldd	r31, Y+3	; 0x03
    162c:	80 83       	st	Z, r24
    162e:	14 c0       	rjmp	.+40     	; 0x1658 <DIO_ReadPort+0x8e>
			break;
		case PORTB :
			*(PortState) = PORTB_STAT;
    1630:	e6 e3       	ldi	r30, 0x36	; 54
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	ea 81       	ldd	r30, Y+2	; 0x02
    1638:	fb 81       	ldd	r31, Y+3	; 0x03
    163a:	80 83       	st	Z, r24
    163c:	0d c0       	rjmp	.+26     	; 0x1658 <DIO_ReadPort+0x8e>
			break;
		case PORTC :
			*(PortState) = PORTC_STAT;
    163e:	e3 e3       	ldi	r30, 0x33	; 51
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	ea 81       	ldd	r30, Y+2	; 0x02
    1646:	fb 81       	ldd	r31, Y+3	; 0x03
    1648:	80 83       	st	Z, r24
    164a:	06 c0       	rjmp	.+12     	; 0x1658 <DIO_ReadPort+0x8e>
			break;
		case PORTD :
			*(PortState) = PORTD_STAT;
    164c:	e0 e3       	ldi	r30, 0x30	; 48
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	ea 81       	ldd	r30, Y+2	; 0x02
    1654:	fb 81       	ldd	r31, Y+3	; 0x03
    1656:	80 83       	st	Z, r24
			break;

		} //END of SWITCH
		return E_DIO_SUCCESS ;
    1658:	1c 82       	std	Y+4, r1	; 0x04
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <DIO_ReadPort+0x96>
	}	  //END of IF
	else {
		return E_DIO_INVALID_PORT_NUMBER ;
    165c:	91 e0       	ldi	r25, 0x01	; 1
    165e:	9c 83       	std	Y+4, r25	; 0x04
    1660:	8c 81       	ldd	r24, Y+4	; 0x04

	}	  //END of ELSE
}	  //END of DIO_readPort
    1662:	26 96       	adiw	r28, 0x06	; 6
    1664:	0f b6       	in	r0, 0x3f	; 63
    1666:	f8 94       	cli
    1668:	de bf       	out	0x3e, r29	; 62
    166a:	0f be       	out	0x3f, r0	; 63
    166c:	cd bf       	out	0x3d, r28	; 61
    166e:	cf 91       	pop	r28
    1670:	df 91       	pop	r29
    1672:	08 95       	ret

00001674 <DIO_ReadPin>:

/* API to Read Pin  Value */
DIO_ERROR_state_t DIO_ReadPin(uint8_t PortID, uint8_t PinNumber,
		uint8_t* PinState) {
    1674:	df 93       	push	r29
    1676:	cf 93       	push	r28
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    167c:	27 97       	sbiw	r28, 0x07	; 7
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	f8 94       	cli
    1682:	de bf       	out	0x3e, r29	; 62
    1684:	0f be       	out	0x3f, r0	; 63
    1686:	cd bf       	out	0x3d, r28	; 61
    1688:	89 83       	std	Y+1, r24	; 0x01
    168a:	6a 83       	std	Y+2, r22	; 0x02
    168c:	5c 83       	std	Y+4, r21	; 0x04
    168e:	4b 83       	std	Y+3, r20	; 0x03
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA ) && (PinNumber >= PIN0 )
    1690:	89 81       	ldd	r24, Y+1	; 0x01
    1692:	84 30       	cpi	r24, 0x04	; 4
    1694:	08 f0       	brcs	.+2      	; 0x1698 <DIO_ReadPin+0x24>
    1696:	76 c0       	rjmp	.+236    	; 0x1784 <DIO_ReadPin+0x110>
    1698:	8a 81       	ldd	r24, Y+2	; 0x02
    169a:	88 30       	cpi	r24, 0x08	; 8
    169c:	08 f0       	brcs	.+2      	; 0x16a0 <DIO_ReadPin+0x2c>
    169e:	72 c0       	rjmp	.+228    	; 0x1784 <DIO_ReadPin+0x110>
			&& (PinNumber <= PIN7 )) {

		switch (PortID) {
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
    16a2:	28 2f       	mov	r18, r24
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	3f 83       	std	Y+7, r19	; 0x07
    16a8:	2e 83       	std	Y+6, r18	; 0x06
    16aa:	4e 81       	ldd	r20, Y+6	; 0x06
    16ac:	5f 81       	ldd	r21, Y+7	; 0x07
    16ae:	41 30       	cpi	r20, 0x01	; 1
    16b0:	51 05       	cpc	r21, r1
    16b2:	59 f1       	breq	.+86     	; 0x170a <DIO_ReadPin+0x96>
    16b4:	8e 81       	ldd	r24, Y+6	; 0x06
    16b6:	9f 81       	ldd	r25, Y+7	; 0x07
    16b8:	82 30       	cpi	r24, 0x02	; 2
    16ba:	91 05       	cpc	r25, r1
    16bc:	34 f4       	brge	.+12     	; 0x16ca <DIO_ReadPin+0x56>
    16be:	2e 81       	ldd	r18, Y+6	; 0x06
    16c0:	3f 81       	ldd	r19, Y+7	; 0x07
    16c2:	21 15       	cp	r18, r1
    16c4:	31 05       	cpc	r19, r1
    16c6:	69 f0       	breq	.+26     	; 0x16e2 <DIO_ReadPin+0x6e>
    16c8:	5b c0       	rjmp	.+182    	; 0x1780 <DIO_ReadPin+0x10c>
    16ca:	4e 81       	ldd	r20, Y+6	; 0x06
    16cc:	5f 81       	ldd	r21, Y+7	; 0x07
    16ce:	42 30       	cpi	r20, 0x02	; 2
    16d0:	51 05       	cpc	r21, r1
    16d2:	79 f1       	breq	.+94     	; 0x1732 <DIO_ReadPin+0xbe>
    16d4:	8e 81       	ldd	r24, Y+6	; 0x06
    16d6:	9f 81       	ldd	r25, Y+7	; 0x07
    16d8:	83 30       	cpi	r24, 0x03	; 3
    16da:	91 05       	cpc	r25, r1
    16dc:	09 f4       	brne	.+2      	; 0x16e0 <DIO_ReadPin+0x6c>
    16de:	3d c0       	rjmp	.+122    	; 0x175a <DIO_ReadPin+0xe6>
    16e0:	4f c0       	rjmp	.+158    	; 0x1780 <DIO_ReadPin+0x10c>
		case PORTA :
			*(PinState) = Get_Bit(PORTA_STAT, PinNumber);
    16e2:	e9 e3       	ldi	r30, 0x39	; 57
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	28 2f       	mov	r18, r24
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	8a 81       	ldd	r24, Y+2	; 0x02
    16ee:	88 2f       	mov	r24, r24
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	a9 01       	movw	r20, r18
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <DIO_ReadPin+0x86>
    16f6:	55 95       	asr	r21
    16f8:	47 95       	ror	r20
    16fa:	8a 95       	dec	r24
    16fc:	e2 f7       	brpl	.-8      	; 0x16f6 <DIO_ReadPin+0x82>
    16fe:	ca 01       	movw	r24, r20
    1700:	81 70       	andi	r24, 0x01	; 1
    1702:	eb 81       	ldd	r30, Y+3	; 0x03
    1704:	fc 81       	ldd	r31, Y+4	; 0x04
    1706:	80 83       	st	Z, r24
    1708:	3b c0       	rjmp	.+118    	; 0x1780 <DIO_ReadPin+0x10c>
			break;
		case PORTB :
			*(PinState) = Get_Bit(PORTB_STAT, PinNumber);
    170a:	e6 e3       	ldi	r30, 0x36	; 54
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	28 2f       	mov	r18, r24
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	8a 81       	ldd	r24, Y+2	; 0x02
    1716:	88 2f       	mov	r24, r24
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	a9 01       	movw	r20, r18
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <DIO_ReadPin+0xae>
    171e:	55 95       	asr	r21
    1720:	47 95       	ror	r20
    1722:	8a 95       	dec	r24
    1724:	e2 f7       	brpl	.-8      	; 0x171e <DIO_ReadPin+0xaa>
    1726:	ca 01       	movw	r24, r20
    1728:	81 70       	andi	r24, 0x01	; 1
    172a:	eb 81       	ldd	r30, Y+3	; 0x03
    172c:	fc 81       	ldd	r31, Y+4	; 0x04
    172e:	80 83       	st	Z, r24
    1730:	27 c0       	rjmp	.+78     	; 0x1780 <DIO_ReadPin+0x10c>
			break;
		case PORTC :
			*(PinState) = Get_Bit(PORTC_STAT, PinNumber);
    1732:	e3 e3       	ldi	r30, 0x33	; 51
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	28 2f       	mov	r18, r24
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	8a 81       	ldd	r24, Y+2	; 0x02
    173e:	88 2f       	mov	r24, r24
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	a9 01       	movw	r20, r18
    1744:	02 c0       	rjmp	.+4      	; 0x174a <DIO_ReadPin+0xd6>
    1746:	55 95       	asr	r21
    1748:	47 95       	ror	r20
    174a:	8a 95       	dec	r24
    174c:	e2 f7       	brpl	.-8      	; 0x1746 <DIO_ReadPin+0xd2>
    174e:	ca 01       	movw	r24, r20
    1750:	81 70       	andi	r24, 0x01	; 1
    1752:	eb 81       	ldd	r30, Y+3	; 0x03
    1754:	fc 81       	ldd	r31, Y+4	; 0x04
    1756:	80 83       	st	Z, r24
    1758:	13 c0       	rjmp	.+38     	; 0x1780 <DIO_ReadPin+0x10c>
			break;
		case PORTD :
			*(PinState) = Get_Bit(PORTD_STAT, PinNumber);
    175a:	e0 e3       	ldi	r30, 0x30	; 48
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	28 2f       	mov	r18, r24
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	8a 81       	ldd	r24, Y+2	; 0x02
    1766:	88 2f       	mov	r24, r24
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	a9 01       	movw	r20, r18
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <DIO_ReadPin+0xfe>
    176e:	55 95       	asr	r21
    1770:	47 95       	ror	r20
    1772:	8a 95       	dec	r24
    1774:	e2 f7       	brpl	.-8      	; 0x176e <DIO_ReadPin+0xfa>
    1776:	ca 01       	movw	r24, r20
    1778:	81 70       	andi	r24, 0x01	; 1
    177a:	eb 81       	ldd	r30, Y+3	; 0x03
    177c:	fc 81       	ldd	r31, Y+4	; 0x04
    177e:	80 83       	st	Z, r24
			break;

		} //END of SWITCH
		return E_DIO_SUCCESS ;
    1780:	1d 82       	std	Y+5, r1	; 0x05
    1782:	02 c0       	rjmp	.+4      	; 0x1788 <DIO_ReadPin+0x114>

	}	  //END of IF That checking the port and pin number

	else {
		return E_DIO_INVALID_PORT_NUMBER ;
    1784:	51 e0       	ldi	r21, 0x01	; 1
    1786:	5d 83       	std	Y+5, r21	; 0x05
    1788:	8d 81       	ldd	r24, Y+5	; 0x05

	}	  //END of ELSE
}    //END of DIO_readPint
    178a:	27 96       	adiw	r28, 0x07	; 7
    178c:	0f b6       	in	r0, 0x3f	; 63
    178e:	f8 94       	cli
    1790:	de bf       	out	0x3e, r29	; 62
    1792:	0f be       	out	0x3f, r0	; 63
    1794:	cd bf       	out	0x3d, r28	; 61
    1796:	cf 91       	pop	r28
    1798:	df 91       	pop	r29
    179a:	08 95       	ret

0000179c <DIO_TogglePin>:

/* API to toggle pin*/
DIO_ERROR_state_t DIO_TogglePin(uint8_t PortID, uint8_t PinNumber){
    179c:	df 93       	push	r29
    179e:	cf 93       	push	r28
    17a0:	00 d0       	rcall	.+0      	; 0x17a2 <DIO_TogglePin+0x6>
    17a2:	00 d0       	rcall	.+0      	; 0x17a4 <DIO_TogglePin+0x8>
    17a4:	0f 92       	push	r0
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62
    17aa:	89 83       	std	Y+1, r24	; 0x01
    17ac:	6a 83       	std	Y+2, r22	; 0x02
	//Check for the ports if it is between 0 to 3
		if ((PortID <= PORTD ) && (PortID >= PORTA ) && (PinNumber >= PIN0 )
    17ae:	89 81       	ldd	r24, Y+1	; 0x01
    17b0:	84 30       	cpi	r24, 0x04	; 4
    17b2:	08 f0       	brcs	.+2      	; 0x17b6 <DIO_TogglePin+0x1a>
    17b4:	74 c0       	rjmp	.+232    	; 0x189e <DIO_TogglePin+0x102>
    17b6:	8a 81       	ldd	r24, Y+2	; 0x02
    17b8:	88 30       	cpi	r24, 0x08	; 8
    17ba:	08 f0       	brcs	.+2      	; 0x17be <DIO_TogglePin+0x22>
    17bc:	70 c0       	rjmp	.+224    	; 0x189e <DIO_TogglePin+0x102>
				&& (PinNumber <= PIN7 )) {
			switch (PortID) {
    17be:	89 81       	ldd	r24, Y+1	; 0x01
    17c0:	28 2f       	mov	r18, r24
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	3d 83       	std	Y+5, r19	; 0x05
    17c6:	2c 83       	std	Y+4, r18	; 0x04
    17c8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ca:	9d 81       	ldd	r25, Y+5	; 0x05
    17cc:	81 30       	cpi	r24, 0x01	; 1
    17ce:	91 05       	cpc	r25, r1
    17d0:	49 f1       	breq	.+82     	; 0x1824 <DIO_TogglePin+0x88>
    17d2:	2c 81       	ldd	r18, Y+4	; 0x04
    17d4:	3d 81       	ldd	r19, Y+5	; 0x05
    17d6:	22 30       	cpi	r18, 0x02	; 2
    17d8:	31 05       	cpc	r19, r1
    17da:	2c f4       	brge	.+10     	; 0x17e6 <DIO_TogglePin+0x4a>
    17dc:	8c 81       	ldd	r24, Y+4	; 0x04
    17de:	9d 81       	ldd	r25, Y+5	; 0x05
    17e0:	00 97       	sbiw	r24, 0x00	; 0
    17e2:	61 f0       	breq	.+24     	; 0x17fc <DIO_TogglePin+0x60>
    17e4:	5a c0       	rjmp	.+180    	; 0x189a <DIO_TogglePin+0xfe>
    17e6:	2c 81       	ldd	r18, Y+4	; 0x04
    17e8:	3d 81       	ldd	r19, Y+5	; 0x05
    17ea:	22 30       	cpi	r18, 0x02	; 2
    17ec:	31 05       	cpc	r19, r1
    17ee:	71 f1       	breq	.+92     	; 0x184c <DIO_TogglePin+0xb0>
    17f0:	8c 81       	ldd	r24, Y+4	; 0x04
    17f2:	9d 81       	ldd	r25, Y+5	; 0x05
    17f4:	83 30       	cpi	r24, 0x03	; 3
    17f6:	91 05       	cpc	r25, r1
    17f8:	e9 f1       	breq	.+122    	; 0x1874 <DIO_TogglePin+0xd8>
    17fa:	4f c0       	rjmp	.+158    	; 0x189a <DIO_TogglePin+0xfe>
			case PORTA :
				Toggle_Bit(PORTA_DATA, PinNumber);
    17fc:	ab e3       	ldi	r26, 0x3B	; 59
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	eb e3       	ldi	r30, 0x3B	; 59
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	48 2f       	mov	r20, r24
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	28 2f       	mov	r18, r24
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	02 2e       	mov	r0, r18
    1814:	02 c0       	rjmp	.+4      	; 0x181a <DIO_TogglePin+0x7e>
    1816:	88 0f       	add	r24, r24
    1818:	99 1f       	adc	r25, r25
    181a:	0a 94       	dec	r0
    181c:	e2 f7       	brpl	.-8      	; 0x1816 <DIO_TogglePin+0x7a>
    181e:	84 27       	eor	r24, r20
    1820:	8c 93       	st	X, r24
    1822:	3b c0       	rjmp	.+118    	; 0x189a <DIO_TogglePin+0xfe>
				break;
			case PORTB :
				Toggle_Bit(PORTB_DATA, PinNumber);
    1824:	a8 e3       	ldi	r26, 0x38	; 56
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	e8 e3       	ldi	r30, 0x38	; 56
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	48 2f       	mov	r20, r24
    1830:	8a 81       	ldd	r24, Y+2	; 0x02
    1832:	28 2f       	mov	r18, r24
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	02 2e       	mov	r0, r18
    183c:	02 c0       	rjmp	.+4      	; 0x1842 <DIO_TogglePin+0xa6>
    183e:	88 0f       	add	r24, r24
    1840:	99 1f       	adc	r25, r25
    1842:	0a 94       	dec	r0
    1844:	e2 f7       	brpl	.-8      	; 0x183e <DIO_TogglePin+0xa2>
    1846:	84 27       	eor	r24, r20
    1848:	8c 93       	st	X, r24
    184a:	27 c0       	rjmp	.+78     	; 0x189a <DIO_TogglePin+0xfe>
				break;
			case PORTC :
				Toggle_Bit(PORTC_DATA, PinNumber);
    184c:	a5 e3       	ldi	r26, 0x35	; 53
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	e5 e3       	ldi	r30, 0x35	; 53
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	48 2f       	mov	r20, r24
    1858:	8a 81       	ldd	r24, Y+2	; 0x02
    185a:	28 2f       	mov	r18, r24
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	02 2e       	mov	r0, r18
    1864:	02 c0       	rjmp	.+4      	; 0x186a <DIO_TogglePin+0xce>
    1866:	88 0f       	add	r24, r24
    1868:	99 1f       	adc	r25, r25
    186a:	0a 94       	dec	r0
    186c:	e2 f7       	brpl	.-8      	; 0x1866 <DIO_TogglePin+0xca>
    186e:	84 27       	eor	r24, r20
    1870:	8c 93       	st	X, r24
    1872:	13 c0       	rjmp	.+38     	; 0x189a <DIO_TogglePin+0xfe>
				break;
			case PORTD :
				Toggle_Bit(PORTD_DATA, PinNumber);
    1874:	a2 e3       	ldi	r26, 0x32	; 50
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	e2 e3       	ldi	r30, 0x32	; 50
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	48 2f       	mov	r20, r24
    1880:	8a 81       	ldd	r24, Y+2	; 0x02
    1882:	28 2f       	mov	r18, r24
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	02 2e       	mov	r0, r18
    188c:	02 c0       	rjmp	.+4      	; 0x1892 <DIO_TogglePin+0xf6>
    188e:	88 0f       	add	r24, r24
    1890:	99 1f       	adc	r25, r25
    1892:	0a 94       	dec	r0
    1894:	e2 f7       	brpl	.-8      	; 0x188e <DIO_TogglePin+0xf2>
    1896:	84 27       	eor	r24, r20
    1898:	8c 93       	st	X, r24
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
    189a:	1b 82       	std	Y+3, r1	; 0x03
    189c:	02 c0       	rjmp	.+4      	; 0x18a2 <DIO_TogglePin+0x106>

		}	  //END of IF That checking the port and pin number

		else {
			return E_DIO_INVALID_PORT_NUMBER ;
    189e:	91 e0       	ldi	r25, 0x01	; 1
    18a0:	9b 83       	std	Y+3, r25	; 0x03
    18a2:	8b 81       	ldd	r24, Y+3	; 0x03

		}	  //END of ELSE

}
    18a4:	0f 90       	pop	r0
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	0f 90       	pop	r0
    18ac:	0f 90       	pop	r0
    18ae:	cf 91       	pop	r28
    18b0:	df 91       	pop	r29
    18b2:	08 95       	ret

000018b4 <DIO_EnablePinPullup>:
DIO_ERROR_state_t DIO_EnablePinPullup(uint8_t PortID, uint8_t PinNumber){
    18b4:	df 93       	push	r29
    18b6:	cf 93       	push	r28
    18b8:	00 d0       	rcall	.+0      	; 0x18ba <DIO_EnablePinPullup+0x6>
    18ba:	00 d0       	rcall	.+0      	; 0x18bc <DIO_EnablePinPullup+0x8>
    18bc:	0f 92       	push	r0
    18be:	cd b7       	in	r28, 0x3d	; 61
    18c0:	de b7       	in	r29, 0x3e	; 62
    18c2:	89 83       	std	Y+1, r24	; 0x01
    18c4:	6a 83       	std	Y+2, r22	; 0x02
	//Check for the ports if it is between 0 to 3
		if ((PortID <= PORTD ) && (PortID >= PORTA ) && (PinNumber >= PIN0 )
    18c6:	89 81       	ldd	r24, Y+1	; 0x01
    18c8:	84 30       	cpi	r24, 0x04	; 4
    18ca:	08 f0       	brcs	.+2      	; 0x18ce <DIO_EnablePinPullup+0x1a>
    18cc:	d1 c0       	rjmp	.+418    	; 0x1a70 <DIO_EnablePinPullup+0x1bc>
    18ce:	8a 81       	ldd	r24, Y+2	; 0x02
    18d0:	88 30       	cpi	r24, 0x08	; 8
    18d2:	08 f0       	brcs	.+2      	; 0x18d6 <DIO_EnablePinPullup+0x22>
    18d4:	cd c0       	rjmp	.+410    	; 0x1a70 <DIO_EnablePinPullup+0x1bc>
				&& (PinNumber <= PIN7 )) {
			switch (PortID) {
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
    18d8:	28 2f       	mov	r18, r24
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	3d 83       	std	Y+5, r19	; 0x05
    18de:	2c 83       	std	Y+4, r18	; 0x04
    18e0:	4c 81       	ldd	r20, Y+4	; 0x04
    18e2:	5d 81       	ldd	r21, Y+5	; 0x05
    18e4:	41 30       	cpi	r20, 0x01	; 1
    18e6:	51 05       	cpc	r21, r1
    18e8:	09 f4       	brne	.+2      	; 0x18ec <DIO_EnablePinPullup+0x38>
    18ea:	42 c0       	rjmp	.+132    	; 0x1970 <DIO_EnablePinPullup+0xbc>
    18ec:	8c 81       	ldd	r24, Y+4	; 0x04
    18ee:	9d 81       	ldd	r25, Y+5	; 0x05
    18f0:	82 30       	cpi	r24, 0x02	; 2
    18f2:	91 05       	cpc	r25, r1
    18f4:	34 f4       	brge	.+12     	; 0x1902 <DIO_EnablePinPullup+0x4e>
    18f6:	2c 81       	ldd	r18, Y+4	; 0x04
    18f8:	3d 81       	ldd	r19, Y+5	; 0x05
    18fa:	21 15       	cp	r18, r1
    18fc:	31 05       	cpc	r19, r1
    18fe:	71 f0       	breq	.+28     	; 0x191c <DIO_EnablePinPullup+0x68>
    1900:	b5 c0       	rjmp	.+362    	; 0x1a6c <DIO_EnablePinPullup+0x1b8>
    1902:	4c 81       	ldd	r20, Y+4	; 0x04
    1904:	5d 81       	ldd	r21, Y+5	; 0x05
    1906:	42 30       	cpi	r20, 0x02	; 2
    1908:	51 05       	cpc	r21, r1
    190a:	09 f4       	brne	.+2      	; 0x190e <DIO_EnablePinPullup+0x5a>
    190c:	5b c0       	rjmp	.+182    	; 0x19c4 <DIO_EnablePinPullup+0x110>
    190e:	8c 81       	ldd	r24, Y+4	; 0x04
    1910:	9d 81       	ldd	r25, Y+5	; 0x05
    1912:	83 30       	cpi	r24, 0x03	; 3
    1914:	91 05       	cpc	r25, r1
    1916:	09 f4       	brne	.+2      	; 0x191a <DIO_EnablePinPullup+0x66>
    1918:	7f c0       	rjmp	.+254    	; 0x1a18 <DIO_EnablePinPullup+0x164>
    191a:	a8 c0       	rjmp	.+336    	; 0x1a6c <DIO_EnablePinPullup+0x1b8>
			case PORTA :
				if(Get_Bit(PORTA_DIR, PinNumber)==PIN_INPUT){
    191c:	ea e3       	ldi	r30, 0x3A	; 58
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	28 2f       	mov	r18, r24
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	8a 81       	ldd	r24, Y+2	; 0x02
    1928:	88 2f       	mov	r24, r24
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	a9 01       	movw	r20, r18
    192e:	02 c0       	rjmp	.+4      	; 0x1934 <DIO_EnablePinPullup+0x80>
    1930:	55 95       	asr	r21
    1932:	47 95       	ror	r20
    1934:	8a 95       	dec	r24
    1936:	e2 f7       	brpl	.-8      	; 0x1930 <DIO_EnablePinPullup+0x7c>
    1938:	ca 01       	movw	r24, r20
    193a:	81 70       	andi	r24, 0x01	; 1
    193c:	90 70       	andi	r25, 0x00	; 0
    193e:	00 97       	sbiw	r24, 0x00	; 0
    1940:	a1 f4       	brne	.+40     	; 0x196a <DIO_EnablePinPullup+0xb6>
					Set_Bit(PORTA_DATA, PinNumber);
    1942:	ab e3       	ldi	r26, 0x3B	; 59
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	eb e3       	ldi	r30, 0x3B	; 59
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	48 2f       	mov	r20, r24
    194e:	8a 81       	ldd	r24, Y+2	; 0x02
    1950:	28 2f       	mov	r18, r24
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	02 2e       	mov	r0, r18
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <DIO_EnablePinPullup+0xac>
    195c:	88 0f       	add	r24, r24
    195e:	99 1f       	adc	r25, r25
    1960:	0a 94       	dec	r0
    1962:	e2 f7       	brpl	.-8      	; 0x195c <DIO_EnablePinPullup+0xa8>
    1964:	84 2b       	or	r24, r20
    1966:	8c 93       	st	X, r24
    1968:	81 c0       	rjmp	.+258    	; 0x1a6c <DIO_EnablePinPullup+0x1b8>
				}// END of IF which checking if the  pin is INPUT
				else{
					return E_DIO_SET_TO_NON_INPUT;
    196a:	53 e0       	ldi	r21, 0x03	; 3
    196c:	5b 83       	std	Y+3, r21	; 0x03
    196e:	82 c0       	rjmp	.+260    	; 0x1a74 <DIO_EnablePinPullup+0x1c0>
				}
				break;
			case PORTB :
				if(Get_Bit(PORTB_DIR, PinNumber)==PIN_INPUT){
    1970:	e7 e3       	ldi	r30, 0x37	; 55
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	28 2f       	mov	r18, r24
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	8a 81       	ldd	r24, Y+2	; 0x02
    197c:	88 2f       	mov	r24, r24
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	a9 01       	movw	r20, r18
    1982:	02 c0       	rjmp	.+4      	; 0x1988 <DIO_EnablePinPullup+0xd4>
    1984:	55 95       	asr	r21
    1986:	47 95       	ror	r20
    1988:	8a 95       	dec	r24
    198a:	e2 f7       	brpl	.-8      	; 0x1984 <DIO_EnablePinPullup+0xd0>
    198c:	ca 01       	movw	r24, r20
    198e:	81 70       	andi	r24, 0x01	; 1
    1990:	90 70       	andi	r25, 0x00	; 0
    1992:	00 97       	sbiw	r24, 0x00	; 0
    1994:	a1 f4       	brne	.+40     	; 0x19be <DIO_EnablePinPullup+0x10a>
					Set_Bit(PORTB_DATA, PinNumber);
    1996:	a8 e3       	ldi	r26, 0x38	; 56
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	e8 e3       	ldi	r30, 0x38	; 56
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	48 2f       	mov	r20, r24
    19a2:	8a 81       	ldd	r24, Y+2	; 0x02
    19a4:	28 2f       	mov	r18, r24
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	02 2e       	mov	r0, r18
    19ae:	02 c0       	rjmp	.+4      	; 0x19b4 <DIO_EnablePinPullup+0x100>
    19b0:	88 0f       	add	r24, r24
    19b2:	99 1f       	adc	r25, r25
    19b4:	0a 94       	dec	r0
    19b6:	e2 f7       	brpl	.-8      	; 0x19b0 <DIO_EnablePinPullup+0xfc>
    19b8:	84 2b       	or	r24, r20
    19ba:	8c 93       	st	X, r24
    19bc:	57 c0       	rjmp	.+174    	; 0x1a6c <DIO_EnablePinPullup+0x1b8>
				}// END of IF which checking if the  pin is INPUT
				else{
					return E_DIO_SET_TO_NON_INPUT;
    19be:	53 e0       	ldi	r21, 0x03	; 3
    19c0:	5b 83       	std	Y+3, r21	; 0x03
    19c2:	58 c0       	rjmp	.+176    	; 0x1a74 <DIO_EnablePinPullup+0x1c0>
				}
				break;
			case PORTC :
				if(Get_Bit(PORTC_DIR, PinNumber)==PIN_INPUT){
    19c4:	e4 e3       	ldi	r30, 0x34	; 52
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	28 2f       	mov	r18, r24
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	8a 81       	ldd	r24, Y+2	; 0x02
    19d0:	88 2f       	mov	r24, r24
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	a9 01       	movw	r20, r18
    19d6:	02 c0       	rjmp	.+4      	; 0x19dc <DIO_EnablePinPullup+0x128>
    19d8:	55 95       	asr	r21
    19da:	47 95       	ror	r20
    19dc:	8a 95       	dec	r24
    19de:	e2 f7       	brpl	.-8      	; 0x19d8 <DIO_EnablePinPullup+0x124>
    19e0:	ca 01       	movw	r24, r20
    19e2:	81 70       	andi	r24, 0x01	; 1
    19e4:	90 70       	andi	r25, 0x00	; 0
    19e6:	00 97       	sbiw	r24, 0x00	; 0
    19e8:	a1 f4       	brne	.+40     	; 0x1a12 <DIO_EnablePinPullup+0x15e>
					Set_Bit(PORTC_DATA, PinNumber);
    19ea:	a5 e3       	ldi	r26, 0x35	; 53
    19ec:	b0 e0       	ldi	r27, 0x00	; 0
    19ee:	e5 e3       	ldi	r30, 0x35	; 53
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	80 81       	ld	r24, Z
    19f4:	48 2f       	mov	r20, r24
    19f6:	8a 81       	ldd	r24, Y+2	; 0x02
    19f8:	28 2f       	mov	r18, r24
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	02 2e       	mov	r0, r18
    1a02:	02 c0       	rjmp	.+4      	; 0x1a08 <DIO_EnablePinPullup+0x154>
    1a04:	88 0f       	add	r24, r24
    1a06:	99 1f       	adc	r25, r25
    1a08:	0a 94       	dec	r0
    1a0a:	e2 f7       	brpl	.-8      	; 0x1a04 <DIO_EnablePinPullup+0x150>
    1a0c:	84 2b       	or	r24, r20
    1a0e:	8c 93       	st	X, r24
    1a10:	2d c0       	rjmp	.+90     	; 0x1a6c <DIO_EnablePinPullup+0x1b8>
				}// END of IF which checking if the  pin is INPUT
				else{
					return E_DIO_SET_TO_NON_INPUT;
    1a12:	53 e0       	ldi	r21, 0x03	; 3
    1a14:	5b 83       	std	Y+3, r21	; 0x03
    1a16:	2e c0       	rjmp	.+92     	; 0x1a74 <DIO_EnablePinPullup+0x1c0>
				}
				break;
			case PORTD :
				if(Get_Bit(PORTD_DIR, PinNumber)==PIN_INPUT){
    1a18:	e1 e3       	ldi	r30, 0x31	; 49
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	28 2f       	mov	r18, r24
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	8a 81       	ldd	r24, Y+2	; 0x02
    1a24:	88 2f       	mov	r24, r24
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	a9 01       	movw	r20, r18
    1a2a:	02 c0       	rjmp	.+4      	; 0x1a30 <DIO_EnablePinPullup+0x17c>
    1a2c:	55 95       	asr	r21
    1a2e:	47 95       	ror	r20
    1a30:	8a 95       	dec	r24
    1a32:	e2 f7       	brpl	.-8      	; 0x1a2c <DIO_EnablePinPullup+0x178>
    1a34:	ca 01       	movw	r24, r20
    1a36:	81 70       	andi	r24, 0x01	; 1
    1a38:	90 70       	andi	r25, 0x00	; 0
    1a3a:	00 97       	sbiw	r24, 0x00	; 0
    1a3c:	a1 f4       	brne	.+40     	; 0x1a66 <DIO_EnablePinPullup+0x1b2>
					Set_Bit(PORTD_DATA, PinNumber);
    1a3e:	a2 e3       	ldi	r26, 0x32	; 50
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	e2 e3       	ldi	r30, 0x32	; 50
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	48 2f       	mov	r20, r24
    1a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4c:	28 2f       	mov	r18, r24
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	02 2e       	mov	r0, r18
    1a56:	02 c0       	rjmp	.+4      	; 0x1a5c <DIO_EnablePinPullup+0x1a8>
    1a58:	88 0f       	add	r24, r24
    1a5a:	99 1f       	adc	r25, r25
    1a5c:	0a 94       	dec	r0
    1a5e:	e2 f7       	brpl	.-8      	; 0x1a58 <DIO_EnablePinPullup+0x1a4>
    1a60:	84 2b       	or	r24, r20
    1a62:	8c 93       	st	X, r24
    1a64:	03 c0       	rjmp	.+6      	; 0x1a6c <DIO_EnablePinPullup+0x1b8>
				}// END of IF which checking if the  pin is INPUT
				else{
					return E_DIO_SET_TO_NON_INPUT;
    1a66:	53 e0       	ldi	r21, 0x03	; 3
    1a68:	5b 83       	std	Y+3, r21	; 0x03
    1a6a:	04 c0       	rjmp	.+8      	; 0x1a74 <DIO_EnablePinPullup+0x1c0>
				}
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
    1a6c:	1b 82       	std	Y+3, r1	; 0x03
    1a6e:	02 c0       	rjmp	.+4      	; 0x1a74 <DIO_EnablePinPullup+0x1c0>

		}	  //END of IF That checking the port and pin number

		else {
			return E_DIO_INVALID_PORT_NUMBER ;
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	8b 83       	std	Y+3, r24	; 0x03
    1a74:	8b 81       	ldd	r24, Y+3	; 0x03

		}	  //END of ELSE

}
    1a76:	0f 90       	pop	r0
    1a78:	0f 90       	pop	r0
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	0f 90       	pop	r0
    1a80:	cf 91       	pop	r28
    1a82:	df 91       	pop	r29
    1a84:	08 95       	ret

00001a86 <LED_Init>:
#define PIN_LOW  (uint8_t)0




uint8_t LED_Init(void){
    1a86:	df 93       	push	r29
    1a88:	cf 93       	push	r28
    1a8a:	cd b7       	in	r28, 0x3d	; 61
    1a8c:	de b7       	in	r29, 0x3e	; 62
#if LED_1
	DIO_SetPinDirection(LED_1_PORT,LED_1_PIN,PIN_OUTPUT);
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	60 e0       	ldi	r22, 0x00	; 0
    1a92:	41 e0       	ldi	r20, 0x01	; 1
    1a94:	0e 94 78 08 	call	0x10f0	; 0x10f0 <DIO_SetPinDirection>
#endif
#if LED_2
	DIO_SetPinDirection(LED_2_PORT,LED_2_PIN,PIN_OUTPUT);
    1a98:	80 e0       	ldi	r24, 0x00	; 0
    1a9a:	61 e0       	ldi	r22, 0x01	; 1
    1a9c:	41 e0       	ldi	r20, 0x01	; 1
    1a9e:	0e 94 78 08 	call	0x10f0	; 0x10f0 <DIO_SetPinDirection>
#endif
#if LED_3
	DIO_SetPinDirection(LED_3_PORT,LED_3_PIN,PIN_OUTPUT);
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	62 e0       	ldi	r22, 0x02	; 2
    1aa6:	41 e0       	ldi	r20, 0x01	; 1
    1aa8:	0e 94 78 08 	call	0x10f0	; 0x10f0 <DIO_SetPinDirection>
#endif
	return 0;
    1aac:	80 e0       	ldi	r24, 0x00	; 0
}
    1aae:	cf 91       	pop	r28
    1ab0:	df 91       	pop	r29
    1ab2:	08 95       	ret

00001ab4 <LED_On>:
uint8_t LED_On(uint8_t LedNumber){
    1ab4:	df 93       	push	r29
    1ab6:	cf 93       	push	r28
    1ab8:	00 d0       	rcall	.+0      	; 0x1aba <LED_On+0x6>
    1aba:	0f 92       	push	r0
    1abc:	cd b7       	in	r28, 0x3d	; 61
    1abe:	de b7       	in	r29, 0x3e	; 62
    1ac0:	89 83       	std	Y+1, r24	; 0x01
	switch (LedNumber){
    1ac2:	89 81       	ldd	r24, Y+1	; 0x01
    1ac4:	28 2f       	mov	r18, r24
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	3b 83       	std	Y+3, r19	; 0x03
    1aca:	2a 83       	std	Y+2, r18	; 0x02
    1acc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ace:	9b 81       	ldd	r25, Y+3	; 0x03
    1ad0:	82 30       	cpi	r24, 0x02	; 2
    1ad2:	91 05       	cpc	r25, r1
    1ad4:	81 f0       	breq	.+32     	; 0x1af6 <LED_On+0x42>
    1ad6:	2a 81       	ldd	r18, Y+2	; 0x02
    1ad8:	3b 81       	ldd	r19, Y+3	; 0x03
    1ada:	23 30       	cpi	r18, 0x03	; 3
    1adc:	31 05       	cpc	r19, r1
    1ade:	89 f0       	breq	.+34     	; 0x1b02 <LED_On+0x4e>
    1ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ae4:	81 30       	cpi	r24, 0x01	; 1
    1ae6:	91 05       	cpc	r25, r1
    1ae8:	89 f4       	brne	.+34     	; 0x1b0c <LED_On+0x58>
	case LED_1:
		DIO_WritePin(LED_1_PORT,LED_1_PIN,PIN_HIGH);
    1aea:	80 e0       	ldi	r24, 0x00	; 0
    1aec:	60 e0       	ldi	r22, 0x00	; 0
    1aee:	41 e0       	ldi	r20, 0x01	; 1
    1af0:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_WritePin>
    1af4:	0b c0       	rjmp	.+22     	; 0x1b0c <LED_On+0x58>
		break;
	case LED_2:
		DIO_WritePin(LED_2_PORT,LED_2_PIN,PIN_HIGH);
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	61 e0       	ldi	r22, 0x01	; 1
    1afa:	41 e0       	ldi	r20, 0x01	; 1
    1afc:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_WritePin>
    1b00:	05 c0       	rjmp	.+10     	; 0x1b0c <LED_On+0x58>
		break;
	case LED_3:
		DIO_WritePin(LED_3_PORT,LED_3_PIN,PIN_HIGH);
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	62 e0       	ldi	r22, 0x02	; 2
    1b06:	41 e0       	ldi	r20, 0x01	; 1
    1b08:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_WritePin>
		break;
	}
	return 0;
    1b0c:	80 e0       	ldi	r24, 0x00	; 0

}
    1b0e:	0f 90       	pop	r0
    1b10:	0f 90       	pop	r0
    1b12:	0f 90       	pop	r0
    1b14:	cf 91       	pop	r28
    1b16:	df 91       	pop	r29
    1b18:	08 95       	ret

00001b1a <LED_Off>:
uint8_t LED_Off(uint8_t LedNumber){
    1b1a:	df 93       	push	r29
    1b1c:	cf 93       	push	r28
    1b1e:	00 d0       	rcall	.+0      	; 0x1b20 <LED_Off+0x6>
    1b20:	0f 92       	push	r0
    1b22:	cd b7       	in	r28, 0x3d	; 61
    1b24:	de b7       	in	r29, 0x3e	; 62
    1b26:	89 83       	std	Y+1, r24	; 0x01
	switch (LedNumber){
    1b28:	89 81       	ldd	r24, Y+1	; 0x01
    1b2a:	28 2f       	mov	r18, r24
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	3b 83       	std	Y+3, r19	; 0x03
    1b30:	2a 83       	std	Y+2, r18	; 0x02
    1b32:	8a 81       	ldd	r24, Y+2	; 0x02
    1b34:	9b 81       	ldd	r25, Y+3	; 0x03
    1b36:	82 30       	cpi	r24, 0x02	; 2
    1b38:	91 05       	cpc	r25, r1
    1b3a:	81 f0       	breq	.+32     	; 0x1b5c <LED_Off+0x42>
    1b3c:	2a 81       	ldd	r18, Y+2	; 0x02
    1b3e:	3b 81       	ldd	r19, Y+3	; 0x03
    1b40:	23 30       	cpi	r18, 0x03	; 3
    1b42:	31 05       	cpc	r19, r1
    1b44:	89 f0       	breq	.+34     	; 0x1b68 <LED_Off+0x4e>
    1b46:	8a 81       	ldd	r24, Y+2	; 0x02
    1b48:	9b 81       	ldd	r25, Y+3	; 0x03
    1b4a:	81 30       	cpi	r24, 0x01	; 1
    1b4c:	91 05       	cpc	r25, r1
    1b4e:	89 f4       	brne	.+34     	; 0x1b72 <LED_Off+0x58>
	case LED_1:
		DIO_WritePin(LED_1_PORT,LED_1_PIN,PIN_LOW);
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	60 e0       	ldi	r22, 0x00	; 0
    1b54:	40 e0       	ldi	r20, 0x00	; 0
    1b56:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_WritePin>
    1b5a:	0b c0       	rjmp	.+22     	; 0x1b72 <LED_Off+0x58>
		break;
	case LED_2:
		DIO_WritePin(LED_2_PORT,LED_2_PIN,PIN_LOW);
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	61 e0       	ldi	r22, 0x01	; 1
    1b60:	40 e0       	ldi	r20, 0x00	; 0
    1b62:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_WritePin>
    1b66:	05 c0       	rjmp	.+10     	; 0x1b72 <LED_Off+0x58>
		break;
	case LED_3:
		DIO_WritePin(LED_3_PORT,LED_3_PIN,PIN_LOW);
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	62 e0       	ldi	r22, 0x02	; 2
    1b6c:	40 e0       	ldi	r20, 0x00	; 0
    1b6e:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_WritePin>
		break;
	}

	return 0;
    1b72:	80 e0       	ldi	r24, 0x00	; 0
}
    1b74:	0f 90       	pop	r0
    1b76:	0f 90       	pop	r0
    1b78:	0f 90       	pop	r0
    1b7a:	cf 91       	pop	r28
    1b7c:	df 91       	pop	r29
    1b7e:	08 95       	ret

00001b80 <LED_Toggle>:
uint8_t LED_Toggle(uint8_t LedNumber){
    1b80:	df 93       	push	r29
    1b82:	cf 93       	push	r28
    1b84:	00 d0       	rcall	.+0      	; 0x1b86 <LED_Toggle+0x6>
    1b86:	0f 92       	push	r0
    1b88:	cd b7       	in	r28, 0x3d	; 61
    1b8a:	de b7       	in	r29, 0x3e	; 62
    1b8c:	89 83       	std	Y+1, r24	; 0x01
	switch (LedNumber){
    1b8e:	89 81       	ldd	r24, Y+1	; 0x01
    1b90:	28 2f       	mov	r18, r24
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	3b 83       	std	Y+3, r19	; 0x03
    1b96:	2a 83       	std	Y+2, r18	; 0x02
    1b98:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b9c:	82 30       	cpi	r24, 0x02	; 2
    1b9e:	91 05       	cpc	r25, r1
    1ba0:	79 f0       	breq	.+30     	; 0x1bc0 <LED_Toggle+0x40>
    1ba2:	2a 81       	ldd	r18, Y+2	; 0x02
    1ba4:	3b 81       	ldd	r19, Y+3	; 0x03
    1ba6:	23 30       	cpi	r18, 0x03	; 3
    1ba8:	31 05       	cpc	r19, r1
    1baa:	79 f0       	breq	.+30     	; 0x1bca <LED_Toggle+0x4a>
    1bac:	8a 81       	ldd	r24, Y+2	; 0x02
    1bae:	9b 81       	ldd	r25, Y+3	; 0x03
    1bb0:	81 30       	cpi	r24, 0x01	; 1
    1bb2:	91 05       	cpc	r25, r1
    1bb4:	71 f4       	brne	.+28     	; 0x1bd2 <LED_Toggle+0x52>
	case LED_1:
		DIO_TogglePin(LED_1_PORT,LED_1_PIN);
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
    1bb8:	60 e0       	ldi	r22, 0x00	; 0
    1bba:	0e 94 ce 0b 	call	0x179c	; 0x179c <DIO_TogglePin>
    1bbe:	09 c0       	rjmp	.+18     	; 0x1bd2 <LED_Toggle+0x52>
		break;
	case LED_2:
		DIO_TogglePin(LED_2_PORT,LED_2_PIN);
    1bc0:	80 e0       	ldi	r24, 0x00	; 0
    1bc2:	61 e0       	ldi	r22, 0x01	; 1
    1bc4:	0e 94 ce 0b 	call	0x179c	; 0x179c <DIO_TogglePin>
    1bc8:	04 c0       	rjmp	.+8      	; 0x1bd2 <LED_Toggle+0x52>
		break;
	case LED_3:
		DIO_TogglePin(LED_3_PORT,LED_3_PIN);
    1bca:	80 e0       	ldi	r24, 0x00	; 0
    1bcc:	62 e0       	ldi	r22, 0x02	; 2
    1bce:	0e 94 ce 0b 	call	0x179c	; 0x179c <DIO_TogglePin>
		break;
	}
	return 0;
    1bd2:	80 e0       	ldi	r24, 0x00	; 0

}
    1bd4:	0f 90       	pop	r0
    1bd6:	0f 90       	pop	r0
    1bd8:	0f 90       	pop	r0
    1bda:	cf 91       	pop	r28
    1bdc:	df 91       	pop	r29
    1bde:	08 95       	ret

00001be0 <LED_Status>:
uint8_t LED_Status(uint8_t LedNumber, uint8_t* LedState){
    1be0:	df 93       	push	r29
    1be2:	cf 93       	push	r28
    1be4:	00 d0       	rcall	.+0      	; 0x1be6 <LED_Status+0x6>
    1be6:	00 d0       	rcall	.+0      	; 0x1be8 <LED_Status+0x8>
    1be8:	0f 92       	push	r0
    1bea:	cd b7       	in	r28, 0x3d	; 61
    1bec:	de b7       	in	r29, 0x3e	; 62
    1bee:	89 83       	std	Y+1, r24	; 0x01
    1bf0:	7b 83       	std	Y+3, r23	; 0x03
    1bf2:	6a 83       	std	Y+2, r22	; 0x02
	switch (LedNumber){
    1bf4:	89 81       	ldd	r24, Y+1	; 0x01
    1bf6:	28 2f       	mov	r18, r24
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	3d 83       	std	Y+5, r19	; 0x05
    1bfc:	2c 83       	std	Y+4, r18	; 0x04
    1bfe:	8c 81       	ldd	r24, Y+4	; 0x04
    1c00:	9d 81       	ldd	r25, Y+5	; 0x05
    1c02:	82 30       	cpi	r24, 0x02	; 2
    1c04:	91 05       	cpc	r25, r1
    1c06:	91 f0       	breq	.+36     	; 0x1c2c <LED_Status+0x4c>
    1c08:	2c 81       	ldd	r18, Y+4	; 0x04
    1c0a:	3d 81       	ldd	r19, Y+5	; 0x05
    1c0c:	23 30       	cpi	r18, 0x03	; 3
    1c0e:	31 05       	cpc	r19, r1
    1c10:	a9 f0       	breq	.+42     	; 0x1c3c <LED_Status+0x5c>
    1c12:	8c 81       	ldd	r24, Y+4	; 0x04
    1c14:	9d 81       	ldd	r25, Y+5	; 0x05
    1c16:	81 30       	cpi	r24, 0x01	; 1
    1c18:	91 05       	cpc	r25, r1
    1c1a:	b9 f4       	brne	.+46     	; 0x1c4a <LED_Status+0x6a>
	case LED_1:
		DIO_ReadPin(LED_1_PORT,LED_1_PIN,LedState);
    1c1c:	2a 81       	ldd	r18, Y+2	; 0x02
    1c1e:	3b 81       	ldd	r19, Y+3	; 0x03
    1c20:	80 e0       	ldi	r24, 0x00	; 0
    1c22:	60 e0       	ldi	r22, 0x00	; 0
    1c24:	a9 01       	movw	r20, r18
    1c26:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_ReadPin>
    1c2a:	0f c0       	rjmp	.+30     	; 0x1c4a <LED_Status+0x6a>
		break;
	case LED_2:
		DIO_ReadPin(LED_2_PORT,LED_2_PIN,LedState);
    1c2c:	2a 81       	ldd	r18, Y+2	; 0x02
    1c2e:	3b 81       	ldd	r19, Y+3	; 0x03
    1c30:	80 e0       	ldi	r24, 0x00	; 0
    1c32:	61 e0       	ldi	r22, 0x01	; 1
    1c34:	a9 01       	movw	r20, r18
    1c36:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_ReadPin>
    1c3a:	07 c0       	rjmp	.+14     	; 0x1c4a <LED_Status+0x6a>
		break;
	case LED_3:
		DIO_ReadPin(LED_3_PORT,LED_3_PIN,LedState);
    1c3c:	2a 81       	ldd	r18, Y+2	; 0x02
    1c3e:	3b 81       	ldd	r19, Y+3	; 0x03
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	62 e0       	ldi	r22, 0x02	; 2
    1c44:	a9 01       	movw	r20, r18
    1c46:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_ReadPin>
		break;
	}
	return 0;
    1c4a:	80 e0       	ldi	r24, 0x00	; 0

}
    1c4c:	0f 90       	pop	r0
    1c4e:	0f 90       	pop	r0
    1c50:	0f 90       	pop	r0
    1c52:	0f 90       	pop	r0
    1c54:	0f 90       	pop	r0
    1c56:	cf 91       	pop	r28
    1c58:	df 91       	pop	r29
    1c5a:	08 95       	ret

00001c5c <App_Init>:
/*----INCLUDES---*/
#include "twi_slave_app.h"

void TWI_ISR(void);
uint8_t data=0;
void App_Init(void){
    1c5c:	df 93       	push	r29
    1c5e:	cf 93       	push	r28
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62

	TWI_Init(0);
    1c64:	80 e0       	ldi	r24, 0x00	; 0
    1c66:	0e 94 c7 02 	call	0x58e	; 0x58e <TWI_Init>
	TWI_EnableInterrupt(0);
    1c6a:	80 e0       	ldi	r24, 0x00	; 0
    1c6c:	0e 94 89 04 	call	0x912	; 0x912 <TWI_EnableInterrupt>
	TWI_SetCallback(0,&TWI_ISR);
    1c70:	2e e4       	ldi	r18, 0x4E	; 78
    1c72:	3e e0       	ldi	r19, 0x0E	; 14
    1c74:	80 e0       	ldi	r24, 0x00	; 0
    1c76:	b9 01       	movw	r22, r18
    1c78:	0e 94 04 05 	call	0xa08	; 0xa08 <TWI_SetCallback>
	DIO_SetPortDirection(PORTA,PORT_OUTPUT);
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	6f ef       	ldi	r22, 0xFF	; 255
    1c80:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_SetPortDirection>
	GI_EnableGI();
    1c84:	0e 94 9b 06 	call	0xd36	; 0xd36 <GI_EnableGI>
}
    1c88:	cf 91       	pop	r28
    1c8a:	df 91       	pop	r29
    1c8c:	08 95       	ret

00001c8e <App_Update>:
void App_Update(void){
    1c8e:	df 93       	push	r29
    1c90:	cf 93       	push	r28
    1c92:	cd b7       	in	r28, 0x3d	; 61
    1c94:	de b7       	in	r29, 0x3e	; 62

}
    1c96:	cf 91       	pop	r28
    1c98:	df 91       	pop	r29
    1c9a:	08 95       	ret

00001c9c <TWI_ISR>:
void TWI_ISR(void){
    1c9c:	df 93       	push	r29
    1c9e:	cf 93       	push	r28
    1ca0:	cd b7       	in	r28, 0x3d	; 61
    1ca2:	de b7       	in	r29, 0x3e	; 62
	TWI_RecDataAck(TWI_1,&data);
    1ca4:	2f e6       	ldi	r18, 0x6F	; 111
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	b9 01       	movw	r22, r18
    1cac:	0e 94 10 04 	call	0x820	; 0x820 <TWI_RecDataAck>
	DIO_writePort(PORTA,data);
    1cb0:	90 91 6f 00 	lds	r25, 0x006F
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
    1cb6:	69 2f       	mov	r22, r25
    1cb8:	0e 94 89 09 	call	0x1312	; 0x1312 <DIO_writePort>

}
    1cbc:	cf 91       	pop	r28
    1cbe:	df 91       	pop	r29
    1cc0:	08 95       	ret

00001cc2 <main>:
/*- INCLUDES 
-----------------------------------------------*/

#include "App/SLAVE_APP/twi_slave_app.h"

int main(){
    1cc2:	df 93       	push	r29
    1cc4:	cf 93       	push	r28
    1cc6:	cd b7       	in	r28, 0x3d	; 61
    1cc8:	de b7       	in	r29, 0x3e	; 62
	App_Init();
    1cca:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <App_Init>
	App_Update();
    1cce:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <App_Update>
    1cd2:	ff cf       	rjmp	.-2      	; 0x1cd2 <main+0x10>

00001cd4 <_exit>:
    1cd4:	f8 94       	cli

00001cd6 <__stop_program>:
    1cd6:	ff cf       	rjmp	.-2      	; 0x1cd6 <__stop_program>
