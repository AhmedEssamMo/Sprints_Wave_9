
S_Thermostat.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007e  00800060  000028f0  00002984  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  008000de  008000de  00002a02  2**0
                  ALLOC
  3 .stab         00004c20  00000000  00000000  00002a04  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001bf1  00000000  00000000  00007624  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 6a 07 	jmp	0xed4	; 0xed4 <__vector_1>
       8:	0c 94 7a 07 	jmp	0xef4	; 0xef4 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 a4 0d 	jmp	0x1b48	; 0x1b48 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 b0 03 	jmp	0x760	; 0x760 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ef       	ldi	r30, 0xF0	; 240
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3d       	cpi	r26, 0xDE	; 222
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae ed       	ldi	r26, 0xDE	; 222
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3f       	cpi	r26, 0xF6	; 246
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 18 14 	call	0x2830	; 0x2830 <main>
      8a:	0c 94 76 14 	jmp	0x28ec	; 0x28ec <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_Init>:
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	0f 92       	push	r0
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
      9c:	89 83       	std	Y+1, r24	; 0x01
      9e:	aa e2       	ldi	r26, 0x2A	; 42
      a0:	b0 e0       	ldi	r27, 0x00	; 0
      a2:	ea e2       	ldi	r30, 0x2A	; 42
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	80 61       	ori	r24, 0x10	; 16
      aa:	8c 93       	st	X, r24
      ac:	aa e2       	ldi	r26, 0x2A	; 42
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	ea e2       	ldi	r30, 0x2A	; 42
      b2:	f0 e0       	ldi	r31, 0x00	; 0
      b4:	80 81       	ld	r24, Z
      b6:	88 60       	ori	r24, 0x08	; 8
      b8:	8c 93       	st	X, r24
      ba:	ab e2       	ldi	r26, 0x2B	; 43
      bc:	b0 e0       	ldi	r27, 0x00	; 0
      be:	eb e2       	ldi	r30, 0x2B	; 43
      c0:	f0 e0       	ldi	r31, 0x00	; 0
      c2:	80 81       	ld	r24, Z
      c4:	8d 7f       	andi	r24, 0xFD	; 253
      c6:	8c 93       	st	X, r24
      c8:	aa e2       	ldi	r26, 0x2A	; 42
      ca:	b0 e0       	ldi	r27, 0x00	; 0
      cc:	ea e2       	ldi	r30, 0x2A	; 42
      ce:	f0 e0       	ldi	r31, 0x00	; 0
      d0:	80 81       	ld	r24, Z
      d2:	8b 7f       	andi	r24, 0xFB	; 251
      d4:	8c 93       	st	X, r24
      d6:	a0 e4       	ldi	r26, 0x40	; 64
      d8:	b0 e0       	ldi	r27, 0x00	; 0
      da:	e0 e4       	ldi	r30, 0x40	; 64
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	80 81       	ld	r24, Z
      e0:	86 68       	ori	r24, 0x86	; 134
      e2:	8c 93       	st	X, r24
      e4:	e9 e2       	ldi	r30, 0x29	; 41
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	83 e3       	ldi	r24, 0x33	; 51
      ea:	80 83       	st	Z, r24
      ec:	80 e0       	ldi	r24, 0x00	; 0
      ee:	0f 90       	pop	r0
      f0:	cf 91       	pop	r28
      f2:	df 91       	pop	r29
      f4:	08 95       	ret

000000f6 <UART_TransmitChar>:
	UCSRC |= ((SYNCHRONIZATION ) & (STOP_BITS ) & (CHARACTER_SIZE )
			& (PARITY_MODE ) & (CLOCK_POLARITY ));
	UBRRL = BUAD_RATE;
	return 0;
}
uint8_t UART_TransmitChar(uint8_t UartNumber, uint8_t TxChar) {
      f6:	df 93       	push	r29
      f8:	cf 93       	push	r28
      fa:	00 d0       	rcall	.+0      	; 0xfc <UART_TransmitChar+0x6>
      fc:	cd b7       	in	r28, 0x3d	; 61
      fe:	de b7       	in	r29, 0x3e	; 62
     100:	89 83       	std	Y+1, r24	; 0x01
     102:	6a 83       	std	Y+2, r22	; 0x02
	UDR = TxChar;
     104:	ec e2       	ldi	r30, 0x2C	; 44
     106:	f0 e0       	ldi	r31, 0x00	; 0
     108:	8a 81       	ldd	r24, Y+2	; 0x02
     10a:	80 83       	st	Z, r24
	while ((Get_Bit(UCSRA, UDRE)) != 1) {
     10c:	eb e2       	ldi	r30, 0x2B	; 43
     10e:	f0 e0       	ldi	r31, 0x00	; 0
     110:	80 81       	ld	r24, Z
     112:	82 95       	swap	r24
     114:	86 95       	lsr	r24
     116:	87 70       	andi	r24, 0x07	; 7
     118:	88 2f       	mov	r24, r24
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	81 70       	andi	r24, 0x01	; 1
     11e:	90 70       	andi	r25, 0x00	; 0
     120:	00 97       	sbiw	r24, 0x00	; 0
     122:	a1 f3       	breq	.-24     	; 0x10c <UART_TransmitChar+0x16>
	}
	return 0;
     124:	80 e0       	ldi	r24, 0x00	; 0
}
     126:	0f 90       	pop	r0
     128:	0f 90       	pop	r0
     12a:	cf 91       	pop	r28
     12c:	df 91       	pop	r29
     12e:	08 95       	ret

00000130 <UART_TransmitString>:
uint8_t UART_TransmitString(uint8_t UartNumber, ptr_uint8_t TxString) {
     130:	df 93       	push	r29
     132:	cf 93       	push	r28
     134:	00 d0       	rcall	.+0      	; 0x136 <UART_TransmitString+0x6>
     136:	00 d0       	rcall	.+0      	; 0x138 <UART_TransmitString+0x8>
     138:	cd b7       	in	r28, 0x3d	; 61
     13a:	de b7       	in	r29, 0x3e	; 62
     13c:	8a 83       	std	Y+2, r24	; 0x02
     13e:	7c 83       	std	Y+4, r23	; 0x04
     140:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t counter = 0;
     142:	19 82       	std	Y+1, r1	; 0x01
     144:	1b c0       	rjmp	.+54     	; 0x17c <UART_TransmitString+0x4c>
	while ((*(TxString + counter)) != NULL_TERMINATOR) {
		UDR = *(TxString + counter); //TxString[counter]
     146:	ac e2       	ldi	r26, 0x2C	; 44
     148:	b0 e0       	ldi	r27, 0x00	; 0
     14a:	89 81       	ldd	r24, Y+1	; 0x01
     14c:	28 2f       	mov	r18, r24
     14e:	30 e0       	ldi	r19, 0x00	; 0
     150:	8b 81       	ldd	r24, Y+3	; 0x03
     152:	9c 81       	ldd	r25, Y+4	; 0x04
     154:	fc 01       	movw	r30, r24
     156:	e2 0f       	add	r30, r18
     158:	f3 1f       	adc	r31, r19
     15a:	80 81       	ld	r24, Z
     15c:	8c 93       	st	X, r24
		while ((Get_Bit(UCSRA, UDRE)) != 1)
     15e:	eb e2       	ldi	r30, 0x2B	; 43
     160:	f0 e0       	ldi	r31, 0x00	; 0
     162:	80 81       	ld	r24, Z
     164:	82 95       	swap	r24
     166:	86 95       	lsr	r24
     168:	87 70       	andi	r24, 0x07	; 7
     16a:	88 2f       	mov	r24, r24
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	81 70       	andi	r24, 0x01	; 1
     170:	90 70       	andi	r25, 0x00	; 0
     172:	00 97       	sbiw	r24, 0x00	; 0
     174:	a1 f3       	breq	.-24     	; 0x15e <UART_TransmitString+0x2e>
			;
		counter++;
     176:	89 81       	ldd	r24, Y+1	; 0x01
     178:	8f 5f       	subi	r24, 0xFF	; 255
     17a:	89 83       	std	Y+1, r24	; 0x01
	}
	return 0;
}
uint8_t UART_TransmitString(uint8_t UartNumber, ptr_uint8_t TxString) {
	uint8_t counter = 0;
	while ((*(TxString + counter)) != NULL_TERMINATOR) {
     17c:	89 81       	ldd	r24, Y+1	; 0x01
     17e:	28 2f       	mov	r18, r24
     180:	30 e0       	ldi	r19, 0x00	; 0
     182:	8b 81       	ldd	r24, Y+3	; 0x03
     184:	9c 81       	ldd	r25, Y+4	; 0x04
     186:	fc 01       	movw	r30, r24
     188:	e2 0f       	add	r30, r18
     18a:	f3 1f       	adc	r31, r19
     18c:	80 81       	ld	r24, Z
     18e:	88 23       	and	r24, r24
     190:	d1 f6       	brne	.-76     	; 0x146 <UART_TransmitString+0x16>
		UDR = *(TxString + counter); //TxString[counter]
		while ((Get_Bit(UCSRA, UDRE)) != 1)
			;
		counter++;
	}
	UDR = '\r'; //TxString[counter]
     192:	ec e2       	ldi	r30, 0x2C	; 44
     194:	f0 e0       	ldi	r31, 0x00	; 0
     196:	8d e0       	ldi	r24, 0x0D	; 13
     198:	80 83       	st	Z, r24
	while ((Get_Bit(UCSRA, UDRE)) != 1)
     19a:	eb e2       	ldi	r30, 0x2B	; 43
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	80 81       	ld	r24, Z
     1a0:	82 95       	swap	r24
     1a2:	86 95       	lsr	r24
     1a4:	87 70       	andi	r24, 0x07	; 7
     1a6:	88 2f       	mov	r24, r24
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	81 70       	andi	r24, 0x01	; 1
     1ac:	90 70       	andi	r25, 0x00	; 0
     1ae:	00 97       	sbiw	r24, 0x00	; 0
     1b0:	a1 f3       	breq	.-24     	; 0x19a <UART_TransmitString+0x6a>
		;
	return 0;
     1b2:	80 e0       	ldi	r24, 0x00	; 0
}
     1b4:	0f 90       	pop	r0
     1b6:	0f 90       	pop	r0
     1b8:	0f 90       	pop	r0
     1ba:	0f 90       	pop	r0
     1bc:	cf 91       	pop	r28
     1be:	df 91       	pop	r29
     1c0:	08 95       	ret

000001c2 <UART_ReceiveChar>:
uint8_t UART_ReceiveChar(uint8_t UartNumber, ptr_uint8_t RxChar) {
     1c2:	df 93       	push	r29
     1c4:	cf 93       	push	r28
     1c6:	00 d0       	rcall	.+0      	; 0x1c8 <UART_ReceiveChar+0x6>
     1c8:	0f 92       	push	r0
     1ca:	cd b7       	in	r28, 0x3d	; 61
     1cc:	de b7       	in	r29, 0x3e	; 62
     1ce:	89 83       	std	Y+1, r24	; 0x01
     1d0:	7b 83       	std	Y+3, r23	; 0x03
     1d2:	6a 83       	std	Y+2, r22	; 0x02

	while (!(UCSRA & (1 << RXC )))
     1d4:	eb e2       	ldi	r30, 0x2B	; 43
     1d6:	f0 e0       	ldi	r31, 0x00	; 0
     1d8:	80 81       	ld	r24, Z
     1da:	88 23       	and	r24, r24
     1dc:	dc f7       	brge	.-10     	; 0x1d4 <UART_ReceiveChar+0x12>
		;
	*(RxChar) = (uint8_t) UDR;
     1de:	ec e2       	ldi	r30, 0x2C	; 44
     1e0:	f0 e0       	ldi	r31, 0x00	; 0
     1e2:	80 81       	ld	r24, Z
     1e4:	ea 81       	ldd	r30, Y+2	; 0x02
     1e6:	fb 81       	ldd	r31, Y+3	; 0x03
     1e8:	80 83       	st	Z, r24

	return 0;
     1ea:	80 e0       	ldi	r24, 0x00	; 0
}
     1ec:	0f 90       	pop	r0
     1ee:	0f 90       	pop	r0
     1f0:	0f 90       	pop	r0
     1f2:	cf 91       	pop	r28
     1f4:	df 91       	pop	r29
     1f6:	08 95       	ret

000001f8 <UART_ReceiveString>:
uint8_t UART_ReceiveString(uint8_t UartNumber, ptr_uint8_t RxString) {
     1f8:	df 93       	push	r29
     1fa:	cf 93       	push	r28
     1fc:	00 d0       	rcall	.+0      	; 0x1fe <UART_ReceiveString+0x6>
     1fe:	00 d0       	rcall	.+0      	; 0x200 <UART_ReceiveString+0x8>
     200:	cd b7       	in	r28, 0x3d	; 61
     202:	de b7       	in	r29, 0x3e	; 62
     204:	8a 83       	std	Y+2, r24	; 0x02
     206:	7c 83       	std	Y+4, r23	; 0x04
     208:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t counter = 0;
     20a:	19 82       	std	Y+1, r1	; 0x01
	while (1) {
		while (!(UCSRA & (1 << RXC )))
     20c:	eb e2       	ldi	r30, 0x2B	; 43
     20e:	f0 e0       	ldi	r31, 0x00	; 0
     210:	80 81       	ld	r24, Z
     212:	88 23       	and	r24, r24
     214:	dc f7       	brge	.-10     	; 0x20c <UART_ReceiveString+0x14>
			;
		RxString[counter] = UDR;
     216:	89 81       	ldd	r24, Y+1	; 0x01
     218:	28 2f       	mov	r18, r24
     21a:	30 e0       	ldi	r19, 0x00	; 0
     21c:	8b 81       	ldd	r24, Y+3	; 0x03
     21e:	9c 81       	ldd	r25, Y+4	; 0x04
     220:	dc 01       	movw	r26, r24
     222:	a2 0f       	add	r26, r18
     224:	b3 1f       	adc	r27, r19
     226:	ec e2       	ldi	r30, 0x2C	; 44
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	80 81       	ld	r24, Z
     22c:	8c 93       	st	X, r24
		if (RxString[counter] == (NEW_LINE)) {
     22e:	89 81       	ldd	r24, Y+1	; 0x01
     230:	28 2f       	mov	r18, r24
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	8b 81       	ldd	r24, Y+3	; 0x03
     236:	9c 81       	ldd	r25, Y+4	; 0x04
     238:	fc 01       	movw	r30, r24
     23a:	e2 0f       	add	r30, r18
     23c:	f3 1f       	adc	r31, r19
     23e:	80 81       	ld	r24, Z
     240:	8d 30       	cpi	r24, 0x0D	; 13
     242:	89 f4       	brne	.+34     	; 0x266 <UART_ReceiveString+0x6e>
			RxString[counter] = NULL_TERMINATOR;
     244:	89 81       	ldd	r24, Y+1	; 0x01
     246:	28 2f       	mov	r18, r24
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	8b 81       	ldd	r24, Y+3	; 0x03
     24c:	9c 81       	ldd	r25, Y+4	; 0x04
     24e:	fc 01       	movw	r30, r24
     250:	e2 0f       	add	r30, r18
     252:	f3 1f       	adc	r31, r19
     254:	10 82       	st	Z, r1
		}
		//UART_TransmitChar(UART_1,*(RxString+counter));
	}

	//*(RxString+counter)='\n';
	return 0;
     256:	80 e0       	ldi	r24, 0x00	; 0
}
     258:	0f 90       	pop	r0
     25a:	0f 90       	pop	r0
     25c:	0f 90       	pop	r0
     25e:	0f 90       	pop	r0
     260:	cf 91       	pop	r28
     262:	df 91       	pop	r29
     264:	08 95       	ret
		RxString[counter] = UDR;
		if (RxString[counter] == (NEW_LINE)) {
			RxString[counter] = NULL_TERMINATOR;
			break;
		}
		counter++;
     266:	89 81       	ldd	r24, Y+1	; 0x01
     268:	8f 5f       	subi	r24, 0xFF	; 255
     26a:	89 83       	std	Y+1, r24	; 0x01
		if ((RxString[counter-1] == (BACKSPACE)) && counter > 1) {
     26c:	89 81       	ldd	r24, Y+1	; 0x01
     26e:	88 2f       	mov	r24, r24
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	9c 01       	movw	r18, r24
     274:	21 50       	subi	r18, 0x01	; 1
     276:	30 40       	sbci	r19, 0x00	; 0
     278:	8b 81       	ldd	r24, Y+3	; 0x03
     27a:	9c 81       	ldd	r25, Y+4	; 0x04
     27c:	fc 01       	movw	r30, r24
     27e:	e2 0f       	add	r30, r18
     280:	f3 1f       	adc	r31, r19
     282:	80 81       	ld	r24, Z
     284:	88 30       	cpi	r24, 0x08	; 8
     286:	39 f4       	brne	.+14     	; 0x296 <UART_ReceiveString+0x9e>
     288:	89 81       	ldd	r24, Y+1	; 0x01
     28a:	82 30       	cpi	r24, 0x02	; 2
     28c:	20 f0       	brcs	.+8      	; 0x296 <UART_ReceiveString+0x9e>
			counter = counter - 2;
     28e:	89 81       	ldd	r24, Y+1	; 0x01
     290:	82 50       	subi	r24, 0x02	; 2
     292:	89 83       	std	Y+1, r24	; 0x01
     294:	bb cf       	rjmp	.-138    	; 0x20c <UART_ReceiveString+0x14>
		} else if ((RxString[counter-1] == (BACKSPACE)) && counter <= 1) {
     296:	89 81       	ldd	r24, Y+1	; 0x01
     298:	88 2f       	mov	r24, r24
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	9c 01       	movw	r18, r24
     29e:	21 50       	subi	r18, 0x01	; 1
     2a0:	30 40       	sbci	r19, 0x00	; 0
     2a2:	8b 81       	ldd	r24, Y+3	; 0x03
     2a4:	9c 81       	ldd	r25, Y+4	; 0x04
     2a6:	fc 01       	movw	r30, r24
     2a8:	e2 0f       	add	r30, r18
     2aa:	f3 1f       	adc	r31, r19
     2ac:	80 81       	ld	r24, Z
     2ae:	88 30       	cpi	r24, 0x08	; 8
     2b0:	09 f0       	breq	.+2      	; 0x2b4 <UART_ReceiveString+0xbc>
     2b2:	ac cf       	rjmp	.-168    	; 0x20c <UART_ReceiveString+0x14>
     2b4:	89 81       	ldd	r24, Y+1	; 0x01
     2b6:	82 30       	cpi	r24, 0x02	; 2
     2b8:	08 f0       	brcs	.+2      	; 0x2bc <UART_ReceiveString+0xc4>
     2ba:	a8 cf       	rjmp	.-176    	; 0x20c <UART_ReceiveString+0x14>
			counter = 0;
     2bc:	19 82       	std	Y+1, r1	; 0x01
     2be:	a6 cf       	rjmp	.-180    	; 0x20c <UART_ReceiveString+0x14>

000002c0 <UART_EnableInterrupt>:
	}

	//*(RxString+counter)='\n';
	return 0;
}
uint8_t UART_EnableInterrupt(uint8_t UartNumber, uint8_t UartInterruptType) {
     2c0:	df 93       	push	r29
     2c2:	cf 93       	push	r28
     2c4:	00 d0       	rcall	.+0      	; 0x2c6 <UART_EnableInterrupt+0x6>
     2c6:	00 d0       	rcall	.+0      	; 0x2c8 <UART_EnableInterrupt+0x8>
     2c8:	cd b7       	in	r28, 0x3d	; 61
     2ca:	de b7       	in	r29, 0x3e	; 62
     2cc:	89 83       	std	Y+1, r24	; 0x01
     2ce:	6a 83       	std	Y+2, r22	; 0x02
	switch (UartNumber) {
     2d0:	89 81       	ldd	r24, Y+1	; 0x01
     2d2:	88 2f       	mov	r24, r24
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	00 97       	sbiw	r24, 0x00	; 0
     2d8:	51 f5       	brne	.+84     	; 0x32e <UART_EnableInterrupt+0x6e>
	case UART_1 :
		switch (UartInterruptType) {
     2da:	8a 81       	ldd	r24, Y+2	; 0x02
     2dc:	28 2f       	mov	r18, r24
     2de:	30 e0       	ldi	r19, 0x00	; 0
     2e0:	3c 83       	std	Y+4, r19	; 0x04
     2e2:	2b 83       	std	Y+3, r18	; 0x03
     2e4:	8b 81       	ldd	r24, Y+3	; 0x03
     2e6:	9c 81       	ldd	r25, Y+4	; 0x04
     2e8:	81 30       	cpi	r24, 0x01	; 1
     2ea:	91 05       	cpc	r25, r1
     2ec:	89 f0       	breq	.+34     	; 0x310 <UART_EnableInterrupt+0x50>
     2ee:	2b 81       	ldd	r18, Y+3	; 0x03
     2f0:	3c 81       	ldd	r19, Y+4	; 0x04
     2f2:	22 30       	cpi	r18, 0x02	; 2
     2f4:	31 05       	cpc	r19, r1
     2f6:	a1 f0       	breq	.+40     	; 0x320 <UART_EnableInterrupt+0x60>
     2f8:	8b 81       	ldd	r24, Y+3	; 0x03
     2fa:	9c 81       	ldd	r25, Y+4	; 0x04
     2fc:	00 97       	sbiw	r24, 0x00	; 0
     2fe:	b9 f4       	brne	.+46     	; 0x32e <UART_EnableInterrupt+0x6e>
		case RECIVE_INT :
			Set_Bit(UCSRB, RXCIE);
     300:	aa e2       	ldi	r26, 0x2A	; 42
     302:	b0 e0       	ldi	r27, 0x00	; 0
     304:	ea e2       	ldi	r30, 0x2A	; 42
     306:	f0 e0       	ldi	r31, 0x00	; 0
     308:	80 81       	ld	r24, Z
     30a:	80 68       	ori	r24, 0x80	; 128
     30c:	8c 93       	st	X, r24
     30e:	0f c0       	rjmp	.+30     	; 0x32e <UART_EnableInterrupt+0x6e>
			break;
		case TRANSMIT_INT :
			Set_Bit(UCSRB, TXCIE);
     310:	aa e2       	ldi	r26, 0x2A	; 42
     312:	b0 e0       	ldi	r27, 0x00	; 0
     314:	ea e2       	ldi	r30, 0x2A	; 42
     316:	f0 e0       	ldi	r31, 0x00	; 0
     318:	80 81       	ld	r24, Z
     31a:	80 64       	ori	r24, 0x40	; 64
     31c:	8c 93       	st	X, r24
     31e:	07 c0       	rjmp	.+14     	; 0x32e <UART_EnableInterrupt+0x6e>
			break;
		case EMPTY_BUFFERR_INT :
			Set_Bit(UCSRB, UDRIE);
     320:	aa e2       	ldi	r26, 0x2A	; 42
     322:	b0 e0       	ldi	r27, 0x00	; 0
     324:	ea e2       	ldi	r30, 0x2A	; 42
     326:	f0 e0       	ldi	r31, 0x00	; 0
     328:	80 81       	ld	r24, Z
     32a:	80 62       	ori	r24, 0x20	; 32
     32c:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
	return 0;
     32e:	80 e0       	ldi	r24, 0x00	; 0
}
     330:	0f 90       	pop	r0
     332:	0f 90       	pop	r0
     334:	0f 90       	pop	r0
     336:	0f 90       	pop	r0
     338:	cf 91       	pop	r28
     33a:	df 91       	pop	r29
     33c:	08 95       	ret

0000033e <UART_DisableInterrupt>:
uint8_t UART_DisableInterrupt(uint8_t UartNumber, uint8_t UartInterruptType) {
     33e:	df 93       	push	r29
     340:	cf 93       	push	r28
     342:	00 d0       	rcall	.+0      	; 0x344 <UART_DisableInterrupt+0x6>
     344:	00 d0       	rcall	.+0      	; 0x346 <UART_DisableInterrupt+0x8>
     346:	cd b7       	in	r28, 0x3d	; 61
     348:	de b7       	in	r29, 0x3e	; 62
     34a:	89 83       	std	Y+1, r24	; 0x01
     34c:	6a 83       	std	Y+2, r22	; 0x02
	switch (UartNumber) {
     34e:	89 81       	ldd	r24, Y+1	; 0x01
     350:	88 2f       	mov	r24, r24
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	00 97       	sbiw	r24, 0x00	; 0
     356:	51 f5       	brne	.+84     	; 0x3ac <UART_DisableInterrupt+0x6e>
	case UART_1 :
		switch (UartInterruptType) {
     358:	8a 81       	ldd	r24, Y+2	; 0x02
     35a:	28 2f       	mov	r18, r24
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	3c 83       	std	Y+4, r19	; 0x04
     360:	2b 83       	std	Y+3, r18	; 0x03
     362:	8b 81       	ldd	r24, Y+3	; 0x03
     364:	9c 81       	ldd	r25, Y+4	; 0x04
     366:	81 30       	cpi	r24, 0x01	; 1
     368:	91 05       	cpc	r25, r1
     36a:	89 f0       	breq	.+34     	; 0x38e <UART_DisableInterrupt+0x50>
     36c:	2b 81       	ldd	r18, Y+3	; 0x03
     36e:	3c 81       	ldd	r19, Y+4	; 0x04
     370:	22 30       	cpi	r18, 0x02	; 2
     372:	31 05       	cpc	r19, r1
     374:	a1 f0       	breq	.+40     	; 0x39e <UART_DisableInterrupt+0x60>
     376:	8b 81       	ldd	r24, Y+3	; 0x03
     378:	9c 81       	ldd	r25, Y+4	; 0x04
     37a:	00 97       	sbiw	r24, 0x00	; 0
     37c:	b9 f4       	brne	.+46     	; 0x3ac <UART_DisableInterrupt+0x6e>
		case RECIVE_INT :
			Clr_Bit(UCSRB, RXCIE);
     37e:	aa e2       	ldi	r26, 0x2A	; 42
     380:	b0 e0       	ldi	r27, 0x00	; 0
     382:	ea e2       	ldi	r30, 0x2A	; 42
     384:	f0 e0       	ldi	r31, 0x00	; 0
     386:	80 81       	ld	r24, Z
     388:	8f 77       	andi	r24, 0x7F	; 127
     38a:	8c 93       	st	X, r24
     38c:	0f c0       	rjmp	.+30     	; 0x3ac <UART_DisableInterrupt+0x6e>
			break;
		case TRANSMIT_INT :
			Clr_Bit(UCSRB, TXCIE);
     38e:	aa e2       	ldi	r26, 0x2A	; 42
     390:	b0 e0       	ldi	r27, 0x00	; 0
     392:	ea e2       	ldi	r30, 0x2A	; 42
     394:	f0 e0       	ldi	r31, 0x00	; 0
     396:	80 81       	ld	r24, Z
     398:	8f 7b       	andi	r24, 0xBF	; 191
     39a:	8c 93       	st	X, r24
     39c:	07 c0       	rjmp	.+14     	; 0x3ac <UART_DisableInterrupt+0x6e>
			break;
		case EMPTY_BUFFERR_INT :
			Clr_Bit(UCSRB, UDRIE);
     39e:	aa e2       	ldi	r26, 0x2A	; 42
     3a0:	b0 e0       	ldi	r27, 0x00	; 0
     3a2:	ea e2       	ldi	r30, 0x2A	; 42
     3a4:	f0 e0       	ldi	r31, 0x00	; 0
     3a6:	80 81       	ld	r24, Z
     3a8:	8f 7d       	andi	r24, 0xDF	; 223
     3aa:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
	return 0;
     3ac:	80 e0       	ldi	r24, 0x00	; 0
}
     3ae:	0f 90       	pop	r0
     3b0:	0f 90       	pop	r0
     3b2:	0f 90       	pop	r0
     3b4:	0f 90       	pop	r0
     3b6:	cf 91       	pop	r28
     3b8:	df 91       	pop	r29
     3ba:	08 95       	ret

000003bc <TWI_SetSlaveAddress>:
#define SEND_START 0b00100000
#define SEND_ACK   0b01000000
#define CLR_FLAG   0b10000000

/*----APIs IMPLEMENTATION----*/
uint8_t TWI_SetSlaveAddress(uint8_t I2C_CH) {
     3bc:	df 93       	push	r29
     3be:	cf 93       	push	r28
     3c0:	0f 92       	push	r0
     3c2:	cd b7       	in	r28, 0x3d	; 61
     3c4:	de b7       	in	r29, 0x3e	; 62
     3c6:	89 83       	std	Y+1, r24	; 0x01
	TWI_Adress_REGISTER = (SlaveAddr << 1); //Shift the register left
     3c8:	e2 e2       	ldi	r30, 0x22	; 34
     3ca:	f0 e0       	ldi	r31, 0x00	; 0
     3cc:	80 e3       	ldi	r24, 0x30	; 48
     3ce:	80 83       	st	Z, r24
	return 0;
     3d0:	80 e0       	ldi	r24, 0x00	; 0
}
     3d2:	0f 90       	pop	r0
     3d4:	cf 91       	pop	r28
     3d6:	df 91       	pop	r29
     3d8:	08 95       	ret

000003da <TWI_Init>:
uint8_t TWI_Init(uint8_t I2C_CH) {
     3da:	df 93       	push	r29
     3dc:	cf 93       	push	r28
     3de:	0f 92       	push	r0
     3e0:	cd b7       	in	r28, 0x3d	; 61
     3e2:	de b7       	in	r29, 0x3e	; 62
     3e4:	89 83       	std	Y+1, r24	; 0x01
	/*-----SET ADDRESS IN CASE OF IT'S IN SLAVE MODE---- */
	TWI_SetSlaveAddress(I2C_CH);
     3e6:	89 81       	ldd	r24, Y+1	; 0x01
     3e8:	0e 94 de 01 	call	0x3bc	; 0x3bc <TWI_SetSlaveAddress>
	/*-----SETTING THE FREQ-----*/
	TWI_Bit_Rate_REGISTER = Bit_rate;
     3ec:	e0 e2       	ldi	r30, 0x20	; 32
     3ee:	f0 e0       	ldi	r31, 0x00	; 0
     3f0:	8e e1       	ldi	r24, 0x1E	; 30
     3f2:	80 83       	st	Z, r24
	TWI_Status_REGISTER &= Prescaler;
     3f4:	a1 e2       	ldi	r26, 0x21	; 33
     3f6:	b0 e0       	ldi	r27, 0x00	; 0
     3f8:	e1 e2       	ldi	r30, 0x21	; 33
     3fa:	f0 e0       	ldi	r31, 0x00	; 0
     3fc:	80 81       	ld	r24, Z
     3fe:	8c 7f       	andi	r24, 0xFC	; 252
     400:	8c 93       	st	X, r24
	/*Initial Value for TWI_Control_REGISTER is zeros so I set only what I need and ignore the rest*/
	/*-----ENABLE ACKNOWLEDGE----*/
	Set_Bit(TWI_Control_REGISTER, TWEA);
     402:	a6 e5       	ldi	r26, 0x56	; 86
     404:	b0 e0       	ldi	r27, 0x00	; 0
     406:	e6 e5       	ldi	r30, 0x56	; 86
     408:	f0 e0       	ldi	r31, 0x00	; 0
     40a:	80 81       	ld	r24, Z
     40c:	80 64       	ori	r24, 0x40	; 64
     40e:	8c 93       	st	X, r24
	/*-----ENABLE THE PREIPHERAL ITSELF-----*/
	Set_Bit(TWI_Control_REGISTER, TWEN);
     410:	a6 e5       	ldi	r26, 0x56	; 86
     412:	b0 e0       	ldi	r27, 0x00	; 0
     414:	e6 e5       	ldi	r30, 0x56	; 86
     416:	f0 e0       	ldi	r31, 0x00	; 0
     418:	80 81       	ld	r24, Z
     41a:	84 60       	ori	r24, 0x04	; 4
     41c:	8c 93       	st	X, r24
	return 0;
     41e:	80 e0       	ldi	r24, 0x00	; 0
}
     420:	0f 90       	pop	r0
     422:	cf 91       	pop	r28
     424:	df 91       	pop	r29
     426:	08 95       	ret

00000428 <TWI_SendStartCondition>:
uint8_t TWI_SendStartCondition(uint8_t I2C_CH) {
     428:	df 93       	push	r29
     42a:	cf 93       	push	r28
     42c:	00 d0       	rcall	.+0      	; 0x42e <TWI_SendStartCondition+0x6>
     42e:	0f 92       	push	r0
     430:	cd b7       	in	r28, 0x3d	; 61
     432:	de b7       	in	r29, 0x3e	; 62
     434:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t ErrStatus = 0;
     436:	19 82       	std	Y+1, r1	; 0x01
	TWI_Control_REGISTER = (EN_TWI | SEND_START | CLR_FLAG);
     438:	e6 e5       	ldi	r30, 0x56	; 86
     43a:	f0 e0       	ldi	r31, 0x00	; 0
     43c:	84 ea       	ldi	r24, 0xA4	; 164
     43e:	80 83       	st	Z, r24
	while ((Get_Bit(TWI_Control_REGISTER, TWINT)) != 1)
     440:	e6 e5       	ldi	r30, 0x56	; 86
     442:	f0 e0       	ldi	r31, 0x00	; 0
     444:	80 81       	ld	r24, Z
     446:	88 1f       	adc	r24, r24
     448:	88 27       	eor	r24, r24
     44a:	88 1f       	adc	r24, r24
     44c:	81 30       	cpi	r24, 0x01	; 1
     44e:	c1 f7       	brne	.-16     	; 0x440 <TWI_SendStartCondition+0x18>
		;/*Wait for TWINT Flag set.
		 This indicates that the START condition has been transmitted*/
	ErrStatus = (TWI_Status_REGISTER & 0xf8); //0b11111000
     450:	e1 e2       	ldi	r30, 0x21	; 33
     452:	f0 e0       	ldi	r31, 0x00	; 0
     454:	80 81       	ld	r24, Z
     456:	88 7f       	andi	r24, 0xF8	; 248
     458:	89 83       	std	Y+1, r24	; 0x01
	if (ErrStatus == ST_CONDITION) {
     45a:	89 81       	ldd	r24, Y+1	; 0x01
     45c:	88 30       	cpi	r24, 0x08	; 8
     45e:	11 f4       	brne	.+4      	; 0x464 <__stack+0x5>
//		UART_TransmitString(UART_1, "START CONDITION SENT\r");
		return 0; //STATR CONDITION HAS BEEN SENT
     460:	1b 82       	std	Y+3, r1	; 0x03
     462:	02 c0       	rjmp	.+4      	; 0x468 <__stack+0x9>
	} else {
//		UART_TransmitString(UART_1, "START CONDITION NOT SENT\r");
		return 1; //ERROR
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	8b 83       	std	Y+3, r24	; 0x03
     468:	8b 81       	ldd	r24, Y+3	; 0x03
	}

}
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
     46e:	0f 90       	pop	r0
     470:	cf 91       	pop	r28
     472:	df 91       	pop	r29
     474:	08 95       	ret

00000476 <TWI_SendStopCondition>:
uint8_t TWI_SendStopCondition(uint8_t I2C_CH) {
     476:	df 93       	push	r29
     478:	cf 93       	push	r28
     47a:	0f 92       	push	r0
     47c:	cd b7       	in	r28, 0x3d	; 61
     47e:	de b7       	in	r29, 0x3e	; 62
     480:	89 83       	std	Y+1, r24	; 0x01
	TWI_Control_REGISTER = (EN_TWI | CLR_FLAG | SEND_STOP);
     482:	e6 e5       	ldi	r30, 0x56	; 86
     484:	f0 e0       	ldi	r31, 0x00	; 0
     486:	84 e9       	ldi	r24, 0x94	; 148
     488:	80 83       	st	Z, r24
//	UART_TransmitString(UART_1, "STOP CONDITION SENT\r");
	return 0;
     48a:	80 e0       	ldi	r24, 0x00	; 0
}
     48c:	0f 90       	pop	r0
     48e:	cf 91       	pop	r28
     490:	df 91       	pop	r29
     492:	08 95       	ret

00000494 <TWI_SendSLAWrite>:
uint8_t TWI_SendSLAWrite(uint8_t I2C_CH, uint8_t SlvAdr) {
     494:	df 93       	push	r29
     496:	cf 93       	push	r28
     498:	00 d0       	rcall	.+0      	; 0x49a <TWI_SendSLAWrite+0x6>
     49a:	00 d0       	rcall	.+0      	; 0x49c <TWI_SendSLAWrite+0x8>
     49c:	cd b7       	in	r28, 0x3d	; 61
     49e:	de b7       	in	r29, 0x3e	; 62
     4a0:	8a 83       	std	Y+2, r24	; 0x02
     4a2:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrStatus = 0;
     4a4:	19 82       	std	Y+1, r1	; 0x01
	TWI_Data_REGISTER = ((SlvAdr << 1) | 0);
     4a6:	e3 e2       	ldi	r30, 0x23	; 35
     4a8:	f0 e0       	ldi	r31, 0x00	; 0
     4aa:	8b 81       	ldd	r24, Y+3	; 0x03
     4ac:	88 0f       	add	r24, r24
     4ae:	80 83       	st	Z, r24
	TWI_Control_REGISTER = (EN_TWI | CLR_FLAG);// CLEAR FLAG TO SEND DATA
     4b0:	e6 e5       	ldi	r30, 0x56	; 86
     4b2:	f0 e0       	ldi	r31, 0x00	; 0
     4b4:	84 e8       	ldi	r24, 0x84	; 132
     4b6:	80 83       	st	Z, r24
	while (Get_Bit(TWI_Control_REGISTER,TWINT) == 0)
     4b8:	e6 e5       	ldi	r30, 0x56	; 86
     4ba:	f0 e0       	ldi	r31, 0x00	; 0
     4bc:	80 81       	ld	r24, Z
     4be:	88 23       	and	r24, r24
     4c0:	dc f7       	brge	.-10     	; 0x4b8 <TWI_SendSLAWrite+0x24>
		;
	ErrStatus = (TWI_Status_REGISTER & 0xf8); //0b11111000
     4c2:	e1 e2       	ldi	r30, 0x21	; 33
     4c4:	f0 e0       	ldi	r31, 0x00	; 0
     4c6:	80 81       	ld	r24, Z
     4c8:	88 7f       	andi	r24, 0xF8	; 248
     4ca:	89 83       	std	Y+1, r24	; 0x01
	if (ErrStatus == SLA_W_ACK) {
     4cc:	89 81       	ldd	r24, Y+1	; 0x01
     4ce:	88 31       	cpi	r24, 0x18	; 24
     4d0:	11 f4       	brne	.+4      	; 0x4d6 <TWI_SendSLAWrite+0x42>
//		UART_TransmitString(UART_1, "SENT SLAVE ADDRESS WITH ACK\r");
		return 0;
     4d2:	1c 82       	std	Y+4, r1	; 0x04
     4d4:	08 c0       	rjmp	.+16     	; 0x4e6 <TWI_SendSLAWrite+0x52>
	} else if (ErrStatus == SLA_W_NACK) {
     4d6:	89 81       	ldd	r24, Y+1	; 0x01
     4d8:	80 32       	cpi	r24, 0x20	; 32
     4da:	19 f4       	brne	.+6      	; 0x4e2 <TWI_SendSLAWrite+0x4e>
//		UART_TransmitString(UART_1, "SENT SLAVE ADDRESS WITH NO ACK\r");
		return 2;
     4dc:	82 e0       	ldi	r24, 0x02	; 2
     4de:	8c 83       	std	Y+4, r24	; 0x04
     4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <TWI_SendSLAWrite+0x52>
	} else {
//		UART_TransmitString(UART_1, "ERROR\r");
		return 3;
     4e2:	83 e0       	ldi	r24, 0x03	; 3
     4e4:	8c 83       	std	Y+4, r24	; 0x04
     4e6:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
     4e8:	0f 90       	pop	r0
     4ea:	0f 90       	pop	r0
     4ec:	0f 90       	pop	r0
     4ee:	0f 90       	pop	r0
     4f0:	cf 91       	pop	r28
     4f2:	df 91       	pop	r29
     4f4:	08 95       	ret

000004f6 <TWI_SendSLARead>:
uint8_t TWI_SendSLARead(uint8_t I2C_CH, uint8_t SlvAdr) {
     4f6:	df 93       	push	r29
     4f8:	cf 93       	push	r28
     4fa:	00 d0       	rcall	.+0      	; 0x4fc <TWI_SendSLARead+0x6>
     4fc:	00 d0       	rcall	.+0      	; 0x4fe <TWI_SendSLARead+0x8>
     4fe:	cd b7       	in	r28, 0x3d	; 61
     500:	de b7       	in	r29, 0x3e	; 62
     502:	8a 83       	std	Y+2, r24	; 0x02
     504:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrStatus = 0;
     506:	19 82       	std	Y+1, r1	; 0x01
	TWI_Data_REGISTER = ((SlvAdr << 1) | 1);
     508:	e3 e2       	ldi	r30, 0x23	; 35
     50a:	f0 e0       	ldi	r31, 0x00	; 0
     50c:	8b 81       	ldd	r24, Y+3	; 0x03
     50e:	88 2f       	mov	r24, r24
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	88 0f       	add	r24, r24
     514:	99 1f       	adc	r25, r25
     516:	81 60       	ori	r24, 0x01	; 1
     518:	80 83       	st	Z, r24
	TWI_Control_REGISTER = (EN_TWI | CLR_FLAG);
     51a:	e6 e5       	ldi	r30, 0x56	; 86
     51c:	f0 e0       	ldi	r31, 0x00	; 0
     51e:	84 e8       	ldi	r24, 0x84	; 132
     520:	80 83       	st	Z, r24
	while (Get_Bit(TWI_Control_REGISTER,TWINT) == 0)
     522:	e6 e5       	ldi	r30, 0x56	; 86
     524:	f0 e0       	ldi	r31, 0x00	; 0
     526:	80 81       	ld	r24, Z
     528:	88 23       	and	r24, r24
     52a:	dc f7       	brge	.-10     	; 0x522 <TWI_SendSLARead+0x2c>
		;
	ErrStatus = (TWI_Status_REGISTER & 0xf8); //0b11111000
     52c:	e1 e2       	ldi	r30, 0x21	; 33
     52e:	f0 e0       	ldi	r31, 0x00	; 0
     530:	80 81       	ld	r24, Z
     532:	88 7f       	andi	r24, 0xF8	; 248
     534:	89 83       	std	Y+1, r24	; 0x01
	if (ErrStatus == SLA_R_ACK) {
     536:	89 81       	ldd	r24, Y+1	; 0x01
     538:	80 34       	cpi	r24, 0x40	; 64
     53a:	11 f4       	brne	.+4      	; 0x540 <TWI_SendSLARead+0x4a>
//		UART_TransmitString(UART_1, "SENT SLAVE ADDRESS WITH ACK\r");
		return 0;
     53c:	1c 82       	std	Y+4, r1	; 0x04
     53e:	08 c0       	rjmp	.+16     	; 0x550 <TWI_SendSLARead+0x5a>
	} else if (ErrStatus == SLA_R_NACK) {
     540:	89 81       	ldd	r24, Y+1	; 0x01
     542:	88 34       	cpi	r24, 0x48	; 72
     544:	19 f4       	brne	.+6      	; 0x54c <TWI_SendSLARead+0x56>
//		UART_TransmitString(UART_1, "SENT SLAVE ADDRESS WITH NO ACK\r");
		return 2;
     546:	82 e0       	ldi	r24, 0x02	; 2
     548:	8c 83       	std	Y+4, r24	; 0x04
     54a:	02 c0       	rjmp	.+4      	; 0x550 <TWI_SendSLARead+0x5a>
	} else {
//		UART_TransmitString(UART_1, "ERROR\r");
		return 3;
     54c:	83 e0       	ldi	r24, 0x03	; 3
     54e:	8c 83       	std	Y+4, r24	; 0x04
     550:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
     552:	0f 90       	pop	r0
     554:	0f 90       	pop	r0
     556:	0f 90       	pop	r0
     558:	0f 90       	pop	r0
     55a:	cf 91       	pop	r28
     55c:	df 91       	pop	r29
     55e:	08 95       	ret

00000560 <TWI_SendData>:
uint8_t TWI_SendData(uint8_t I2C_CH, uint8_t Data) {
     560:	df 93       	push	r29
     562:	cf 93       	push	r28
     564:	00 d0       	rcall	.+0      	; 0x566 <TWI_SendData+0x6>
     566:	00 d0       	rcall	.+0      	; 0x568 <TWI_SendData+0x8>
     568:	cd b7       	in	r28, 0x3d	; 61
     56a:	de b7       	in	r29, 0x3e	; 62
     56c:	8a 83       	std	Y+2, r24	; 0x02
     56e:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrStatus = 0;
     570:	19 82       	std	Y+1, r1	; 0x01
	TWI_Data_REGISTER = Data;
     572:	e3 e2       	ldi	r30, 0x23	; 35
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	8b 81       	ldd	r24, Y+3	; 0x03
     578:	80 83       	st	Z, r24
	TWI_Control_REGISTER = (EN_TWI | CLR_FLAG);
     57a:	e6 e5       	ldi	r30, 0x56	; 86
     57c:	f0 e0       	ldi	r31, 0x00	; 0
     57e:	84 e8       	ldi	r24, 0x84	; 132
     580:	80 83       	st	Z, r24
	while (Get_Bit(TWI_Control_REGISTER,TWINT) == 0)
     582:	e6 e5       	ldi	r30, 0x56	; 86
     584:	f0 e0       	ldi	r31, 0x00	; 0
     586:	80 81       	ld	r24, Z
     588:	88 23       	and	r24, r24
     58a:	dc f7       	brge	.-10     	; 0x582 <TWI_SendData+0x22>
		;
	ErrStatus = (TWI_Status_REGISTER & 0xf8); //MASKING THE PRE_SCALERS BITS
     58c:	e1 e2       	ldi	r30, 0x21	; 33
     58e:	f0 e0       	ldi	r31, 0x00	; 0
     590:	80 81       	ld	r24, Z
     592:	88 7f       	andi	r24, 0xF8	; 248
     594:	89 83       	std	Y+1, r24	; 0x01
	if (ErrStatus == DATA_TR_ACK) {
     596:	89 81       	ldd	r24, Y+1	; 0x01
     598:	88 32       	cpi	r24, 0x28	; 40
     59a:	11 f4       	brne	.+4      	; 0x5a0 <TWI_SendData+0x40>
//		UART_TransmitString(UART_1, "SENT DATA WITH ACK\r");
		return 0;
     59c:	1c 82       	std	Y+4, r1	; 0x04
     59e:	08 c0       	rjmp	.+16     	; 0x5b0 <TWI_SendData+0x50>
	} else if (ErrStatus == DATA_TR_NACK) {
     5a0:	89 81       	ldd	r24, Y+1	; 0x01
     5a2:	80 33       	cpi	r24, 0x30	; 48
     5a4:	19 f4       	brne	.+6      	; 0x5ac <TWI_SendData+0x4c>
//		UART_TransmitString(UART_1, "SENT DATA WITH NO ACK\r");
		return 6;
     5a6:	86 e0       	ldi	r24, 0x06	; 6
     5a8:	8c 83       	std	Y+4, r24	; 0x04
     5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <TWI_SendData+0x50>
	} else {
//		UART_TransmitString(UART_1, "ERROR\r");
		return 7;
     5ac:	87 e0       	ldi	r24, 0x07	; 7
     5ae:	8c 83       	std	Y+4, r24	; 0x04
     5b0:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
     5b2:	0f 90       	pop	r0
     5b4:	0f 90       	pop	r0
     5b6:	0f 90       	pop	r0
     5b8:	0f 90       	pop	r0
     5ba:	cf 91       	pop	r28
     5bc:	df 91       	pop	r29
     5be:	08 95       	ret

000005c0 <TWI_SendChar>:
uint8_t TWI_SendChar(uint8_t I2C_CH, uint8_t SlvAdr, uint8_t Data) {
     5c0:	df 93       	push	r29
     5c2:	cf 93       	push	r28
     5c4:	00 d0       	rcall	.+0      	; 0x5c6 <TWI_SendChar+0x6>
     5c6:	0f 92       	push	r0
     5c8:	cd b7       	in	r28, 0x3d	; 61
     5ca:	de b7       	in	r29, 0x3e	; 62
     5cc:	89 83       	std	Y+1, r24	; 0x01
     5ce:	6a 83       	std	Y+2, r22	; 0x02
     5d0:	4b 83       	std	Y+3, r20	; 0x03
	/*SENDING START CONDITION*/
	TWI_SendStartCondition(I2C_CH);
     5d2:	89 81       	ldd	r24, Y+1	; 0x01
     5d4:	0e 94 14 02 	call	0x428	; 0x428 <TWI_SendStartCondition>
	/*--SEND SALVE ADDRESS WITH WRITE OPERATION--*/
	TWI_SendSLAWrite(I2C_CH, SlvAdr);
     5d8:	89 81       	ldd	r24, Y+1	; 0x01
     5da:	6a 81       	ldd	r22, Y+2	; 0x02
     5dc:	0e 94 4a 02 	call	0x494	; 0x494 <TWI_SendSLAWrite>
	/*--SENDING DATA--*/
	TWI_SendData(I2C_CH, Data);
     5e0:	89 81       	ldd	r24, Y+1	; 0x01
     5e2:	6b 81       	ldd	r22, Y+3	; 0x03
     5e4:	0e 94 b0 02 	call	0x560	; 0x560 <TWI_SendData>
	/*--SENDING STOP CONDITION*/
	TWI_SendStopCondition(I2C_CH);
     5e8:	89 81       	ldd	r24, Y+1	; 0x01
     5ea:	0e 94 3b 02 	call	0x476	; 0x476 <TWI_SendStopCondition>
	return 0;
     5ee:	80 e0       	ldi	r24, 0x00	; 0
}
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
     5f4:	0f 90       	pop	r0
     5f6:	cf 91       	pop	r28
     5f8:	df 91       	pop	r29
     5fa:	08 95       	ret

000005fc <TWI_RecDataAck>:
uint8_t TWI_RecDataAck(uint8_t I2C_CH, uint8_t* data) {
     5fc:	df 93       	push	r29
     5fe:	cf 93       	push	r28
     600:	00 d0       	rcall	.+0      	; 0x602 <TWI_RecDataAck+0x6>
     602:	00 d0       	rcall	.+0      	; 0x604 <TWI_RecDataAck+0x8>
     604:	0f 92       	push	r0
     606:	cd b7       	in	r28, 0x3d	; 61
     608:	de b7       	in	r29, 0x3e	; 62
     60a:	8a 83       	std	Y+2, r24	; 0x02
     60c:	7c 83       	std	Y+4, r23	; 0x04
     60e:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrStatus = 0;
     610:	19 82       	std	Y+1, r1	; 0x01
	Set_Bit(TWI_Control_REGISTER, TWEA);
     612:	a6 e5       	ldi	r26, 0x56	; 86
     614:	b0 e0       	ldi	r27, 0x00	; 0
     616:	e6 e5       	ldi	r30, 0x56	; 86
     618:	f0 e0       	ldi	r31, 0x00	; 0
     61a:	80 81       	ld	r24, Z
     61c:	80 64       	ori	r24, 0x40	; 64
     61e:	8c 93       	st	X, r24
	Set_Bit(TWI_Control_REGISTER, TWINT);
     620:	a6 e5       	ldi	r26, 0x56	; 86
     622:	b0 e0       	ldi	r27, 0x00	; 0
     624:	e6 e5       	ldi	r30, 0x56	; 86
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	80 81       	ld	r24, Z
     62a:	80 68       	ori	r24, 0x80	; 128
     62c:	8c 93       	st	X, r24
	while (Get_Bit(TWI_Control_REGISTER,TWINT) == 0)
     62e:	e6 e5       	ldi	r30, 0x56	; 86
     630:	f0 e0       	ldi	r31, 0x00	; 0
     632:	80 81       	ld	r24, Z
     634:	88 23       	and	r24, r24
     636:	dc f7       	brge	.-10     	; 0x62e <TWI_RecDataAck+0x32>
		;
	*data = TWI_Data_REGISTER;
     638:	e3 e2       	ldi	r30, 0x23	; 35
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	80 81       	ld	r24, Z
     63e:	eb 81       	ldd	r30, Y+3	; 0x03
     640:	fc 81       	ldd	r31, Y+4	; 0x04
     642:	80 83       	st	Z, r24
	ErrStatus = (TWI_Status_REGISTER & 0xf8); //MASKING THE PRE_SCALERS BITS
     644:	e1 e2       	ldi	r30, 0x21	; 33
     646:	f0 e0       	ldi	r31, 0x00	; 0
     648:	80 81       	ld	r24, Z
     64a:	88 7f       	andi	r24, 0xF8	; 248
     64c:	89 83       	std	Y+1, r24	; 0x01
	if (ErrStatus == DATA_REC_ACK) {
     64e:	89 81       	ldd	r24, Y+1	; 0x01
     650:	80 35       	cpi	r24, 0x50	; 80
     652:	11 f4       	brne	.+4      	; 0x658 <TWI_RecDataAck+0x5c>
//		UART_TransmitString(UART_1, "RECEIVED DATA WITH ACK\r");
		return 0;
     654:	1d 82       	std	Y+5, r1	; 0x05
     656:	08 c0       	rjmp	.+16     	; 0x668 <TWI_RecDataAck+0x6c>
	} else if (ErrStatus == DATA_REC_NACK) {
     658:	89 81       	ldd	r24, Y+1	; 0x01
     65a:	88 35       	cpi	r24, 0x58	; 88
     65c:	19 f4       	brne	.+6      	; 0x664 <TWI_RecDataAck+0x68>
//		UART_TransmitString(UART_1, "RECEIVED DATA WITH NO ACK\r");
		return 6;
     65e:	86 e0       	ldi	r24, 0x06	; 6
     660:	8d 83       	std	Y+5, r24	; 0x05
     662:	02 c0       	rjmp	.+4      	; 0x668 <TWI_RecDataAck+0x6c>
	} else {

//		UART_TransmitString(UART_1, "ERROR\r");
		return 7;
     664:	87 e0       	ldi	r24, 0x07	; 7
     666:	8d 83       	std	Y+5, r24	; 0x05
     668:	8d 81       	ldd	r24, Y+5	; 0x05
	}
	return 0;
}
     66a:	0f 90       	pop	r0
     66c:	0f 90       	pop	r0
     66e:	0f 90       	pop	r0
     670:	0f 90       	pop	r0
     672:	0f 90       	pop	r0
     674:	cf 91       	pop	r28
     676:	df 91       	pop	r29
     678:	08 95       	ret

0000067a <TWI_RecChar>:
uint8_t TWI_RecChar(uint8_t I2C_CH, uint8_t SlvAdr, uint8_t* Data) {
     67a:	df 93       	push	r29
     67c:	cf 93       	push	r28
     67e:	00 d0       	rcall	.+0      	; 0x680 <TWI_RecChar+0x6>
     680:	00 d0       	rcall	.+0      	; 0x682 <TWI_RecChar+0x8>
     682:	cd b7       	in	r28, 0x3d	; 61
     684:	de b7       	in	r29, 0x3e	; 62
     686:	89 83       	std	Y+1, r24	; 0x01
     688:	6a 83       	std	Y+2, r22	; 0x02
     68a:	5c 83       	std	Y+4, r21	; 0x04
     68c:	4b 83       	std	Y+3, r20	; 0x03

	TWI_SendStartCondition(I2C_CH);
     68e:	89 81       	ldd	r24, Y+1	; 0x01
     690:	0e 94 14 02 	call	0x428	; 0x428 <TWI_SendStartCondition>
	TWI_SendSLARead(I2C_CH, SlvAdr);
     694:	89 81       	ldd	r24, Y+1	; 0x01
     696:	6a 81       	ldd	r22, Y+2	; 0x02
     698:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <TWI_SendSLARead>
	TWI_RecDataAck(I2C_CH, Data);
     69c:	2b 81       	ldd	r18, Y+3	; 0x03
     69e:	3c 81       	ldd	r19, Y+4	; 0x04
     6a0:	89 81       	ldd	r24, Y+1	; 0x01
     6a2:	b9 01       	movw	r22, r18
     6a4:	0e 94 fe 02 	call	0x5fc	; 0x5fc <TWI_RecDataAck>
	TWI_SendStopCondition(I2C_CH);
     6a8:	89 81       	ldd	r24, Y+1	; 0x01
     6aa:	0e 94 3b 02 	call	0x476	; 0x476 <TWI_SendStopCondition>
	return 0;
     6ae:	80 e0       	ldi	r24, 0x00	; 0
}
     6b0:	0f 90       	pop	r0
     6b2:	0f 90       	pop	r0
     6b4:	0f 90       	pop	r0
     6b6:	0f 90       	pop	r0
     6b8:	cf 91       	pop	r28
     6ba:	df 91       	pop	r29
     6bc:	08 95       	ret

000006be <TWI_EnableInterrupt>:
/*uint8_t TWI_Status(uint8_t I2C_CH, uint8_t * Status) {
	*(Status) = ((TWI_Status_REGISTER) & 0xf8);
	return 0;
}*/
uint8_t TWI_EnableInterrupt(uint8_t I2C_CH) {
     6be:	df 93       	push	r29
     6c0:	cf 93       	push	r28
     6c2:	0f 92       	push	r0
     6c4:	cd b7       	in	r28, 0x3d	; 61
     6c6:	de b7       	in	r29, 0x3e	; 62
     6c8:	89 83       	std	Y+1, r24	; 0x01
	Set_Bit(TWI_Control_REGISTER, TWIE); //Disable ISR for the TWI peripheral
     6ca:	a6 e5       	ldi	r26, 0x56	; 86
     6cc:	b0 e0       	ldi	r27, 0x00	; 0
     6ce:	e6 e5       	ldi	r30, 0x56	; 86
     6d0:	f0 e0       	ldi	r31, 0x00	; 0
     6d2:	80 81       	ld	r24, Z
     6d4:	81 60       	ori	r24, 0x01	; 1
     6d6:	8c 93       	st	X, r24
	return 0;
     6d8:	80 e0       	ldi	r24, 0x00	; 0

}
     6da:	0f 90       	pop	r0
     6dc:	cf 91       	pop	r28
     6de:	df 91       	pop	r29
     6e0:	08 95       	ret

000006e2 <TWI_DisableInterrupt>:
uint8_t TWI_DisableInterrupt(uint8_t I2C_CH) {
     6e2:	df 93       	push	r29
     6e4:	cf 93       	push	r28
     6e6:	0f 92       	push	r0
     6e8:	cd b7       	in	r28, 0x3d	; 61
     6ea:	de b7       	in	r29, 0x3e	; 62
     6ec:	89 83       	std	Y+1, r24	; 0x01
	Clr_Bit(TWI_Control_REGISTER, TWIE); //Disable ISR for the TWI peripheral
     6ee:	a6 e5       	ldi	r26, 0x56	; 86
     6f0:	b0 e0       	ldi	r27, 0x00	; 0
     6f2:	e6 e5       	ldi	r30, 0x56	; 86
     6f4:	f0 e0       	ldi	r31, 0x00	; 0
     6f6:	80 81       	ld	r24, Z
     6f8:	8e 7f       	andi	r24, 0xFE	; 254
     6fa:	8c 93       	st	X, r24
	return 0;
     6fc:	80 e0       	ldi	r24, 0x00	; 0

}
     6fe:	0f 90       	pop	r0
     700:	cf 91       	pop	r28
     702:	df 91       	pop	r29
     704:	08 95       	ret

00000706 <TWI_SlaOperDetermination>:
uint8_t TWI_SlaOperDetermination(uint8_t I2C_CH, uint8_t* Oper) {
     706:	df 93       	push	r29
     708:	cf 93       	push	r28
     70a:	00 d0       	rcall	.+0      	; 0x70c <TWI_SlaOperDetermination+0x6>
     70c:	0f 92       	push	r0
     70e:	cd b7       	in	r28, 0x3d	; 61
     710:	de b7       	in	r29, 0x3e	; 62
     712:	89 83       	std	Y+1, r24	; 0x01
     714:	7b 83       	std	Y+3, r23	; 0x03
     716:	6a 83       	std	Y+2, r22	; 0x02
	*Oper = Get_Bit(TWI_Data_REGISTER, 0);
     718:	e3 e2       	ldi	r30, 0x23	; 35
     71a:	f0 e0       	ldi	r31, 0x00	; 0
     71c:	80 81       	ld	r24, Z
     71e:	81 70       	andi	r24, 0x01	; 1
     720:	ea 81       	ldd	r30, Y+2	; 0x02
     722:	fb 81       	ldd	r31, Y+3	; 0x03
     724:	80 83       	st	Z, r24
	return 0;
     726:	80 e0       	ldi	r24, 0x00	; 0
}
     728:	0f 90       	pop	r0
     72a:	0f 90       	pop	r0
     72c:	0f 90       	pop	r0
     72e:	cf 91       	pop	r28
     730:	df 91       	pop	r29
     732:	08 95       	ret

00000734 <TWI_SetCallback>:
uint8_t TWI_SetCallback(uint8_t I2CNumber, Ptr_VoidFuncVoid_t Callback) {
     734:	df 93       	push	r29
     736:	cf 93       	push	r28
     738:	00 d0       	rcall	.+0      	; 0x73a <TWI_SetCallback+0x6>
     73a:	0f 92       	push	r0
     73c:	cd b7       	in	r28, 0x3d	; 61
     73e:	de b7       	in	r29, 0x3e	; 62
     740:	89 83       	std	Y+1, r24	; 0x01
     742:	7b 83       	std	Y+3, r23	; 0x03
     744:	6a 83       	std	Y+2, r22	; 0x02
	G_TWI_CALLBACK = Callback;
     746:	8a 81       	ldd	r24, Y+2	; 0x02
     748:	9b 81       	ldd	r25, Y+3	; 0x03
     74a:	90 93 f3 00 	sts	0x00F3, r25
     74e:	80 93 f2 00 	sts	0x00F2, r24
	return 0;
     752:	80 e0       	ldi	r24, 0x00	; 0
}
     754:	0f 90       	pop	r0
     756:	0f 90       	pop	r0
     758:	0f 90       	pop	r0
     75a:	cf 91       	pop	r28
     75c:	df 91       	pop	r29
     75e:	08 95       	ret

00000760 <__vector_19>:
void __vector_19(void) __attribute__((signal)); // Serial Transfer Complete
void __vector_19(void) {
     760:	1f 92       	push	r1
     762:	0f 92       	push	r0
     764:	0f b6       	in	r0, 0x3f	; 63
     766:	0f 92       	push	r0
     768:	11 24       	eor	r1, r1
     76a:	2f 93       	push	r18
     76c:	3f 93       	push	r19
     76e:	4f 93       	push	r20
     770:	5f 93       	push	r21
     772:	6f 93       	push	r22
     774:	7f 93       	push	r23
     776:	8f 93       	push	r24
     778:	9f 93       	push	r25
     77a:	af 93       	push	r26
     77c:	bf 93       	push	r27
     77e:	ef 93       	push	r30
     780:	ff 93       	push	r31
     782:	df 93       	push	r29
     784:	cf 93       	push	r28
     786:	cd b7       	in	r28, 0x3d	; 61
     788:	de b7       	in	r29, 0x3e	; 62
	G_TWI_CALLBACK();
     78a:	e0 91 f2 00 	lds	r30, 0x00F2
     78e:	f0 91 f3 00 	lds	r31, 0x00F3
     792:	09 95       	icall
}
     794:	cf 91       	pop	r28
     796:	df 91       	pop	r29
     798:	ff 91       	pop	r31
     79a:	ef 91       	pop	r30
     79c:	bf 91       	pop	r27
     79e:	af 91       	pop	r26
     7a0:	9f 91       	pop	r25
     7a2:	8f 91       	pop	r24
     7a4:	7f 91       	pop	r23
     7a6:	6f 91       	pop	r22
     7a8:	5f 91       	pop	r21
     7aa:	4f 91       	pop	r20
     7ac:	3f 91       	pop	r19
     7ae:	2f 91       	pop	r18
     7b0:	0f 90       	pop	r0
     7b2:	0f be       	out	0x3f, r0	; 63
     7b4:	0f 90       	pop	r0
     7b6:	1f 90       	pop	r1
     7b8:	18 95       	reti

000007ba <I2C_Init>:
* @param [in]  I2C_CH   -  I2C channel number.
*
* @return function error state.
*/
I2C_ERROR_state_t I2C_Init(uint8_t I2C_CH)
{
     7ba:	df 93       	push	r29
     7bc:	cf 93       	push	r28
     7be:	cd b7       	in	r28, 0x3d	; 61
     7c0:	de b7       	in	r29, 0x3e	; 62
     7c2:	28 97       	sbiw	r28, 0x08	; 8
     7c4:	0f b6       	in	r0, 0x3f	; 63
     7c6:	f8 94       	cli
     7c8:	de bf       	out	0x3e, r29	; 62
     7ca:	0f be       	out	0x3f, r0	; 63
     7cc:	cd bf       	out	0x3d, r28	; 61
     7ce:	8f 83       	std	Y+7, r24	; 0x07
   /* variable to store the addresses of the required channel */
   volatile uint8_t * ptr_I2CControlR;
   volatile uint8_t * ptr_I2CStatusR;
   volatile uint8_t * ptr_I2CBitRateR;
   
   switch(I2C_CH)
     7d0:	8f 81       	ldd	r24, Y+7	; 0x07
     7d2:	88 2f       	mov	r24, r24
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	00 97       	sbiw	r24, 0x00	; 0
     7d8:	d1 f4       	brne	.+52     	; 0x80e <I2C_Init+0x54>
   {
      #ifdef I2C_CH_0
      case I2C_CH_0:
         ptr_I2CControlR = &I2C_CONTROL_R;
     7da:	86 e5       	ldi	r24, 0x56	; 86
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	9e 83       	std	Y+6, r25	; 0x06
     7e0:	8d 83       	std	Y+5, r24	; 0x05
         ptr_I2CStatusR = &I2C_STATUS_R;
     7e2:	81 e2       	ldi	r24, 0x21	; 33
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	9c 83       	std	Y+4, r25	; 0x04
     7e8:	8b 83       	std	Y+3, r24	; 0x03
         ptr_I2CBitRateR = &I2C_BIT_RATE_R;
     7ea:	80 e2       	ldi	r24, 0x20	; 32
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	9a 83       	std	Y+2, r25	; 0x02
     7f0:	89 83       	std	Y+1, r24	; 0x01
      default:
         return E_I2C_INVALID_CH;
   }
   
   /* set pre-scalar value */
   *ptr_I2CStatusR = I2C_CH_0_PRESCALER;
     7f2:	eb 81       	ldd	r30, Y+3	; 0x03
     7f4:	fc 81       	ldd	r31, Y+4	; 0x04
     7f6:	83 e0       	ldi	r24, 0x03	; 3
     7f8:	80 83       	st	Z, r24

   /* set bit rate */
   *ptr_I2CBitRateR = I2C_CH_0_BIT_RATE;
     7fa:	e9 81       	ldd	r30, Y+1	; 0x01
     7fc:	fa 81       	ldd	r31, Y+2	; 0x02
     7fe:	87 e0       	ldi	r24, 0x07	; 7
     800:	80 83       	st	Z, r24

   /* set control configuration */
   *ptr_I2CControlR = I2C_CH_0_CONTROL_MASK;
     802:	ed 81       	ldd	r30, Y+5	; 0x05
     804:	fe 81       	ldd	r31, Y+6	; 0x06
     806:	84 e0       	ldi	r24, 0x04	; 4
     808:	80 83       	st	Z, r24
   
   /* return success message */
   return E_I2C_SUCCESS;
     80a:	18 86       	std	Y+8, r1	; 0x08
     80c:	02 c0       	rjmp	.+4      	; 0x812 <I2C_Init+0x58>
         ptr_I2CStatusR = &I2C_STATUS_R;
         ptr_I2CBitRateR = &I2C_BIT_RATE_R;
         break;
      #endif
      default:
         return E_I2C_INVALID_CH;
     80e:	82 e0       	ldi	r24, 0x02	; 2
     810:	88 87       	std	Y+8, r24	; 0x08
     812:	88 85       	ldd	r24, Y+8	; 0x08
   /* set control configuration */
   *ptr_I2CControlR = I2C_CH_0_CONTROL_MASK;
   
   /* return success message */
   return E_I2C_SUCCESS;
}
     814:	28 96       	adiw	r28, 0x08	; 8
     816:	0f b6       	in	r0, 0x3f	; 63
     818:	f8 94       	cli
     81a:	de bf       	out	0x3e, r29	; 62
     81c:	0f be       	out	0x3f, r0	; 63
     81e:	cd bf       	out	0x3d, r28	; 61
     820:	cf 91       	pop	r28
     822:	df 91       	pop	r29
     824:	08 95       	ret

00000826 <I2C_SetSlaveAddress>:
* @param [in]  SlaveAddr   -  Slave Address.
*
* @return function error state.
*/
I2C_ERROR_state_t I2C_SetSlaveAddress(uint8_t I2C_CH, uint8_t SlaveAddr)
{
     826:	df 93       	push	r29
     828:	cf 93       	push	r28
     82a:	00 d0       	rcall	.+0      	; 0x82c <I2C_SetSlaveAddress+0x6>
     82c:	00 d0       	rcall	.+0      	; 0x82e <I2C_SetSlaveAddress+0x8>
     82e:	0f 92       	push	r0
     830:	cd b7       	in	r28, 0x3d	; 61
     832:	de b7       	in	r29, 0x3e	; 62
     834:	8b 83       	std	Y+3, r24	; 0x03
     836:	6c 83       	std	Y+4, r22	; 0x04
   /* variable to store the addresses of the required channel */
   volatile uint8_t * ptr_I2CSlaveAddrR;

   switch(I2C_CH)
     838:	8b 81       	ldd	r24, Y+3	; 0x03
     83a:	88 2f       	mov	r24, r24
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	00 97       	sbiw	r24, 0x00	; 0
     840:	51 f4       	brne	.+20     	; 0x856 <I2C_SetSlaveAddress+0x30>
   {
      #ifdef I2C_CH_0
      case I2C_CH_0:
         ptr_I2CSlaveAddrR = &I2C_SLAVE_ADDR_R;
     842:	82 e2       	ldi	r24, 0x22	; 34
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	9a 83       	std	Y+2, r25	; 0x02
     848:	89 83       	std	Y+1, r24	; 0x01
      default:
         return E_I2C_INVALID_CH;
   }
   
   /* set slave address */
   *ptr_I2CSlaveAddrR = SlaveAddr;
     84a:	e9 81       	ldd	r30, Y+1	; 0x01
     84c:	fa 81       	ldd	r31, Y+2	; 0x02
     84e:	8c 81       	ldd	r24, Y+4	; 0x04
     850:	80 83       	st	Z, r24
   
   /* return success message */
   return E_I2C_SUCCESS;
     852:	1d 82       	std	Y+5, r1	; 0x05
     854:	02 c0       	rjmp	.+4      	; 0x85a <I2C_SetSlaveAddress+0x34>
      case I2C_CH_0:
         ptr_I2CSlaveAddrR = &I2C_SLAVE_ADDR_R;
         break;
      #endif
      default:
         return E_I2C_INVALID_CH;
     856:	82 e0       	ldi	r24, 0x02	; 2
     858:	8d 83       	std	Y+5, r24	; 0x05
     85a:	8d 81       	ldd	r24, Y+5	; 0x05
   /* set slave address */
   *ptr_I2CSlaveAddrR = SlaveAddr;
   
   /* return success message */
   return E_I2C_SUCCESS;
}
     85c:	0f 90       	pop	r0
     85e:	0f 90       	pop	r0
     860:	0f 90       	pop	r0
     862:	0f 90       	pop	r0
     864:	0f 90       	pop	r0
     866:	cf 91       	pop	r28
     868:	df 91       	pop	r29
     86a:	08 95       	ret

0000086c <I2C_Start>:
* @param [in]  I2C_CH      -  I2C channel number.
*
* @return function error state.
*/
I2C_ERROR_state_t I2C_Start(uint8_t I2C_CH)
{
     86c:	df 93       	push	r29
     86e:	cf 93       	push	r28
     870:	00 d0       	rcall	.+0      	; 0x872 <I2C_Start+0x6>
     872:	00 d0       	rcall	.+0      	; 0x874 <I2C_Start+0x8>
     874:	cd b7       	in	r28, 0x3d	; 61
     876:	de b7       	in	r29, 0x3e	; 62
     878:	8b 83       	std	Y+3, r24	; 0x03
   /* variable to store the addresses of the required channel */
   volatile uint8_t * ptr_I2CControlR;
   
   switch(I2C_CH)
     87a:	8b 81       	ldd	r24, Y+3	; 0x03
     87c:	88 2f       	mov	r24, r24
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	00 97       	sbiw	r24, 0x00	; 0
     882:	49 f4       	brne	.+18     	; 0x896 <I2C_Start+0x2a>
   {
      #ifdef I2C_CH_0
      case I2C_CH_0:
         ptr_I2CControlR = &I2C_CONTROL_R;
     884:	86 e5       	ldi	r24, 0x56	; 86
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	9a 83       	std	Y+2, r25	; 0x02
     88a:	89 83       	std	Y+1, r24	; 0x01
      default:
         return E_I2C_INVALID_CH;
   }
   
   /* clear interrupt flag and set start condition */
   *ptr_I2CControlR = (I2C_START_BIT | I2C_EN | I2C_INTERRUPT_FLAG);
     88c:	e9 81       	ldd	r30, Y+1	; 0x01
     88e:	fa 81       	ldd	r31, Y+2	; 0x02
     890:	84 ea       	ldi	r24, 0xA4	; 164
     892:	80 83       	st	Z, r24
     894:	03 c0       	rjmp	.+6      	; 0x89c <I2C_Start+0x30>
      case I2C_CH_0:
         ptr_I2CControlR = &I2C_CONTROL_R;
         break;
      #endif
      default:
         return E_I2C_INVALID_CH;
     896:	82 e0       	ldi	r24, 0x02	; 2
     898:	8c 83       	std	Y+4, r24	; 0x04
     89a:	06 c0       	rjmp	.+12     	; 0x8a8 <I2C_Start+0x3c>
   }
   
   /* clear interrupt flag and set start condition */
   *ptr_I2CControlR = (I2C_START_BIT | I2C_EN | I2C_INTERRUPT_FLAG);
   /* loop until interrupt flag is raised */
   while (!(*ptr_I2CControlR & I2C_INTERRUPT_FLAG));
     89c:	e9 81       	ldd	r30, Y+1	; 0x01
     89e:	fa 81       	ldd	r31, Y+2	; 0x02
     8a0:	80 81       	ld	r24, Z
     8a2:	88 23       	and	r24, r24
     8a4:	dc f7       	brge	.-10     	; 0x89c <I2C_Start+0x30>
   
   /* return success message */
   return E_I2C_SUCCESS;
     8a6:	1c 82       	std	Y+4, r1	; 0x04
     8a8:	8c 81       	ldd	r24, Y+4	; 0x04
}
     8aa:	0f 90       	pop	r0
     8ac:	0f 90       	pop	r0
     8ae:	0f 90       	pop	r0
     8b0:	0f 90       	pop	r0
     8b2:	cf 91       	pop	r28
     8b4:	df 91       	pop	r29
     8b6:	08 95       	ret

000008b8 <I2C_RepeatedStart>:
* @param [in]  I2C_CH      -  I2C channel number.
*
* @return function error state.
*/
I2C_ERROR_state_t I2C_RepeatedStart(uint8_t I2C_CH)
{
     8b8:	df 93       	push	r29
     8ba:	cf 93       	push	r28
     8bc:	00 d0       	rcall	.+0      	; 0x8be <I2C_RepeatedStart+0x6>
     8be:	00 d0       	rcall	.+0      	; 0x8c0 <I2C_RepeatedStart+0x8>
     8c0:	cd b7       	in	r28, 0x3d	; 61
     8c2:	de b7       	in	r29, 0x3e	; 62
     8c4:	8b 83       	std	Y+3, r24	; 0x03
   /* variable to store the addresses of the required channel */
   volatile uint8_t * ptr_I2CControlR;
   
   switch(I2C_CH)
     8c6:	8b 81       	ldd	r24, Y+3	; 0x03
     8c8:	88 2f       	mov	r24, r24
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	00 97       	sbiw	r24, 0x00	; 0
     8ce:	81 f4       	brne	.+32     	; 0x8f0 <I2C_RepeatedStart+0x38>
   {
      #ifdef I2C_CH_0
      case I2C_CH_0:
         ptr_I2CControlR = &I2C_CONTROL_R;
     8d0:	86 e5       	ldi	r24, 0x56	; 86
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	9a 83       	std	Y+2, r25	; 0x02
     8d6:	89 83       	std	Y+1, r24	; 0x01
      #endif
      default:
         return E_I2C_INVALID_CH;
   }
   
   *ptr_I2CControlR = I2C_EN;
     8d8:	e9 81       	ldd	r30, Y+1	; 0x01
     8da:	fa 81       	ldd	r31, Y+2	; 0x02
     8dc:	84 e0       	ldi	r24, 0x04	; 4
     8de:	80 83       	st	Z, r24
   /* clear interrupt flag and set start condition */
   *ptr_I2CControlR |= (I2C_INTERRUPT_FLAG | I2C_START_BIT);
     8e0:	e9 81       	ldd	r30, Y+1	; 0x01
     8e2:	fa 81       	ldd	r31, Y+2	; 0x02
     8e4:	80 81       	ld	r24, Z
     8e6:	80 6a       	ori	r24, 0xA0	; 160
     8e8:	e9 81       	ldd	r30, Y+1	; 0x01
     8ea:	fa 81       	ldd	r31, Y+2	; 0x02
     8ec:	80 83       	st	Z, r24
     8ee:	03 c0       	rjmp	.+6      	; 0x8f6 <I2C_RepeatedStart+0x3e>
      case I2C_CH_0:
         ptr_I2CControlR = &I2C_CONTROL_R;
         break;
      #endif
      default:
         return E_I2C_INVALID_CH;
     8f0:	82 e0       	ldi	r24, 0x02	; 2
     8f2:	8c 83       	std	Y+4, r24	; 0x04
     8f4:	06 c0       	rjmp	.+12     	; 0x902 <I2C_RepeatedStart+0x4a>
   
   *ptr_I2CControlR = I2C_EN;
   /* clear interrupt flag and set start condition */
   *ptr_I2CControlR |= (I2C_INTERRUPT_FLAG | I2C_START_BIT);
   /* loop until interrupt flag is raised */
   while (!(*ptr_I2CControlR & I2C_INTERRUPT_FLAG));
     8f6:	e9 81       	ldd	r30, Y+1	; 0x01
     8f8:	fa 81       	ldd	r31, Y+2	; 0x02
     8fa:	80 81       	ld	r24, Z
     8fc:	88 23       	and	r24, r24
     8fe:	dc f7       	brge	.-10     	; 0x8f6 <I2C_RepeatedStart+0x3e>
   
   /* return success message */
   return E_I2C_SUCCESS;
     900:	1c 82       	std	Y+4, r1	; 0x04
     902:	8c 81       	ldd	r24, Y+4	; 0x04
}
     904:	0f 90       	pop	r0
     906:	0f 90       	pop	r0
     908:	0f 90       	pop	r0
     90a:	0f 90       	pop	r0
     90c:	cf 91       	pop	r28
     90e:	df 91       	pop	r29
     910:	08 95       	ret

00000912 <I2C_Write>:
* @param [in]  Data        -  data byte to be sent.
*
* @return function error state.
*/
I2C_ERROR_state_t I2C_Write(uint8_t I2C_CH, uint8_t Data)
{
     912:	df 93       	push	r29
     914:	cf 93       	push	r28
     916:	cd b7       	in	r28, 0x3d	; 61
     918:	de b7       	in	r29, 0x3e	; 62
     91a:	27 97       	sbiw	r28, 0x07	; 7
     91c:	0f b6       	in	r0, 0x3f	; 63
     91e:	f8 94       	cli
     920:	de bf       	out	0x3e, r29	; 62
     922:	0f be       	out	0x3f, r0	; 63
     924:	cd bf       	out	0x3d, r28	; 61
     926:	8d 83       	std	Y+5, r24	; 0x05
     928:	6e 83       	std	Y+6, r22	; 0x06
   /* variable to store the addresses of the required channel */
   volatile uint8_t * ptr_I2CControlR;
   volatile uint8_t * ptr_I2CDataR;
   
   switch(I2C_CH)
     92a:	8d 81       	ldd	r24, Y+5	; 0x05
     92c:	88 2f       	mov	r24, r24
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	00 97       	sbiw	r24, 0x00	; 0
     932:	a1 f4       	brne	.+40     	; 0x95c <I2C_Write+0x4a>
   {
      #ifdef I2C_CH_0
      case I2C_CH_0:
         ptr_I2CDataR = &I2C_DATA_R;
     934:	83 e2       	ldi	r24, 0x23	; 35
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	9a 83       	std	Y+2, r25	; 0x02
     93a:	89 83       	std	Y+1, r24	; 0x01
         ptr_I2CControlR = &I2C_CONTROL_R;
     93c:	86 e5       	ldi	r24, 0x56	; 86
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	9c 83       	std	Y+4, r25	; 0x04
     942:	8b 83       	std	Y+3, r24	; 0x03
      default:
         return E_I2C_INVALID_CH;
   }
   
   /* store data in the data register */
   *ptr_I2CDataR = Data;
     944:	e9 81       	ldd	r30, Y+1	; 0x01
     946:	fa 81       	ldd	r31, Y+2	; 0x02
     948:	8e 81       	ldd	r24, Y+6	; 0x06
     94a:	80 83       	st	Z, r24
   /* start sending the data bits */
   *ptr_I2CControlR |= (I2C_INTERRUPT_FLAG | I2C_EN);
     94c:	eb 81       	ldd	r30, Y+3	; 0x03
     94e:	fc 81       	ldd	r31, Y+4	; 0x04
     950:	80 81       	ld	r24, Z
     952:	84 68       	ori	r24, 0x84	; 132
     954:	eb 81       	ldd	r30, Y+3	; 0x03
     956:	fc 81       	ldd	r31, Y+4	; 0x04
     958:	80 83       	st	Z, r24
     95a:	03 c0       	rjmp	.+6      	; 0x962 <I2C_Write+0x50>
         ptr_I2CDataR = &I2C_DATA_R;
         ptr_I2CControlR = &I2C_CONTROL_R;
         break;
      #endif
      default:
         return E_I2C_INVALID_CH;
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	8f 83       	std	Y+7, r24	; 0x07
     960:	06 c0       	rjmp	.+12     	; 0x96e <I2C_Write+0x5c>
   /* store data in the data register */
   *ptr_I2CDataR = Data;
   /* start sending the data bits */
   *ptr_I2CControlR |= (I2C_INTERRUPT_FLAG | I2C_EN);
   /* loop until interrupt flag is raised */
   while (!(*ptr_I2CControlR & I2C_INTERRUPT_FLAG));
     962:	eb 81       	ldd	r30, Y+3	; 0x03
     964:	fc 81       	ldd	r31, Y+4	; 0x04
     966:	80 81       	ld	r24, Z
     968:	88 23       	and	r24, r24
     96a:	dc f7       	brge	.-10     	; 0x962 <I2C_Write+0x50>
   
   /* return success message */
   return E_I2C_SUCCESS;
     96c:	1f 82       	std	Y+7, r1	; 0x07
     96e:	8f 81       	ldd	r24, Y+7	; 0x07
}
     970:	27 96       	adiw	r28, 0x07	; 7
     972:	0f b6       	in	r0, 0x3f	; 63
     974:	f8 94       	cli
     976:	de bf       	out	0x3e, r29	; 62
     978:	0f be       	out	0x3f, r0	; 63
     97a:	cd bf       	out	0x3d, r28	; 61
     97c:	cf 91       	pop	r28
     97e:	df 91       	pop	r29
     980:	08 95       	ret

00000982 <I2C_ReadAck>:
* @param [out] Data        -  pointer to where to store the read data.
*
* @return function error state.
*/
I2C_ERROR_state_t I2C_ReadAck(uint8_t I2C_CH, uint8_t * Data)
{
     982:	df 93       	push	r29
     984:	cf 93       	push	r28
     986:	cd b7       	in	r28, 0x3d	; 61
     988:	de b7       	in	r29, 0x3e	; 62
     98a:	28 97       	sbiw	r28, 0x08	; 8
     98c:	0f b6       	in	r0, 0x3f	; 63
     98e:	f8 94       	cli
     990:	de bf       	out	0x3e, r29	; 62
     992:	0f be       	out	0x3f, r0	; 63
     994:	cd bf       	out	0x3d, r28	; 61
     996:	8d 83       	std	Y+5, r24	; 0x05
     998:	7f 83       	std	Y+7, r23	; 0x07
     99a:	6e 83       	std	Y+6, r22	; 0x06
//
   /* variable to store the addresses of the required channel */
   volatile uint8_t * ptr_I2CControlR;
   volatile uint8_t * ptr_I2CDataR;
   
   switch(I2C_CH)
     99c:	8d 81       	ldd	r24, Y+5	; 0x05
     99e:	88 2f       	mov	r24, r24
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	00 97       	sbiw	r24, 0x00	; 0
     9a4:	81 f4       	brne	.+32     	; 0x9c6 <I2C_ReadAck+0x44>
   {
      #ifdef I2C_CH_0
      case I2C_CH_0:
         ptr_I2CDataR = &I2C_DATA_R;
     9a6:	83 e2       	ldi	r24, 0x23	; 35
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	9a 83       	std	Y+2, r25	; 0x02
     9ac:	89 83       	std	Y+1, r24	; 0x01
         ptr_I2CControlR = &I2C_CONTROL_R;
     9ae:	86 e5       	ldi	r24, 0x56	; 86
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	9c 83       	std	Y+4, r25	; 0x04
     9b4:	8b 83       	std	Y+3, r24	; 0x03
      default:
         return E_I2C_INVALID_CH;
   }
   
   /* start receiving and send ack at end. */
   *ptr_I2CControlR |= (I2C_INTERRUPT_FLAG | I2C_EN | I2C_ACK_EN);
     9b6:	eb 81       	ldd	r30, Y+3	; 0x03
     9b8:	fc 81       	ldd	r31, Y+4	; 0x04
     9ba:	80 81       	ld	r24, Z
     9bc:	84 6c       	ori	r24, 0xC4	; 196
     9be:	eb 81       	ldd	r30, Y+3	; 0x03
     9c0:	fc 81       	ldd	r31, Y+4	; 0x04
     9c2:	80 83       	st	Z, r24
     9c4:	03 c0       	rjmp	.+6      	; 0x9cc <I2C_ReadAck+0x4a>
         ptr_I2CDataR = &I2C_DATA_R;
         ptr_I2CControlR = &I2C_CONTROL_R;
         break;
      #endif
      default:
         return E_I2C_INVALID_CH;
     9c6:	82 e0       	ldi	r24, 0x02	; 2
     9c8:	88 87       	std	Y+8, r24	; 0x08
     9ca:	0c c0       	rjmp	.+24     	; 0x9e4 <I2C_ReadAck+0x62>
   }
   
   /* start receiving and send ack at end. */
   *ptr_I2CControlR |= (I2C_INTERRUPT_FLAG | I2C_EN | I2C_ACK_EN);
   /* loop until interrupt flag is raised */
   while (!(*ptr_I2CControlR & I2C_INTERRUPT_FLAG));
     9cc:	eb 81       	ldd	r30, Y+3	; 0x03
     9ce:	fc 81       	ldd	r31, Y+4	; 0x04
     9d0:	80 81       	ld	r24, Z
     9d2:	88 23       	and	r24, r24
     9d4:	dc f7       	brge	.-10     	; 0x9cc <I2C_ReadAck+0x4a>
   /* return data received */
   *Data = *ptr_I2CDataR;
     9d6:	e9 81       	ldd	r30, Y+1	; 0x01
     9d8:	fa 81       	ldd	r31, Y+2	; 0x02
     9da:	80 81       	ld	r24, Z
     9dc:	ee 81       	ldd	r30, Y+6	; 0x06
     9de:	ff 81       	ldd	r31, Y+7	; 0x07
     9e0:	80 83       	st	Z, r24
   
   /* return success message */
   return E_I2C_SUCCESS;
     9e2:	18 86       	std	Y+8, r1	; 0x08
     9e4:	88 85       	ldd	r24, Y+8	; 0x08
}
     9e6:	28 96       	adiw	r28, 0x08	; 8
     9e8:	0f b6       	in	r0, 0x3f	; 63
     9ea:	f8 94       	cli
     9ec:	de bf       	out	0x3e, r29	; 62
     9ee:	0f be       	out	0x3f, r0	; 63
     9f0:	cd bf       	out	0x3d, r28	; 61
     9f2:	cf 91       	pop	r28
     9f4:	df 91       	pop	r29
     9f6:	08 95       	ret

000009f8 <I2C_ReadNoAck>:
* @param [out] Data        -  pointer to where to store the read data.
*
* @return function error state.
*/
I2C_ERROR_state_t I2C_ReadNoAck(uint8_t I2C_CH, uint8_t * Data)
{
     9f8:	df 93       	push	r29
     9fa:	cf 93       	push	r28
     9fc:	cd b7       	in	r28, 0x3d	; 61
     9fe:	de b7       	in	r29, 0x3e	; 62
     a00:	28 97       	sbiw	r28, 0x08	; 8
     a02:	0f b6       	in	r0, 0x3f	; 63
     a04:	f8 94       	cli
     a06:	de bf       	out	0x3e, r29	; 62
     a08:	0f be       	out	0x3f, r0	; 63
     a0a:	cd bf       	out	0x3d, r28	; 61
     a0c:	8d 83       	std	Y+5, r24	; 0x05
     a0e:	7f 83       	std	Y+7, r23	; 0x07
     a10:	6e 83       	std	Y+6, r22	; 0x06
   
   /* variable to store the addresses of the required channel */
   volatile uint8_t * ptr_I2CControlR;
   volatile uint8_t * ptr_I2CDataR;
   
   switch(I2C_CH)
     a12:	8d 81       	ldd	r24, Y+5	; 0x05
     a14:	88 2f       	mov	r24, r24
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	00 97       	sbiw	r24, 0x00	; 0
     a1a:	81 f4       	brne	.+32     	; 0xa3c <I2C_ReadNoAck+0x44>
   {
      #ifdef I2C_CH_0
      case I2C_CH_0:
         ptr_I2CDataR = &I2C_DATA_R;
     a1c:	83 e2       	ldi	r24, 0x23	; 35
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	9a 83       	std	Y+2, r25	; 0x02
     a22:	89 83       	std	Y+1, r24	; 0x01
         ptr_I2CControlR = &I2C_CONTROL_R;
     a24:	86 e5       	ldi	r24, 0x56	; 86
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	9c 83       	std	Y+4, r25	; 0x04
     a2a:	8b 83       	std	Y+3, r24	; 0x03
      default:
         return E_I2C_INVALID_CH;
   }
   
   /* start receiving and don't send ack at end. */
   *ptr_I2CControlR |= (I2C_INTERRUPT_FLAG | I2C_EN);
     a2c:	eb 81       	ldd	r30, Y+3	; 0x03
     a2e:	fc 81       	ldd	r31, Y+4	; 0x04
     a30:	80 81       	ld	r24, Z
     a32:	84 68       	ori	r24, 0x84	; 132
     a34:	eb 81       	ldd	r30, Y+3	; 0x03
     a36:	fc 81       	ldd	r31, Y+4	; 0x04
     a38:	80 83       	st	Z, r24
     a3a:	03 c0       	rjmp	.+6      	; 0xa42 <I2C_ReadNoAck+0x4a>
         ptr_I2CDataR = &I2C_DATA_R;
         ptr_I2CControlR = &I2C_CONTROL_R;
         break;
      #endif
      default:
         return E_I2C_INVALID_CH;
     a3c:	82 e0       	ldi	r24, 0x02	; 2
     a3e:	88 87       	std	Y+8, r24	; 0x08
     a40:	0c c0       	rjmp	.+24     	; 0xa5a <I2C_ReadNoAck+0x62>
   }
   
   /* start receiving and don't send ack at end. */
   *ptr_I2CControlR |= (I2C_INTERRUPT_FLAG | I2C_EN);
   /* loop until interrupt flag is raised */
   while (!(*ptr_I2CControlR & I2C_INTERRUPT_FLAG));
     a42:	eb 81       	ldd	r30, Y+3	; 0x03
     a44:	fc 81       	ldd	r31, Y+4	; 0x04
     a46:	80 81       	ld	r24, Z
     a48:	88 23       	and	r24, r24
     a4a:	dc f7       	brge	.-10     	; 0xa42 <I2C_ReadNoAck+0x4a>
   /* return data received */
   *Data = *ptr_I2CDataR;
     a4c:	e9 81       	ldd	r30, Y+1	; 0x01
     a4e:	fa 81       	ldd	r31, Y+2	; 0x02
     a50:	80 81       	ld	r24, Z
     a52:	ee 81       	ldd	r30, Y+6	; 0x06
     a54:	ff 81       	ldd	r31, Y+7	; 0x07
     a56:	80 83       	st	Z, r24
   
   /* return success message */
   return E_I2C_SUCCESS;
     a58:	18 86       	std	Y+8, r1	; 0x08
     a5a:	88 85       	ldd	r24, Y+8	; 0x08
}
     a5c:	28 96       	adiw	r28, 0x08	; 8
     a5e:	0f b6       	in	r0, 0x3f	; 63
     a60:	f8 94       	cli
     a62:	de bf       	out	0x3e, r29	; 62
     a64:	0f be       	out	0x3f, r0	; 63
     a66:	cd bf       	out	0x3d, r28	; 61
     a68:	cf 91       	pop	r28
     a6a:	df 91       	pop	r29
     a6c:	08 95       	ret

00000a6e <I2C_Stop>:
* @param [in]  I2C_CH      -  I2C channel number.
*
* @return function error state.
*/
I2C_ERROR_state_t I2C_Stop(uint8_t I2C_CH)
{
     a6e:	df 93       	push	r29
     a70:	cf 93       	push	r28
     a72:	00 d0       	rcall	.+0      	; 0xa74 <I2C_Stop+0x6>
     a74:	00 d0       	rcall	.+0      	; 0xa76 <I2C_Stop+0x8>
     a76:	cd b7       	in	r28, 0x3d	; 61
     a78:	de b7       	in	r29, 0x3e	; 62
     a7a:	8b 83       	std	Y+3, r24	; 0x03
   /* variable to store the addresses of the required channel */
   volatile uint8_t * ptr_I2CControlR;
   
   switch(I2C_CH)
     a7c:	8b 81       	ldd	r24, Y+3	; 0x03
     a7e:	88 2f       	mov	r24, r24
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	00 97       	sbiw	r24, 0x00	; 0
     a84:	49 f4       	brne	.+18     	; 0xa98 <I2C_Stop+0x2a>
   {
      #ifdef I2C_CH_0
      case I2C_CH_0:
         ptr_I2CControlR = &I2C_CONTROL_R;
     a86:	86 e5       	ldi	r24, 0x56	; 86
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	9a 83       	std	Y+2, r25	; 0x02
     a8c:	89 83       	std	Y+1, r24	; 0x01
      default:
         return E_I2C_INVALID_CH;
   }
   
   /* set stop condition */
   *ptr_I2CControlR = (I2C_INTERRUPT_FLAG | I2C_EN | I2C_STOP_BIT);
     a8e:	e9 81       	ldd	r30, Y+1	; 0x01
     a90:	fa 81       	ldd	r31, Y+2	; 0x02
     a92:	84 e9       	ldi	r24, 0x94	; 148
     a94:	80 83       	st	Z, r24
     a96:	03 c0       	rjmp	.+6      	; 0xa9e <I2C_Stop+0x30>
      case I2C_CH_0:
         ptr_I2CControlR = &I2C_CONTROL_R;
         break;
      #endif
      default:
         return E_I2C_INVALID_CH;
     a98:	82 e0       	ldi	r24, 0x02	; 2
     a9a:	8c 83       	std	Y+4, r24	; 0x04
     a9c:	0a c0       	rjmp	.+20     	; 0xab2 <I2C_Stop+0x44>
   }
   
   /* set stop condition */
   *ptr_I2CControlR = (I2C_INTERRUPT_FLAG | I2C_EN | I2C_STOP_BIT);
   
   while (*ptr_I2CControlR & I2C_STOP_BIT);
     a9e:	e9 81       	ldd	r30, Y+1	; 0x01
     aa0:	fa 81       	ldd	r31, Y+2	; 0x02
     aa2:	80 81       	ld	r24, Z
     aa4:	88 2f       	mov	r24, r24
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	80 71       	andi	r24, 0x10	; 16
     aaa:	90 70       	andi	r25, 0x00	; 0
     aac:	00 97       	sbiw	r24, 0x00	; 0
     aae:	b9 f7       	brne	.-18     	; 0xa9e <I2C_Stop+0x30>
   /* return success message */
   return E_I2C_SUCCESS;
     ab0:	1c 82       	std	Y+4, r1	; 0x04
     ab2:	8c 81       	ldd	r24, Y+4	; 0x04
}
     ab4:	0f 90       	pop	r0
     ab6:	0f 90       	pop	r0
     ab8:	0f 90       	pop	r0
     aba:	0f 90       	pop	r0
     abc:	cf 91       	pop	r28
     abe:	df 91       	pop	r29
     ac0:	08 95       	ret

00000ac2 <I2C_Status>:
* @param [out] Status      -  pointer to where to store the status of I2C.
*
* @return function error state.
*/
I2C_ERROR_state_t I2C_Status(uint8_t I2C_CH, uint8_t * Status)
{
     ac2:	df 93       	push	r29
     ac4:	cf 93       	push	r28
     ac6:	00 d0       	rcall	.+0      	; 0xac8 <I2C_Status+0x6>
     ac8:	00 d0       	rcall	.+0      	; 0xaca <I2C_Status+0x8>
     aca:	00 d0       	rcall	.+0      	; 0xacc <I2C_Status+0xa>
     acc:	cd b7       	in	r28, 0x3d	; 61
     ace:	de b7       	in	r29, 0x3e	; 62
     ad0:	8b 83       	std	Y+3, r24	; 0x03
     ad2:	7d 83       	std	Y+5, r23	; 0x05
     ad4:	6c 83       	std	Y+4, r22	; 0x04
//   }
   
   /* variable to store the addresses of the required channel */
   volatile uint8_t * ptr_I2CStatusR;
   
   switch(I2C_CH)
     ad6:	8b 81       	ldd	r24, Y+3	; 0x03
     ad8:	88 2f       	mov	r24, r24
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	00 97       	sbiw	r24, 0x00	; 0
     ade:	69 f4       	brne	.+26     	; 0xafa <I2C_Status+0x38>
   {
      #ifdef I2C_CH_0
      case I2C_CH_0:
         ptr_I2CStatusR = &I2C_STATUS_R;
     ae0:	81 e2       	ldi	r24, 0x21	; 33
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	9a 83       	std	Y+2, r25	; 0x02
     ae6:	89 83       	std	Y+1, r24	; 0x01
      default:
         return E_I2C_INVALID_CH;
   }
   
   /* return status */
   *Status = (*ptr_I2CStatusR & I2C_STATUS_BITS);
     ae8:	e9 81       	ldd	r30, Y+1	; 0x01
     aea:	fa 81       	ldd	r31, Y+2	; 0x02
     aec:	80 81       	ld	r24, Z
     aee:	88 7f       	andi	r24, 0xF8	; 248
     af0:	ec 81       	ldd	r30, Y+4	; 0x04
     af2:	fd 81       	ldd	r31, Y+5	; 0x05
     af4:	80 83       	st	Z, r24
         
   /* return success message */
   return E_I2C_SUCCESS;
     af6:	1e 82       	std	Y+6, r1	; 0x06
     af8:	02 c0       	rjmp	.+4      	; 0xafe <I2C_Status+0x3c>
      case I2C_CH_0:
         ptr_I2CStatusR = &I2C_STATUS_R;
         break;
      #endif
      default:
         return E_I2C_INVALID_CH;
     afa:	82 e0       	ldi	r24, 0x02	; 2
     afc:	8e 83       	std	Y+6, r24	; 0x06
     afe:	8e 81       	ldd	r24, Y+6	; 0x06
   /* return status */
   *Status = (*ptr_I2CStatusR & I2C_STATUS_BITS);
         
   /* return success message */
   return E_I2C_SUCCESS;
}
     b00:	26 96       	adiw	r28, 0x06	; 6
     b02:	0f b6       	in	r0, 0x3f	; 63
     b04:	f8 94       	cli
     b06:	de bf       	out	0x3e, r29	; 62
     b08:	0f be       	out	0x3f, r0	; 63
     b0a:	cd bf       	out	0x3d, r28	; 61
     b0c:	cf 91       	pop	r28
     b0e:	df 91       	pop	r29
     b10:	08 95       	ret

00000b12 <I2C_EnableInterrupt>:
* @param [in]  I2C_CH      -  I2C channel number.
*
* @return function error state.
*/
I2C_ERROR_state_t I2C_EnableInterrupt(uint8_t I2C_CH)
{
     b12:	df 93       	push	r29
     b14:	cf 93       	push	r28
     b16:	00 d0       	rcall	.+0      	; 0xb18 <I2C_EnableInterrupt+0x6>
     b18:	00 d0       	rcall	.+0      	; 0xb1a <I2C_EnableInterrupt+0x8>
     b1a:	cd b7       	in	r28, 0x3d	; 61
     b1c:	de b7       	in	r29, 0x3e	; 62
     b1e:	8b 83       	std	Y+3, r24	; 0x03
   /* variable to store the addresses of the required channel */
   volatile uint8_t * ptr_I2CControlR;
   
   /* get the required I2C data */
   switch(I2C_CH)
     b20:	8b 81       	ldd	r24, Y+3	; 0x03
     b22:	88 2f       	mov	r24, r24
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	00 97       	sbiw	r24, 0x00	; 0
     b28:	69 f4       	brne	.+26     	; 0xb44 <I2C_EnableInterrupt+0x32>
   {
      #ifdef I2C_CH_0
      case I2C_CH_0:
         ptr_I2CControlR = &I2C_CONTROL_R;
     b2a:	86 e5       	ldi	r24, 0x56	; 86
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	9a 83       	std	Y+2, r25	; 0x02
     b30:	89 83       	std	Y+1, r24	; 0x01
      default:
         return E_I2C_INVALID_CH;
   }
   
   /* enable interrupt */
   *ptr_I2CControlR |= I2C_INTERRUPT_EN;
     b32:	e9 81       	ldd	r30, Y+1	; 0x01
     b34:	fa 81       	ldd	r31, Y+2	; 0x02
     b36:	80 81       	ld	r24, Z
     b38:	81 60       	ori	r24, 0x01	; 1
     b3a:	e9 81       	ldd	r30, Y+1	; 0x01
     b3c:	fa 81       	ldd	r31, Y+2	; 0x02
     b3e:	80 83       	st	Z, r24
   
   /* return success message */
   return E_I2C_SUCCESS;
     b40:	1c 82       	std	Y+4, r1	; 0x04
     b42:	02 c0       	rjmp	.+4      	; 0xb48 <I2C_EnableInterrupt+0x36>
      case I2C_CH_0:
         ptr_I2CControlR = &I2C_CONTROL_R;
         break;
      #endif
      default:
         return E_I2C_INVALID_CH;
     b44:	82 e0       	ldi	r24, 0x02	; 2
     b46:	8c 83       	std	Y+4, r24	; 0x04
     b48:	8c 81       	ldd	r24, Y+4	; 0x04
   /* enable interrupt */
   *ptr_I2CControlR |= I2C_INTERRUPT_EN;
   
   /* return success message */
   return E_I2C_SUCCESS;
}
     b4a:	0f 90       	pop	r0
     b4c:	0f 90       	pop	r0
     b4e:	0f 90       	pop	r0
     b50:	0f 90       	pop	r0
     b52:	cf 91       	pop	r28
     b54:	df 91       	pop	r29
     b56:	08 95       	ret

00000b58 <I2C_DisableInterrupt>:
* @param [in]  I2C_CH      -  I2C channel number.
*
* @return function error state.
*/
I2C_ERROR_state_t I2C_DisableInterrupt(uint8_t I2C_CH)
{
     b58:	df 93       	push	r29
     b5a:	cf 93       	push	r28
     b5c:	00 d0       	rcall	.+0      	; 0xb5e <I2C_DisableInterrupt+0x6>
     b5e:	00 d0       	rcall	.+0      	; 0xb60 <I2C_DisableInterrupt+0x8>
     b60:	cd b7       	in	r28, 0x3d	; 61
     b62:	de b7       	in	r29, 0x3e	; 62
     b64:	8b 83       	std	Y+3, r24	; 0x03
   /* variable to store the addresses of the required channel */
   volatile uint8_t * ptr_I2CControlR;
   
   /* get the required I2C data */
   switch(I2C_CH)
     b66:	8b 81       	ldd	r24, Y+3	; 0x03
     b68:	88 2f       	mov	r24, r24
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	00 97       	sbiw	r24, 0x00	; 0
     b6e:	69 f4       	brne	.+26     	; 0xb8a <I2C_DisableInterrupt+0x32>
   {
      #ifdef I2C_CH_0
      case I2C_CH_0:
         ptr_I2CControlR = &I2C_CONTROL_R;
     b70:	86 e5       	ldi	r24, 0x56	; 86
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	9a 83       	std	Y+2, r25	; 0x02
     b76:	89 83       	std	Y+1, r24	; 0x01
      default:
         return E_I2C_INVALID_CH;
   }
   
   /* disable interrupt */
   *ptr_I2CControlR &= ~(I2C_INTERRUPT_EN);
     b78:	e9 81       	ldd	r30, Y+1	; 0x01
     b7a:	fa 81       	ldd	r31, Y+2	; 0x02
     b7c:	80 81       	ld	r24, Z
     b7e:	8e 7f       	andi	r24, 0xFE	; 254
     b80:	e9 81       	ldd	r30, Y+1	; 0x01
     b82:	fa 81       	ldd	r31, Y+2	; 0x02
     b84:	80 83       	st	Z, r24
   
   /* return success message */
   return E_I2C_SUCCESS;
     b86:	1c 82       	std	Y+4, r1	; 0x04
     b88:	02 c0       	rjmp	.+4      	; 0xb8e <I2C_DisableInterrupt+0x36>
      case I2C_CH_0:
         ptr_I2CControlR = &I2C_CONTROL_R;
         break;
      #endif
      default:
         return E_I2C_INVALID_CH;
     b8a:	82 e0       	ldi	r24, 0x02	; 2
     b8c:	8c 83       	std	Y+4, r24	; 0x04
     b8e:	8c 81       	ldd	r24, Y+4	; 0x04
   /* disable interrupt */
   *ptr_I2CControlR &= ~(I2C_INTERRUPT_EN);
   
   /* return success message */
   return E_I2C_SUCCESS;
}
     b90:	0f 90       	pop	r0
     b92:	0f 90       	pop	r0
     b94:	0f 90       	pop	r0
     b96:	0f 90       	pop	r0
     b98:	cf 91       	pop	r28
     b9a:	df 91       	pop	r29
     b9c:	08 95       	ret

00000b9e <I2C_SetCallback>:
* @param [in]  Callback    -  address of the callback function.
*
* @return function error state.
*/
I2C_ERROR_state_t I2C_SetCallback(uint8_t I2C_CH, Ptr_VoidFuncVoid_t Callback)
{
     b9e:	df 93       	push	r29
     ba0:	cf 93       	push	r28
     ba2:	00 d0       	rcall	.+0      	; 0xba4 <I2C_SetCallback+0x6>
     ba4:	00 d0       	rcall	.+0      	; 0xba6 <I2C_SetCallback+0x8>
     ba6:	0f 92       	push	r0
     ba8:	cd b7       	in	r28, 0x3d	; 61
     baa:	de b7       	in	r29, 0x3e	; 62
     bac:	8a 83       	std	Y+2, r24	; 0x02
     bae:	7c 83       	std	Y+4, r23	; 0x04
     bb0:	6b 83       	std	Y+3, r22	; 0x03
   
   /* variable to store the addresses of the required channel */
   volatile uint8_t u8_I2CIndex;
   
   /* get the required I2C data */
   switch(I2C_CH)
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	88 2f       	mov	r24, r24
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	00 97       	sbiw	r24, 0x00	; 0
     bba:	79 f4       	brne	.+30     	; 0xbda <I2C_SetCallback+0x3c>
   {
      #ifdef I2C_CH_0
      case I2C_CH_0:
         u8_I2CIndex = I2C_CH_0;
     bbc:	19 82       	std	Y+1, r1	; 0x01
      default:
         return E_I2C_INVALID_CH;
   }
   
   /* set callback function to the required channel */
   g_Callback[u8_I2CIndex] = Callback;
     bbe:	89 81       	ldd	r24, Y+1	; 0x01
     bc0:	88 2f       	mov	r24, r24
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	88 0f       	add	r24, r24
     bc6:	99 1f       	adc	r25, r25
     bc8:	fc 01       	movw	r30, r24
     bca:	e2 52       	subi	r30, 0x22	; 34
     bcc:	ff 4f       	sbci	r31, 0xFF	; 255
     bce:	8b 81       	ldd	r24, Y+3	; 0x03
     bd0:	9c 81       	ldd	r25, Y+4	; 0x04
     bd2:	91 83       	std	Z+1, r25	; 0x01
     bd4:	80 83       	st	Z, r24
   
   /* return success status */
   return E_I2C_SUCCESS;
     bd6:	1d 82       	std	Y+5, r1	; 0x05
     bd8:	02 c0       	rjmp	.+4      	; 0xbde <I2C_SetCallback+0x40>
      case I2C_CH_0:
         u8_I2CIndex = I2C_CH_0;
         break;
      #endif
      default:
         return E_I2C_INVALID_CH;
     bda:	82 e0       	ldi	r24, 0x02	; 2
     bdc:	8d 83       	std	Y+5, r24	; 0x05
     bde:	8d 81       	ldd	r24, Y+5	; 0x05
   /* set callback function to the required channel */
   g_Callback[u8_I2CIndex] = Callback;
   
   /* return success status */
   return E_I2C_SUCCESS;
}
     be0:	0f 90       	pop	r0
     be2:	0f 90       	pop	r0
     be4:	0f 90       	pop	r0
     be6:	0f 90       	pop	r0
     be8:	0f 90       	pop	r0
     bea:	cf 91       	pop	r28
     bec:	df 91       	pop	r29
     bee:	08 95       	ret

00000bf0 <GI_EnableGI>:
 */
#include"globalInterruptReg.h"
#include"globalInterrupt.h"

void GI_EnableGI (void)
{
     bf0:	df 93       	push	r29
     bf2:	cf 93       	push	r28
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(SREG_REGISTER,I_BIT);
     bf8:	af e5       	ldi	r26, 0x5F	; 95
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	ef e5       	ldi	r30, 0x5F	; 95
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	80 68       	ori	r24, 0x80	; 128
     c04:	8c 93       	st	X, r24
}
     c06:	cf 91       	pop	r28
     c08:	df 91       	pop	r29
     c0a:	08 95       	ret

00000c0c <GI_DisableGI>:


void GI_DisableGI (void)
{
     c0c:	df 93       	push	r29
     c0e:	cf 93       	push	r28
     c10:	cd b7       	in	r28, 0x3d	; 61
     c12:	de b7       	in	r29, 0x3e	; 62
	Clr_Bit(SREG_REGISTER, I_BIT);
     c14:	af e5       	ldi	r26, 0x5F	; 95
     c16:	b0 e0       	ldi	r27, 0x00	; 0
     c18:	ef e5       	ldi	r30, 0x5F	; 95
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	8f 77       	andi	r24, 0x7F	; 127
     c20:	8c 93       	st	X, r24
}
     c22:	cf 91       	pop	r28
     c24:	df 91       	pop	r29
     c26:	08 95       	ret

00000c28 <EX_vdDisable>:
#include"externalInterruptReg.h"
#include"externalInterrupt.h"


void EX_vdDisable(uint8_t CopyInterrupt)
{
     c28:	df 93       	push	r29
     c2a:	cf 93       	push	r28
     c2c:	00 d0       	rcall	.+0      	; 0xc2e <EX_vdDisable+0x6>
     c2e:	0f 92       	push	r0
     c30:	cd b7       	in	r28, 0x3d	; 61
     c32:	de b7       	in	r29, 0x3e	; 62
     c34:	89 83       	std	Y+1, r24	; 0x01
	if(CopyInterrupt <= EX_INT2)
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	83 30       	cpi	r24, 0x03	; 3
     c3a:	50 f5       	brcc	.+84     	; 0xc90 <EX_vdDisable+0x68>
	{
		switch (CopyInterrupt)
     c3c:	89 81       	ldd	r24, Y+1	; 0x01
     c3e:	28 2f       	mov	r18, r24
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	3b 83       	std	Y+3, r19	; 0x03
     c44:	2a 83       	std	Y+2, r18	; 0x02
     c46:	8a 81       	ldd	r24, Y+2	; 0x02
     c48:	9b 81       	ldd	r25, Y+3	; 0x03
     c4a:	81 30       	cpi	r24, 0x01	; 1
     c4c:	91 05       	cpc	r25, r1
     c4e:	89 f0       	breq	.+34     	; 0xc72 <EX_vdDisable+0x4a>
     c50:	2a 81       	ldd	r18, Y+2	; 0x02
     c52:	3b 81       	ldd	r19, Y+3	; 0x03
     c54:	22 30       	cpi	r18, 0x02	; 2
     c56:	31 05       	cpc	r19, r1
     c58:	a1 f0       	breq	.+40     	; 0xc82 <EX_vdDisable+0x5a>
     c5a:	8a 81       	ldd	r24, Y+2	; 0x02
     c5c:	9b 81       	ldd	r25, Y+3	; 0x03
     c5e:	00 97       	sbiw	r24, 0x00	; 0
     c60:	b9 f4       	brne	.+46     	; 0xc90 <EX_vdDisable+0x68>
		{
		case EX_INT0:
			Clr_Bit(GICR,6);
     c62:	ab e5       	ldi	r26, 0x5B	; 91
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	eb e5       	ldi	r30, 0x5B	; 91
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	80 81       	ld	r24, Z
     c6c:	8f 7b       	andi	r24, 0xBF	; 191
     c6e:	8c 93       	st	X, r24
     c70:	0f c0       	rjmp	.+30     	; 0xc90 <EX_vdDisable+0x68>
			break;
		case EX_INT1:
			Clr_Bit(GICR,7);
     c72:	ab e5       	ldi	r26, 0x5B	; 91
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	eb e5       	ldi	r30, 0x5B	; 91
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	8f 77       	andi	r24, 0x7F	; 127
     c7e:	8c 93       	st	X, r24
     c80:	07 c0       	rjmp	.+14     	; 0xc90 <EX_vdDisable+0x68>
			break;
		case EX_INT2:
			Clr_Bit(GICR,5);
     c82:	ab e5       	ldi	r26, 0x5B	; 91
     c84:	b0 e0       	ldi	r27, 0x00	; 0
     c86:	eb e5       	ldi	r30, 0x5B	; 91
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	8f 7d       	andi	r24, 0xDF	; 223
     c8e:	8c 93       	st	X, r24
			break;
		default:
			break;
		}
	}
}
     c90:	0f 90       	pop	r0
     c92:	0f 90       	pop	r0
     c94:	0f 90       	pop	r0
     c96:	cf 91       	pop	r28
     c98:	df 91       	pop	r29
     c9a:	08 95       	ret

00000c9c <EX_vdConfigInterrupt>:

void EX_vdConfigInterrupt(uint8_t CopyInterrupt , uint8_t CopyControlSense)
{
     c9c:	df 93       	push	r29
     c9e:	cf 93       	push	r28
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62
     ca4:	2a 97       	sbiw	r28, 0x0a	; 10
     ca6:	0f b6       	in	r0, 0x3f	; 63
     ca8:	f8 94       	cli
     caa:	de bf       	out	0x3e, r29	; 62
     cac:	0f be       	out	0x3f, r0	; 63
     cae:	cd bf       	out	0x3d, r28	; 61
     cb0:	89 83       	std	Y+1, r24	; 0x01
     cb2:	6a 83       	std	Y+2, r22	; 0x02
	if(CopyInterrupt <= EX_INT2 && CopyControlSense <= EX_SENSE_LOGIACL_CHANGE)
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	83 30       	cpi	r24, 0x03	; 3
     cb8:	08 f0       	brcs	.+2      	; 0xcbc <EX_vdConfigInterrupt+0x20>
     cba:	03 c1       	rjmp	.+518    	; 0xec2 <EX_vdConfigInterrupt+0x226>
     cbc:	8a 81       	ldd	r24, Y+2	; 0x02
     cbe:	84 30       	cpi	r24, 0x04	; 4
     cc0:	08 f0       	brcs	.+2      	; 0xcc4 <EX_vdConfigInterrupt+0x28>
     cc2:	ff c0       	rjmp	.+510    	; 0xec2 <EX_vdConfigInterrupt+0x226>
	{
		switch (CopyInterrupt)
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	3a 87       	std	Y+10, r19	; 0x0a
     ccc:	29 87       	std	Y+9, r18	; 0x09
     cce:	89 85       	ldd	r24, Y+9	; 0x09
     cd0:	9a 85       	ldd	r25, Y+10	; 0x0a
     cd2:	81 30       	cpi	r24, 0x01	; 1
     cd4:	91 05       	cpc	r25, r1
     cd6:	09 f4       	brne	.+2      	; 0xcda <EX_vdConfigInterrupt+0x3e>
     cd8:	6d c0       	rjmp	.+218    	; 0xdb4 <EX_vdConfigInterrupt+0x118>
     cda:	29 85       	ldd	r18, Y+9	; 0x09
     cdc:	3a 85       	ldd	r19, Y+10	; 0x0a
     cde:	22 30       	cpi	r18, 0x02	; 2
     ce0:	31 05       	cpc	r19, r1
     ce2:	09 f4       	brne	.+2      	; 0xce6 <EX_vdConfigInterrupt+0x4a>
     ce4:	c9 c0       	rjmp	.+402    	; 0xe78 <EX_vdConfigInterrupt+0x1dc>
     ce6:	89 85       	ldd	r24, Y+9	; 0x09
     ce8:	9a 85       	ldd	r25, Y+10	; 0x0a
     cea:	00 97       	sbiw	r24, 0x00	; 0
     cec:	09 f0       	breq	.+2      	; 0xcf0 <EX_vdConfigInterrupt+0x54>
     cee:	e9 c0       	rjmp	.+466    	; 0xec2 <EX_vdConfigInterrupt+0x226>
		{
			case EX_INT0:
				Set_Bit(GICR,6);
     cf0:	ab e5       	ldi	r26, 0x5B	; 91
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	eb e5       	ldi	r30, 0x5B	; 91
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	80 64       	ori	r24, 0x40	; 64
     cfc:	8c 93       	st	X, r24
				switch (CopyControlSense)
     cfe:	8a 81       	ldd	r24, Y+2	; 0x02
     d00:	28 2f       	mov	r18, r24
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	38 87       	std	Y+8, r19	; 0x08
     d06:	2f 83       	std	Y+7, r18	; 0x07
     d08:	8f 81       	ldd	r24, Y+7	; 0x07
     d0a:	98 85       	ldd	r25, Y+8	; 0x08
     d0c:	81 30       	cpi	r24, 0x01	; 1
     d0e:	91 05       	cpc	r25, r1
     d10:	21 f1       	breq	.+72     	; 0xd5a <EX_vdConfigInterrupt+0xbe>
     d12:	2f 81       	ldd	r18, Y+7	; 0x07
     d14:	38 85       	ldd	r19, Y+8	; 0x08
     d16:	22 30       	cpi	r18, 0x02	; 2
     d18:	31 05       	cpc	r19, r1
     d1a:	2c f4       	brge	.+10     	; 0xd26 <EX_vdConfigInterrupt+0x8a>
     d1c:	8f 81       	ldd	r24, Y+7	; 0x07
     d1e:	98 85       	ldd	r25, Y+8	; 0x08
     d20:	00 97       	sbiw	r24, 0x00	; 0
     d22:	61 f0       	breq	.+24     	; 0xd3c <EX_vdConfigInterrupt+0xa0>
     d24:	ce c0       	rjmp	.+412    	; 0xec2 <EX_vdConfigInterrupt+0x226>
     d26:	2f 81       	ldd	r18, Y+7	; 0x07
     d28:	38 85       	ldd	r19, Y+8	; 0x08
     d2a:	22 30       	cpi	r18, 0x02	; 2
     d2c:	31 05       	cpc	r19, r1
     d2e:	21 f1       	breq	.+72     	; 0xd78 <EX_vdConfigInterrupt+0xdc>
     d30:	8f 81       	ldd	r24, Y+7	; 0x07
     d32:	98 85       	ldd	r25, Y+8	; 0x08
     d34:	83 30       	cpi	r24, 0x03	; 3
     d36:	91 05       	cpc	r25, r1
     d38:	71 f1       	breq	.+92     	; 0xd96 <EX_vdConfigInterrupt+0xfa>
     d3a:	c3 c0       	rjmp	.+390    	; 0xec2 <EX_vdConfigInterrupt+0x226>
				{
					case EX_SENSE_FALLING_EDGE:
						Clr_Bit(MCUCR,0);
     d3c:	a5 e5       	ldi	r26, 0x55	; 85
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	e5 e5       	ldi	r30, 0x55	; 85
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	8e 7f       	andi	r24, 0xFE	; 254
     d48:	8c 93       	st	X, r24
						Set_Bit(MCUCR,1);
     d4a:	a5 e5       	ldi	r26, 0x55	; 85
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	e5 e5       	ldi	r30, 0x55	; 85
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	82 60       	ori	r24, 0x02	; 2
     d56:	8c 93       	st	X, r24
     d58:	b4 c0       	rjmp	.+360    	; 0xec2 <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_RAISING_EDGE:
						Set_Bit(MCUCR,0);
     d5a:	a5 e5       	ldi	r26, 0x55	; 85
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	e5 e5       	ldi	r30, 0x55	; 85
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	81 60       	ori	r24, 0x01	; 1
     d66:	8c 93       	st	X, r24
						Set_Bit(MCUCR,1);
     d68:	a5 e5       	ldi	r26, 0x55	; 85
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
     d6c:	e5 e5       	ldi	r30, 0x55	; 85
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	80 81       	ld	r24, Z
     d72:	82 60       	ori	r24, 0x02	; 2
     d74:	8c 93       	st	X, r24
     d76:	a5 c0       	rjmp	.+330    	; 0xec2 <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_LOW_LEVEL:
						Clr_Bit(MCUCR,0);
     d78:	a5 e5       	ldi	r26, 0x55	; 85
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	e5 e5       	ldi	r30, 0x55	; 85
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	8e 7f       	andi	r24, 0xFE	; 254
     d84:	8c 93       	st	X, r24
						Clr_Bit(MCUCR,1);
     d86:	a5 e5       	ldi	r26, 0x55	; 85
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e5 e5       	ldi	r30, 0x55	; 85
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	8d 7f       	andi	r24, 0xFD	; 253
     d92:	8c 93       	st	X, r24
     d94:	96 c0       	rjmp	.+300    	; 0xec2 <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_LOGIACL_CHANGE:
						Set_Bit(MCUCR,0);
     d96:	a5 e5       	ldi	r26, 0x55	; 85
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	e5 e5       	ldi	r30, 0x55	; 85
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	81 60       	ori	r24, 0x01	; 1
     da2:	8c 93       	st	X, r24
						Clr_Bit(MCUCR,1);
     da4:	a5 e5       	ldi	r26, 0x55	; 85
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	e5 e5       	ldi	r30, 0x55	; 85
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	8d 7f       	andi	r24, 0xFD	; 253
     db0:	8c 93       	st	X, r24
     db2:	87 c0       	rjmp	.+270    	; 0xec2 <EX_vdConfigInterrupt+0x226>
						break;
				}
				break;
			case EX_INT1:
				Set_Bit(GICR,7);
     db4:	ab e5       	ldi	r26, 0x5B	; 91
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	eb e5       	ldi	r30, 0x5B	; 91
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	80 68       	ori	r24, 0x80	; 128
     dc0:	8c 93       	st	X, r24
				switch (CopyControlSense)
     dc2:	8a 81       	ldd	r24, Y+2	; 0x02
     dc4:	28 2f       	mov	r18, r24
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	3e 83       	std	Y+6, r19	; 0x06
     dca:	2d 83       	std	Y+5, r18	; 0x05
     dcc:	8d 81       	ldd	r24, Y+5	; 0x05
     dce:	9e 81       	ldd	r25, Y+6	; 0x06
     dd0:	81 30       	cpi	r24, 0x01	; 1
     dd2:	91 05       	cpc	r25, r1
     dd4:	21 f1       	breq	.+72     	; 0xe1e <EX_vdConfigInterrupt+0x182>
     dd6:	2d 81       	ldd	r18, Y+5	; 0x05
     dd8:	3e 81       	ldd	r19, Y+6	; 0x06
     dda:	22 30       	cpi	r18, 0x02	; 2
     ddc:	31 05       	cpc	r19, r1
     dde:	2c f4       	brge	.+10     	; 0xdea <EX_vdConfigInterrupt+0x14e>
     de0:	8d 81       	ldd	r24, Y+5	; 0x05
     de2:	9e 81       	ldd	r25, Y+6	; 0x06
     de4:	00 97       	sbiw	r24, 0x00	; 0
     de6:	61 f0       	breq	.+24     	; 0xe00 <EX_vdConfigInterrupt+0x164>
     de8:	6c c0       	rjmp	.+216    	; 0xec2 <EX_vdConfigInterrupt+0x226>
     dea:	2d 81       	ldd	r18, Y+5	; 0x05
     dec:	3e 81       	ldd	r19, Y+6	; 0x06
     dee:	22 30       	cpi	r18, 0x02	; 2
     df0:	31 05       	cpc	r19, r1
     df2:	21 f1       	breq	.+72     	; 0xe3c <EX_vdConfigInterrupt+0x1a0>
     df4:	8d 81       	ldd	r24, Y+5	; 0x05
     df6:	9e 81       	ldd	r25, Y+6	; 0x06
     df8:	83 30       	cpi	r24, 0x03	; 3
     dfa:	91 05       	cpc	r25, r1
     dfc:	71 f1       	breq	.+92     	; 0xe5a <EX_vdConfigInterrupt+0x1be>
     dfe:	61 c0       	rjmp	.+194    	; 0xec2 <EX_vdConfigInterrupt+0x226>
				{
					case EX_SENSE_FALLING_EDGE:
						Clr_Bit(MCUCR,2);
     e00:	a5 e5       	ldi	r26, 0x55	; 85
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	e5 e5       	ldi	r30, 0x55	; 85
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	8b 7f       	andi	r24, 0xFB	; 251
     e0c:	8c 93       	st	X, r24
						Set_Bit(MCUCR,3);
     e0e:	a5 e5       	ldi	r26, 0x55	; 85
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	e5 e5       	ldi	r30, 0x55	; 85
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	88 60       	ori	r24, 0x08	; 8
     e1a:	8c 93       	st	X, r24
     e1c:	52 c0       	rjmp	.+164    	; 0xec2 <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_RAISING_EDGE:
						Set_Bit(MCUCR,2);
     e1e:	a5 e5       	ldi	r26, 0x55	; 85
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e5 e5       	ldi	r30, 0x55	; 85
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	84 60       	ori	r24, 0x04	; 4
     e2a:	8c 93       	st	X, r24
						Set_Bit(MCUCR,3);
     e2c:	a5 e5       	ldi	r26, 0x55	; 85
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	e5 e5       	ldi	r30, 0x55	; 85
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	88 60       	ori	r24, 0x08	; 8
     e38:	8c 93       	st	X, r24
     e3a:	43 c0       	rjmp	.+134    	; 0xec2 <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_LOW_LEVEL:
						Clr_Bit(MCUCR,2);
     e3c:	a5 e5       	ldi	r26, 0x55	; 85
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e5 e5       	ldi	r30, 0x55	; 85
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	8b 7f       	andi	r24, 0xFB	; 251
     e48:	8c 93       	st	X, r24
						Clr_Bit(MCUCR,3);
     e4a:	a5 e5       	ldi	r26, 0x55	; 85
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e5 e5       	ldi	r30, 0x55	; 85
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	87 7f       	andi	r24, 0xF7	; 247
     e56:	8c 93       	st	X, r24
     e58:	34 c0       	rjmp	.+104    	; 0xec2 <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_LOGIACL_CHANGE:
						Set_Bit(MCUCR,2);
     e5a:	a5 e5       	ldi	r26, 0x55	; 85
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	e5 e5       	ldi	r30, 0x55	; 85
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	84 60       	ori	r24, 0x04	; 4
     e66:	8c 93       	st	X, r24
						Clr_Bit(MCUCR,3);
     e68:	a5 e5       	ldi	r26, 0x55	; 85
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e5 e5       	ldi	r30, 0x55	; 85
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	87 7f       	andi	r24, 0xF7	; 247
     e74:	8c 93       	st	X, r24
     e76:	25 c0       	rjmp	.+74     	; 0xec2 <EX_vdConfigInterrupt+0x226>
						break;
				}
				break;
			case EX_INT2:
				Set_Bit(GICR,5);
     e78:	ab e5       	ldi	r26, 0x5B	; 91
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	eb e5       	ldi	r30, 0x5B	; 91
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	80 62       	ori	r24, 0x20	; 32
     e84:	8c 93       	st	X, r24
				switch (CopyControlSense)
     e86:	8a 81       	ldd	r24, Y+2	; 0x02
     e88:	28 2f       	mov	r18, r24
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	3c 83       	std	Y+4, r19	; 0x04
     e8e:	2b 83       	std	Y+3, r18	; 0x03
     e90:	8b 81       	ldd	r24, Y+3	; 0x03
     e92:	9c 81       	ldd	r25, Y+4	; 0x04
     e94:	00 97       	sbiw	r24, 0x00	; 0
     e96:	31 f0       	breq	.+12     	; 0xea4 <EX_vdConfigInterrupt+0x208>
     e98:	2b 81       	ldd	r18, Y+3	; 0x03
     e9a:	3c 81       	ldd	r19, Y+4	; 0x04
     e9c:	21 30       	cpi	r18, 0x01	; 1
     e9e:	31 05       	cpc	r19, r1
     ea0:	49 f0       	breq	.+18     	; 0xeb4 <EX_vdConfigInterrupt+0x218>
     ea2:	0f c0       	rjmp	.+30     	; 0xec2 <EX_vdConfigInterrupt+0x226>
				{
					case EX_SENSE_FALLING_EDGE:
						Clr_Bit(MCUCSR,6);
     ea4:	a4 e5       	ldi	r26, 0x54	; 84
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	e4 e5       	ldi	r30, 0x54	; 84
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	8f 7b       	andi	r24, 0xBF	; 191
     eb0:	8c 93       	st	X, r24
     eb2:	07 c0       	rjmp	.+14     	; 0xec2 <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_RAISING_EDGE:
						Set_Bit(MCUCSR,6);
     eb4:	a4 e5       	ldi	r26, 0x54	; 84
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e4 e5       	ldi	r30, 0x54	; 84
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	80 64       	ori	r24, 0x40	; 64
     ec0:	8c 93       	st	X, r24
						break;
				}
				break;
		}
	}
}
     ec2:	2a 96       	adiw	r28, 0x0a	; 10
     ec4:	0f b6       	in	r0, 0x3f	; 63
     ec6:	f8 94       	cli
     ec8:	de bf       	out	0x3e, r29	; 62
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	cd bf       	out	0x3d, r28	; 61
     ece:	cf 91       	pop	r28
     ed0:	df 91       	pop	r29
     ed2:	08 95       	ret

00000ed4 <__vector_1>:
void __vector_1 (void)
{
     ed4:	1f 92       	push	r1
     ed6:	0f 92       	push	r0
     ed8:	0f b6       	in	r0, 0x3f	; 63
     eda:	0f 92       	push	r0
     edc:	11 24       	eor	r1, r1
     ede:	df 93       	push	r29
     ee0:	cf 93       	push	r28
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62

}
     ee6:	cf 91       	pop	r28
     ee8:	df 91       	pop	r29
     eea:	0f 90       	pop	r0
     eec:	0f be       	out	0x3f, r0	; 63
     eee:	0f 90       	pop	r0
     ef0:	1f 90       	pop	r1
     ef2:	18 95       	reti

00000ef4 <__vector_2>:
void __vector_2 (void)
{
     ef4:	1f 92       	push	r1
     ef6:	0f 92       	push	r0
     ef8:	0f b6       	in	r0, 0x3f	; 63
     efa:	0f 92       	push	r0
     efc:	11 24       	eor	r1, r1
     efe:	df 93       	push	r29
     f00:	cf 93       	push	r28
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62

}
     f06:	cf 91       	pop	r28
     f08:	df 91       	pop	r29
     f0a:	0f 90       	pop	r0
     f0c:	0f be       	out	0x3f, r0	; 63
     f0e:	0f 90       	pop	r0
     f10:	1f 90       	pop	r1
     f12:	18 95       	reti

00000f14 <DIO_SetPortDirection>:


/* APIs IMPLEMENTATION */

/* API to Set Port Direction */
DIO_ERROR_state_t DIO_SetPortDirection(uint8_t PortID, uint8_t PortDirection) {
     f14:	df 93       	push	r29
     f16:	cf 93       	push	r28
     f18:	00 d0       	rcall	.+0      	; 0xf1a <DIO_SetPortDirection+0x6>
     f1a:	00 d0       	rcall	.+0      	; 0xf1c <DIO_SetPortDirection+0x8>
     f1c:	0f 92       	push	r0
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
     f22:	89 83       	std	Y+1, r24	; 0x01
     f24:	6a 83       	std	Y+2, r22	; 0x02
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA )) {
     f26:	89 81       	ldd	r24, Y+1	; 0x01
     f28:	84 30       	cpi	r24, 0x04	; 4
     f2a:	a0 f5       	brcc	.+104    	; 0xf94 <DIO_SetPortDirection+0x80>
		switch (PortID) {
     f2c:	89 81       	ldd	r24, Y+1	; 0x01
     f2e:	28 2f       	mov	r18, r24
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	3d 83       	std	Y+5, r19	; 0x05
     f34:	2c 83       	std	Y+4, r18	; 0x04
     f36:	8c 81       	ldd	r24, Y+4	; 0x04
     f38:	9d 81       	ldd	r25, Y+5	; 0x05
     f3a:	81 30       	cpi	r24, 0x01	; 1
     f3c:	91 05       	cpc	r25, r1
     f3e:	d1 f0       	breq	.+52     	; 0xf74 <DIO_SetPortDirection+0x60>
     f40:	2c 81       	ldd	r18, Y+4	; 0x04
     f42:	3d 81       	ldd	r19, Y+5	; 0x05
     f44:	22 30       	cpi	r18, 0x02	; 2
     f46:	31 05       	cpc	r19, r1
     f48:	2c f4       	brge	.+10     	; 0xf54 <DIO_SetPortDirection+0x40>
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	00 97       	sbiw	r24, 0x00	; 0
     f50:	61 f0       	breq	.+24     	; 0xf6a <DIO_SetPortDirection+0x56>
     f52:	1e c0       	rjmp	.+60     	; 0xf90 <DIO_SetPortDirection+0x7c>
     f54:	2c 81       	ldd	r18, Y+4	; 0x04
     f56:	3d 81       	ldd	r19, Y+5	; 0x05
     f58:	22 30       	cpi	r18, 0x02	; 2
     f5a:	31 05       	cpc	r19, r1
     f5c:	81 f0       	breq	.+32     	; 0xf7e <DIO_SetPortDirection+0x6a>
     f5e:	8c 81       	ldd	r24, Y+4	; 0x04
     f60:	9d 81       	ldd	r25, Y+5	; 0x05
     f62:	83 30       	cpi	r24, 0x03	; 3
     f64:	91 05       	cpc	r25, r1
     f66:	81 f0       	breq	.+32     	; 0xf88 <DIO_SetPortDirection+0x74>
     f68:	13 c0       	rjmp	.+38     	; 0xf90 <DIO_SetPortDirection+0x7c>
		case PORTA :
			PORTA_DIR = PortDirection;
     f6a:	ea e3       	ldi	r30, 0x3A	; 58
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	8a 81       	ldd	r24, Y+2	; 0x02
     f70:	80 83       	st	Z, r24
     f72:	0e c0       	rjmp	.+28     	; 0xf90 <DIO_SetPortDirection+0x7c>
			break;
		case PORTB :
			PORTB_DIR = PortDirection;
     f74:	e7 e3       	ldi	r30, 0x37	; 55
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	80 83       	st	Z, r24
     f7c:	09 c0       	rjmp	.+18     	; 0xf90 <DIO_SetPortDirection+0x7c>
			break;
		case PORTC :
			PORTC_DIR = PortDirection;
     f7e:	e4 e3       	ldi	r30, 0x34	; 52
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	80 83       	st	Z, r24
     f86:	04 c0       	rjmp	.+8      	; 0xf90 <DIO_SetPortDirection+0x7c>
			break;
		case PORTD :
			PORTD_DIR = PortDirection;
     f88:	e1 e3       	ldi	r30, 0x31	; 49
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	8a 81       	ldd	r24, Y+2	; 0x02
     f8e:	80 83       	st	Z, r24
			break;
		} //END of SWITCH
		return E_DIO_SUCCESS ;
     f90:	1b 82       	std	Y+3, r1	; 0x03
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <DIO_SetPortDirection+0x84>
	}	  //END of IF
	else {
		return E_DIO_INVALID_PORT_NUMBER ;
     f94:	91 e0       	ldi	r25, 0x01	; 1
     f96:	9b 83       	std	Y+3, r25	; 0x03
     f98:	8b 81       	ldd	r24, Y+3	; 0x03

	}	  //END of ELSE
}	  //END DIO_setPortDirection
     f9a:	0f 90       	pop	r0
     f9c:	0f 90       	pop	r0
     f9e:	0f 90       	pop	r0
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	cf 91       	pop	r28
     fa6:	df 91       	pop	r29
     fa8:	08 95       	ret

00000faa <DIO_SetPinDirection>:

/* API to Set Pin Direction */
DIO_ERROR_state_t DIO_SetPinDirection(uint8_t PortID, uint8_t PinNumber,
		uint8_t PinDirection) {
     faa:	df 93       	push	r29
     fac:	cf 93       	push	r28
     fae:	cd b7       	in	r28, 0x3d	; 61
     fb0:	de b7       	in	r29, 0x3e	; 62
     fb2:	28 97       	sbiw	r28, 0x08	; 8
     fb4:	0f b6       	in	r0, 0x3f	; 63
     fb6:	f8 94       	cli
     fb8:	de bf       	out	0x3e, r29	; 62
     fba:	0f be       	out	0x3f, r0	; 63
     fbc:	cd bf       	out	0x3d, r28	; 61
     fbe:	89 83       	std	Y+1, r24	; 0x01
     fc0:	6a 83       	std	Y+2, r22	; 0x02
     fc2:	4b 83       	std	Y+3, r20	; 0x03
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA ) && (PinNumber >= PIN0 )
     fc4:	89 81       	ldd	r24, Y+1	; 0x01
     fc6:	84 30       	cpi	r24, 0x04	; 4
     fc8:	08 f0       	brcs	.+2      	; 0xfcc <DIO_SetPinDirection+0x22>
     fca:	f4 c0       	rjmp	.+488    	; 0x11b4 <DIO_SetPinDirection+0x20a>
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	88 30       	cpi	r24, 0x08	; 8
     fd0:	08 f0       	brcs	.+2      	; 0xfd4 <DIO_SetPinDirection+0x2a>
     fd2:	f0 c0       	rjmp	.+480    	; 0x11b4 <DIO_SetPinDirection+0x20a>
			&& (PinNumber <= PIN7 )) {
		if (PinDirection == PIN_OUTPUT) {
     fd4:	8b 81       	ldd	r24, Y+3	; 0x03
     fd6:	81 30       	cpi	r24, 0x01	; 1
     fd8:	09 f0       	breq	.+2      	; 0xfdc <DIO_SetPinDirection+0x32>
     fda:	70 c0       	rjmp	.+224    	; 0x10bc <DIO_SetPinDirection+0x112>
			switch (PortID) {
     fdc:	89 81       	ldd	r24, Y+1	; 0x01
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	38 87       	std	Y+8, r19	; 0x08
     fe4:	2f 83       	std	Y+7, r18	; 0x07
     fe6:	8f 81       	ldd	r24, Y+7	; 0x07
     fe8:	98 85       	ldd	r25, Y+8	; 0x08
     fea:	81 30       	cpi	r24, 0x01	; 1
     fec:	91 05       	cpc	r25, r1
     fee:	49 f1       	breq	.+82     	; 0x1042 <DIO_SetPinDirection+0x98>
     ff0:	2f 81       	ldd	r18, Y+7	; 0x07
     ff2:	38 85       	ldd	r19, Y+8	; 0x08
     ff4:	22 30       	cpi	r18, 0x02	; 2
     ff6:	31 05       	cpc	r19, r1
     ff8:	2c f4       	brge	.+10     	; 0x1004 <DIO_SetPinDirection+0x5a>
     ffa:	8f 81       	ldd	r24, Y+7	; 0x07
     ffc:	98 85       	ldd	r25, Y+8	; 0x08
     ffe:	00 97       	sbiw	r24, 0x00	; 0
    1000:	61 f0       	breq	.+24     	; 0x101a <DIO_SetPinDirection+0x70>
    1002:	5a c0       	rjmp	.+180    	; 0x10b8 <DIO_SetPinDirection+0x10e>
    1004:	2f 81       	ldd	r18, Y+7	; 0x07
    1006:	38 85       	ldd	r19, Y+8	; 0x08
    1008:	22 30       	cpi	r18, 0x02	; 2
    100a:	31 05       	cpc	r19, r1
    100c:	71 f1       	breq	.+92     	; 0x106a <DIO_SetPinDirection+0xc0>
    100e:	8f 81       	ldd	r24, Y+7	; 0x07
    1010:	98 85       	ldd	r25, Y+8	; 0x08
    1012:	83 30       	cpi	r24, 0x03	; 3
    1014:	91 05       	cpc	r25, r1
    1016:	e9 f1       	breq	.+122    	; 0x1092 <DIO_SetPinDirection+0xe8>
    1018:	4f c0       	rjmp	.+158    	; 0x10b8 <DIO_SetPinDirection+0x10e>
			case PORTA :
				Set_Bit(PORTA_DIR, PinNumber);
    101a:	aa e3       	ldi	r26, 0x3A	; 58
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	ea e3       	ldi	r30, 0x3A	; 58
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	48 2f       	mov	r20, r24
    1026:	8a 81       	ldd	r24, Y+2	; 0x02
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	02 2e       	mov	r0, r18
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <DIO_SetPinDirection+0x8e>
    1034:	88 0f       	add	r24, r24
    1036:	99 1f       	adc	r25, r25
    1038:	0a 94       	dec	r0
    103a:	e2 f7       	brpl	.-8      	; 0x1034 <DIO_SetPinDirection+0x8a>
    103c:	84 2b       	or	r24, r20
    103e:	8c 93       	st	X, r24
    1040:	3b c0       	rjmp	.+118    	; 0x10b8 <DIO_SetPinDirection+0x10e>
				break;
			case PORTB :
				Set_Bit(PORTB_DIR, PinNumber);
    1042:	a7 e3       	ldi	r26, 0x37	; 55
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	e7 e3       	ldi	r30, 0x37	; 55
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	48 2f       	mov	r20, r24
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	28 2f       	mov	r18, r24
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	02 2e       	mov	r0, r18
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <DIO_SetPinDirection+0xb6>
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	0a 94       	dec	r0
    1062:	e2 f7       	brpl	.-8      	; 0x105c <DIO_SetPinDirection+0xb2>
    1064:	84 2b       	or	r24, r20
    1066:	8c 93       	st	X, r24
    1068:	27 c0       	rjmp	.+78     	; 0x10b8 <DIO_SetPinDirection+0x10e>
				break;
			case PORTC :
				Set_Bit(PORTC_DIR, PinNumber);
    106a:	a4 e3       	ldi	r26, 0x34	; 52
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	e4 e3       	ldi	r30, 0x34	; 52
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	48 2f       	mov	r20, r24
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	02 2e       	mov	r0, r18
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <DIO_SetPinDirection+0xde>
    1084:	88 0f       	add	r24, r24
    1086:	99 1f       	adc	r25, r25
    1088:	0a 94       	dec	r0
    108a:	e2 f7       	brpl	.-8      	; 0x1084 <DIO_SetPinDirection+0xda>
    108c:	84 2b       	or	r24, r20
    108e:	8c 93       	st	X, r24
    1090:	13 c0       	rjmp	.+38     	; 0x10b8 <DIO_SetPinDirection+0x10e>
				break;
			case PORTD :
				Set_Bit(PORTD_DIR, PinNumber);
    1092:	a1 e3       	ldi	r26, 0x31	; 49
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e1 e3       	ldi	r30, 0x31	; 49
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	48 2f       	mov	r20, r24
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	02 2e       	mov	r0, r18
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <DIO_SetPinDirection+0x106>
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	0a 94       	dec	r0
    10b2:	e2 f7       	brpl	.-8      	; 0x10ac <DIO_SetPinDirection+0x102>
    10b4:	84 2b       	or	r24, r20
    10b6:	8c 93       	st	X, r24
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
    10b8:	1e 82       	std	Y+6, r1	; 0x06
    10ba:	7e c0       	rjmp	.+252    	; 0x11b8 <DIO_SetPinDirection+0x20e>
		} // END of IF that check for the direction if it is INPUT
		else if (PinDirection == PIN_INPUT) {
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
    10be:	88 23       	and	r24, r24
    10c0:	09 f0       	breq	.+2      	; 0x10c4 <DIO_SetPinDirection+0x11a>
    10c2:	75 c0       	rjmp	.+234    	; 0x11ae <DIO_SetPinDirection+0x204>
			switch (PortID) {
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	3d 83       	std	Y+5, r19	; 0x05
    10cc:	2c 83       	std	Y+4, r18	; 0x04
    10ce:	8c 81       	ldd	r24, Y+4	; 0x04
    10d0:	9d 81       	ldd	r25, Y+5	; 0x05
    10d2:	81 30       	cpi	r24, 0x01	; 1
    10d4:	91 05       	cpc	r25, r1
    10d6:	59 f1       	breq	.+86     	; 0x112e <DIO_SetPinDirection+0x184>
    10d8:	2c 81       	ldd	r18, Y+4	; 0x04
    10da:	3d 81       	ldd	r19, Y+5	; 0x05
    10dc:	22 30       	cpi	r18, 0x02	; 2
    10de:	31 05       	cpc	r19, r1
    10e0:	2c f4       	brge	.+10     	; 0x10ec <DIO_SetPinDirection+0x142>
    10e2:	8c 81       	ldd	r24, Y+4	; 0x04
    10e4:	9d 81       	ldd	r25, Y+5	; 0x05
    10e6:	00 97       	sbiw	r24, 0x00	; 0
    10e8:	69 f0       	breq	.+26     	; 0x1104 <DIO_SetPinDirection+0x15a>
    10ea:	5f c0       	rjmp	.+190    	; 0x11aa <DIO_SetPinDirection+0x200>
    10ec:	2c 81       	ldd	r18, Y+4	; 0x04
    10ee:	3d 81       	ldd	r19, Y+5	; 0x05
    10f0:	22 30       	cpi	r18, 0x02	; 2
    10f2:	31 05       	cpc	r19, r1
    10f4:	89 f1       	breq	.+98     	; 0x1158 <DIO_SetPinDirection+0x1ae>
    10f6:	8c 81       	ldd	r24, Y+4	; 0x04
    10f8:	9d 81       	ldd	r25, Y+5	; 0x05
    10fa:	83 30       	cpi	r24, 0x03	; 3
    10fc:	91 05       	cpc	r25, r1
    10fe:	09 f4       	brne	.+2      	; 0x1102 <DIO_SetPinDirection+0x158>
    1100:	40 c0       	rjmp	.+128    	; 0x1182 <DIO_SetPinDirection+0x1d8>
    1102:	53 c0       	rjmp	.+166    	; 0x11aa <DIO_SetPinDirection+0x200>
			case PORTA :
				Clr_Bit(PORTA_DIR, PinNumber);
    1104:	aa e3       	ldi	r26, 0x3A	; 58
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	ea e3       	ldi	r30, 0x3A	; 58
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	48 2f       	mov	r20, r24
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	02 2e       	mov	r0, r18
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <DIO_SetPinDirection+0x178>
    111e:	88 0f       	add	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	0a 94       	dec	r0
    1124:	e2 f7       	brpl	.-8      	; 0x111e <DIO_SetPinDirection+0x174>
    1126:	80 95       	com	r24
    1128:	84 23       	and	r24, r20
    112a:	8c 93       	st	X, r24
    112c:	3e c0       	rjmp	.+124    	; 0x11aa <DIO_SetPinDirection+0x200>
				break;
			case PORTB :
				Clr_Bit(PORTB_DIR, PinNumber);
    112e:	a7 e3       	ldi	r26, 0x37	; 55
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	e7 e3       	ldi	r30, 0x37	; 55
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	48 2f       	mov	r20, r24
    113a:	8a 81       	ldd	r24, Y+2	; 0x02
    113c:	28 2f       	mov	r18, r24
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	02 2e       	mov	r0, r18
    1146:	02 c0       	rjmp	.+4      	; 0x114c <DIO_SetPinDirection+0x1a2>
    1148:	88 0f       	add	r24, r24
    114a:	99 1f       	adc	r25, r25
    114c:	0a 94       	dec	r0
    114e:	e2 f7       	brpl	.-8      	; 0x1148 <DIO_SetPinDirection+0x19e>
    1150:	80 95       	com	r24
    1152:	84 23       	and	r24, r20
    1154:	8c 93       	st	X, r24
    1156:	29 c0       	rjmp	.+82     	; 0x11aa <DIO_SetPinDirection+0x200>
				break;
			case PORTC :
				Clr_Bit(PORTC_DIR, PinNumber);
    1158:	a4 e3       	ldi	r26, 0x34	; 52
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e4 e3       	ldi	r30, 0x34	; 52
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	48 2f       	mov	r20, r24
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	02 2e       	mov	r0, r18
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <DIO_SetPinDirection+0x1cc>
    1172:	88 0f       	add	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	0a 94       	dec	r0
    1178:	e2 f7       	brpl	.-8      	; 0x1172 <DIO_SetPinDirection+0x1c8>
    117a:	80 95       	com	r24
    117c:	84 23       	and	r24, r20
    117e:	8c 93       	st	X, r24
    1180:	14 c0       	rjmp	.+40     	; 0x11aa <DIO_SetPinDirection+0x200>
				break;
			case PORTD :
				Clr_Bit(PORTD_DIR, PinNumber);
    1182:	a1 e3       	ldi	r26, 0x31	; 49
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	e1 e3       	ldi	r30, 0x31	; 49
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	48 2f       	mov	r20, r24
    118e:	8a 81       	ldd	r24, Y+2	; 0x02
    1190:	28 2f       	mov	r18, r24
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	02 2e       	mov	r0, r18
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <DIO_SetPinDirection+0x1f6>
    119c:	88 0f       	add	r24, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	0a 94       	dec	r0
    11a2:	e2 f7       	brpl	.-8      	; 0x119c <DIO_SetPinDirection+0x1f2>
    11a4:	80 95       	com	r24
    11a6:	84 23       	and	r24, r20
    11a8:	8c 93       	st	X, r24
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
    11aa:	1e 82       	std	Y+6, r1	; 0x06
    11ac:	05 c0       	rjmp	.+10     	; 0x11b8 <DIO_SetPinDirection+0x20e>
		} // END of ELSE IF that check for the direction if it is INPUT
		else {
			return E_DIO_INVALID_PIN_DIRECTION ;
    11ae:	92 e0       	ldi	r25, 0x02	; 2
    11b0:	9e 83       	std	Y+6, r25	; 0x06
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <DIO_SetPinDirection+0x20e>
		} //END OF ELSE

	}	  //END of IF That checking the port and pin number

	else {
		return E_DIO_INVALID_PORT_NUMBER ;
    11b4:	21 e0       	ldi	r18, 0x01	; 1
    11b6:	2e 83       	std	Y+6, r18	; 0x06
    11b8:	8e 81       	ldd	r24, Y+6	; 0x06

	}	  //END of ELSE
}	  //END DIO_setPinDirection
    11ba:	28 96       	adiw	r28, 0x08	; 8
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	f8 94       	cli
    11c0:	de bf       	out	0x3e, r29	; 62
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	cd bf       	out	0x3d, r28	; 61
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	08 95       	ret

000011cc <DIO_writePort>:

/* API to Write Port  Value */
DIO_ERROR_state_t DIO_writePort(uint8_t PortID, uint8_t PortValue) {
    11cc:	df 93       	push	r29
    11ce:	cf 93       	push	r28
    11d0:	00 d0       	rcall	.+0      	; 0x11d2 <DIO_writePort+0x6>
    11d2:	00 d0       	rcall	.+0      	; 0x11d4 <DIO_writePort+0x8>
    11d4:	0f 92       	push	r0
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
    11da:	89 83       	std	Y+1, r24	; 0x01
    11dc:	6a 83       	std	Y+2, r22	; 0x02
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA )) {
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	84 30       	cpi	r24, 0x04	; 4
    11e2:	a0 f5       	brcc	.+104    	; 0x124c <DIO_writePort+0x80>
		switch (PortID) {
    11e4:	89 81       	ldd	r24, Y+1	; 0x01
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	3d 83       	std	Y+5, r19	; 0x05
    11ec:	2c 83       	std	Y+4, r18	; 0x04
    11ee:	8c 81       	ldd	r24, Y+4	; 0x04
    11f0:	9d 81       	ldd	r25, Y+5	; 0x05
    11f2:	81 30       	cpi	r24, 0x01	; 1
    11f4:	91 05       	cpc	r25, r1
    11f6:	d1 f0       	breq	.+52     	; 0x122c <DIO_writePort+0x60>
    11f8:	2c 81       	ldd	r18, Y+4	; 0x04
    11fa:	3d 81       	ldd	r19, Y+5	; 0x05
    11fc:	22 30       	cpi	r18, 0x02	; 2
    11fe:	31 05       	cpc	r19, r1
    1200:	2c f4       	brge	.+10     	; 0x120c <DIO_writePort+0x40>
    1202:	8c 81       	ldd	r24, Y+4	; 0x04
    1204:	9d 81       	ldd	r25, Y+5	; 0x05
    1206:	00 97       	sbiw	r24, 0x00	; 0
    1208:	61 f0       	breq	.+24     	; 0x1222 <DIO_writePort+0x56>
    120a:	1e c0       	rjmp	.+60     	; 0x1248 <DIO_writePort+0x7c>
    120c:	2c 81       	ldd	r18, Y+4	; 0x04
    120e:	3d 81       	ldd	r19, Y+5	; 0x05
    1210:	22 30       	cpi	r18, 0x02	; 2
    1212:	31 05       	cpc	r19, r1
    1214:	81 f0       	breq	.+32     	; 0x1236 <DIO_writePort+0x6a>
    1216:	8c 81       	ldd	r24, Y+4	; 0x04
    1218:	9d 81       	ldd	r25, Y+5	; 0x05
    121a:	83 30       	cpi	r24, 0x03	; 3
    121c:	91 05       	cpc	r25, r1
    121e:	81 f0       	breq	.+32     	; 0x1240 <DIO_writePort+0x74>
    1220:	13 c0       	rjmp	.+38     	; 0x1248 <DIO_writePort+0x7c>
		case PORTA :
			PORTA_DATA = PortValue;
    1222:	eb e3       	ldi	r30, 0x3B	; 59
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	80 83       	st	Z, r24
    122a:	0e c0       	rjmp	.+28     	; 0x1248 <DIO_writePort+0x7c>
			break;
		case PORTB :
			PORTB_DATA = PortValue;
    122c:	e8 e3       	ldi	r30, 0x38	; 56
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	80 83       	st	Z, r24
    1234:	09 c0       	rjmp	.+18     	; 0x1248 <DIO_writePort+0x7c>
			break;
		case PORTC :
			PORTC_DATA = PortValue;
    1236:	e5 e3       	ldi	r30, 0x35	; 53
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	80 83       	st	Z, r24
    123e:	04 c0       	rjmp	.+8      	; 0x1248 <DIO_writePort+0x7c>
			break;
		case PORTD :
			PORTD_DATA = PortValue;
    1240:	e2 e3       	ldi	r30, 0x32	; 50
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	80 83       	st	Z, r24
			break;

		} //END of SWITCH
		return E_DIO_SUCCESS ;
    1248:	1b 82       	std	Y+3, r1	; 0x03
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <DIO_writePort+0x84>
	}	  //END of IF
	else {
		return E_DIO_INVALID_PORT_NUMBER ;
    124c:	91 e0       	ldi	r25, 0x01	; 1
    124e:	9b 83       	std	Y+3, r25	; 0x03
    1250:	8b 81       	ldd	r24, Y+3	; 0x03

	}	  //END of ELSE
}	  //END DIO_writePortValue
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	cf 91       	pop	r28
    125e:	df 91       	pop	r29
    1260:	08 95       	ret

00001262 <DIO_WritePin>:

/* API to Write Pin  Value */
DIO_ERROR_state_t DIO_WritePin(uint8_t PortID, uint8_t PinNumber,
		uint8_t PinDirection) {
    1262:	df 93       	push	r29
    1264:	cf 93       	push	r28
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
    126a:	28 97       	sbiw	r28, 0x08	; 8
    126c:	0f b6       	in	r0, 0x3f	; 63
    126e:	f8 94       	cli
    1270:	de bf       	out	0x3e, r29	; 62
    1272:	0f be       	out	0x3f, r0	; 63
    1274:	cd bf       	out	0x3d, r28	; 61
    1276:	89 83       	std	Y+1, r24	; 0x01
    1278:	6a 83       	std	Y+2, r22	; 0x02
    127a:	4b 83       	std	Y+3, r20	; 0x03
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA ) && (PinNumber >= PIN0 )
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	84 30       	cpi	r24, 0x04	; 4
    1280:	08 f0       	brcs	.+2      	; 0x1284 <DIO_WritePin+0x22>
    1282:	f4 c0       	rjmp	.+488    	; 0x146c <DIO_WritePin+0x20a>
    1284:	8a 81       	ldd	r24, Y+2	; 0x02
    1286:	88 30       	cpi	r24, 0x08	; 8
    1288:	08 f0       	brcs	.+2      	; 0x128c <DIO_WritePin+0x2a>
    128a:	f0 c0       	rjmp	.+480    	; 0x146c <DIO_WritePin+0x20a>
			&& (PinNumber <= PIN7 )) {
		if (PinDirection == PIN_HIGH) {
    128c:	8b 81       	ldd	r24, Y+3	; 0x03
    128e:	81 30       	cpi	r24, 0x01	; 1
    1290:	09 f0       	breq	.+2      	; 0x1294 <DIO_WritePin+0x32>
    1292:	70 c0       	rjmp	.+224    	; 0x1374 <DIO_WritePin+0x112>
			switch (PortID) {
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	38 87       	std	Y+8, r19	; 0x08
    129c:	2f 83       	std	Y+7, r18	; 0x07
    129e:	8f 81       	ldd	r24, Y+7	; 0x07
    12a0:	98 85       	ldd	r25, Y+8	; 0x08
    12a2:	81 30       	cpi	r24, 0x01	; 1
    12a4:	91 05       	cpc	r25, r1
    12a6:	49 f1       	breq	.+82     	; 0x12fa <DIO_WritePin+0x98>
    12a8:	2f 81       	ldd	r18, Y+7	; 0x07
    12aa:	38 85       	ldd	r19, Y+8	; 0x08
    12ac:	22 30       	cpi	r18, 0x02	; 2
    12ae:	31 05       	cpc	r19, r1
    12b0:	2c f4       	brge	.+10     	; 0x12bc <DIO_WritePin+0x5a>
    12b2:	8f 81       	ldd	r24, Y+7	; 0x07
    12b4:	98 85       	ldd	r25, Y+8	; 0x08
    12b6:	00 97       	sbiw	r24, 0x00	; 0
    12b8:	61 f0       	breq	.+24     	; 0x12d2 <DIO_WritePin+0x70>
    12ba:	5a c0       	rjmp	.+180    	; 0x1370 <DIO_WritePin+0x10e>
    12bc:	2f 81       	ldd	r18, Y+7	; 0x07
    12be:	38 85       	ldd	r19, Y+8	; 0x08
    12c0:	22 30       	cpi	r18, 0x02	; 2
    12c2:	31 05       	cpc	r19, r1
    12c4:	71 f1       	breq	.+92     	; 0x1322 <DIO_WritePin+0xc0>
    12c6:	8f 81       	ldd	r24, Y+7	; 0x07
    12c8:	98 85       	ldd	r25, Y+8	; 0x08
    12ca:	83 30       	cpi	r24, 0x03	; 3
    12cc:	91 05       	cpc	r25, r1
    12ce:	e9 f1       	breq	.+122    	; 0x134a <DIO_WritePin+0xe8>
    12d0:	4f c0       	rjmp	.+158    	; 0x1370 <DIO_WritePin+0x10e>
			case PORTA :
				Set_Bit(PORTA_DATA, PinNumber);
    12d2:	ab e3       	ldi	r26, 0x3B	; 59
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	eb e3       	ldi	r30, 0x3B	; 59
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	48 2f       	mov	r20, r24
    12de:	8a 81       	ldd	r24, Y+2	; 0x02
    12e0:	28 2f       	mov	r18, r24
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	02 2e       	mov	r0, r18
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <DIO_WritePin+0x8e>
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	0a 94       	dec	r0
    12f2:	e2 f7       	brpl	.-8      	; 0x12ec <DIO_WritePin+0x8a>
    12f4:	84 2b       	or	r24, r20
    12f6:	8c 93       	st	X, r24
    12f8:	3b c0       	rjmp	.+118    	; 0x1370 <DIO_WritePin+0x10e>
				break;
			case PORTB :
				Set_Bit(PORTB_DATA, PinNumber);
    12fa:	a8 e3       	ldi	r26, 0x38	; 56
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	e8 e3       	ldi	r30, 0x38	; 56
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	48 2f       	mov	r20, r24
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	28 2f       	mov	r18, r24
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	02 2e       	mov	r0, r18
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <DIO_WritePin+0xb6>
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	0a 94       	dec	r0
    131a:	e2 f7       	brpl	.-8      	; 0x1314 <DIO_WritePin+0xb2>
    131c:	84 2b       	or	r24, r20
    131e:	8c 93       	st	X, r24
    1320:	27 c0       	rjmp	.+78     	; 0x1370 <DIO_WritePin+0x10e>
				break;
			case PORTC :
				Set_Bit(PORTC_DATA, PinNumber);
    1322:	a5 e3       	ldi	r26, 0x35	; 53
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	e5 e3       	ldi	r30, 0x35	; 53
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	48 2f       	mov	r20, r24
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	02 2e       	mov	r0, r18
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <DIO_WritePin+0xde>
    133c:	88 0f       	add	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	0a 94       	dec	r0
    1342:	e2 f7       	brpl	.-8      	; 0x133c <DIO_WritePin+0xda>
    1344:	84 2b       	or	r24, r20
    1346:	8c 93       	st	X, r24
    1348:	13 c0       	rjmp	.+38     	; 0x1370 <DIO_WritePin+0x10e>
				break;
			case PORTD :
				Set_Bit(PORTD_DATA, PinNumber);
    134a:	a2 e3       	ldi	r26, 0x32	; 50
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	e2 e3       	ldi	r30, 0x32	; 50
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	48 2f       	mov	r20, r24
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	02 2e       	mov	r0, r18
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <DIO_WritePin+0x106>
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	0a 94       	dec	r0
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <DIO_WritePin+0x102>
    136c:	84 2b       	or	r24, r20
    136e:	8c 93       	st	X, r24
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
    1370:	1e 82       	std	Y+6, r1	; 0x06
    1372:	7e c0       	rjmp	.+252    	; 0x1470 <DIO_WritePin+0x20e>
		} // END of IF that check for the direction if it is INPUT
		else if (PinDirection == PIN_LOW) {
    1374:	8b 81       	ldd	r24, Y+3	; 0x03
    1376:	88 23       	and	r24, r24
    1378:	09 f0       	breq	.+2      	; 0x137c <DIO_WritePin+0x11a>
    137a:	75 c0       	rjmp	.+234    	; 0x1466 <DIO_WritePin+0x204>
			switch (PortID) {
    137c:	89 81       	ldd	r24, Y+1	; 0x01
    137e:	28 2f       	mov	r18, r24
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	3d 83       	std	Y+5, r19	; 0x05
    1384:	2c 83       	std	Y+4, r18	; 0x04
    1386:	8c 81       	ldd	r24, Y+4	; 0x04
    1388:	9d 81       	ldd	r25, Y+5	; 0x05
    138a:	81 30       	cpi	r24, 0x01	; 1
    138c:	91 05       	cpc	r25, r1
    138e:	59 f1       	breq	.+86     	; 0x13e6 <DIO_WritePin+0x184>
    1390:	2c 81       	ldd	r18, Y+4	; 0x04
    1392:	3d 81       	ldd	r19, Y+5	; 0x05
    1394:	22 30       	cpi	r18, 0x02	; 2
    1396:	31 05       	cpc	r19, r1
    1398:	2c f4       	brge	.+10     	; 0x13a4 <DIO_WritePin+0x142>
    139a:	8c 81       	ldd	r24, Y+4	; 0x04
    139c:	9d 81       	ldd	r25, Y+5	; 0x05
    139e:	00 97       	sbiw	r24, 0x00	; 0
    13a0:	69 f0       	breq	.+26     	; 0x13bc <DIO_WritePin+0x15a>
    13a2:	5f c0       	rjmp	.+190    	; 0x1462 <DIO_WritePin+0x200>
    13a4:	2c 81       	ldd	r18, Y+4	; 0x04
    13a6:	3d 81       	ldd	r19, Y+5	; 0x05
    13a8:	22 30       	cpi	r18, 0x02	; 2
    13aa:	31 05       	cpc	r19, r1
    13ac:	89 f1       	breq	.+98     	; 0x1410 <DIO_WritePin+0x1ae>
    13ae:	8c 81       	ldd	r24, Y+4	; 0x04
    13b0:	9d 81       	ldd	r25, Y+5	; 0x05
    13b2:	83 30       	cpi	r24, 0x03	; 3
    13b4:	91 05       	cpc	r25, r1
    13b6:	09 f4       	brne	.+2      	; 0x13ba <DIO_WritePin+0x158>
    13b8:	40 c0       	rjmp	.+128    	; 0x143a <DIO_WritePin+0x1d8>
    13ba:	53 c0       	rjmp	.+166    	; 0x1462 <DIO_WritePin+0x200>
			case PORTA :
				Clr_Bit(PORTA_DATA, PinNumber);
    13bc:	ab e3       	ldi	r26, 0x3B	; 59
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	eb e3       	ldi	r30, 0x3B	; 59
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	48 2f       	mov	r20, r24
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	02 2e       	mov	r0, r18
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <DIO_WritePin+0x178>
    13d6:	88 0f       	add	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	0a 94       	dec	r0
    13dc:	e2 f7       	brpl	.-8      	; 0x13d6 <DIO_WritePin+0x174>
    13de:	80 95       	com	r24
    13e0:	84 23       	and	r24, r20
    13e2:	8c 93       	st	X, r24
    13e4:	3e c0       	rjmp	.+124    	; 0x1462 <DIO_WritePin+0x200>
				break;
			case PORTB :
				Clr_Bit(PORTB_DATA, PinNumber);
    13e6:	a8 e3       	ldi	r26, 0x38	; 56
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	e8 e3       	ldi	r30, 0x38	; 56
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	48 2f       	mov	r20, r24
    13f2:	8a 81       	ldd	r24, Y+2	; 0x02
    13f4:	28 2f       	mov	r18, r24
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	02 2e       	mov	r0, r18
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <DIO_WritePin+0x1a2>
    1400:	88 0f       	add	r24, r24
    1402:	99 1f       	adc	r25, r25
    1404:	0a 94       	dec	r0
    1406:	e2 f7       	brpl	.-8      	; 0x1400 <DIO_WritePin+0x19e>
    1408:	80 95       	com	r24
    140a:	84 23       	and	r24, r20
    140c:	8c 93       	st	X, r24
    140e:	29 c0       	rjmp	.+82     	; 0x1462 <DIO_WritePin+0x200>
				break;
			case PORTC :
				Clr_Bit(PORTC_DATA, PinNumber);
    1410:	a5 e3       	ldi	r26, 0x35	; 53
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	e5 e3       	ldi	r30, 0x35	; 53
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	48 2f       	mov	r20, r24
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	02 2e       	mov	r0, r18
    1428:	02 c0       	rjmp	.+4      	; 0x142e <DIO_WritePin+0x1cc>
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	0a 94       	dec	r0
    1430:	e2 f7       	brpl	.-8      	; 0x142a <DIO_WritePin+0x1c8>
    1432:	80 95       	com	r24
    1434:	84 23       	and	r24, r20
    1436:	8c 93       	st	X, r24
    1438:	14 c0       	rjmp	.+40     	; 0x1462 <DIO_WritePin+0x200>
				break;
			case PORTD :
				Clr_Bit(PORTD_DATA, PinNumber);
    143a:	a2 e3       	ldi	r26, 0x32	; 50
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	e2 e3       	ldi	r30, 0x32	; 50
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	48 2f       	mov	r20, r24
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	02 2e       	mov	r0, r18
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <DIO_WritePin+0x1f6>
    1454:	88 0f       	add	r24, r24
    1456:	99 1f       	adc	r25, r25
    1458:	0a 94       	dec	r0
    145a:	e2 f7       	brpl	.-8      	; 0x1454 <DIO_WritePin+0x1f2>
    145c:	80 95       	com	r24
    145e:	84 23       	and	r24, r20
    1460:	8c 93       	st	X, r24
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
    1462:	1e 82       	std	Y+6, r1	; 0x06
    1464:	05 c0       	rjmp	.+10     	; 0x1470 <DIO_WritePin+0x20e>
		} // END of ELSE IF that check for the direction if it is INPUT
		else {
			return E_DIO_INVALID_PIN_DIRECTION ;
    1466:	92 e0       	ldi	r25, 0x02	; 2
    1468:	9e 83       	std	Y+6, r25	; 0x06
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <DIO_WritePin+0x20e>
		} //END OF ELSE

	}	  //END of IF That checking the port and pin number

	else {
		return E_DIO_INVALID_PORT_NUMBER ;
    146c:	21 e0       	ldi	r18, 0x01	; 1
    146e:	2e 83       	std	Y+6, r18	; 0x06
    1470:	8e 81       	ldd	r24, Y+6	; 0x06

	}	  //END of ELSE
}	  //END of DIO_writePinValue
    1472:	28 96       	adiw	r28, 0x08	; 8
    1474:	0f b6       	in	r0, 0x3f	; 63
    1476:	f8 94       	cli
    1478:	de bf       	out	0x3e, r29	; 62
    147a:	0f be       	out	0x3f, r0	; 63
    147c:	cd bf       	out	0x3d, r28	; 61
    147e:	cf 91       	pop	r28
    1480:	df 91       	pop	r29
    1482:	08 95       	ret

00001484 <DIO_ReadPort>:

/* API to Read Port  Value */
DIO_ERROR_state_t DIO_ReadPort(uint8_t PortID, uint8_t* PortState) {
    1484:	df 93       	push	r29
    1486:	cf 93       	push	r28
    1488:	00 d0       	rcall	.+0      	; 0x148a <DIO_ReadPort+0x6>
    148a:	00 d0       	rcall	.+0      	; 0x148c <DIO_ReadPort+0x8>
    148c:	00 d0       	rcall	.+0      	; 0x148e <DIO_ReadPort+0xa>
    148e:	cd b7       	in	r28, 0x3d	; 61
    1490:	de b7       	in	r29, 0x3e	; 62
    1492:	89 83       	std	Y+1, r24	; 0x01
    1494:	7b 83       	std	Y+3, r23	; 0x03
    1496:	6a 83       	std	Y+2, r22	; 0x02
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA )) {
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	84 30       	cpi	r24, 0x04	; 4
    149c:	e0 f5       	brcc	.+120    	; 0x1516 <DIO_ReadPort+0x92>
		switch (PortID) {
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	3e 83       	std	Y+6, r19	; 0x06
    14a6:	2d 83       	std	Y+5, r18	; 0x05
    14a8:	8d 81       	ldd	r24, Y+5	; 0x05
    14aa:	9e 81       	ldd	r25, Y+6	; 0x06
    14ac:	81 30       	cpi	r24, 0x01	; 1
    14ae:	91 05       	cpc	r25, r1
    14b0:	e1 f0       	breq	.+56     	; 0x14ea <DIO_ReadPort+0x66>
    14b2:	2d 81       	ldd	r18, Y+5	; 0x05
    14b4:	3e 81       	ldd	r19, Y+6	; 0x06
    14b6:	22 30       	cpi	r18, 0x02	; 2
    14b8:	31 05       	cpc	r19, r1
    14ba:	2c f4       	brge	.+10     	; 0x14c6 <DIO_ReadPort+0x42>
    14bc:	8d 81       	ldd	r24, Y+5	; 0x05
    14be:	9e 81       	ldd	r25, Y+6	; 0x06
    14c0:	00 97       	sbiw	r24, 0x00	; 0
    14c2:	61 f0       	breq	.+24     	; 0x14dc <DIO_ReadPort+0x58>
    14c4:	26 c0       	rjmp	.+76     	; 0x1512 <DIO_ReadPort+0x8e>
    14c6:	2d 81       	ldd	r18, Y+5	; 0x05
    14c8:	3e 81       	ldd	r19, Y+6	; 0x06
    14ca:	22 30       	cpi	r18, 0x02	; 2
    14cc:	31 05       	cpc	r19, r1
    14ce:	a1 f0       	breq	.+40     	; 0x14f8 <DIO_ReadPort+0x74>
    14d0:	8d 81       	ldd	r24, Y+5	; 0x05
    14d2:	9e 81       	ldd	r25, Y+6	; 0x06
    14d4:	83 30       	cpi	r24, 0x03	; 3
    14d6:	91 05       	cpc	r25, r1
    14d8:	b1 f0       	breq	.+44     	; 0x1506 <DIO_ReadPort+0x82>
    14da:	1b c0       	rjmp	.+54     	; 0x1512 <DIO_ReadPort+0x8e>
		case PORTA :
			*(PortState) = PORTA_STAT;
    14dc:	e9 e3       	ldi	r30, 0x39	; 57
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	ea 81       	ldd	r30, Y+2	; 0x02
    14e4:	fb 81       	ldd	r31, Y+3	; 0x03
    14e6:	80 83       	st	Z, r24
    14e8:	14 c0       	rjmp	.+40     	; 0x1512 <DIO_ReadPort+0x8e>
			break;
		case PORTB :
			*(PortState) = PORTB_STAT;
    14ea:	e6 e3       	ldi	r30, 0x36	; 54
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	ea 81       	ldd	r30, Y+2	; 0x02
    14f2:	fb 81       	ldd	r31, Y+3	; 0x03
    14f4:	80 83       	st	Z, r24
    14f6:	0d c0       	rjmp	.+26     	; 0x1512 <DIO_ReadPort+0x8e>
			break;
		case PORTC :
			*(PortState) = PORTC_STAT;
    14f8:	e3 e3       	ldi	r30, 0x33	; 51
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	ea 81       	ldd	r30, Y+2	; 0x02
    1500:	fb 81       	ldd	r31, Y+3	; 0x03
    1502:	80 83       	st	Z, r24
    1504:	06 c0       	rjmp	.+12     	; 0x1512 <DIO_ReadPort+0x8e>
			break;
		case PORTD :
			*(PortState) = PORTD_STAT;
    1506:	e0 e3       	ldi	r30, 0x30	; 48
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	ea 81       	ldd	r30, Y+2	; 0x02
    150e:	fb 81       	ldd	r31, Y+3	; 0x03
    1510:	80 83       	st	Z, r24
			break;

		} //END of SWITCH
		return E_DIO_SUCCESS ;
    1512:	1c 82       	std	Y+4, r1	; 0x04
    1514:	02 c0       	rjmp	.+4      	; 0x151a <DIO_ReadPort+0x96>
	}	  //END of IF
	else {
		return E_DIO_INVALID_PORT_NUMBER ;
    1516:	91 e0       	ldi	r25, 0x01	; 1
    1518:	9c 83       	std	Y+4, r25	; 0x04
    151a:	8c 81       	ldd	r24, Y+4	; 0x04

	}	  //END of ELSE
}	  //END of DIO_readPort
    151c:	26 96       	adiw	r28, 0x06	; 6
    151e:	0f b6       	in	r0, 0x3f	; 63
    1520:	f8 94       	cli
    1522:	de bf       	out	0x3e, r29	; 62
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	cd bf       	out	0x3d, r28	; 61
    1528:	cf 91       	pop	r28
    152a:	df 91       	pop	r29
    152c:	08 95       	ret

0000152e <DIO_ReadPin>:

/* API to Read Pin  Value */
DIO_ERROR_state_t DIO_ReadPin(uint8_t PortID, uint8_t PinNumber,
		uint8_t* PinState) {
    152e:	df 93       	push	r29
    1530:	cf 93       	push	r28
    1532:	cd b7       	in	r28, 0x3d	; 61
    1534:	de b7       	in	r29, 0x3e	; 62
    1536:	27 97       	sbiw	r28, 0x07	; 7
    1538:	0f b6       	in	r0, 0x3f	; 63
    153a:	f8 94       	cli
    153c:	de bf       	out	0x3e, r29	; 62
    153e:	0f be       	out	0x3f, r0	; 63
    1540:	cd bf       	out	0x3d, r28	; 61
    1542:	89 83       	std	Y+1, r24	; 0x01
    1544:	6a 83       	std	Y+2, r22	; 0x02
    1546:	5c 83       	std	Y+4, r21	; 0x04
    1548:	4b 83       	std	Y+3, r20	; 0x03
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA ) && (PinNumber >= PIN0 )
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	84 30       	cpi	r24, 0x04	; 4
    154e:	08 f0       	brcs	.+2      	; 0x1552 <DIO_ReadPin+0x24>
    1550:	76 c0       	rjmp	.+236    	; 0x163e <DIO_ReadPin+0x110>
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
    1554:	88 30       	cpi	r24, 0x08	; 8
    1556:	08 f0       	brcs	.+2      	; 0x155a <DIO_ReadPin+0x2c>
    1558:	72 c0       	rjmp	.+228    	; 0x163e <DIO_ReadPin+0x110>
			&& (PinNumber <= PIN7 )) {

		switch (PortID) {
    155a:	89 81       	ldd	r24, Y+1	; 0x01
    155c:	28 2f       	mov	r18, r24
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	3f 83       	std	Y+7, r19	; 0x07
    1562:	2e 83       	std	Y+6, r18	; 0x06
    1564:	4e 81       	ldd	r20, Y+6	; 0x06
    1566:	5f 81       	ldd	r21, Y+7	; 0x07
    1568:	41 30       	cpi	r20, 0x01	; 1
    156a:	51 05       	cpc	r21, r1
    156c:	59 f1       	breq	.+86     	; 0x15c4 <DIO_ReadPin+0x96>
    156e:	8e 81       	ldd	r24, Y+6	; 0x06
    1570:	9f 81       	ldd	r25, Y+7	; 0x07
    1572:	82 30       	cpi	r24, 0x02	; 2
    1574:	91 05       	cpc	r25, r1
    1576:	34 f4       	brge	.+12     	; 0x1584 <DIO_ReadPin+0x56>
    1578:	2e 81       	ldd	r18, Y+6	; 0x06
    157a:	3f 81       	ldd	r19, Y+7	; 0x07
    157c:	21 15       	cp	r18, r1
    157e:	31 05       	cpc	r19, r1
    1580:	69 f0       	breq	.+26     	; 0x159c <DIO_ReadPin+0x6e>
    1582:	5b c0       	rjmp	.+182    	; 0x163a <DIO_ReadPin+0x10c>
    1584:	4e 81       	ldd	r20, Y+6	; 0x06
    1586:	5f 81       	ldd	r21, Y+7	; 0x07
    1588:	42 30       	cpi	r20, 0x02	; 2
    158a:	51 05       	cpc	r21, r1
    158c:	79 f1       	breq	.+94     	; 0x15ec <DIO_ReadPin+0xbe>
    158e:	8e 81       	ldd	r24, Y+6	; 0x06
    1590:	9f 81       	ldd	r25, Y+7	; 0x07
    1592:	83 30       	cpi	r24, 0x03	; 3
    1594:	91 05       	cpc	r25, r1
    1596:	09 f4       	brne	.+2      	; 0x159a <DIO_ReadPin+0x6c>
    1598:	3d c0       	rjmp	.+122    	; 0x1614 <DIO_ReadPin+0xe6>
    159a:	4f c0       	rjmp	.+158    	; 0x163a <DIO_ReadPin+0x10c>
		case PORTA :
			*(PinState) = Get_Bit(PORTA_STAT, PinNumber);
    159c:	e9 e3       	ldi	r30, 0x39	; 57
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	28 2f       	mov	r18, r24
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	88 2f       	mov	r24, r24
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	a9 01       	movw	r20, r18
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <DIO_ReadPin+0x86>
    15b0:	55 95       	asr	r21
    15b2:	47 95       	ror	r20
    15b4:	8a 95       	dec	r24
    15b6:	e2 f7       	brpl	.-8      	; 0x15b0 <DIO_ReadPin+0x82>
    15b8:	ca 01       	movw	r24, r20
    15ba:	81 70       	andi	r24, 0x01	; 1
    15bc:	eb 81       	ldd	r30, Y+3	; 0x03
    15be:	fc 81       	ldd	r31, Y+4	; 0x04
    15c0:	80 83       	st	Z, r24
    15c2:	3b c0       	rjmp	.+118    	; 0x163a <DIO_ReadPin+0x10c>
			break;
		case PORTB :
			*(PinState) = Get_Bit(PORTB_STAT, PinNumber);
    15c4:	e6 e3       	ldi	r30, 0x36	; 54
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	28 2f       	mov	r18, r24
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	8a 81       	ldd	r24, Y+2	; 0x02
    15d0:	88 2f       	mov	r24, r24
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	a9 01       	movw	r20, r18
    15d6:	02 c0       	rjmp	.+4      	; 0x15dc <DIO_ReadPin+0xae>
    15d8:	55 95       	asr	r21
    15da:	47 95       	ror	r20
    15dc:	8a 95       	dec	r24
    15de:	e2 f7       	brpl	.-8      	; 0x15d8 <DIO_ReadPin+0xaa>
    15e0:	ca 01       	movw	r24, r20
    15e2:	81 70       	andi	r24, 0x01	; 1
    15e4:	eb 81       	ldd	r30, Y+3	; 0x03
    15e6:	fc 81       	ldd	r31, Y+4	; 0x04
    15e8:	80 83       	st	Z, r24
    15ea:	27 c0       	rjmp	.+78     	; 0x163a <DIO_ReadPin+0x10c>
			break;
		case PORTC :
			*(PinState) = Get_Bit(PORTC_STAT, PinNumber);
    15ec:	e3 e3       	ldi	r30, 0x33	; 51
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	28 2f       	mov	r18, r24
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	8a 81       	ldd	r24, Y+2	; 0x02
    15f8:	88 2f       	mov	r24, r24
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	a9 01       	movw	r20, r18
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <DIO_ReadPin+0xd6>
    1600:	55 95       	asr	r21
    1602:	47 95       	ror	r20
    1604:	8a 95       	dec	r24
    1606:	e2 f7       	brpl	.-8      	; 0x1600 <DIO_ReadPin+0xd2>
    1608:	ca 01       	movw	r24, r20
    160a:	81 70       	andi	r24, 0x01	; 1
    160c:	eb 81       	ldd	r30, Y+3	; 0x03
    160e:	fc 81       	ldd	r31, Y+4	; 0x04
    1610:	80 83       	st	Z, r24
    1612:	13 c0       	rjmp	.+38     	; 0x163a <DIO_ReadPin+0x10c>
			break;
		case PORTD :
			*(PinState) = Get_Bit(PORTD_STAT, PinNumber);
    1614:	e0 e3       	ldi	r30, 0x30	; 48
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	28 2f       	mov	r18, r24
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	88 2f       	mov	r24, r24
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	a9 01       	movw	r20, r18
    1626:	02 c0       	rjmp	.+4      	; 0x162c <DIO_ReadPin+0xfe>
    1628:	55 95       	asr	r21
    162a:	47 95       	ror	r20
    162c:	8a 95       	dec	r24
    162e:	e2 f7       	brpl	.-8      	; 0x1628 <DIO_ReadPin+0xfa>
    1630:	ca 01       	movw	r24, r20
    1632:	81 70       	andi	r24, 0x01	; 1
    1634:	eb 81       	ldd	r30, Y+3	; 0x03
    1636:	fc 81       	ldd	r31, Y+4	; 0x04
    1638:	80 83       	st	Z, r24
			break;

		} //END of SWITCH
		return E_DIO_SUCCESS ;
    163a:	1d 82       	std	Y+5, r1	; 0x05
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <DIO_ReadPin+0x114>

	}	  //END of IF That checking the port and pin number

	else {
		return E_DIO_INVALID_PORT_NUMBER ;
    163e:	51 e0       	ldi	r21, 0x01	; 1
    1640:	5d 83       	std	Y+5, r21	; 0x05
    1642:	8d 81       	ldd	r24, Y+5	; 0x05

	}	  //END of ELSE
}    //END of DIO_readPint
    1644:	27 96       	adiw	r28, 0x07	; 7
    1646:	0f b6       	in	r0, 0x3f	; 63
    1648:	f8 94       	cli
    164a:	de bf       	out	0x3e, r29	; 62
    164c:	0f be       	out	0x3f, r0	; 63
    164e:	cd bf       	out	0x3d, r28	; 61
    1650:	cf 91       	pop	r28
    1652:	df 91       	pop	r29
    1654:	08 95       	ret

00001656 <DIO_TogglePin>:

/* API to toggle pin*/
DIO_ERROR_state_t DIO_TogglePin(uint8_t PortID, uint8_t PinNumber){
    1656:	df 93       	push	r29
    1658:	cf 93       	push	r28
    165a:	00 d0       	rcall	.+0      	; 0x165c <DIO_TogglePin+0x6>
    165c:	00 d0       	rcall	.+0      	; 0x165e <DIO_TogglePin+0x8>
    165e:	0f 92       	push	r0
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
    1664:	89 83       	std	Y+1, r24	; 0x01
    1666:	6a 83       	std	Y+2, r22	; 0x02
	//Check for the ports if it is between 0 to 3
		if ((PortID <= PORTD ) && (PortID >= PORTA ) && (PinNumber >= PIN0 )
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	84 30       	cpi	r24, 0x04	; 4
    166c:	08 f0       	brcs	.+2      	; 0x1670 <DIO_TogglePin+0x1a>
    166e:	74 c0       	rjmp	.+232    	; 0x1758 <DIO_TogglePin+0x102>
    1670:	8a 81       	ldd	r24, Y+2	; 0x02
    1672:	88 30       	cpi	r24, 0x08	; 8
    1674:	08 f0       	brcs	.+2      	; 0x1678 <DIO_TogglePin+0x22>
    1676:	70 c0       	rjmp	.+224    	; 0x1758 <DIO_TogglePin+0x102>
				&& (PinNumber <= PIN7 )) {
			switch (PortID) {
    1678:	89 81       	ldd	r24, Y+1	; 0x01
    167a:	28 2f       	mov	r18, r24
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	3d 83       	std	Y+5, r19	; 0x05
    1680:	2c 83       	std	Y+4, r18	; 0x04
    1682:	8c 81       	ldd	r24, Y+4	; 0x04
    1684:	9d 81       	ldd	r25, Y+5	; 0x05
    1686:	81 30       	cpi	r24, 0x01	; 1
    1688:	91 05       	cpc	r25, r1
    168a:	49 f1       	breq	.+82     	; 0x16de <DIO_TogglePin+0x88>
    168c:	2c 81       	ldd	r18, Y+4	; 0x04
    168e:	3d 81       	ldd	r19, Y+5	; 0x05
    1690:	22 30       	cpi	r18, 0x02	; 2
    1692:	31 05       	cpc	r19, r1
    1694:	2c f4       	brge	.+10     	; 0x16a0 <DIO_TogglePin+0x4a>
    1696:	8c 81       	ldd	r24, Y+4	; 0x04
    1698:	9d 81       	ldd	r25, Y+5	; 0x05
    169a:	00 97       	sbiw	r24, 0x00	; 0
    169c:	61 f0       	breq	.+24     	; 0x16b6 <DIO_TogglePin+0x60>
    169e:	5a c0       	rjmp	.+180    	; 0x1754 <DIO_TogglePin+0xfe>
    16a0:	2c 81       	ldd	r18, Y+4	; 0x04
    16a2:	3d 81       	ldd	r19, Y+5	; 0x05
    16a4:	22 30       	cpi	r18, 0x02	; 2
    16a6:	31 05       	cpc	r19, r1
    16a8:	71 f1       	breq	.+92     	; 0x1706 <DIO_TogglePin+0xb0>
    16aa:	8c 81       	ldd	r24, Y+4	; 0x04
    16ac:	9d 81       	ldd	r25, Y+5	; 0x05
    16ae:	83 30       	cpi	r24, 0x03	; 3
    16b0:	91 05       	cpc	r25, r1
    16b2:	e9 f1       	breq	.+122    	; 0x172e <DIO_TogglePin+0xd8>
    16b4:	4f c0       	rjmp	.+158    	; 0x1754 <DIO_TogglePin+0xfe>
			case PORTA :
				Toggle_Bit(PORTA_DATA, PinNumber);
    16b6:	ab e3       	ldi	r26, 0x3B	; 59
    16b8:	b0 e0       	ldi	r27, 0x00	; 0
    16ba:	eb e3       	ldi	r30, 0x3B	; 59
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	48 2f       	mov	r20, r24
    16c2:	8a 81       	ldd	r24, Y+2	; 0x02
    16c4:	28 2f       	mov	r18, r24
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	02 2e       	mov	r0, r18
    16ce:	02 c0       	rjmp	.+4      	; 0x16d4 <DIO_TogglePin+0x7e>
    16d0:	88 0f       	add	r24, r24
    16d2:	99 1f       	adc	r25, r25
    16d4:	0a 94       	dec	r0
    16d6:	e2 f7       	brpl	.-8      	; 0x16d0 <DIO_TogglePin+0x7a>
    16d8:	84 27       	eor	r24, r20
    16da:	8c 93       	st	X, r24
    16dc:	3b c0       	rjmp	.+118    	; 0x1754 <DIO_TogglePin+0xfe>
				break;
			case PORTB :
				Toggle_Bit(PORTB_DATA, PinNumber);
    16de:	a8 e3       	ldi	r26, 0x38	; 56
    16e0:	b0 e0       	ldi	r27, 0x00	; 0
    16e2:	e8 e3       	ldi	r30, 0x38	; 56
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	48 2f       	mov	r20, r24
    16ea:	8a 81       	ldd	r24, Y+2	; 0x02
    16ec:	28 2f       	mov	r18, r24
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	02 2e       	mov	r0, r18
    16f6:	02 c0       	rjmp	.+4      	; 0x16fc <DIO_TogglePin+0xa6>
    16f8:	88 0f       	add	r24, r24
    16fa:	99 1f       	adc	r25, r25
    16fc:	0a 94       	dec	r0
    16fe:	e2 f7       	brpl	.-8      	; 0x16f8 <DIO_TogglePin+0xa2>
    1700:	84 27       	eor	r24, r20
    1702:	8c 93       	st	X, r24
    1704:	27 c0       	rjmp	.+78     	; 0x1754 <DIO_TogglePin+0xfe>
				break;
			case PORTC :
				Toggle_Bit(PORTC_DATA, PinNumber);
    1706:	a5 e3       	ldi	r26, 0x35	; 53
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	e5 e3       	ldi	r30, 0x35	; 53
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	48 2f       	mov	r20, r24
    1712:	8a 81       	ldd	r24, Y+2	; 0x02
    1714:	28 2f       	mov	r18, r24
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	02 2e       	mov	r0, r18
    171e:	02 c0       	rjmp	.+4      	; 0x1724 <DIO_TogglePin+0xce>
    1720:	88 0f       	add	r24, r24
    1722:	99 1f       	adc	r25, r25
    1724:	0a 94       	dec	r0
    1726:	e2 f7       	brpl	.-8      	; 0x1720 <DIO_TogglePin+0xca>
    1728:	84 27       	eor	r24, r20
    172a:	8c 93       	st	X, r24
    172c:	13 c0       	rjmp	.+38     	; 0x1754 <DIO_TogglePin+0xfe>
				break;
			case PORTD :
				Toggle_Bit(PORTD_DATA, PinNumber);
    172e:	a2 e3       	ldi	r26, 0x32	; 50
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	e2 e3       	ldi	r30, 0x32	; 50
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	48 2f       	mov	r20, r24
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	28 2f       	mov	r18, r24
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	02 2e       	mov	r0, r18
    1746:	02 c0       	rjmp	.+4      	; 0x174c <DIO_TogglePin+0xf6>
    1748:	88 0f       	add	r24, r24
    174a:	99 1f       	adc	r25, r25
    174c:	0a 94       	dec	r0
    174e:	e2 f7       	brpl	.-8      	; 0x1748 <DIO_TogglePin+0xf2>
    1750:	84 27       	eor	r24, r20
    1752:	8c 93       	st	X, r24
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
    1754:	1b 82       	std	Y+3, r1	; 0x03
    1756:	02 c0       	rjmp	.+4      	; 0x175c <DIO_TogglePin+0x106>

		}	  //END of IF That checking the port and pin number

		else {
			return E_DIO_INVALID_PORT_NUMBER ;
    1758:	91 e0       	ldi	r25, 0x01	; 1
    175a:	9b 83       	std	Y+3, r25	; 0x03
    175c:	8b 81       	ldd	r24, Y+3	; 0x03

		}	  //END of ELSE

}
    175e:	0f 90       	pop	r0
    1760:	0f 90       	pop	r0
    1762:	0f 90       	pop	r0
    1764:	0f 90       	pop	r0
    1766:	0f 90       	pop	r0
    1768:	cf 91       	pop	r28
    176a:	df 91       	pop	r29
    176c:	08 95       	ret

0000176e <DIO_EnablePinPullup>:
DIO_ERROR_state_t DIO_EnablePinPullup(uint8_t PortID, uint8_t PinNumber){
    176e:	df 93       	push	r29
    1770:	cf 93       	push	r28
    1772:	00 d0       	rcall	.+0      	; 0x1774 <DIO_EnablePinPullup+0x6>
    1774:	00 d0       	rcall	.+0      	; 0x1776 <DIO_EnablePinPullup+0x8>
    1776:	0f 92       	push	r0
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
    177c:	89 83       	std	Y+1, r24	; 0x01
    177e:	6a 83       	std	Y+2, r22	; 0x02
	//Check for the ports if it is between 0 to 3
		if ((PortID <= PORTD ) && (PortID >= PORTA ) && (PinNumber >= PIN0 )
    1780:	89 81       	ldd	r24, Y+1	; 0x01
    1782:	84 30       	cpi	r24, 0x04	; 4
    1784:	08 f0       	brcs	.+2      	; 0x1788 <DIO_EnablePinPullup+0x1a>
    1786:	d1 c0       	rjmp	.+418    	; 0x192a <DIO_EnablePinPullup+0x1bc>
    1788:	8a 81       	ldd	r24, Y+2	; 0x02
    178a:	88 30       	cpi	r24, 0x08	; 8
    178c:	08 f0       	brcs	.+2      	; 0x1790 <DIO_EnablePinPullup+0x22>
    178e:	cd c0       	rjmp	.+410    	; 0x192a <DIO_EnablePinPullup+0x1bc>
				&& (PinNumber <= PIN7 )) {
			switch (PortID) {
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	28 2f       	mov	r18, r24
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	3d 83       	std	Y+5, r19	; 0x05
    1798:	2c 83       	std	Y+4, r18	; 0x04
    179a:	4c 81       	ldd	r20, Y+4	; 0x04
    179c:	5d 81       	ldd	r21, Y+5	; 0x05
    179e:	41 30       	cpi	r20, 0x01	; 1
    17a0:	51 05       	cpc	r21, r1
    17a2:	09 f4       	brne	.+2      	; 0x17a6 <DIO_EnablePinPullup+0x38>
    17a4:	42 c0       	rjmp	.+132    	; 0x182a <DIO_EnablePinPullup+0xbc>
    17a6:	8c 81       	ldd	r24, Y+4	; 0x04
    17a8:	9d 81       	ldd	r25, Y+5	; 0x05
    17aa:	82 30       	cpi	r24, 0x02	; 2
    17ac:	91 05       	cpc	r25, r1
    17ae:	34 f4       	brge	.+12     	; 0x17bc <DIO_EnablePinPullup+0x4e>
    17b0:	2c 81       	ldd	r18, Y+4	; 0x04
    17b2:	3d 81       	ldd	r19, Y+5	; 0x05
    17b4:	21 15       	cp	r18, r1
    17b6:	31 05       	cpc	r19, r1
    17b8:	71 f0       	breq	.+28     	; 0x17d6 <DIO_EnablePinPullup+0x68>
    17ba:	b5 c0       	rjmp	.+362    	; 0x1926 <DIO_EnablePinPullup+0x1b8>
    17bc:	4c 81       	ldd	r20, Y+4	; 0x04
    17be:	5d 81       	ldd	r21, Y+5	; 0x05
    17c0:	42 30       	cpi	r20, 0x02	; 2
    17c2:	51 05       	cpc	r21, r1
    17c4:	09 f4       	brne	.+2      	; 0x17c8 <DIO_EnablePinPullup+0x5a>
    17c6:	5b c0       	rjmp	.+182    	; 0x187e <DIO_EnablePinPullup+0x110>
    17c8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ca:	9d 81       	ldd	r25, Y+5	; 0x05
    17cc:	83 30       	cpi	r24, 0x03	; 3
    17ce:	91 05       	cpc	r25, r1
    17d0:	09 f4       	brne	.+2      	; 0x17d4 <DIO_EnablePinPullup+0x66>
    17d2:	7f c0       	rjmp	.+254    	; 0x18d2 <DIO_EnablePinPullup+0x164>
    17d4:	a8 c0       	rjmp	.+336    	; 0x1926 <DIO_EnablePinPullup+0x1b8>
			case PORTA :
				if(Get_Bit(PORTA_DIR, PinNumber)==PIN_INPUT){
    17d6:	ea e3       	ldi	r30, 0x3A	; 58
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	28 2f       	mov	r18, r24
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	8a 81       	ldd	r24, Y+2	; 0x02
    17e2:	88 2f       	mov	r24, r24
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	a9 01       	movw	r20, r18
    17e8:	02 c0       	rjmp	.+4      	; 0x17ee <DIO_EnablePinPullup+0x80>
    17ea:	55 95       	asr	r21
    17ec:	47 95       	ror	r20
    17ee:	8a 95       	dec	r24
    17f0:	e2 f7       	brpl	.-8      	; 0x17ea <DIO_EnablePinPullup+0x7c>
    17f2:	ca 01       	movw	r24, r20
    17f4:	81 70       	andi	r24, 0x01	; 1
    17f6:	90 70       	andi	r25, 0x00	; 0
    17f8:	00 97       	sbiw	r24, 0x00	; 0
    17fa:	a1 f4       	brne	.+40     	; 0x1824 <DIO_EnablePinPullup+0xb6>
					Set_Bit(PORTA_DATA, PinNumber);
    17fc:	ab e3       	ldi	r26, 0x3B	; 59
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	eb e3       	ldi	r30, 0x3B	; 59
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	48 2f       	mov	r20, r24
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	28 2f       	mov	r18, r24
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	02 2e       	mov	r0, r18
    1814:	02 c0       	rjmp	.+4      	; 0x181a <DIO_EnablePinPullup+0xac>
    1816:	88 0f       	add	r24, r24
    1818:	99 1f       	adc	r25, r25
    181a:	0a 94       	dec	r0
    181c:	e2 f7       	brpl	.-8      	; 0x1816 <DIO_EnablePinPullup+0xa8>
    181e:	84 2b       	or	r24, r20
    1820:	8c 93       	st	X, r24
    1822:	81 c0       	rjmp	.+258    	; 0x1926 <DIO_EnablePinPullup+0x1b8>
				}// END of IF which checking if the  pin is INPUT
				else{
					return E_DIO_SET_TO_NON_INPUT;
    1824:	53 e0       	ldi	r21, 0x03	; 3
    1826:	5b 83       	std	Y+3, r21	; 0x03
    1828:	82 c0       	rjmp	.+260    	; 0x192e <DIO_EnablePinPullup+0x1c0>
				}
				break;
			case PORTB :
				if(Get_Bit(PORTB_DIR, PinNumber)==PIN_INPUT){
    182a:	e7 e3       	ldi	r30, 0x37	; 55
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	28 2f       	mov	r18, r24
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	88 2f       	mov	r24, r24
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	a9 01       	movw	r20, r18
    183c:	02 c0       	rjmp	.+4      	; 0x1842 <DIO_EnablePinPullup+0xd4>
    183e:	55 95       	asr	r21
    1840:	47 95       	ror	r20
    1842:	8a 95       	dec	r24
    1844:	e2 f7       	brpl	.-8      	; 0x183e <DIO_EnablePinPullup+0xd0>
    1846:	ca 01       	movw	r24, r20
    1848:	81 70       	andi	r24, 0x01	; 1
    184a:	90 70       	andi	r25, 0x00	; 0
    184c:	00 97       	sbiw	r24, 0x00	; 0
    184e:	a1 f4       	brne	.+40     	; 0x1878 <DIO_EnablePinPullup+0x10a>
					Set_Bit(PORTB_DATA, PinNumber);
    1850:	a8 e3       	ldi	r26, 0x38	; 56
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	e8 e3       	ldi	r30, 0x38	; 56
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	48 2f       	mov	r20, r24
    185c:	8a 81       	ldd	r24, Y+2	; 0x02
    185e:	28 2f       	mov	r18, r24
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	02 2e       	mov	r0, r18
    1868:	02 c0       	rjmp	.+4      	; 0x186e <DIO_EnablePinPullup+0x100>
    186a:	88 0f       	add	r24, r24
    186c:	99 1f       	adc	r25, r25
    186e:	0a 94       	dec	r0
    1870:	e2 f7       	brpl	.-8      	; 0x186a <DIO_EnablePinPullup+0xfc>
    1872:	84 2b       	or	r24, r20
    1874:	8c 93       	st	X, r24
    1876:	57 c0       	rjmp	.+174    	; 0x1926 <DIO_EnablePinPullup+0x1b8>
				}// END of IF which checking if the  pin is INPUT
				else{
					return E_DIO_SET_TO_NON_INPUT;
    1878:	53 e0       	ldi	r21, 0x03	; 3
    187a:	5b 83       	std	Y+3, r21	; 0x03
    187c:	58 c0       	rjmp	.+176    	; 0x192e <DIO_EnablePinPullup+0x1c0>
				}
				break;
			case PORTC :
				if(Get_Bit(PORTC_DIR, PinNumber)==PIN_INPUT){
    187e:	e4 e3       	ldi	r30, 0x34	; 52
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	28 2f       	mov	r18, r24
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	8a 81       	ldd	r24, Y+2	; 0x02
    188a:	88 2f       	mov	r24, r24
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	a9 01       	movw	r20, r18
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <DIO_EnablePinPullup+0x128>
    1892:	55 95       	asr	r21
    1894:	47 95       	ror	r20
    1896:	8a 95       	dec	r24
    1898:	e2 f7       	brpl	.-8      	; 0x1892 <DIO_EnablePinPullup+0x124>
    189a:	ca 01       	movw	r24, r20
    189c:	81 70       	andi	r24, 0x01	; 1
    189e:	90 70       	andi	r25, 0x00	; 0
    18a0:	00 97       	sbiw	r24, 0x00	; 0
    18a2:	a1 f4       	brne	.+40     	; 0x18cc <DIO_EnablePinPullup+0x15e>
					Set_Bit(PORTC_DATA, PinNumber);
    18a4:	a5 e3       	ldi	r26, 0x35	; 53
    18a6:	b0 e0       	ldi	r27, 0x00	; 0
    18a8:	e5 e3       	ldi	r30, 0x35	; 53
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	80 81       	ld	r24, Z
    18ae:	48 2f       	mov	r20, r24
    18b0:	8a 81       	ldd	r24, Y+2	; 0x02
    18b2:	28 2f       	mov	r18, r24
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	02 2e       	mov	r0, r18
    18bc:	02 c0       	rjmp	.+4      	; 0x18c2 <DIO_EnablePinPullup+0x154>
    18be:	88 0f       	add	r24, r24
    18c0:	99 1f       	adc	r25, r25
    18c2:	0a 94       	dec	r0
    18c4:	e2 f7       	brpl	.-8      	; 0x18be <DIO_EnablePinPullup+0x150>
    18c6:	84 2b       	or	r24, r20
    18c8:	8c 93       	st	X, r24
    18ca:	2d c0       	rjmp	.+90     	; 0x1926 <DIO_EnablePinPullup+0x1b8>
				}// END of IF which checking if the  pin is INPUT
				else{
					return E_DIO_SET_TO_NON_INPUT;
    18cc:	53 e0       	ldi	r21, 0x03	; 3
    18ce:	5b 83       	std	Y+3, r21	; 0x03
    18d0:	2e c0       	rjmp	.+92     	; 0x192e <DIO_EnablePinPullup+0x1c0>
				}
				break;
			case PORTD :
				if(Get_Bit(PORTD_DIR, PinNumber)==PIN_INPUT){
    18d2:	e1 e3       	ldi	r30, 0x31	; 49
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	28 2f       	mov	r18, r24
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	88 2f       	mov	r24, r24
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	a9 01       	movw	r20, r18
    18e4:	02 c0       	rjmp	.+4      	; 0x18ea <DIO_EnablePinPullup+0x17c>
    18e6:	55 95       	asr	r21
    18e8:	47 95       	ror	r20
    18ea:	8a 95       	dec	r24
    18ec:	e2 f7       	brpl	.-8      	; 0x18e6 <DIO_EnablePinPullup+0x178>
    18ee:	ca 01       	movw	r24, r20
    18f0:	81 70       	andi	r24, 0x01	; 1
    18f2:	90 70       	andi	r25, 0x00	; 0
    18f4:	00 97       	sbiw	r24, 0x00	; 0
    18f6:	a1 f4       	brne	.+40     	; 0x1920 <DIO_EnablePinPullup+0x1b2>
					Set_Bit(PORTD_DATA, PinNumber);
    18f8:	a2 e3       	ldi	r26, 0x32	; 50
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	e2 e3       	ldi	r30, 0x32	; 50
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	48 2f       	mov	r20, r24
    1904:	8a 81       	ldd	r24, Y+2	; 0x02
    1906:	28 2f       	mov	r18, r24
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	02 2e       	mov	r0, r18
    1910:	02 c0       	rjmp	.+4      	; 0x1916 <DIO_EnablePinPullup+0x1a8>
    1912:	88 0f       	add	r24, r24
    1914:	99 1f       	adc	r25, r25
    1916:	0a 94       	dec	r0
    1918:	e2 f7       	brpl	.-8      	; 0x1912 <DIO_EnablePinPullup+0x1a4>
    191a:	84 2b       	or	r24, r20
    191c:	8c 93       	st	X, r24
    191e:	03 c0       	rjmp	.+6      	; 0x1926 <DIO_EnablePinPullup+0x1b8>
				}// END of IF which checking if the  pin is INPUT
				else{
					return E_DIO_SET_TO_NON_INPUT;
    1920:	53 e0       	ldi	r21, 0x03	; 3
    1922:	5b 83       	std	Y+3, r21	; 0x03
    1924:	04 c0       	rjmp	.+8      	; 0x192e <DIO_EnablePinPullup+0x1c0>
				}
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
    1926:	1b 82       	std	Y+3, r1	; 0x03
    1928:	02 c0       	rjmp	.+4      	; 0x192e <DIO_EnablePinPullup+0x1c0>

		}	  //END of IF That checking the port and pin number

		else {
			return E_DIO_INVALID_PORT_NUMBER ;
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	8b 83       	std	Y+3, r24	; 0x03
    192e:	8b 81       	ldd	r24, Y+3	; 0x03

		}	  //END of ELSE

}
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	cf 91       	pop	r28
    193c:	df 91       	pop	r29
    193e:	08 95       	ret

00001940 <ADC_Init>:
/*- APIs IMPLEMENTATION
 -----------------------------------*/
/**************
 *INIT THE ADC*
 **************/
ADC_ERROR_state_t ADC_Init(uint8_t ACD_CH) {
    1940:	df 93       	push	r29
    1942:	cf 93       	push	r28
    1944:	00 d0       	rcall	.+0      	; 0x1946 <ADC_Init+0x6>
    1946:	cd b7       	in	r28, 0x3d	; 61
    1948:	de b7       	in	r29, 0x3e	; 62
    194a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t au8_ERROR_STAT=ADC_SUCCESS;//ERRROR STAT HAS A SUCCESS VALUE AS DEFAULT
    194c:	19 82       	std	Y+1, r1	; 0x01
	if (INIT==gu8_InitFlag){
    194e:	80 91 e2 00 	lds	r24, 0x00E2
    1952:	81 30       	cpi	r24, 0x01	; 1
    1954:	19 f4       	brne	.+6      	; 0x195c <ADC_Init+0x1c>
		au8_ERROR_STAT=ADC_SEC_INIT;
    1956:	8f ef       	ldi	r24, 0xFF	; 255
    1958:	89 83       	std	Y+1, r24	; 0x01
    195a:	25 c0       	rjmp	.+74     	; 0x19a6 <ADC_Init+0x66>
	}
	else if (NOT_INIT==gu8_InitFlag){
    195c:	80 91 e2 00 	lds	r24, 0x00E2
    1960:	88 23       	and	r24, r24
    1962:	09 f5       	brne	.+66     	; 0x19a6 <ADC_Init+0x66>
	/*Enable the ADC*/
	Set_Bit(ADCSRA, ADEN);
    1964:	a6 e2       	ldi	r26, 0x26	; 38
    1966:	b0 e0       	ldi	r27, 0x00	; 0
    1968:	e6 e2       	ldi	r30, 0x26	; 38
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	80 68       	ori	r24, 0x80	; 128
    1970:	8c 93       	st	X, r24
	/*Set the prescaler*/
	ADCSRA |= ADC_PRESCALER;
    1972:	a6 e2       	ldi	r26, 0x26	; 38
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	e6 e2       	ldi	r30, 0x26	; 38
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	81 60       	ori	r24, 0x01	; 1
    197e:	8c 93       	st	X, r24
	/*Set the voltage Ref.*/
	ADMUX |= ADC_Voltage_Ref;
    1980:	a7 e2       	ldi	r26, 0x27	; 39
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	e7 e2       	ldi	r30, 0x27	; 39
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	8c 93       	st	X, r24
	/*Adjust left or right*/
	ADMUX |= ADC_ADJUST;
    198c:	a7 e2       	ldi	r26, 0x27	; 39
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e7 e2       	ldi	r30, 0x27	; 39
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	8c 93       	st	X, r24
	/*Set the Auto trigger*/
#if ADC_AUTO_TRIGGER
	Set_Bit(ADCSRA, ADATE);//IF AUTO TRIGGER IS ON
	SFIOR |= ADC_AUTO_TRIGGER_SOURCE; //SET THE AUTO TRIGGER SOURCE
#else
	Clr_Bit(ADCSRA,ADATE);//IF AUTO TRRIGGERR IS OFF
    1998:	a6 e2       	ldi	r26, 0x26	; 38
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	e6 e2       	ldi	r30, 0x26	; 38
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	8f 7d       	andi	r24, 0xDF	; 223
    19a4:	8c 93       	st	X, r24
#endif
	}
	else{
	//DO NOTHING
	}
	gu8_InitFlag=INIT;
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	80 93 e2 00 	sts	0x00E2, r24
	return au8_ERROR_STAT;
    19ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	cf 91       	pop	r28
    19b4:	df 91       	pop	r29
    19b6:	08 95       	ret

000019b8 <ADC_StartSingleConversion>:
/***************************
 *START A SINGLE CONVERSION*
 ***************************/
ADC_ERROR_state_t ADC_StartSingleConversion(uint8_t ADC_Ch) {
    19b8:	df 93       	push	r29
    19ba:	cf 93       	push	r28
    19bc:	00 d0       	rcall	.+0      	; 0x19be <ADC_StartSingleConversion+0x6>
    19be:	cd b7       	in	r28, 0x3d	; 61
    19c0:	de b7       	in	r29, 0x3e	; 62
    19c2:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t au8_ERROR_STAT=ADC_SUCCESS;//ERRROR STAT HAS A SUCCESS VALUE AS DEFAULT
    19c4:	19 82       	std	Y+1, r1	; 0x01
	if(NOT_INIT==gu8_InitFlag){
    19c6:	80 91 e2 00 	lds	r24, 0x00E2
    19ca:	88 23       	and	r24, r24
    19cc:	19 f4       	brne	.+6      	; 0x19d4 <ADC_StartSingleConversion+0x1c>
		au8_ERROR_STAT=ADC_NOT_INIT;
    19ce:	8e ef       	ldi	r24, 0xFE	; 254
    19d0:	89 83       	std	Y+1, r24	; 0x01
    19d2:	13 c0       	rjmp	.+38     	; 0x19fa <ADC_StartSingleConversion+0x42>
	}
	else if (INIT==gu8_InitFlag){
    19d4:	80 91 e2 00 	lds	r24, 0x00E2
    19d8:	81 30       	cpi	r24, 0x01	; 1
    19da:	79 f4       	brne	.+30     	; 0x19fa <ADC_StartSingleConversion+0x42>
	/*Select the ADC channel*/
	ADMUX |= ADC_Ch;
    19dc:	a7 e2       	ldi	r26, 0x27	; 39
    19de:	b0 e0       	ldi	r27, 0x00	; 0
    19e0:	e7 e2       	ldi	r30, 0x27	; 39
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	90 81       	ld	r25, Z
    19e6:	8a 81       	ldd	r24, Y+2	; 0x02
    19e8:	89 2b       	or	r24, r25
    19ea:	8c 93       	st	X, r24
	/*Start Single Conversion*/
	Set_Bit(ADCSRA, 6);
    19ec:	a6 e2       	ldi	r26, 0x26	; 38
    19ee:	b0 e0       	ldi	r27, 0x00	; 0
    19f0:	e6 e2       	ldi	r30, 0x26	; 38
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	80 81       	ld	r24, Z
    19f6:	80 64       	ori	r24, 0x40	; 64
    19f8:	8c 93       	st	X, r24
	}
	else{
		//DO NOTHING
	}
	return au8_ERROR_STAT;
    19fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    19fc:	0f 90       	pop	r0
    19fe:	0f 90       	pop	r0
    1a00:	cf 91       	pop	r28
    1a02:	df 91       	pop	r29
    1a04:	08 95       	ret

00001a06 <ADC_Read>:
ADC_ERROR_state_t ADC_Read(uint8_t ADC_Ch, uint16_t *  ADC_DATA) {
    1a06:	df 93       	push	r29
    1a08:	cf 93       	push	r28
    1a0a:	00 d0       	rcall	.+0      	; 0x1a0c <ADC_Read+0x6>
    1a0c:	00 d0       	rcall	.+0      	; 0x1a0e <ADC_Read+0x8>
    1a0e:	cd b7       	in	r28, 0x3d	; 61
    1a10:	de b7       	in	r29, 0x3e	; 62
    1a12:	8a 83       	std	Y+2, r24	; 0x02
    1a14:	7c 83       	std	Y+4, r23	; 0x04
    1a16:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t au8_ERROR_STAT=ADC_SUCCESS;//ERRROR STAT HAS A SUCCESS VALUE AS DEFAULT
    1a18:	19 82       	std	Y+1, r1	; 0x01
	//In case ADC NOT WORKING IN AUTO TRIGGERING MODE START THE CONVERSION
#if (!ADC_AUTO_TRIGGER)
	ADC_StartSingleConversion(ADC_Ch);
    1a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <ADC_StartSingleConversion>
#endif
	//MAKE SURE THE POINTER PASSED TO FUNCTION IS NOT NULL
	if(NULL_PTR==ADC_DATA){
    1a20:	8b 81       	ldd	r24, Y+3	; 0x03
    1a22:	9c 81       	ldd	r25, Y+4	; 0x04
    1a24:	00 97       	sbiw	r24, 0x00	; 0
    1a26:	11 f4       	brne	.+4      	; 0x1a2c <ADC_Read+0x26>
		au8_ERROR_STAT=ADC_NULL_POINTER;
    1a28:	8d ef       	ldi	r24, 0xFD	; 253
    1a2a:	89 83       	std	Y+1, r24	; 0x01
	}
	//IF ADC IS NOT  INITIALIZED
	if(NOT_INIT==gu8_InitFlag){
    1a2c:	80 91 e2 00 	lds	r24, 0x00E2
    1a30:	88 23       	and	r24, r24
    1a32:	19 f4       	brne	.+6      	; 0x1a3a <ADC_Read+0x34>
		au8_ERROR_STAT=ADC_NOT_INIT;
    1a34:	8e ef       	ldi	r24, 0xFE	; 254
    1a36:	89 83       	std	Y+1, r24	; 0x01
    1a38:	1e c0       	rjmp	.+60     	; 0x1a76 <ADC_Read+0x70>
	}
	else if (INIT==gu8_InitFlag){
    1a3a:	80 91 e2 00 	lds	r24, 0x00E2
    1a3e:	81 30       	cpi	r24, 0x01	; 1
    1a40:	d1 f4       	brne	.+52     	; 0x1a76 <ADC_Read+0x70>
    /*wait for the conversion*/
	while (!Get_Bit(ADCSRA, ADIF))
    1a42:	e6 e2       	ldi	r30, 0x26	; 38
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	82 95       	swap	r24
    1a4a:	8f 70       	andi	r24, 0x0F	; 15
    1a4c:	88 2f       	mov	r24, r24
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	81 70       	andi	r24, 0x01	; 1
    1a52:	90 70       	andi	r25, 0x00	; 0
    1a54:	00 97       	sbiw	r24, 0x00	; 0
    1a56:	a9 f3       	breq	.-22     	; 0x1a42 <ADC_Read+0x3c>
		;
     /*ADC Flag Clear*/
	Set_Bit(ADCSRA, ADIF);
    1a58:	a6 e2       	ldi	r26, 0x26	; 38
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e6 e2       	ldi	r30, 0x26	; 38
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	80 61       	ori	r24, 0x10	; 16
    1a64:	8c 93       	st	X, r24
	/*Return the value*/
	*ADC_DATA = ADC;
    1a66:	e4 e2       	ldi	r30, 0x24	; 36
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	91 81       	ldd	r25, Z+1	; 0x01
    1a6e:	eb 81       	ldd	r30, Y+3	; 0x03
    1a70:	fc 81       	ldd	r31, Y+4	; 0x04
    1a72:	91 83       	std	Z+1, r25	; 0x01
    1a74:	80 83       	st	Z, r24
	}
	else{
		//DO NOTHING
	}
	return au8_ERROR_STAT;
    1a76:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a78:	0f 90       	pop	r0
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	0f 90       	pop	r0
    1a80:	cf 91       	pop	r28
    1a82:	df 91       	pop	r29
    1a84:	08 95       	ret

00001a86 <ADC_EnInterrupt>:
ADC_ERROR_state_t ADC_EnInterrupt(void){
    1a86:	df 93       	push	r29
    1a88:	cf 93       	push	r28
    1a8a:	0f 92       	push	r0
    1a8c:	cd b7       	in	r28, 0x3d	; 61
    1a8e:	de b7       	in	r29, 0x3e	; 62
	uint8_t au8_ERROR_STAT=ADC_SUCCESS;//ERRROR STAT HAS A SUCCESS VALUE AS DEFAULT
    1a90:	19 82       	std	Y+1, r1	; 0x01
	//IF ADC IS NOT  INITIALIZED
	if(NOT_INIT==gu8_InitFlag){
    1a92:	80 91 e2 00 	lds	r24, 0x00E2
    1a96:	88 23       	and	r24, r24
    1a98:	19 f4       	brne	.+6      	; 0x1aa0 <ADC_EnInterrupt+0x1a>
		au8_ERROR_STAT=ADC_NOT_INIT;
    1a9a:	8e ef       	ldi	r24, 0xFE	; 254
    1a9c:	89 83       	std	Y+1, r24	; 0x01
    1a9e:	0b c0       	rjmp	.+22     	; 0x1ab6 <ADC_EnInterrupt+0x30>
	}
	//MAKE SURE ADC IS INITIALIZED
	else if (INIT==gu8_InitFlag){
    1aa0:	80 91 e2 00 	lds	r24, 0x00E2
    1aa4:	81 30       	cpi	r24, 0x01	; 1
    1aa6:	39 f4       	brne	.+14     	; 0x1ab6 <ADC_EnInterrupt+0x30>
	Set_Bit(ADCSRA, ADIE);
    1aa8:	a6 e2       	ldi	r26, 0x26	; 38
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	e6 e2       	ldi	r30, 0x26	; 38
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	88 60       	ori	r24, 0x08	; 8
    1ab4:	8c 93       	st	X, r24
	}
	else{
		//DO NOTHING
	}
	return au8_ERROR_STAT;
    1ab6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ab8:	0f 90       	pop	r0
    1aba:	cf 91       	pop	r28
    1abc:	df 91       	pop	r29
    1abe:	08 95       	ret

00001ac0 <ADC_DisInterrupt>:
ADC_ERROR_state_t ADC_DisInterrupt(void){
    1ac0:	df 93       	push	r29
    1ac2:	cf 93       	push	r28
    1ac4:	0f 92       	push	r0
    1ac6:	cd b7       	in	r28, 0x3d	; 61
    1ac8:	de b7       	in	r29, 0x3e	; 62
	uint8_t au8_ERROR_STAT=ADC_SUCCESS;//ERRROR STAT HAS A SUCCESS VALUE AS DEFAULT
    1aca:	19 82       	std	Y+1, r1	; 0x01
	//IF ADC IS NOT  INITIALIZED
	if(NOT_INIT==gu8_InitFlag){
    1acc:	80 91 e2 00 	lds	r24, 0x00E2
    1ad0:	88 23       	and	r24, r24
    1ad2:	19 f4       	brne	.+6      	; 0x1ada <ADC_DisInterrupt+0x1a>
		au8_ERROR_STAT=ADC_NOT_INIT;
    1ad4:	8e ef       	ldi	r24, 0xFE	; 254
    1ad6:	89 83       	std	Y+1, r24	; 0x01
    1ad8:	0b c0       	rjmp	.+22     	; 0x1af0 <ADC_DisInterrupt+0x30>
	}
	//MAKE SURE ADC IS INITIALIZED
	else if (INIT==gu8_InitFlag){
    1ada:	80 91 e2 00 	lds	r24, 0x00E2
    1ade:	81 30       	cpi	r24, 0x01	; 1
    1ae0:	39 f4       	brne	.+14     	; 0x1af0 <ADC_DisInterrupt+0x30>
	Clr_Bit(ADCSRA, ADIE);
    1ae2:	a6 e2       	ldi	r26, 0x26	; 38
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	e6 e2       	ldi	r30, 0x26	; 38
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	87 7f       	andi	r24, 0xF7	; 247
    1aee:	8c 93       	st	X, r24
	}
	else{
		//DO NOTHING
	}
	return au8_ERROR_STAT;
    1af0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1af2:	0f 90       	pop	r0
    1af4:	cf 91       	pop	r28
    1af6:	df 91       	pop	r29
    1af8:	08 95       	ret

00001afa <ADC_SetCallback>:
ADC_ERROR_state_t ADC_SetCallback(Ptr_VoidFuncVoid_t Callback){
    1afa:	df 93       	push	r29
    1afc:	cf 93       	push	r28
    1afe:	00 d0       	rcall	.+0      	; 0x1b00 <ADC_SetCallback+0x6>
    1b00:	0f 92       	push	r0
    1b02:	cd b7       	in	r28, 0x3d	; 61
    1b04:	de b7       	in	r29, 0x3e	; 62
    1b06:	9b 83       	std	Y+3, r25	; 0x03
    1b08:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t au8_ERROR_STAT=0;
    1b0a:	19 82       	std	Y+1, r1	; 0x01
	//MAKE SURE THE POINTER PASSED TO FUNCTION IS NOT NULL
	if(NULL_PTR==Callback){
    1b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b10:	00 97       	sbiw	r24, 0x00	; 0
    1b12:	11 f4       	brne	.+4      	; 0x1b18 <ADC_SetCallback+0x1e>
		au8_ERROR_STAT=ADC_NULL_POINTER;
    1b14:	8d ef       	ldi	r24, 0xFD	; 253
    1b16:	89 83       	std	Y+1, r24	; 0x01
	}
	//IF ADC IS NOT  INITIALIZED
	if(NOT_INIT==gu8_InitFlag){
    1b18:	80 91 e2 00 	lds	r24, 0x00E2
    1b1c:	88 23       	and	r24, r24
    1b1e:	19 f4       	brne	.+6      	; 0x1b26 <ADC_SetCallback+0x2c>
		au8_ERROR_STAT=ADC_NOT_INIT;
    1b20:	8e ef       	ldi	r24, 0xFE	; 254
    1b22:	89 83       	std	Y+1, r24	; 0x01
    1b24:	0a c0       	rjmp	.+20     	; 0x1b3a <ADC_SetCallback+0x40>
	}
	//MAKE SURE ADC IS INITIALIZED
	else if (INIT==gu8_InitFlag){
    1b26:	80 91 e2 00 	lds	r24, 0x00E2
    1b2a:	81 30       	cpi	r24, 0x01	; 1
    1b2c:	31 f4       	brne	.+12     	; 0x1b3a <ADC_SetCallback+0x40>
		//ASSIGN THE FUNCTION TO THE POINTER
		G_ADC_CALLBACK=Callback;
    1b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b30:	9b 81       	ldd	r25, Y+3	; 0x03
    1b32:	90 93 f5 00 	sts	0x00F5, r25
    1b36:	80 93 f4 00 	sts	0x00F4, r24
	}
	else{
		//DO NOTHING
	}
	//RETURN THE ERROR STAT IF IT'S = 0 THEN SUCCESS
	return au8_ERROR_STAT;
    1b3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b3c:	0f 90       	pop	r0
    1b3e:	0f 90       	pop	r0
    1b40:	0f 90       	pop	r0
    1b42:	cf 91       	pop	r28
    1b44:	df 91       	pop	r29
    1b46:	08 95       	ret

00001b48 <__vector_16>:

void __vector_16 (void) __attribute__((signal));

void __vector_16(void) {
    1b48:	1f 92       	push	r1
    1b4a:	0f 92       	push	r0
    1b4c:	0f b6       	in	r0, 0x3f	; 63
    1b4e:	0f 92       	push	r0
    1b50:	11 24       	eor	r1, r1
    1b52:	2f 93       	push	r18
    1b54:	3f 93       	push	r19
    1b56:	4f 93       	push	r20
    1b58:	5f 93       	push	r21
    1b5a:	6f 93       	push	r22
    1b5c:	7f 93       	push	r23
    1b5e:	8f 93       	push	r24
    1b60:	9f 93       	push	r25
    1b62:	af 93       	push	r26
    1b64:	bf 93       	push	r27
    1b66:	ef 93       	push	r30
    1b68:	ff 93       	push	r31
    1b6a:	df 93       	push	r29
    1b6c:	cf 93       	push	r28
    1b6e:	cd b7       	in	r28, 0x3d	; 61
    1b70:	de b7       	in	r29, 0x3e	; 62
	G_ADC_CALLBACK();
    1b72:	e0 91 f4 00 	lds	r30, 0x00F4
    1b76:	f0 91 f5 00 	lds	r31, 0x00F5
    1b7a:	09 95       	icall
}
    1b7c:	cf 91       	pop	r28
    1b7e:	df 91       	pop	r29
    1b80:	ff 91       	pop	r31
    1b82:	ef 91       	pop	r30
    1b84:	bf 91       	pop	r27
    1b86:	af 91       	pop	r26
    1b88:	9f 91       	pop	r25
    1b8a:	8f 91       	pop	r24
    1b8c:	7f 91       	pop	r23
    1b8e:	6f 91       	pop	r22
    1b90:	5f 91       	pop	r21
    1b92:	4f 91       	pop	r20
    1b94:	3f 91       	pop	r19
    1b96:	2f 91       	pop	r18
    1b98:	0f 90       	pop	r0
    1b9a:	0f be       	out	0x3f, r0	; 63
    1b9c:	0f 90       	pop	r0
    1b9e:	1f 90       	pop	r1
    1ba0:	18 95       	reti

00001ba2 <TEMP_Init>:
#include"temp.h"

uint8_t TEMP_Init(uint8_t Temp_ch) {
    1ba2:	df 93       	push	r29
    1ba4:	cf 93       	push	r28
    1ba6:	00 d0       	rcall	.+0      	; 0x1ba8 <TEMP_Init+0x6>
    1ba8:	0f 92       	push	r0
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
    1bae:	89 83       	std	Y+1, r24	; 0x01
	switch (Temp_ch) {
    1bb0:	89 81       	ldd	r24, Y+1	; 0x01
    1bb2:	28 2f       	mov	r18, r24
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	3b 83       	std	Y+3, r19	; 0x03
    1bb8:	2a 83       	std	Y+2, r18	; 0x02
    1bba:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbc:	9b 81       	ldd	r25, Y+3	; 0x03
    1bbe:	83 30       	cpi	r24, 0x03	; 3
    1bc0:	91 05       	cpc	r25, r1
    1bc2:	a9 f1       	breq	.+106    	; 0x1c2e <TEMP_Init+0x8c>
    1bc4:	2a 81       	ldd	r18, Y+2	; 0x02
    1bc6:	3b 81       	ldd	r19, Y+3	; 0x03
    1bc8:	24 30       	cpi	r18, 0x04	; 4
    1bca:	31 05       	cpc	r19, r1
    1bcc:	7c f4       	brge	.+30     	; 0x1bec <TEMP_Init+0x4a>
    1bce:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd0:	9b 81       	ldd	r25, Y+3	; 0x03
    1bd2:	81 30       	cpi	r24, 0x01	; 1
    1bd4:	91 05       	cpc	r25, r1
    1bd6:	19 f1       	breq	.+70     	; 0x1c1e <TEMP_Init+0x7c>
    1bd8:	2a 81       	ldd	r18, Y+2	; 0x02
    1bda:	3b 81       	ldd	r19, Y+3	; 0x03
    1bdc:	22 30       	cpi	r18, 0x02	; 2
    1bde:	31 05       	cpc	r19, r1
    1be0:	14 f5       	brge	.+68     	; 0x1c26 <TEMP_Init+0x84>
    1be2:	8a 81       	ldd	r24, Y+2	; 0x02
    1be4:	9b 81       	ldd	r25, Y+3	; 0x03
    1be6:	00 97       	sbiw	r24, 0x00	; 0
    1be8:	b1 f0       	breq	.+44     	; 0x1c16 <TEMP_Init+0x74>
    1bea:	39 c0       	rjmp	.+114    	; 0x1c5e <TEMP_Init+0xbc>
    1bec:	2a 81       	ldd	r18, Y+2	; 0x02
    1bee:	3b 81       	ldd	r19, Y+3	; 0x03
    1bf0:	25 30       	cpi	r18, 0x05	; 5
    1bf2:	31 05       	cpc	r19, r1
    1bf4:	21 f1       	breq	.+72     	; 0x1c3e <TEMP_Init+0x9c>
    1bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf8:	9b 81       	ldd	r25, Y+3	; 0x03
    1bfa:	85 30       	cpi	r24, 0x05	; 5
    1bfc:	91 05       	cpc	r25, r1
    1bfe:	dc f0       	brlt	.+54     	; 0x1c36 <TEMP_Init+0x94>
    1c00:	2a 81       	ldd	r18, Y+2	; 0x02
    1c02:	3b 81       	ldd	r19, Y+3	; 0x03
    1c04:	26 30       	cpi	r18, 0x06	; 6
    1c06:	31 05       	cpc	r19, r1
    1c08:	f1 f0       	breq	.+60     	; 0x1c46 <TEMP_Init+0xa4>
    1c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c0e:	87 30       	cpi	r24, 0x07	; 7
    1c10:	91 05       	cpc	r25, r1
    1c12:	e9 f0       	breq	.+58     	; 0x1c4e <TEMP_Init+0xac>
    1c14:	24 c0       	rjmp	.+72     	; 0x1c5e <TEMP_Init+0xbc>
	case TEMP_CH_0 :
		ADC_Init(ADC0_CH0);
    1c16:	80 e0       	ldi	r24, 0x00	; 0
    1c18:	0e 94 a0 0c 	call	0x1940	; 0x1940 <ADC_Init>
    1c1c:	20 c0       	rjmp	.+64     	; 0x1c5e <TEMP_Init+0xbc>
		break;
	case TEMP_CH_1 :
		ADC_Init(ADC0_CH1);
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	0e 94 a0 0c 	call	0x1940	; 0x1940 <ADC_Init>
    1c24:	1c c0       	rjmp	.+56     	; 0x1c5e <TEMP_Init+0xbc>
		break;
	case TEMP_CH_2 :
		ADC_Init(ADC0_CH2);
    1c26:	82 e0       	ldi	r24, 0x02	; 2
    1c28:	0e 94 a0 0c 	call	0x1940	; 0x1940 <ADC_Init>
    1c2c:	18 c0       	rjmp	.+48     	; 0x1c5e <TEMP_Init+0xbc>
		break;
	case TEMP_CH_3 :
		ADC_Init(ADC0_CH3);
    1c2e:	83 e0       	ldi	r24, 0x03	; 3
    1c30:	0e 94 a0 0c 	call	0x1940	; 0x1940 <ADC_Init>
    1c34:	14 c0       	rjmp	.+40     	; 0x1c5e <TEMP_Init+0xbc>
		break;
	case TEMP_CH_4 :
		ADC_Init(ADC0_CH4);
    1c36:	84 e0       	ldi	r24, 0x04	; 4
    1c38:	0e 94 a0 0c 	call	0x1940	; 0x1940 <ADC_Init>
    1c3c:	10 c0       	rjmp	.+32     	; 0x1c5e <TEMP_Init+0xbc>
		break;
	case TEMP_CH_5 :
		ADC_Init(ADC0_CH5);
    1c3e:	85 e0       	ldi	r24, 0x05	; 5
    1c40:	0e 94 a0 0c 	call	0x1940	; 0x1940 <ADC_Init>
    1c44:	0c c0       	rjmp	.+24     	; 0x1c5e <TEMP_Init+0xbc>
		break;
	case TEMP_CH_6 :
		ADC_Init(ADC0_CH6);
    1c46:	86 e0       	ldi	r24, 0x06	; 6
    1c48:	0e 94 a0 0c 	call	0x1940	; 0x1940 <ADC_Init>
    1c4c:	08 c0       	rjmp	.+16     	; 0x1c5e <TEMP_Init+0xbc>
		break;
	case TEMP_CH_7 :
		DIO_SetPinDirection(PORTA,PIN7,PIN_INPUT);
    1c4e:	80 e0       	ldi	r24, 0x00	; 0
    1c50:	67 e0       	ldi	r22, 0x07	; 7
    1c52:	40 e0       	ldi	r20, 0x00	; 0
    1c54:	0e 94 d5 07 	call	0xfaa	; 0xfaa <DIO_SetPinDirection>
		ADC_Init(ADC0_CH7);
    1c58:	87 e0       	ldi	r24, 0x07	; 7
    1c5a:	0e 94 a0 0c 	call	0x1940	; 0x1940 <ADC_Init>
		break;
	default:
		break;
	}
	return 0;
    1c5e:	80 e0       	ldi	r24, 0x00	; 0
}
    1c60:	0f 90       	pop	r0
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	cf 91       	pop	r28
    1c68:	df 91       	pop	r29
    1c6a:	08 95       	ret

00001c6c <TEMP_GetTemp>:
uint8_t TEMP_GetTemp(uint8_t Temp_ch, uint8_t* temp) {
    1c6c:	df 93       	push	r29
    1c6e:	cf 93       	push	r28
    1c70:	cd b7       	in	r28, 0x3d	; 61
    1c72:	de b7       	in	r29, 0x3e	; 62
    1c74:	27 97       	sbiw	r28, 0x07	; 7
    1c76:	0f b6       	in	r0, 0x3f	; 63
    1c78:	f8 94       	cli
    1c7a:	de bf       	out	0x3e, r29	; 62
    1c7c:	0f be       	out	0x3f, r0	; 63
    1c7e:	cd bf       	out	0x3d, r28	; 61
    1c80:	8b 83       	std	Y+3, r24	; 0x03
    1c82:	7d 83       	std	Y+5, r23	; 0x05
    1c84:	6c 83       	std	Y+4, r22	; 0x04
	uint16_t ADC_READ=0;
    1c86:	1a 82       	std	Y+2, r1	; 0x02
    1c88:	19 82       	std	Y+1, r1	; 0x01
	switch (Temp_ch) {
    1c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8c:	28 2f       	mov	r18, r24
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	3f 83       	std	Y+7, r19	; 0x07
    1c92:	2e 83       	std	Y+6, r18	; 0x06
    1c94:	8e 81       	ldd	r24, Y+6	; 0x06
    1c96:	9f 81       	ldd	r25, Y+7	; 0x07
    1c98:	83 30       	cpi	r24, 0x03	; 3
    1c9a:	91 05       	cpc	r25, r1
    1c9c:	09 f4       	brne	.+2      	; 0x1ca0 <TEMP_GetTemp+0x34>
    1c9e:	67 c0       	rjmp	.+206    	; 0x1d6e <TEMP_GetTemp+0x102>
    1ca0:	2e 81       	ldd	r18, Y+6	; 0x06
    1ca2:	3f 81       	ldd	r19, Y+7	; 0x07
    1ca4:	24 30       	cpi	r18, 0x04	; 4
    1ca6:	31 05       	cpc	r19, r1
    1ca8:	8c f4       	brge	.+34     	; 0x1ccc <TEMP_GetTemp+0x60>
    1caa:	8e 81       	ldd	r24, Y+6	; 0x06
    1cac:	9f 81       	ldd	r25, Y+7	; 0x07
    1cae:	81 30       	cpi	r24, 0x01	; 1
    1cb0:	91 05       	cpc	r25, r1
    1cb2:	09 f4       	brne	.+2      	; 0x1cb6 <TEMP_GetTemp+0x4a>
    1cb4:	4c c0       	rjmp	.+152    	; 0x1d4e <TEMP_GetTemp+0xe2>
    1cb6:	2e 81       	ldd	r18, Y+6	; 0x06
    1cb8:	3f 81       	ldd	r19, Y+7	; 0x07
    1cba:	22 30       	cpi	r18, 0x02	; 2
    1cbc:	31 05       	cpc	r19, r1
    1cbe:	0c f0       	brlt	.+2      	; 0x1cc2 <TEMP_GetTemp+0x56>
    1cc0:	4e c0       	rjmp	.+156    	; 0x1d5e <TEMP_GetTemp+0xf2>
    1cc2:	8e 81       	ldd	r24, Y+6	; 0x06
    1cc4:	9f 81       	ldd	r25, Y+7	; 0x07
    1cc6:	00 97       	sbiw	r24, 0x00	; 0
    1cc8:	d1 f0       	breq	.+52     	; 0x1cfe <TEMP_GetTemp+0x92>
    1cca:	98 c0       	rjmp	.+304    	; 0x1dfc <TEMP_GetTemp+0x190>
    1ccc:	2e 81       	ldd	r18, Y+6	; 0x06
    1cce:	3f 81       	ldd	r19, Y+7	; 0x07
    1cd0:	25 30       	cpi	r18, 0x05	; 5
    1cd2:	31 05       	cpc	r19, r1
    1cd4:	09 f4       	brne	.+2      	; 0x1cd8 <TEMP_GetTemp+0x6c>
    1cd6:	5b c0       	rjmp	.+182    	; 0x1d8e <TEMP_GetTemp+0x122>
    1cd8:	8e 81       	ldd	r24, Y+6	; 0x06
    1cda:	9f 81       	ldd	r25, Y+7	; 0x07
    1cdc:	85 30       	cpi	r24, 0x05	; 5
    1cde:	91 05       	cpc	r25, r1
    1ce0:	0c f4       	brge	.+2      	; 0x1ce4 <TEMP_GetTemp+0x78>
    1ce2:	4d c0       	rjmp	.+154    	; 0x1d7e <TEMP_GetTemp+0x112>
    1ce4:	2e 81       	ldd	r18, Y+6	; 0x06
    1ce6:	3f 81       	ldd	r19, Y+7	; 0x07
    1ce8:	26 30       	cpi	r18, 0x06	; 6
    1cea:	31 05       	cpc	r19, r1
    1cec:	09 f4       	brne	.+2      	; 0x1cf0 <TEMP_GetTemp+0x84>
    1cee:	57 c0       	rjmp	.+174    	; 0x1d9e <TEMP_GetTemp+0x132>
    1cf0:	8e 81       	ldd	r24, Y+6	; 0x06
    1cf2:	9f 81       	ldd	r25, Y+7	; 0x07
    1cf4:	87 30       	cpi	r24, 0x07	; 7
    1cf6:	91 05       	cpc	r25, r1
    1cf8:	09 f4       	brne	.+2      	; 0x1cfc <TEMP_GetTemp+0x90>
    1cfa:	59 c0       	rjmp	.+178    	; 0x1dae <TEMP_GetTemp+0x142>
    1cfc:	7f c0       	rjmp	.+254    	; 0x1dfc <TEMP_GetTemp+0x190>
		case TEMP_CH_0 :
			ADC_Read(ADC0_CH0,&ADC_READ);
    1cfe:	80 e0       	ldi	r24, 0x00	; 0
    1d00:	9e 01       	movw	r18, r28
    1d02:	2f 5f       	subi	r18, 0xFF	; 255
    1d04:	3f 4f       	sbci	r19, 0xFF	; 255
    1d06:	b9 01       	movw	r22, r18
    1d08:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <ADC_Read>
			ADC_READ=((((uint32_t)ADC_READ)*(150))/ADC1_RESLUATION);
    1d0c:	89 81       	ldd	r24, Y+1	; 0x01
    1d0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d10:	cc 01       	movw	r24, r24
    1d12:	a0 e0       	ldi	r26, 0x00	; 0
    1d14:	b0 e0       	ldi	r27, 0x00	; 0
    1d16:	26 e9       	ldi	r18, 0x96	; 150
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	40 e0       	ldi	r20, 0x00	; 0
    1d1c:	50 e0       	ldi	r21, 0x00	; 0
    1d1e:	bc 01       	movw	r22, r24
    1d20:	cd 01       	movw	r24, r26
    1d22:	0e 94 21 14 	call	0x2842	; 0x2842 <__mulsi3>
    1d26:	dc 01       	movw	r26, r24
    1d28:	cb 01       	movw	r24, r22
    1d2a:	2f ef       	ldi	r18, 0xFF	; 255
    1d2c:	33 e0       	ldi	r19, 0x03	; 3
    1d2e:	40 e0       	ldi	r20, 0x00	; 0
    1d30:	50 e0       	ldi	r21, 0x00	; 0
    1d32:	bc 01       	movw	r22, r24
    1d34:	cd 01       	movw	r24, r26
    1d36:	0e 94 54 14 	call	0x28a8	; 0x28a8 <__udivmodsi4>
    1d3a:	da 01       	movw	r26, r20
    1d3c:	c9 01       	movw	r24, r18
    1d3e:	9a 83       	std	Y+2, r25	; 0x02
    1d40:	89 83       	std	Y+1, r24	; 0x01
			*(temp)=(uint8_t)ADC_READ;
    1d42:	89 81       	ldd	r24, Y+1	; 0x01
    1d44:	9a 81       	ldd	r25, Y+2	; 0x02
    1d46:	ec 81       	ldd	r30, Y+4	; 0x04
    1d48:	fd 81       	ldd	r31, Y+5	; 0x05
    1d4a:	80 83       	st	Z, r24
    1d4c:	57 c0       	rjmp	.+174    	; 0x1dfc <TEMP_GetTemp+0x190>
			break;
		case TEMP_CH_1 :
			ADC_Read(ADC0_CH1,&ADC_READ);
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	9e 01       	movw	r18, r28
    1d52:	2f 5f       	subi	r18, 0xFF	; 255
    1d54:	3f 4f       	sbci	r19, 0xFF	; 255
    1d56:	b9 01       	movw	r22, r18
    1d58:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <ADC_Read>
    1d5c:	4f c0       	rjmp	.+158    	; 0x1dfc <TEMP_GetTemp+0x190>
			break;
		case TEMP_CH_2 :
			ADC_Read(ADC0_CH2,&ADC_READ);
    1d5e:	82 e0       	ldi	r24, 0x02	; 2
    1d60:	9e 01       	movw	r18, r28
    1d62:	2f 5f       	subi	r18, 0xFF	; 255
    1d64:	3f 4f       	sbci	r19, 0xFF	; 255
    1d66:	b9 01       	movw	r22, r18
    1d68:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <ADC_Read>
    1d6c:	47 c0       	rjmp	.+142    	; 0x1dfc <TEMP_GetTemp+0x190>
			break;
		case TEMP_CH_3 :
			ADC_Read(ADC0_CH3,&ADC_READ);
    1d6e:	83 e0       	ldi	r24, 0x03	; 3
    1d70:	9e 01       	movw	r18, r28
    1d72:	2f 5f       	subi	r18, 0xFF	; 255
    1d74:	3f 4f       	sbci	r19, 0xFF	; 255
    1d76:	b9 01       	movw	r22, r18
    1d78:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <ADC_Read>
    1d7c:	3f c0       	rjmp	.+126    	; 0x1dfc <TEMP_GetTemp+0x190>
			break;
		case TEMP_CH_4 :
			ADC_Read(ADC0_CH4,&ADC_READ);
    1d7e:	84 e0       	ldi	r24, 0x04	; 4
    1d80:	9e 01       	movw	r18, r28
    1d82:	2f 5f       	subi	r18, 0xFF	; 255
    1d84:	3f 4f       	sbci	r19, 0xFF	; 255
    1d86:	b9 01       	movw	r22, r18
    1d88:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <ADC_Read>
    1d8c:	37 c0       	rjmp	.+110    	; 0x1dfc <TEMP_GetTemp+0x190>
			break;
		case TEMP_CH_5 :
			ADC_Read(ADC0_CH5,&ADC_READ);
    1d8e:	85 e0       	ldi	r24, 0x05	; 5
    1d90:	9e 01       	movw	r18, r28
    1d92:	2f 5f       	subi	r18, 0xFF	; 255
    1d94:	3f 4f       	sbci	r19, 0xFF	; 255
    1d96:	b9 01       	movw	r22, r18
    1d98:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <ADC_Read>
    1d9c:	2f c0       	rjmp	.+94     	; 0x1dfc <TEMP_GetTemp+0x190>
			break;
		case TEMP_CH_6 :
			ADC_Read(ADC0_CH6,&ADC_READ);
    1d9e:	86 e0       	ldi	r24, 0x06	; 6
    1da0:	9e 01       	movw	r18, r28
    1da2:	2f 5f       	subi	r18, 0xFF	; 255
    1da4:	3f 4f       	sbci	r19, 0xFF	; 255
    1da6:	b9 01       	movw	r22, r18
    1da8:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <ADC_Read>
    1dac:	27 c0       	rjmp	.+78     	; 0x1dfc <TEMP_GetTemp+0x190>
			break;
		case TEMP_CH_7 :
			ADC_Read(ADC0_CH7,&ADC_READ);
    1dae:	87 e0       	ldi	r24, 0x07	; 7
    1db0:	9e 01       	movw	r18, r28
    1db2:	2f 5f       	subi	r18, 0xFF	; 255
    1db4:	3f 4f       	sbci	r19, 0xFF	; 255
    1db6:	b9 01       	movw	r22, r18
    1db8:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <ADC_Read>
			ADC_READ=((((uint32_t)ADC_READ)*(150))/ADC1_RESLUATION);
    1dbc:	89 81       	ldd	r24, Y+1	; 0x01
    1dbe:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc0:	cc 01       	movw	r24, r24
    1dc2:	a0 e0       	ldi	r26, 0x00	; 0
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	26 e9       	ldi	r18, 0x96	; 150
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	40 e0       	ldi	r20, 0x00	; 0
    1dcc:	50 e0       	ldi	r21, 0x00	; 0
    1dce:	bc 01       	movw	r22, r24
    1dd0:	cd 01       	movw	r24, r26
    1dd2:	0e 94 21 14 	call	0x2842	; 0x2842 <__mulsi3>
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	cb 01       	movw	r24, r22
    1dda:	2f ef       	ldi	r18, 0xFF	; 255
    1ddc:	33 e0       	ldi	r19, 0x03	; 3
    1dde:	40 e0       	ldi	r20, 0x00	; 0
    1de0:	50 e0       	ldi	r21, 0x00	; 0
    1de2:	bc 01       	movw	r22, r24
    1de4:	cd 01       	movw	r24, r26
    1de6:	0e 94 54 14 	call	0x28a8	; 0x28a8 <__udivmodsi4>
    1dea:	da 01       	movw	r26, r20
    1dec:	c9 01       	movw	r24, r18
    1dee:	9a 83       	std	Y+2, r25	; 0x02
    1df0:	89 83       	std	Y+1, r24	; 0x01
			*(temp)=(uint8_t)ADC_READ;
    1df2:	89 81       	ldd	r24, Y+1	; 0x01
    1df4:	9a 81       	ldd	r25, Y+2	; 0x02
    1df6:	ec 81       	ldd	r30, Y+4	; 0x04
    1df8:	fd 81       	ldd	r31, Y+5	; 0x05
    1dfa:	80 83       	st	Z, r24
			break;
		default:
			break;
		}

	return 0;
    1dfc:	80 e0       	ldi	r24, 0x00	; 0
}
    1dfe:	27 96       	adiw	r28, 0x07	; 7
    1e00:	0f b6       	in	r0, 0x3f	; 63
    1e02:	f8 94       	cli
    1e04:	de bf       	out	0x3e, r29	; 62
    1e06:	0f be       	out	0x3f, r0	; 63
    1e08:	cd bf       	out	0x3d, r28	; 61
    1e0a:	cf 91       	pop	r28
    1e0c:	df 91       	pop	r29
    1e0e:	08 95       	ret

00001e10 <MOTOR_init>:
#include"Motor.h"

void MOTOR_init(void) {
    1e10:	df 93       	push	r29
    1e12:	cf 93       	push	r28
    1e14:	cd b7       	in	r28, 0x3d	; 61
    1e16:	de b7       	in	r29, 0x3e	; 62

	/*SETTING MOTOR1 DIR PINS TO OUTPUT*/
	DIO_SetPinDirection(PORTD, PIN4, PIN_OUTPUT);//Control Pin
    1e18:	83 e0       	ldi	r24, 0x03	; 3
    1e1a:	64 e0       	ldi	r22, 0x04	; 4
    1e1c:	41 e0       	ldi	r20, 0x01	; 1
    1e1e:	0e 94 d5 07 	call	0xfaa	; 0xfaa <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTD, PIN3, PIN_OUTPUT);
    1e22:	83 e0       	ldi	r24, 0x03	; 3
    1e24:	63 e0       	ldi	r22, 0x03	; 3
    1e26:	41 e0       	ldi	r20, 0x01	; 1
    1e28:	0e 94 d5 07 	call	0xfaa	; 0xfaa <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTD, PIN2, PIN_OUTPUT);
    1e2c:	83 e0       	ldi	r24, 0x03	; 3
    1e2e:	62 e0       	ldi	r22, 0x02	; 2
    1e30:	41 e0       	ldi	r20, 0x01	; 1
    1e32:	0e 94 d5 07 	call	0xfaa	; 0xfaa <DIO_SetPinDirection>


}
    1e36:	cf 91       	pop	r28
    1e38:	df 91       	pop	r29
    1e3a:	08 95       	ret

00001e3c <MOTOR_start>:
void MOTOR_start(uint8_t motor_no, uint8_t dir) {
    1e3c:	df 93       	push	r29
    1e3e:	cf 93       	push	r28
    1e40:	00 d0       	rcall	.+0      	; 0x1e42 <MOTOR_start+0x6>
    1e42:	00 d0       	rcall	.+0      	; 0x1e44 <MOTOR_start+0x8>
    1e44:	cd b7       	in	r28, 0x3d	; 61
    1e46:	de b7       	in	r29, 0x3e	; 62
    1e48:	89 83       	std	Y+1, r24	; 0x01
    1e4a:	6a 83       	std	Y+2, r22	; 0x02
	switch (motor_no) {
    1e4c:	89 81       	ldd	r24, Y+1	; 0x01
    1e4e:	88 2f       	mov	r24, r24
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	00 97       	sbiw	r24, 0x00	; 0
    1e54:	41 f5       	brne	.+80     	; 0x1ea6 <MOTOR_start+0x6a>
	case MOTER1 :
		DIO_WritePin(PORTD, PIN4, PIN_HIGH);
    1e56:	83 e0       	ldi	r24, 0x03	; 3
    1e58:	64 e0       	ldi	r22, 0x04	; 4
    1e5a:	41 e0       	ldi	r20, 0x01	; 1
    1e5c:	0e 94 31 09 	call	0x1262	; 0x1262 <DIO_WritePin>
		switch (dir) {
    1e60:	8a 81       	ldd	r24, Y+2	; 0x02
    1e62:	28 2f       	mov	r18, r24
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	3c 83       	std	Y+4, r19	; 0x04
    1e68:	2b 83       	std	Y+3, r18	; 0x03
    1e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6e:	00 97       	sbiw	r24, 0x00	; 0
    1e70:	81 f0       	breq	.+32     	; 0x1e92 <MOTOR_start+0x56>
    1e72:	2b 81       	ldd	r18, Y+3	; 0x03
    1e74:	3c 81       	ldd	r19, Y+4	; 0x04
    1e76:	21 30       	cpi	r18, 0x01	; 1
    1e78:	31 05       	cpc	r19, r1
    1e7a:	a9 f4       	brne	.+42     	; 0x1ea6 <MOTOR_start+0x6a>
		case MOTOR1_FORWARD :
			DIO_WritePin(PORTD, PIN2,PIN_HIGH);
    1e7c:	83 e0       	ldi	r24, 0x03	; 3
    1e7e:	62 e0       	ldi	r22, 0x02	; 2
    1e80:	41 e0       	ldi	r20, 0x01	; 1
    1e82:	0e 94 31 09 	call	0x1262	; 0x1262 <DIO_WritePin>
			DIO_WritePin(PORTD, PIN3,PIN_LOW);
    1e86:	83 e0       	ldi	r24, 0x03	; 3
    1e88:	63 e0       	ldi	r22, 0x03	; 3
    1e8a:	40 e0       	ldi	r20, 0x00	; 0
    1e8c:	0e 94 31 09 	call	0x1262	; 0x1262 <DIO_WritePin>
    1e90:	0a c0       	rjmp	.+20     	; 0x1ea6 <MOTOR_start+0x6a>
			break;
		case MOTOR1_BACKWARD :
			DIO_WritePin(PORTD, PIN2,PIN_LOW);
    1e92:	83 e0       	ldi	r24, 0x03	; 3
    1e94:	62 e0       	ldi	r22, 0x02	; 2
    1e96:	40 e0       	ldi	r20, 0x00	; 0
    1e98:	0e 94 31 09 	call	0x1262	; 0x1262 <DIO_WritePin>
			DIO_WritePin(PORTD, PIN3,PIN_HIGH);
    1e9c:	83 e0       	ldi	r24, 0x03	; 3
    1e9e:	63 e0       	ldi	r22, 0x03	; 3
    1ea0:	41 e0       	ldi	r20, 0x01	; 1
    1ea2:	0e 94 31 09 	call	0x1262	; 0x1262 <DIO_WritePin>
		break;
	default:
		break;
	}

}
    1ea6:	0f 90       	pop	r0
    1ea8:	0f 90       	pop	r0
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	cf 91       	pop	r28
    1eb0:	df 91       	pop	r29
    1eb2:	08 95       	ret

00001eb4 <MOTOR_stop>:
void MOTOR_stop(uint8_t motor_no) {
    1eb4:	df 93       	push	r29
    1eb6:	cf 93       	push	r28
    1eb8:	0f 92       	push	r0
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
    1ebe:	89 83       	std	Y+1, r24	; 0x01
	switch (motor_no){
    1ec0:	89 81       	ldd	r24, Y+1	; 0x01
    1ec2:	88 2f       	mov	r24, r24
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	00 97       	sbiw	r24, 0x00	; 0
    1ec8:	79 f4       	brne	.+30     	; 0x1ee8 <MOTOR_stop+0x34>
	case MOTER1:
		DIO_WritePin(PORTD, PIN4,PIN_LOW);
    1eca:	83 e0       	ldi	r24, 0x03	; 3
    1ecc:	64 e0       	ldi	r22, 0x04	; 4
    1ece:	40 e0       	ldi	r20, 0x00	; 0
    1ed0:	0e 94 31 09 	call	0x1262	; 0x1262 <DIO_WritePin>
		DIO_WritePin(PORTD, PIN2,PIN_LOW);
    1ed4:	83 e0       	ldi	r24, 0x03	; 3
    1ed6:	62 e0       	ldi	r22, 0x02	; 2
    1ed8:	40 e0       	ldi	r20, 0x00	; 0
    1eda:	0e 94 31 09 	call	0x1262	; 0x1262 <DIO_WritePin>
		DIO_WritePin(PORTD, PIN3,PIN_LOW);
    1ede:	83 e0       	ldi	r24, 0x03	; 3
    1ee0:	63 e0       	ldi	r22, 0x03	; 3
    1ee2:	40 e0       	ldi	r20, 0x00	; 0
    1ee4:	0e 94 31 09 	call	0x1262	; 0x1262 <DIO_WritePin>
		break;

	default:
		break;
	}
}
    1ee8:	0f 90       	pop	r0
    1eea:	cf 91       	pop	r28
    1eec:	df 91       	pop	r29
    1eee:	08 95       	ret

00001ef0 <MOTOR_dir>:

void MOTOR_dir(uint8_t motor_no, uint8_t dir) {
    1ef0:	df 93       	push	r29
    1ef2:	cf 93       	push	r28
    1ef4:	00 d0       	rcall	.+0      	; 0x1ef6 <MOTOR_dir+0x6>
    1ef6:	00 d0       	rcall	.+0      	; 0x1ef8 <MOTOR_dir+0x8>
    1ef8:	cd b7       	in	r28, 0x3d	; 61
    1efa:	de b7       	in	r29, 0x3e	; 62
    1efc:	89 83       	std	Y+1, r24	; 0x01
    1efe:	6a 83       	std	Y+2, r22	; 0x02
	switch (motor_no) {
    1f00:	89 81       	ldd	r24, Y+1	; 0x01
    1f02:	88 2f       	mov	r24, r24
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	00 97       	sbiw	r24, 0x00	; 0
    1f08:	19 f5       	brne	.+70     	; 0x1f50 <MOTOR_dir+0x60>
		case MOTER1 :
			switch (dir) {
    1f0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0c:	28 2f       	mov	r18, r24
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	3c 83       	std	Y+4, r19	; 0x04
    1f12:	2b 83       	std	Y+3, r18	; 0x03
    1f14:	8b 81       	ldd	r24, Y+3	; 0x03
    1f16:	9c 81       	ldd	r25, Y+4	; 0x04
    1f18:	00 97       	sbiw	r24, 0x00	; 0
    1f1a:	81 f0       	breq	.+32     	; 0x1f3c <MOTOR_dir+0x4c>
    1f1c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f1e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f20:	21 30       	cpi	r18, 0x01	; 1
    1f22:	31 05       	cpc	r19, r1
    1f24:	a9 f4       	brne	.+42     	; 0x1f50 <MOTOR_dir+0x60>
			case MOTOR1_FORWARD :
				DIO_WritePin(PORTD, PIN2,PIN_HIGH);
    1f26:	83 e0       	ldi	r24, 0x03	; 3
    1f28:	62 e0       	ldi	r22, 0x02	; 2
    1f2a:	41 e0       	ldi	r20, 0x01	; 1
    1f2c:	0e 94 31 09 	call	0x1262	; 0x1262 <DIO_WritePin>
				DIO_WritePin(PORTD, PIN3,PIN_LOW);
    1f30:	83 e0       	ldi	r24, 0x03	; 3
    1f32:	63 e0       	ldi	r22, 0x03	; 3
    1f34:	40 e0       	ldi	r20, 0x00	; 0
    1f36:	0e 94 31 09 	call	0x1262	; 0x1262 <DIO_WritePin>
    1f3a:	0a c0       	rjmp	.+20     	; 0x1f50 <MOTOR_dir+0x60>
				break;
			case MOTOR1_BACKWARD :
				DIO_WritePin(PORTD, PIN2,PIN_LOW);
    1f3c:	83 e0       	ldi	r24, 0x03	; 3
    1f3e:	62 e0       	ldi	r22, 0x02	; 2
    1f40:	40 e0       	ldi	r20, 0x00	; 0
    1f42:	0e 94 31 09 	call	0x1262	; 0x1262 <DIO_WritePin>
				DIO_WritePin(PORTD, PIN3,PIN_HIGH);
    1f46:	83 e0       	ldi	r24, 0x03	; 3
    1f48:	63 e0       	ldi	r22, 0x03	; 3
    1f4a:	41 e0       	ldi	r20, 0x01	; 1
    1f4c:	0e 94 31 09 	call	0x1262	; 0x1262 <DIO_WritePin>
			}
			break;
		default:
			break;
		}
}
    1f50:	0f 90       	pop	r0
    1f52:	0f 90       	pop	r0
    1f54:	0f 90       	pop	r0
    1f56:	0f 90       	pop	r0
    1f58:	cf 91       	pop	r28
    1f5a:	df 91       	pop	r29
    1f5c:	08 95       	ret

00001f5e <LCD_SendCmd>:

//static uint8_t gu16_dummy=0;

static uint8_t LCD_SendCmd(uint8_t LOC_u8Command);

static uint8_t LCD_SendCmd(uint8_t LOC_u8Command) {
    1f5e:	df 93       	push	r29
    1f60:	cf 93       	push	r28
    1f62:	0f 92       	push	r0
    1f64:	cd b7       	in	r28, 0x3d	; 61
    1f66:	de b7       	in	r29, 0x3e	; 62
    1f68:	89 83       	std	Y+1, r24	; 0x01
	DIO_WritePin(LCD_CTRL_PORT, LCD_RS_PIN, PIN_LOW);
    1f6a:	82 e0       	ldi	r24, 0x02	; 2
    1f6c:	60 e0       	ldi	r22, 0x00	; 0
    1f6e:	40 e0       	ldi	r20, 0x00	; 0
    1f70:	0e 94 31 09 	call	0x1262	; 0x1262 <DIO_WritePin>
	DIO_WritePin(LCD_CTRL_PORT, LCD_RW_PIN, PIN_LOW);
    1f74:	82 e0       	ldi	r24, 0x02	; 2
    1f76:	61 e0       	ldi	r22, 0x01	; 1
    1f78:	40 e0       	ldi	r20, 0x00	; 0
    1f7a:	0e 94 31 09 	call	0x1262	; 0x1262 <DIO_WritePin>

	DIO_writePort(LCD_DATA_PORT, LOC_u8Command);
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	69 81       	ldd	r22, Y+1	; 0x01
    1f82:	0e 94 e6 08 	call	0x11cc	; 0x11cc <DIO_writePort>
	DIO_WritePin(LCD_CTRL_PORT, LCD_EN_PIN, PIN_HIGH);
    1f86:	82 e0       	ldi	r24, 0x02	; 2
    1f88:	62 e0       	ldi	r22, 0x02	; 2
    1f8a:	41 e0       	ldi	r20, 0x01	; 1
    1f8c:	0e 94 31 09 	call	0x1262	; 0x1262 <DIO_WritePin>
	//DELAY 1 MS
	DIO_WritePin(LCD_CTRL_PORT, LCD_EN_PIN, PIN_LOW);
    1f90:	82 e0       	ldi	r24, 0x02	; 2
    1f92:	62 e0       	ldi	r22, 0x02	; 2
    1f94:	40 e0       	ldi	r20, 0x00	; 0
    1f96:	0e 94 31 09 	call	0x1262	; 0x1262 <DIO_WritePin>
	//DELAY 1 MS
	return 0;
    1f9a:	80 e0       	ldi	r24, 0x00	; 0
}
    1f9c:	0f 90       	pop	r0
    1f9e:	cf 91       	pop	r28
    1fa0:	df 91       	pop	r29
    1fa2:	08 95       	ret

00001fa4 <LCD_SendChar>:

uint8_t LCD_SendChar(uint8_t LOC_u8Char) {
    1fa4:	df 93       	push	r29
    1fa6:	cf 93       	push	r28
    1fa8:	0f 92       	push	r0
    1faa:	cd b7       	in	r28, 0x3d	; 61
    1fac:	de b7       	in	r29, 0x3e	; 62
    1fae:	89 83       	std	Y+1, r24	; 0x01
	DIO_WritePin(LCD_CTRL_PORT, LCD_RS_PIN, PIN_HIGH);
    1fb0:	82 e0       	ldi	r24, 0x02	; 2
    1fb2:	60 e0       	ldi	r22, 0x00	; 0
    1fb4:	41 e0       	ldi	r20, 0x01	; 1
    1fb6:	0e 94 31 09 	call	0x1262	; 0x1262 <DIO_WritePin>
	DIO_WritePin(LCD_CTRL_PORT, LCD_RW_PIN, PIN_LOW);
    1fba:	82 e0       	ldi	r24, 0x02	; 2
    1fbc:	61 e0       	ldi	r22, 0x01	; 1
    1fbe:	40 e0       	ldi	r20, 0x00	; 0
    1fc0:	0e 94 31 09 	call	0x1262	; 0x1262 <DIO_WritePin>
	DIO_writePort(LCD_DATA_PORT, LOC_u8Char);
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	69 81       	ldd	r22, Y+1	; 0x01
    1fc8:	0e 94 e6 08 	call	0x11cc	; 0x11cc <DIO_writePort>
	DIO_WritePin(LCD_CTRL_PORT, LCD_EN_PIN, PIN_HIGH);
    1fcc:	82 e0       	ldi	r24, 0x02	; 2
    1fce:	62 e0       	ldi	r22, 0x02	; 2
    1fd0:	41 e0       	ldi	r20, 0x01	; 1
    1fd2:	0e 94 31 09 	call	0x1262	; 0x1262 <DIO_WritePin>
//	_delay_ms(1);
	DIO_WritePin(LCD_CTRL_PORT, LCD_EN_PIN, PIN_LOW);
    1fd6:	82 e0       	ldi	r24, 0x02	; 2
    1fd8:	62 e0       	ldi	r22, 0x02	; 2
    1fda:	40 e0       	ldi	r20, 0x00	; 0
    1fdc:	0e 94 31 09 	call	0x1262	; 0x1262 <DIO_WritePin>
//	_delay_ms(1);
	return 0;
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
}
    1fe2:	0f 90       	pop	r0
    1fe4:	cf 91       	pop	r28
    1fe6:	df 91       	pop	r29
    1fe8:	08 95       	ret

00001fea <LCD_Initialization>:

uint8_t LCD_Initialization(void) {
    1fea:	df 93       	push	r29
    1fec:	cf 93       	push	r28
    1fee:	00 d0       	rcall	.+0      	; 0x1ff0 <LCD_Initialization+0x6>
    1ff0:	00 d0       	rcall	.+0      	; 0x1ff2 <LCD_Initialization+0x8>
    1ff2:	cd b7       	in	r28, 0x3d	; 61
    1ff4:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t  Dummy_Delay=0;
    1ff6:	19 82       	std	Y+1, r1	; 0x01
    1ff8:	1a 82       	std	Y+2, r1	; 0x02
    1ffa:	1b 82       	std	Y+3, r1	; 0x03
    1ffc:	1c 82       	std	Y+4, r1	; 0x04
	/*INIT THE LCD PINS*/
	DIO_SetPinDirection(LCD_CTRL_PORT, LCD_RS_PIN, PIN_OUTPUT);
    1ffe:	82 e0       	ldi	r24, 0x02	; 2
    2000:	60 e0       	ldi	r22, 0x00	; 0
    2002:	41 e0       	ldi	r20, 0x01	; 1
    2004:	0e 94 d5 07 	call	0xfaa	; 0xfaa <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT, LCD_RW_PIN, PIN_OUTPUT);
    2008:	82 e0       	ldi	r24, 0x02	; 2
    200a:	61 e0       	ldi	r22, 0x01	; 1
    200c:	41 e0       	ldi	r20, 0x01	; 1
    200e:	0e 94 d5 07 	call	0xfaa	; 0xfaa <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT, LCD_EN_PIN, PIN_OUTPUT);
    2012:	82 e0       	ldi	r24, 0x02	; 2
    2014:	62 e0       	ldi	r22, 0x02	; 2
    2016:	41 e0       	ldi	r20, 0x01	; 1
    2018:	0e 94 d5 07 	call	0xfaa	; 0xfaa <DIO_SetPinDirection>
	DIO_SetPortDirection(LCD_DATA_PORT, PORT_OUTPUT);
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	6f ef       	ldi	r22, 0xFF	; 255
    2020:	0e 94 8a 07 	call	0xf14	; 0xf14 <DIO_SetPortDirection>
	for(Dummy_Delay=0;Dummy_Delay<=200000;Dummy_Delay++){
    2024:	19 82       	std	Y+1, r1	; 0x01
    2026:	1a 82       	std	Y+2, r1	; 0x02
    2028:	1b 82       	std	Y+3, r1	; 0x03
    202a:	1c 82       	std	Y+4, r1	; 0x04
    202c:	0b c0       	rjmp	.+22     	; 0x2044 <LCD_Initialization+0x5a>
    202e:	89 81       	ldd	r24, Y+1	; 0x01
    2030:	9a 81       	ldd	r25, Y+2	; 0x02
    2032:	ab 81       	ldd	r26, Y+3	; 0x03
    2034:	bc 81       	ldd	r27, Y+4	; 0x04
    2036:	01 96       	adiw	r24, 0x01	; 1
    2038:	a1 1d       	adc	r26, r1
    203a:	b1 1d       	adc	r27, r1
    203c:	89 83       	std	Y+1, r24	; 0x01
    203e:	9a 83       	std	Y+2, r25	; 0x02
    2040:	ab 83       	std	Y+3, r26	; 0x03
    2042:	bc 83       	std	Y+4, r27	; 0x04
    2044:	89 81       	ldd	r24, Y+1	; 0x01
    2046:	9a 81       	ldd	r25, Y+2	; 0x02
    2048:	ab 81       	ldd	r26, Y+3	; 0x03
    204a:	bc 81       	ldd	r27, Y+4	; 0x04
    204c:	81 34       	cpi	r24, 0x41	; 65
    204e:	2d e0       	ldi	r18, 0x0D	; 13
    2050:	92 07       	cpc	r25, r18
    2052:	23 e0       	ldi	r18, 0x03	; 3
    2054:	a2 07       	cpc	r26, r18
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	b2 07       	cpc	r27, r18
    205a:	48 f3       	brcs	.-46     	; 0x202e <LCD_Initialization+0x44>

	}
//	_delay_ms(50);
	LCD_SendCmd(LCD_FUNC_SET);
    205c:	88 e3       	ldi	r24, 0x38	; 56
    205e:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_SendCmd>
	for(Dummy_Delay=0;Dummy_Delay<=40000;Dummy_Delay++){}
    2062:	19 82       	std	Y+1, r1	; 0x01
    2064:	1a 82       	std	Y+2, r1	; 0x02
    2066:	1b 82       	std	Y+3, r1	; 0x03
    2068:	1c 82       	std	Y+4, r1	; 0x04
    206a:	0b c0       	rjmp	.+22     	; 0x2082 <LCD_Initialization+0x98>
    206c:	89 81       	ldd	r24, Y+1	; 0x01
    206e:	9a 81       	ldd	r25, Y+2	; 0x02
    2070:	ab 81       	ldd	r26, Y+3	; 0x03
    2072:	bc 81       	ldd	r27, Y+4	; 0x04
    2074:	01 96       	adiw	r24, 0x01	; 1
    2076:	a1 1d       	adc	r26, r1
    2078:	b1 1d       	adc	r27, r1
    207a:	89 83       	std	Y+1, r24	; 0x01
    207c:	9a 83       	std	Y+2, r25	; 0x02
    207e:	ab 83       	std	Y+3, r26	; 0x03
    2080:	bc 83       	std	Y+4, r27	; 0x04
    2082:	89 81       	ldd	r24, Y+1	; 0x01
    2084:	9a 81       	ldd	r25, Y+2	; 0x02
    2086:	ab 81       	ldd	r26, Y+3	; 0x03
    2088:	bc 81       	ldd	r27, Y+4	; 0x04
    208a:	81 34       	cpi	r24, 0x41	; 65
    208c:	2c e9       	ldi	r18, 0x9C	; 156
    208e:	92 07       	cpc	r25, r18
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	a2 07       	cpc	r26, r18
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	b2 07       	cpc	r27, r18
    2098:	48 f3       	brcs	.-46     	; 0x206c <LCD_Initialization+0x82>
//	_delay_ms(10);
	LCD_SendCmd(LCD_DISP_ON_OFF_CTRL);
    209a:	8c e0       	ldi	r24, 0x0C	; 12
    209c:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_SendCmd>
	for(Dummy_Delay=0;Dummy_Delay<=40000;Dummy_Delay++){}
    20a0:	19 82       	std	Y+1, r1	; 0x01
    20a2:	1a 82       	std	Y+2, r1	; 0x02
    20a4:	1b 82       	std	Y+3, r1	; 0x03
    20a6:	1c 82       	std	Y+4, r1	; 0x04
    20a8:	0b c0       	rjmp	.+22     	; 0x20c0 <LCD_Initialization+0xd6>
    20aa:	89 81       	ldd	r24, Y+1	; 0x01
    20ac:	9a 81       	ldd	r25, Y+2	; 0x02
    20ae:	ab 81       	ldd	r26, Y+3	; 0x03
    20b0:	bc 81       	ldd	r27, Y+4	; 0x04
    20b2:	01 96       	adiw	r24, 0x01	; 1
    20b4:	a1 1d       	adc	r26, r1
    20b6:	b1 1d       	adc	r27, r1
    20b8:	89 83       	std	Y+1, r24	; 0x01
    20ba:	9a 83       	std	Y+2, r25	; 0x02
    20bc:	ab 83       	std	Y+3, r26	; 0x03
    20be:	bc 83       	std	Y+4, r27	; 0x04
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
    20c2:	9a 81       	ldd	r25, Y+2	; 0x02
    20c4:	ab 81       	ldd	r26, Y+3	; 0x03
    20c6:	bc 81       	ldd	r27, Y+4	; 0x04
    20c8:	81 34       	cpi	r24, 0x41	; 65
    20ca:	2c e9       	ldi	r18, 0x9C	; 156
    20cc:	92 07       	cpc	r25, r18
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	a2 07       	cpc	r26, r18
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	b2 07       	cpc	r27, r18
    20d6:	48 f3       	brcs	.-46     	; 0x20aa <LCD_Initialization+0xc0>
//	_delay_ms(10);
	LCD_SendCmd(LCD_DISP_CLEAR);
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_SendCmd>
	for(Dummy_Delay=0;Dummy_Delay<=40000;Dummy_Delay++){}
    20de:	19 82       	std	Y+1, r1	; 0x01
    20e0:	1a 82       	std	Y+2, r1	; 0x02
    20e2:	1b 82       	std	Y+3, r1	; 0x03
    20e4:	1c 82       	std	Y+4, r1	; 0x04
    20e6:	0b c0       	rjmp	.+22     	; 0x20fe <LCD_Initialization+0x114>
    20e8:	89 81       	ldd	r24, Y+1	; 0x01
    20ea:	9a 81       	ldd	r25, Y+2	; 0x02
    20ec:	ab 81       	ldd	r26, Y+3	; 0x03
    20ee:	bc 81       	ldd	r27, Y+4	; 0x04
    20f0:	01 96       	adiw	r24, 0x01	; 1
    20f2:	a1 1d       	adc	r26, r1
    20f4:	b1 1d       	adc	r27, r1
    20f6:	89 83       	std	Y+1, r24	; 0x01
    20f8:	9a 83       	std	Y+2, r25	; 0x02
    20fa:	ab 83       	std	Y+3, r26	; 0x03
    20fc:	bc 83       	std	Y+4, r27	; 0x04
    20fe:	89 81       	ldd	r24, Y+1	; 0x01
    2100:	9a 81       	ldd	r25, Y+2	; 0x02
    2102:	ab 81       	ldd	r26, Y+3	; 0x03
    2104:	bc 81       	ldd	r27, Y+4	; 0x04
    2106:	81 34       	cpi	r24, 0x41	; 65
    2108:	2c e9       	ldi	r18, 0x9C	; 156
    210a:	92 07       	cpc	r25, r18
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	a2 07       	cpc	r26, r18
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	b2 07       	cpc	r27, r18
    2114:	48 f3       	brcs	.-46     	; 0x20e8 <LCD_Initialization+0xfe>
//	_delay_ms(10);
	LCD_SendCmd(LCD_ENTRY_MDE);
    2116:	86 e0       	ldi	r24, 0x06	; 6
    2118:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_SendCmd>
	for(Dummy_Delay=0;Dummy_Delay<=40000;Dummy_Delay++){}
    211c:	19 82       	std	Y+1, r1	; 0x01
    211e:	1a 82       	std	Y+2, r1	; 0x02
    2120:	1b 82       	std	Y+3, r1	; 0x03
    2122:	1c 82       	std	Y+4, r1	; 0x04
    2124:	0b c0       	rjmp	.+22     	; 0x213c <LCD_Initialization+0x152>
    2126:	89 81       	ldd	r24, Y+1	; 0x01
    2128:	9a 81       	ldd	r25, Y+2	; 0x02
    212a:	ab 81       	ldd	r26, Y+3	; 0x03
    212c:	bc 81       	ldd	r27, Y+4	; 0x04
    212e:	01 96       	adiw	r24, 0x01	; 1
    2130:	a1 1d       	adc	r26, r1
    2132:	b1 1d       	adc	r27, r1
    2134:	89 83       	std	Y+1, r24	; 0x01
    2136:	9a 83       	std	Y+2, r25	; 0x02
    2138:	ab 83       	std	Y+3, r26	; 0x03
    213a:	bc 83       	std	Y+4, r27	; 0x04
    213c:	89 81       	ldd	r24, Y+1	; 0x01
    213e:	9a 81       	ldd	r25, Y+2	; 0x02
    2140:	ab 81       	ldd	r26, Y+3	; 0x03
    2142:	bc 81       	ldd	r27, Y+4	; 0x04
    2144:	81 34       	cpi	r24, 0x41	; 65
    2146:	2c e9       	ldi	r18, 0x9C	; 156
    2148:	92 07       	cpc	r25, r18
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	a2 07       	cpc	r26, r18
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	b2 07       	cpc	r27, r18
    2152:	48 f3       	brcs	.-46     	; 0x2126 <LCD_Initialization+0x13c>
//	_delay_ms(10);
	return 0;
    2154:	80 e0       	ldi	r24, 0x00	; 0
}
    2156:	0f 90       	pop	r0
    2158:	0f 90       	pop	r0
    215a:	0f 90       	pop	r0
    215c:	0f 90       	pop	r0
    215e:	cf 91       	pop	r28
    2160:	df 91       	pop	r29
    2162:	08 95       	ret

00002164 <LCD_WriteString>:

uint8_t LCD_WriteString(uint8_t *LOC_u8Ptr) {
    2164:	df 93       	push	r29
    2166:	cf 93       	push	r28
    2168:	00 d0       	rcall	.+0      	; 0x216a <LCD_WriteString+0x6>
    216a:	0f 92       	push	r0
    216c:	cd b7       	in	r28, 0x3d	; 61
    216e:	de b7       	in	r29, 0x3e	; 62
    2170:	9a 83       	std	Y+2, r25	; 0x02
    2172:	89 83       	std	Y+1, r24	; 0x01
	if (*LOC_u8Ptr != '\0') {
    2174:	e9 81       	ldd	r30, Y+1	; 0x01
    2176:	fa 81       	ldd	r31, Y+2	; 0x02
    2178:	80 81       	ld	r24, Z
    217a:	88 23       	and	r24, r24
    217c:	91 f0       	breq	.+36     	; 0x21a2 <LCD_WriteString+0x3e>
    217e:	0a c0       	rjmp	.+20     	; 0x2194 <LCD_WriteString+0x30>
		while (*LOC_u8Ptr != '\0') {
			LCD_SendChar(*LOC_u8Ptr);
    2180:	e9 81       	ldd	r30, Y+1	; 0x01
    2182:	fa 81       	ldd	r31, Y+2	; 0x02
    2184:	80 81       	ld	r24, Z
    2186:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <LCD_SendChar>
			LOC_u8Ptr++;
    218a:	89 81       	ldd	r24, Y+1	; 0x01
    218c:	9a 81       	ldd	r25, Y+2	; 0x02
    218e:	01 96       	adiw	r24, 0x01	; 1
    2190:	9a 83       	std	Y+2, r25	; 0x02
    2192:	89 83       	std	Y+1, r24	; 0x01
	return 0;
}

uint8_t LCD_WriteString(uint8_t *LOC_u8Ptr) {
	if (*LOC_u8Ptr != '\0') {
		while (*LOC_u8Ptr != '\0') {
    2194:	e9 81       	ldd	r30, Y+1	; 0x01
    2196:	fa 81       	ldd	r31, Y+2	; 0x02
    2198:	80 81       	ld	r24, Z
    219a:	88 23       	and	r24, r24
    219c:	89 f7       	brne	.-30     	; 0x2180 <LCD_WriteString+0x1c>
			LCD_SendChar(*LOC_u8Ptr);
			LOC_u8Ptr++;
		}
		return 0; // success
    219e:	1b 82       	std	Y+3, r1	; 0x03
    21a0:	02 c0       	rjmp	.+4      	; 0x21a6 <LCD_WriteString+0x42>
	}
	else{
		return 2 ; // STRING IS EMPTY
    21a2:	82 e0       	ldi	r24, 0x02	; 2
    21a4:	8b 83       	std	Y+3, r24	; 0x03
    21a6:	8b 81       	ldd	r24, Y+3	; 0x03
	}

}
    21a8:	0f 90       	pop	r0
    21aa:	0f 90       	pop	r0
    21ac:	0f 90       	pop	r0
    21ae:	cf 91       	pop	r28
    21b0:	df 91       	pop	r29
    21b2:	08 95       	ret

000021b4 <LCD_WriteNumber>:
uint8_t LCD_WriteNumber(uint16_t Number) {
    21b4:	df 93       	push	r29
    21b6:	cf 93       	push	r28
    21b8:	cd b7       	in	r28, 0x3d	; 61
    21ba:	de b7       	in	r29, 0x3e	; 62
    21bc:	2e 97       	sbiw	r28, 0x0e	; 14
    21be:	0f b6       	in	r0, 0x3f	; 63
    21c0:	f8 94       	cli
    21c2:	de bf       	out	0x3e, r29	; 62
    21c4:	0f be       	out	0x3f, r0	; 63
    21c6:	cd bf       	out	0x3d, r28	; 61
    21c8:	9d 87       	std	Y+13, r25	; 0x0d
    21ca:	8c 87       	std	Y+12, r24	; 0x0c
	uint8_t Numbers[10];
	int8_t Count;
	if(Number==0)
    21cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    21ce:	9d 85       	ldd	r25, Y+13	; 0x0d
    21d0:	00 97       	sbiw	r24, 0x00	; 0
    21d2:	29 f4       	brne	.+10     	; 0x21de <LCD_WriteNumber+0x2a>
	{
		LCD_SendChar(ZERO_ASCII);
    21d4:	80 e3       	ldi	r24, 0x30	; 48
    21d6:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <LCD_SendChar>
		return 0;
    21da:	1e 86       	std	Y+14, r1	; 0x0e
    21dc:	3e c0       	rjmp	.+124    	; 0x225a <LCD_WriteNumber+0xa6>
	}
	for(Count=0;Number>0;Count++)
    21de:	19 82       	std	Y+1, r1	; 0x01
    21e0:	20 c0       	rjmp	.+64     	; 0x2222 <LCD_WriteNumber+0x6e>
	{
		Numbers[Count]=(Number%10)+48;
    21e2:	89 81       	ldd	r24, Y+1	; 0x01
    21e4:	e8 2f       	mov	r30, r24
    21e6:	ff 27       	eor	r31, r31
    21e8:	e7 fd       	sbrc	r30, 7
    21ea:	f0 95       	com	r31
    21ec:	8c 85       	ldd	r24, Y+12	; 0x0c
    21ee:	9d 85       	ldd	r25, Y+13	; 0x0d
    21f0:	2a e0       	ldi	r18, 0x0A	; 10
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	b9 01       	movw	r22, r18
    21f6:	0e 94 40 14 	call	0x2880	; 0x2880 <__udivmodhi4>
    21fa:	28 2f       	mov	r18, r24
    21fc:	20 5d       	subi	r18, 0xD0	; 208
    21fe:	ce 01       	movw	r24, r28
    2200:	02 96       	adiw	r24, 0x02	; 2
    2202:	e8 0f       	add	r30, r24
    2204:	f9 1f       	adc	r31, r25
    2206:	20 83       	st	Z, r18
		Number=Number/10;
    2208:	8c 85       	ldd	r24, Y+12	; 0x0c
    220a:	9d 85       	ldd	r25, Y+13	; 0x0d
    220c:	2a e0       	ldi	r18, 0x0A	; 10
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	b9 01       	movw	r22, r18
    2212:	0e 94 40 14 	call	0x2880	; 0x2880 <__udivmodhi4>
    2216:	cb 01       	movw	r24, r22
    2218:	9d 87       	std	Y+13, r25	; 0x0d
    221a:	8c 87       	std	Y+12, r24	; 0x0c
	if(Number==0)
	{
		LCD_SendChar(ZERO_ASCII);
		return 0;
	}
	for(Count=0;Number>0;Count++)
    221c:	89 81       	ldd	r24, Y+1	; 0x01
    221e:	8f 5f       	subi	r24, 0xFF	; 255
    2220:	89 83       	std	Y+1, r24	; 0x01
    2222:	8c 85       	ldd	r24, Y+12	; 0x0c
    2224:	9d 85       	ldd	r25, Y+13	; 0x0d
    2226:	00 97       	sbiw	r24, 0x00	; 0
    2228:	e1 f6       	brne	.-72     	; 0x21e2 <LCD_WriteNumber+0x2e>
	{
		Numbers[Count]=(Number%10)+48;
		Number=Number/10;
	}
	for(Count--;Count>=0;Count--)
    222a:	89 81       	ldd	r24, Y+1	; 0x01
    222c:	81 50       	subi	r24, 0x01	; 1
    222e:	89 83       	std	Y+1, r24	; 0x01
    2230:	10 c0       	rjmp	.+32     	; 0x2252 <LCD_WriteNumber+0x9e>
	{
		LCD_SendChar(Numbers[Count]);
    2232:	89 81       	ldd	r24, Y+1	; 0x01
    2234:	28 2f       	mov	r18, r24
    2236:	33 27       	eor	r19, r19
    2238:	27 fd       	sbrc	r18, 7
    223a:	30 95       	com	r19
    223c:	ce 01       	movw	r24, r28
    223e:	02 96       	adiw	r24, 0x02	; 2
    2240:	fc 01       	movw	r30, r24
    2242:	e2 0f       	add	r30, r18
    2244:	f3 1f       	adc	r31, r19
    2246:	80 81       	ld	r24, Z
    2248:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <LCD_SendChar>
	for(Count=0;Number>0;Count++)
	{
		Numbers[Count]=(Number%10)+48;
		Number=Number/10;
	}
	for(Count--;Count>=0;Count--)
    224c:	89 81       	ldd	r24, Y+1	; 0x01
    224e:	81 50       	subi	r24, 0x01	; 1
    2250:	89 83       	std	Y+1, r24	; 0x01
    2252:	89 81       	ldd	r24, Y+1	; 0x01
    2254:	88 23       	and	r24, r24
    2256:	6c f7       	brge	.-38     	; 0x2232 <LCD_WriteNumber+0x7e>
	{
		LCD_SendChar(Numbers[Count]);
	}
	return 0;
    2258:	1e 86       	std	Y+14, r1	; 0x0e
    225a:	8e 85       	ldd	r24, Y+14	; 0x0e


}
    225c:	2e 96       	adiw	r28, 0x0e	; 14
    225e:	0f b6       	in	r0, 0x3f	; 63
    2260:	f8 94       	cli
    2262:	de bf       	out	0x3e, r29	; 62
    2264:	0f be       	out	0x3f, r0	; 63
    2266:	cd bf       	out	0x3d, r28	; 61
    2268:	cf 91       	pop	r28
    226a:	df 91       	pop	r29
    226c:	08 95       	ret

0000226e <LCD_Returnhome>:

uint8_t LCD_Returnhome(void) {
    226e:	df 93       	push	r29
    2270:	cf 93       	push	r28
    2272:	cd b7       	in	r28, 0x3d	; 61
    2274:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCmd(LCD_RetrunHome);
    2276:	82 e0       	ldi	r24, 0x02	; 2
    2278:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_SendCmd>
//	_delay_ms(10);
	return 0;
    227c:	80 e0       	ldi	r24, 0x00	; 0
}
    227e:	cf 91       	pop	r28
    2280:	df 91       	pop	r29
    2282:	08 95       	ret

00002284 <LCD_ClearDisplay>:
uint8_t LCD_ClearDisplay(void) {
    2284:	df 93       	push	r29
    2286:	cf 93       	push	r28
    2288:	cd b7       	in	r28, 0x3d	; 61
    228a:	de b7       	in	r29, 0x3e	; 62

	LCD_SendCmd(LCD_ClrDisplay);
    228c:	81 e0       	ldi	r24, 0x01	; 1
    228e:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_SendCmd>

//	_delay_ms(10);

	return 0;
    2292:	80 e0       	ldi	r24, 0x00	; 0
}
    2294:	cf 91       	pop	r28
    2296:	df 91       	pop	r29
    2298:	08 95       	ret

0000229a <LCD_CrsSecRow>:
uint8_t LCD_CrsSecRow(void) {
    229a:	df 93       	push	r29
    229c:	cf 93       	push	r28
    229e:	cd b7       	in	r28, 0x3d	; 61
    22a0:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCmd(LCD_SecRow);
    22a2:	80 ec       	ldi	r24, 0xC0	; 192
    22a4:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_SendCmd>
//	_delay_ms(10);
	return 0;
    22a8:	80 e0       	ldi	r24, 0x00	; 0
}
    22aa:	cf 91       	pop	r28
    22ac:	df 91       	pop	r29
    22ae:	08 95       	ret

000022b0 <LCD_MoveCrsTo>:
uint8_t LCD_MoveCrsTo(uint8_t Row, uint8_t Pos) {
    22b0:	df 93       	push	r29
    22b2:	cf 93       	push	r28
    22b4:	00 d0       	rcall	.+0      	; 0x22b6 <LCD_MoveCrsTo+0x6>
    22b6:	00 d0       	rcall	.+0      	; 0x22b8 <LCD_MoveCrsTo+0x8>
    22b8:	cd b7       	in	r28, 0x3d	; 61
    22ba:	de b7       	in	r29, 0x3e	; 62
    22bc:	89 83       	std	Y+1, r24	; 0x01
    22be:	6a 83       	std	Y+2, r22	; 0x02
	if ((Row >= 0 || Row <= 1) && (Pos >= 0 || Pos <= 15)) {
		switch (Row) {
    22c0:	89 81       	ldd	r24, Y+1	; 0x01
    22c2:	28 2f       	mov	r18, r24
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	3c 83       	std	Y+4, r19	; 0x04
    22c8:	2b 83       	std	Y+3, r18	; 0x03
    22ca:	8b 81       	ldd	r24, Y+3	; 0x03
    22cc:	9c 81       	ldd	r25, Y+4	; 0x04
    22ce:	00 97       	sbiw	r24, 0x00	; 0
    22d0:	31 f0       	breq	.+12     	; 0x22de <LCD_MoveCrsTo+0x2e>
    22d2:	2b 81       	ldd	r18, Y+3	; 0x03
    22d4:	3c 81       	ldd	r19, Y+4	; 0x04
    22d6:	21 30       	cpi	r18, 0x01	; 1
    22d8:	31 05       	cpc	r19, r1
    22da:	31 f0       	breq	.+12     	; 0x22e8 <LCD_MoveCrsTo+0x38>
    22dc:	09 c0       	rjmp	.+18     	; 0x22f0 <LCD_MoveCrsTo+0x40>
		case 0:
			LCD_SendCmd(LCD_firstRow + Pos);
    22de:	8a 81       	ldd	r24, Y+2	; 0x02
    22e0:	80 58       	subi	r24, 0x80	; 128
    22e2:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_SendCmd>
    22e6:	04 c0       	rjmp	.+8      	; 0x22f0 <LCD_MoveCrsTo+0x40>
			break;
		case 1:
			LCD_SendCmd(LCD_SecRow + Pos);
    22e8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ea:	80 54       	subi	r24, 0x40	; 64
    22ec:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_SendCmd>
			break;
		}
	} else {
	}
	return 0; // success
    22f0:	80 e0       	ldi	r24, 0x00	; 0

}
    22f2:	0f 90       	pop	r0
    22f4:	0f 90       	pop	r0
    22f6:	0f 90       	pop	r0
    22f8:	0f 90       	pop	r0
    22fa:	cf 91       	pop	r28
    22fc:	df 91       	pop	r29
    22fe:	08 95       	ret

00002300 <Keypad_Initialization>:
		{ '1', '2', '3' },
		{ '4', '5', '6' },
		{ '7', '8', '9' },
		{ '*', '0', '#' } };

uint8_t Keypad_Initialization(void) {
    2300:	df 93       	push	r29
    2302:	cf 93       	push	r28
    2304:	cd b7       	in	r28, 0x3d	; 61
    2306:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPortDirection(KEYPAD_U8_PORT, COLS_ROWS_DIRECTION);
    2308:	80 e0       	ldi	r24, 0x00	; 0
    230a:	6f e0       	ldi	r22, 0x0F	; 15
    230c:	0e 94 8a 07 	call	0xf14	; 0xf14 <DIO_SetPortDirection>
	DIO_writePort(KEYPAD_U8_PORT, COLS_ROWS_VALUE);
    2310:	80 e0       	ldi	r24, 0x00	; 0
    2312:	6f ef       	ldi	r22, 0xFF	; 255
    2314:	0e 94 e6 08 	call	0x11cc	; 0x11cc <DIO_writePort>
	return 0;
    2318:	80 e0       	ldi	r24, 0x00	; 0
}
    231a:	cf 91       	pop	r28
    231c:	df 91       	pop	r29
    231e:	08 95       	ret

00002320 <KP_GetTheButton>:

uint8_t KP_GetTheButton(uint8_t* PressedBtn) {
    2320:	df 93       	push	r29
    2322:	cf 93       	push	r28
    2324:	00 d0       	rcall	.+0      	; 0x2326 <KP_GetTheButton+0x6>
    2326:	00 d0       	rcall	.+0      	; 0x2328 <KP_GetTheButton+0x8>
    2328:	00 d0       	rcall	.+0      	; 0x232a <KP_GetTheButton+0xa>
    232a:	cd b7       	in	r28, 0x3d	; 61
    232c:	de b7       	in	r29, 0x3e	; 62
    232e:	9d 83       	std	Y+5, r25	; 0x05
    2330:	8c 83       	std	Y+4, r24	; 0x04

	uint8_t LOC_u8RowsCounter, LOC_u8ColoumsCounter, LOC_u8StatusButton;
	/*********************LOOPS FOR THE ROWS********************/
	for (LOC_u8RowsCounter = 0; LOC_u8RowsCounter < ROWS;
    2332:	1a 82       	std	Y+2, r1	; 0x02
    2334:	55 c0       	rjmp	.+170    	; 0x23e0 <KP_GetTheButton+0xc0>
			LOC_u8RowsCounter++) {
		/*SET 1 PIN LOW EACH TIME TO CHECK IF THERE ANY BUTTON PRESSED*/
//		UART_TransmitString(UART_1,"CHECK POINT 1");
		DIO_WritePin(KEYPAD_U8_PORT, LOC_u8RowsCounter, PIN_LOW);
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	6a 81       	ldd	r22, Y+2	; 0x02
    233a:	40 e0       	ldi	r20, 0x00	; 0
    233c:	0e 94 31 09 	call	0x1262	; 0x1262 <DIO_WritePin>
		/*********************LOOPS FOR THE COLS********************/
		for (LOC_u8ColoumsCounter = 0; LOC_u8ColoumsCounter < COLUMNS;
    2340:	19 82       	std	Y+1, r1	; 0x01
    2342:	42 c0       	rjmp	.+132    	; 0x23c8 <KP_GetTheButton+0xa8>
				LOC_u8ColoumsCounter++) {
//		UART_TransmitString(UART_1,"CHECK POINT 2");
			/*CHECK IF THERE ANY PRESSED BBUTTON IN THIS ROW*/
			DIO_ReadPin(KEYPAD_U8_PORT, LOC_u8ColoumsCounter + 4,
    2344:	89 81       	ldd	r24, Y+1	; 0x01
    2346:	98 2f       	mov	r25, r24
    2348:	9c 5f       	subi	r25, 0xFC	; 252
    234a:	9e 01       	movw	r18, r28
    234c:	2d 5f       	subi	r18, 0xFD	; 253
    234e:	3f 4f       	sbci	r19, 0xFF	; 255
    2350:	80 e0       	ldi	r24, 0x00	; 0
    2352:	69 2f       	mov	r22, r25
    2354:	a9 01       	movw	r20, r18
    2356:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_ReadPin>
					&LOC_u8StatusButton);
			if (LOC_u8StatusButton != PIN_HIGH) {
    235a:	8b 81       	ldd	r24, Y+3	; 0x03
    235c:	81 30       	cpi	r24, 0x01	; 1
    235e:	89 f1       	breq	.+98     	; 0x23c2 <KP_GetTheButton+0xa2>
//		UART_TransmitString(UART_1,"CHECK POINT 3");
//				_delay_ms(20);//for debounce
				/*CHECK IF THE BUTTON HAS BEEN RELEASED*/
				DIO_ReadPin(KEYPAD_U8_PORT, LOC_u8ColoumsCounter + 4,
    2360:	89 81       	ldd	r24, Y+1	; 0x01
    2362:	98 2f       	mov	r25, r24
    2364:	9c 5f       	subi	r25, 0xFC	; 252
    2366:	9e 01       	movw	r18, r28
    2368:	2d 5f       	subi	r18, 0xFD	; 253
    236a:	3f 4f       	sbci	r19, 0xFF	; 255
    236c:	80 e0       	ldi	r24, 0x00	; 0
    236e:	69 2f       	mov	r22, r25
    2370:	a9 01       	movw	r20, r18
    2372:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_ReadPin>
    2376:	0b c0       	rjmp	.+22     	; 0x238e <KP_GetTheButton+0x6e>
						&LOC_u8StatusButton);
				/*IF IT HASN"T BEEN RELESED YET IT STUCK IN THIS WHILE LOOP*/
				while (LOC_u8StatusButton != PIN_HIGH ) {
					/*KEEP CHECKING UNTIL RELEASING*/
					DIO_ReadPin(KEYPAD_U8_PORT, LOC_u8ColoumsCounter + 4,
    2378:	89 81       	ldd	r24, Y+1	; 0x01
    237a:	98 2f       	mov	r25, r24
    237c:	9c 5f       	subi	r25, 0xFC	; 252
    237e:	9e 01       	movw	r18, r28
    2380:	2d 5f       	subi	r18, 0xFD	; 253
    2382:	3f 4f       	sbci	r19, 0xFF	; 255
    2384:	80 e0       	ldi	r24, 0x00	; 0
    2386:	69 2f       	mov	r22, r25
    2388:	a9 01       	movw	r20, r18
    238a:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_ReadPin>
//				_delay_ms(20);//for debounce
				/*CHECK IF THE BUTTON HAS BEEN RELEASED*/
				DIO_ReadPin(KEYPAD_U8_PORT, LOC_u8ColoumsCounter + 4,
						&LOC_u8StatusButton);
				/*IF IT HASN"T BEEN RELESED YET IT STUCK IN THIS WHILE LOOP*/
				while (LOC_u8StatusButton != PIN_HIGH ) {
    238e:	8b 81       	ldd	r24, Y+3	; 0x03
    2390:	81 30       	cpi	r24, 0x01	; 1
    2392:	91 f7       	brne	.-28     	; 0x2378 <KP_GetTheButton+0x58>
					/*KEEP CHECKING UNTIL RELEASING*/
					DIO_ReadPin(KEYPAD_U8_PORT, LOC_u8ColoumsCounter + 4,
							&LOC_u8StatusButton);
				}
				/*WHEN RELEASE RETURN*/
				*PressedBtn= gu8_symbol[LOC_u8RowsCounter][LOC_u8ColoumsCounter];
    2394:	8a 81       	ldd	r24, Y+2	; 0x02
    2396:	28 2f       	mov	r18, r24
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	89 81       	ldd	r24, Y+1	; 0x01
    239c:	48 2f       	mov	r20, r24
    239e:	50 e0       	ldi	r21, 0x00	; 0
    23a0:	c9 01       	movw	r24, r18
    23a2:	88 0f       	add	r24, r24
    23a4:	99 1f       	adc	r25, r25
    23a6:	82 0f       	add	r24, r18
    23a8:	93 1f       	adc	r25, r19
    23aa:	84 0f       	add	r24, r20
    23ac:	95 1f       	adc	r25, r21
    23ae:	fc 01       	movw	r30, r24
    23b0:	ee 52       	subi	r30, 0x2E	; 46
    23b2:	ff 4f       	sbci	r31, 0xFF	; 255
    23b4:	80 81       	ld	r24, Z
    23b6:	ec 81       	ldd	r30, Y+4	; 0x04
    23b8:	fd 81       	ldd	r31, Y+5	; 0x05
    23ba:	80 83       	st	Z, r24
				return 1;//BUTTON HAS BEEN PRESSED
    23bc:	81 e0       	ldi	r24, 0x01	; 1
    23be:	8e 83       	std	Y+6, r24	; 0x06
    23c0:	14 c0       	rjmp	.+40     	; 0x23ea <KP_GetTheButton+0xca>
		/*SET 1 PIN LOW EACH TIME TO CHECK IF THERE ANY BUTTON PRESSED*/
//		UART_TransmitString(UART_1,"CHECK POINT 1");
		DIO_WritePin(KEYPAD_U8_PORT, LOC_u8RowsCounter, PIN_LOW);
		/*********************LOOPS FOR THE COLS********************/
		for (LOC_u8ColoumsCounter = 0; LOC_u8ColoumsCounter < COLUMNS;
				LOC_u8ColoumsCounter++) {
    23c2:	89 81       	ldd	r24, Y+1	; 0x01
    23c4:	8f 5f       	subi	r24, 0xFF	; 255
    23c6:	89 83       	std	Y+1, r24	; 0x01
			LOC_u8RowsCounter++) {
		/*SET 1 PIN LOW EACH TIME TO CHECK IF THERE ANY BUTTON PRESSED*/
//		UART_TransmitString(UART_1,"CHECK POINT 1");
		DIO_WritePin(KEYPAD_U8_PORT, LOC_u8RowsCounter, PIN_LOW);
		/*********************LOOPS FOR THE COLS********************/
		for (LOC_u8ColoumsCounter = 0; LOC_u8ColoumsCounter < COLUMNS;
    23c8:	89 81       	ldd	r24, Y+1	; 0x01
    23ca:	83 30       	cpi	r24, 0x03	; 3
    23cc:	08 f4       	brcc	.+2      	; 0x23d0 <KP_GetTheButton+0xb0>
    23ce:	ba cf       	rjmp	.-140    	; 0x2344 <KP_GetTheButton+0x24>
				/*WHEN RELEASE RETURN*/
				*PressedBtn= gu8_symbol[LOC_u8RowsCounter][LOC_u8ColoumsCounter];
				return 1;//BUTTON HAS BEEN PRESSED
			}
		}
		DIO_WritePin(KEYPAD_U8_PORT, LOC_u8RowsCounter, PIN_HIGH);
    23d0:	80 e0       	ldi	r24, 0x00	; 0
    23d2:	6a 81       	ldd	r22, Y+2	; 0x02
    23d4:	41 e0       	ldi	r20, 0x01	; 1
    23d6:	0e 94 31 09 	call	0x1262	; 0x1262 <DIO_WritePin>
uint8_t KP_GetTheButton(uint8_t* PressedBtn) {

	uint8_t LOC_u8RowsCounter, LOC_u8ColoumsCounter, LOC_u8StatusButton;
	/*********************LOOPS FOR THE ROWS********************/
	for (LOC_u8RowsCounter = 0; LOC_u8RowsCounter < ROWS;
			LOC_u8RowsCounter++) {
    23da:	8a 81       	ldd	r24, Y+2	; 0x02
    23dc:	8f 5f       	subi	r24, 0xFF	; 255
    23de:	8a 83       	std	Y+2, r24	; 0x02

uint8_t KP_GetTheButton(uint8_t* PressedBtn) {

	uint8_t LOC_u8RowsCounter, LOC_u8ColoumsCounter, LOC_u8StatusButton;
	/*********************LOOPS FOR THE ROWS********************/
	for (LOC_u8RowsCounter = 0; LOC_u8RowsCounter < ROWS;
    23e0:	8a 81       	ldd	r24, Y+2	; 0x02
    23e2:	84 30       	cpi	r24, 0x04	; 4
    23e4:	08 f4       	brcc	.+2      	; 0x23e8 <KP_GetTheButton+0xc8>
    23e6:	a7 cf       	rjmp	.-178    	; 0x2336 <KP_GetTheButton+0x16>
				return 1;//BUTTON HAS BEEN PRESSED
			}
		}
		DIO_WritePin(KEYPAD_U8_PORT, LOC_u8RowsCounter, PIN_HIGH);
	}
	return 0;//NO BUTTON HAS BEEN PRESSED
    23e8:	1e 82       	std	Y+6, r1	; 0x06
    23ea:	8e 81       	ldd	r24, Y+6	; 0x06
}
    23ec:	26 96       	adiw	r28, 0x06	; 6
    23ee:	0f b6       	in	r0, 0x3f	; 63
    23f0:	f8 94       	cli
    23f2:	de bf       	out	0x3e, r29	; 62
    23f4:	0f be       	out	0x3f, r0	; 63
    23f6:	cd bf       	out	0x3d, r28	; 61
    23f8:	cf 91       	pop	r28
    23fa:	df 91       	pop	r29
    23fc:	08 95       	ret

000023fe <delay>:
uint8_t gu8_counter = 0;

/*LOCAL FUNCTION IMPLEMENTATION
 ----------------------------*/
/*Dummy delay*/
static void delay(uint16_t mSec) {
    23fe:	df 93       	push	r29
    2400:	cf 93       	push	r28
    2402:	00 d0       	rcall	.+0      	; 0x2404 <delay+0x6>
    2404:	00 d0       	rcall	.+0      	; 0x2406 <delay+0x8>
    2406:	00 d0       	rcall	.+0      	; 0x2408 <delay+0xa>
    2408:	cd b7       	in	r28, 0x3d	; 61
    240a:	de b7       	in	r29, 0x3e	; 62
    240c:	9e 83       	std	Y+6, r25	; 0x06
    240e:	8d 83       	std	Y+5, r24	; 0x05
	volatile uint16_t dummy1 = 0;
    2410:	1a 82       	std	Y+2, r1	; 0x02
    2412:	19 82       	std	Y+1, r1	; 0x01
	volatile uint16_t dummy2 = 0;
    2414:	1c 82       	std	Y+4, r1	; 0x04
    2416:	1b 82       	std	Y+3, r1	; 0x03
	mSec = (mSec / 3) + 1;
    2418:	8d 81       	ldd	r24, Y+5	; 0x05
    241a:	9e 81       	ldd	r25, Y+6	; 0x06
    241c:	23 e0       	ldi	r18, 0x03	; 3
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	b9 01       	movw	r22, r18
    2422:	0e 94 40 14 	call	0x2880	; 0x2880 <__udivmodhi4>
    2426:	cb 01       	movw	r24, r22
    2428:	01 96       	adiw	r24, 0x01	; 1
    242a:	9e 83       	std	Y+6, r25	; 0x06
    242c:	8d 83       	std	Y+5, r24	; 0x05
	for (dummy1 = 0; dummy1 <= mSec; dummy1++) {
    242e:	1a 82       	std	Y+2, r1	; 0x02
    2430:	19 82       	std	Y+1, r1	; 0x01
    2432:	13 c0       	rjmp	.+38     	; 0x245a <delay+0x5c>
		for (dummy2 = 0; dummy2 <= 2666; dummy2++)
    2434:	1c 82       	std	Y+4, r1	; 0x04
    2436:	1b 82       	std	Y+3, r1	; 0x03
    2438:	05 c0       	rjmp	.+10     	; 0x2444 <delay+0x46>
    243a:	8b 81       	ldd	r24, Y+3	; 0x03
    243c:	9c 81       	ldd	r25, Y+4	; 0x04
    243e:	01 96       	adiw	r24, 0x01	; 1
    2440:	9c 83       	std	Y+4, r25	; 0x04
    2442:	8b 83       	std	Y+3, r24	; 0x03
    2444:	8b 81       	ldd	r24, Y+3	; 0x03
    2446:	9c 81       	ldd	r25, Y+4	; 0x04
    2448:	2a e0       	ldi	r18, 0x0A	; 10
    244a:	8b 36       	cpi	r24, 0x6B	; 107
    244c:	92 07       	cpc	r25, r18
    244e:	a8 f3       	brcs	.-22     	; 0x243a <delay+0x3c>
/*Dummy delay*/
static void delay(uint16_t mSec) {
	volatile uint16_t dummy1 = 0;
	volatile uint16_t dummy2 = 0;
	mSec = (mSec / 3) + 1;
	for (dummy1 = 0; dummy1 <= mSec; dummy1++) {
    2450:	89 81       	ldd	r24, Y+1	; 0x01
    2452:	9a 81       	ldd	r25, Y+2	; 0x02
    2454:	01 96       	adiw	r24, 0x01	; 1
    2456:	9a 83       	std	Y+2, r25	; 0x02
    2458:	89 83       	std	Y+1, r24	; 0x01
    245a:	29 81       	ldd	r18, Y+1	; 0x01
    245c:	3a 81       	ldd	r19, Y+2	; 0x02
    245e:	8d 81       	ldd	r24, Y+5	; 0x05
    2460:	9e 81       	ldd	r25, Y+6	; 0x06
    2462:	82 17       	cp	r24, r18
    2464:	93 07       	cpc	r25, r19
    2466:	30 f7       	brcc	.-52     	; 0x2434 <delay+0x36>
		for (dummy2 = 0; dummy2 <= 2666; dummy2++)
			;
	}
}
    2468:	26 96       	adiw	r28, 0x06	; 6
    246a:	0f b6       	in	r0, 0x3f	; 63
    246c:	f8 94       	cli
    246e:	de bf       	out	0x3e, r29	; 62
    2470:	0f be       	out	0x3f, r0	; 63
    2472:	cd bf       	out	0x3d, r28	; 61
    2474:	cf 91       	pop	r28
    2476:	df 91       	pop	r29
    2478:	08 95       	ret

0000247a <THERMOSTAT_STRING_2>:
static void THERMOSTAT_STRING_2(void){
    247a:	df 93       	push	r29
    247c:	cf 93       	push	r28
    247e:	cd b7       	in	r28, 0x3d	; 61
    2480:	de b7       	in	r29, 0x3e	; 62
	gu8_PressedBtn = NULL_TERMINATOR;
    2482:	10 92 e6 00 	sts	0x00E6, r1

	LCD_WriteString((uint8_t*) "ENTER TEMP THEN");
    2486:	80 e6       	ldi	r24, 0x60	; 96
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	0e 94 b2 10 	call	0x2164	; 0x2164 <LCD_WriteString>
	LCD_CrsSecRow();
    248e:	0e 94 4d 11 	call	0x229a	; 0x229a <LCD_CrsSecRow>
	LCD_WriteString((uint8_t*) "PRESS *");
    2492:	80 e7       	ldi	r24, 0x70	; 112
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	0e 94 b2 10 	call	0x2164	; 0x2164 <LCD_WriteString>
    249a:	04 c0       	rjmp	.+8      	; 0x24a4 <THERMOSTAT_STRING_2+0x2a>
	while (gu8_PressedBtn == NULL_TERMINATOR) {
		KP_GetTheButton(&gu8_PressedBtn);
    249c:	86 ee       	ldi	r24, 0xE6	; 230
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	0e 94 90 11 	call	0x2320	; 0x2320 <KP_GetTheButton>
	gu8_PressedBtn = NULL_TERMINATOR;

	LCD_WriteString((uint8_t*) "ENTER TEMP THEN");
	LCD_CrsSecRow();
	LCD_WriteString((uint8_t*) "PRESS *");
	while (gu8_PressedBtn == NULL_TERMINATOR) {
    24a4:	80 91 e6 00 	lds	r24, 0x00E6
    24a8:	88 23       	and	r24, r24
    24aa:	c1 f3       	breq	.-16     	; 0x249c <THERMOSTAT_STRING_2+0x22>
		KP_GetTheButton(&gu8_PressedBtn);
	}
	gu8_PressedBtn = NULL_TERMINATOR;
    24ac:	10 92 e6 00 	sts	0x00E6, r1
	LCD_ClearDisplay();
    24b0:	0e 94 42 11 	call	0x2284	; 0x2284 <LCD_ClearDisplay>

}
    24b4:	cf 91       	pop	r28
    24b6:	df 91       	pop	r29
    24b8:	08 95       	ret

000024ba <THERMOSTAT_CHAR_TO_DEC>:
/*CONVERTS THE NUMBER FROM CHAR TO DECIMAL*/
static void THERMOSTAT_CHAR_TO_DEC(uint8_t* string) {
    24ba:	df 93       	push	r29
    24bc:	cf 93       	push	r28
    24be:	00 d0       	rcall	.+0      	; 0x24c0 <THERMOSTAT_CHAR_TO_DEC+0x6>
    24c0:	00 d0       	rcall	.+0      	; 0x24c2 <THERMOSTAT_CHAR_TO_DEC+0x8>
    24c2:	cd b7       	in	r28, 0x3d	; 61
    24c4:	de b7       	in	r29, 0x3e	; 62
    24c6:	9c 83       	std	Y+4, r25	; 0x04
    24c8:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t LU8_ITERATOR = 0; //This is for the EnterTemp Index
    24ca:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t LU8_COUNTER = 0; //This counter for number of digits
    24cc:	19 82       	std	Y+1, r1	; 0x01
	gu8_PressedBtn = NULL_TERMINATOR;
    24ce:	10 92 e6 00 	sts	0x00E6, r1
    24d2:	03 c0       	rjmp	.+6      	; 0x24da <THERMOSTAT_CHAR_TO_DEC+0x20>
	/*Gets the number of digits*/
	while (*(string + LU8_COUNTER) != NULL_TERMINATOR) {
		LU8_COUNTER++;
    24d4:	89 81       	ldd	r24, Y+1	; 0x01
    24d6:	8f 5f       	subi	r24, 0xFF	; 255
    24d8:	89 83       	std	Y+1, r24	; 0x01
static void THERMOSTAT_CHAR_TO_DEC(uint8_t* string) {
	uint8_t LU8_ITERATOR = 0; //This is for the EnterTemp Index
	uint8_t LU8_COUNTER = 0; //This counter for number of digits
	gu8_PressedBtn = NULL_TERMINATOR;
	/*Gets the number of digits*/
	while (*(string + LU8_COUNTER) != NULL_TERMINATOR) {
    24da:	89 81       	ldd	r24, Y+1	; 0x01
    24dc:	28 2f       	mov	r18, r24
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	8b 81       	ldd	r24, Y+3	; 0x03
    24e2:	9c 81       	ldd	r25, Y+4	; 0x04
    24e4:	fc 01       	movw	r30, r24
    24e6:	e2 0f       	add	r30, r18
    24e8:	f3 1f       	adc	r31, r19
    24ea:	80 81       	ld	r24, Z
    24ec:	88 23       	and	r24, r24
    24ee:	91 f7       	brne	.-28     	; 0x24d4 <THERMOSTAT_CHAR_TO_DEC+0x1a>
		LU8_COUNTER++;
	}
	/**/
	gu8_desired_temp = (*(string) - ZERO_ASCII); //get the number as a decimal
    24f0:	eb 81       	ldd	r30, Y+3	; 0x03
    24f2:	fc 81       	ldd	r31, Y+4	; 0x04
    24f4:	80 81       	ld	r24, Z
    24f6:	88 2f       	mov	r24, r24
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	c0 97       	sbiw	r24, 0x30	; 48
    24fc:	90 93 e4 00 	sts	0x00E4, r25
    2500:	80 93 e3 00 	sts	0x00E3, r24
	for (LU8_ITERATOR = 0; LU8_ITERATOR < (LU8_COUNTER - 1); LU8_ITERATOR++) {
    2504:	1a 82       	std	Y+2, r1	; 0x02
    2506:	2e c0       	rjmp	.+92     	; 0x2564 <THERMOSTAT_CHAR_TO_DEC+0xaa>
		gu8_desired_temp = gu8_desired_temp * 10;
    2508:	80 91 e3 00 	lds	r24, 0x00E3
    250c:	90 91 e4 00 	lds	r25, 0x00E4
    2510:	9c 01       	movw	r18, r24
    2512:	22 0f       	add	r18, r18
    2514:	33 1f       	adc	r19, r19
    2516:	c9 01       	movw	r24, r18
    2518:	88 0f       	add	r24, r24
    251a:	99 1f       	adc	r25, r25
    251c:	88 0f       	add	r24, r24
    251e:	99 1f       	adc	r25, r25
    2520:	82 0f       	add	r24, r18
    2522:	93 1f       	adc	r25, r19
    2524:	90 93 e4 00 	sts	0x00E4, r25
    2528:	80 93 e3 00 	sts	0x00E3, r24
		gu8_desired_temp = (gu8_desired_temp)
    252c:	8a 81       	ldd	r24, Y+2	; 0x02
    252e:	88 2f       	mov	r24, r24
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	9c 01       	movw	r18, r24
    2534:	2f 5f       	subi	r18, 0xFF	; 255
    2536:	3f 4f       	sbci	r19, 0xFF	; 255
    2538:	8b 81       	ldd	r24, Y+3	; 0x03
    253a:	9c 81       	ldd	r25, Y+4	; 0x04
    253c:	fc 01       	movw	r30, r24
    253e:	e2 0f       	add	r30, r18
    2540:	f3 1f       	adc	r31, r19
    2542:	80 81       	ld	r24, Z
    2544:	28 2f       	mov	r18, r24
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	80 91 e3 00 	lds	r24, 0x00E3
    254c:	90 91 e4 00 	lds	r25, 0x00E4
    2550:	82 0f       	add	r24, r18
    2552:	93 1f       	adc	r25, r19
    2554:	c0 97       	sbiw	r24, 0x30	; 48
    2556:	90 93 e4 00 	sts	0x00E4, r25
    255a:	80 93 e3 00 	sts	0x00E3, r24
	while (*(string + LU8_COUNTER) != NULL_TERMINATOR) {
		LU8_COUNTER++;
	}
	/**/
	gu8_desired_temp = (*(string) - ZERO_ASCII); //get the number as a decimal
	for (LU8_ITERATOR = 0; LU8_ITERATOR < (LU8_COUNTER - 1); LU8_ITERATOR++) {
    255e:	8a 81       	ldd	r24, Y+2	; 0x02
    2560:	8f 5f       	subi	r24, 0xFF	; 255
    2562:	8a 83       	std	Y+2, r24	; 0x02
    2564:	8a 81       	ldd	r24, Y+2	; 0x02
    2566:	28 2f       	mov	r18, r24
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	89 81       	ldd	r24, Y+1	; 0x01
    256c:	88 2f       	mov	r24, r24
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	01 97       	sbiw	r24, 0x01	; 1
    2572:	28 17       	cp	r18, r24
    2574:	39 07       	cpc	r19, r25
    2576:	44 f2       	brlt	.-112    	; 0x2508 <THERMOSTAT_CHAR_TO_DEC+0x4e>
		gu8_desired_temp = gu8_desired_temp * 10;
		gu8_desired_temp = (gu8_desired_temp)
				+ (*(string + LU8_ITERATOR + 1) - ZERO_ASCII);
	}
}
    2578:	0f 90       	pop	r0
    257a:	0f 90       	pop	r0
    257c:	0f 90       	pop	r0
    257e:	0f 90       	pop	r0
    2580:	cf 91       	pop	r28
    2582:	df 91       	pop	r29
    2584:	08 95       	ret

00002586 <THERMOSTAT_DesiredTemp>:



static void THERMOSTAT_DesiredTemp(void) {
    2586:	df 93       	push	r29
    2588:	cf 93       	push	r28
    258a:	0f 92       	push	r0
    258c:	cd b7       	in	r28, 0x3d	; 61
    258e:	de b7       	in	r29, 0x3e	; 62
	LCD_ClearDisplay();
    2590:	0e 94 42 11 	call	0x2284	; 0x2284 <LCD_ClearDisplay>
	delay(1);
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	0e 94 ff 11 	call	0x23fe	; 0x23fe <delay>
	for (uint8_t i = 0; i < 4; i++) {
    259c:	19 82       	std	Y+1, r1	; 0x01
    259e:	0a c0       	rjmp	.+20     	; 0x25b4 <THERMOSTAT_DesiredTemp+0x2e>
		gu8_EnteredTemp[i] = NULL_TERMINATOR;
    25a0:	89 81       	ldd	r24, Y+1	; 0x01
    25a2:	88 2f       	mov	r24, r24
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	fc 01       	movw	r30, r24
    25a8:	e9 51       	subi	r30, 0x19	; 25
    25aa:	ff 4f       	sbci	r31, 0xFF	; 255
    25ac:	10 82       	st	Z, r1


static void THERMOSTAT_DesiredTemp(void) {
	LCD_ClearDisplay();
	delay(1);
	for (uint8_t i = 0; i < 4; i++) {
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
    25b0:	8f 5f       	subi	r24, 0xFF	; 255
    25b2:	89 83       	std	Y+1, r24	; 0x01
    25b4:	89 81       	ldd	r24, Y+1	; 0x01
    25b6:	84 30       	cpi	r24, 0x04	; 4
    25b8:	98 f3       	brcs	.-26     	; 0x25a0 <THERMOSTAT_DesiredTemp+0x1a>
		gu8_EnteredTemp[i] = NULL_TERMINATOR;
	}
	gu8_PressedBtn = NULL_TERMINATOR;
    25ba:	10 92 e6 00 	sts	0x00E6, r1
	while (1) {
		do {
			gu8_PressedBtn = KP_GetTheButton(gu8_EnteredTemp + gu8_counter);
    25be:	80 91 eb 00 	lds	r24, 0x00EB
    25c2:	88 2f       	mov	r24, r24
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	89 51       	subi	r24, 0x19	; 25
    25c8:	9f 4f       	sbci	r25, 0xFF	; 255
    25ca:	0e 94 90 11 	call	0x2320	; 0x2320 <KP_GetTheButton>
    25ce:	80 93 e6 00 	sts	0x00E6, r24
		} while (gu8_PressedBtn == 0);
    25d2:	80 91 e6 00 	lds	r24, 0x00E6
    25d6:	88 23       	and	r24, r24
    25d8:	91 f3       	breq	.-28     	; 0x25be <THERMOSTAT_DesiredTemp+0x38>
		LCD_SendChar(*(gu8_EnteredTemp + gu8_counter));
    25da:	80 91 eb 00 	lds	r24, 0x00EB
    25de:	88 2f       	mov	r24, r24
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	fc 01       	movw	r30, r24
    25e4:	e9 51       	subi	r30, 0x19	; 25
    25e6:	ff 4f       	sbci	r31, 0xFF	; 255
    25e8:	80 81       	ld	r24, Z
    25ea:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <LCD_SendChar>
		delay(1);
    25ee:	81 e0       	ldi	r24, 0x01	; 1
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	0e 94 ff 11 	call	0x23fe	; 0x23fe <delay>
		if (gu8_EnteredTemp[gu8_counter] == '*') {
    25f6:	80 91 eb 00 	lds	r24, 0x00EB
    25fa:	88 2f       	mov	r24, r24
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	fc 01       	movw	r30, r24
    2600:	e9 51       	subi	r30, 0x19	; 25
    2602:	ff 4f       	sbci	r31, 0xFF	; 255
    2604:	80 81       	ld	r24, Z
    2606:	8a 32       	cpi	r24, 0x2A	; 42
    2608:	09 f5       	brne	.+66     	; 0x264c <THERMOSTAT_DesiredTemp+0xc6>
			gu8_EnteredTemp[gu8_counter] = NULL_TERMINATOR;
    260a:	80 91 eb 00 	lds	r24, 0x00EB
    260e:	88 2f       	mov	r24, r24
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	fc 01       	movw	r30, r24
    2614:	e9 51       	subi	r30, 0x19	; 25
    2616:	ff 4f       	sbci	r31, 0xFF	; 255
    2618:	10 82       	st	Z, r1
			LCD_ClearDisplay();
			delay(1);
			THERMOSTAT_STRING_2();
		}
	}
	gu8_counter = 0;
    261a:	10 92 eb 00 	sts	0x00EB, r1
	LCD_ClearDisplay();
    261e:	0e 94 42 11 	call	0x2284	; 0x2284 <LCD_ClearDisplay>
	delay(1);
    2622:	81 e0       	ldi	r24, 0x01	; 1
    2624:	90 e0       	ldi	r25, 0x00	; 0
    2626:	0e 94 ff 11 	call	0x23fe	; 0x23fe <delay>
	LCD_WriteString((uint8_t*) "WANTED TEMP ");
    262a:	88 e7       	ldi	r24, 0x78	; 120
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	0e 94 b2 10 	call	0x2164	; 0x2164 <LCD_WriteString>
	delay(1);
    2632:	81 e0       	ldi	r24, 0x01	; 1
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	0e 94 ff 11 	call	0x23fe	; 0x23fe <delay>
	LCD_WriteString(gu8_EnteredTemp);
    263a:	87 ee       	ldi	r24, 0xE7	; 231
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	0e 94 b2 10 	call	0x2164	; 0x2164 <LCD_WriteString>
	THERMOSTAT_CHAR_TO_DEC(gu8_EnteredTemp);
    2642:	87 ee       	ldi	r24, 0xE7	; 231
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	0e 94 5d 12 	call	0x24ba	; 0x24ba <THERMOSTAT_CHAR_TO_DEC>
    264a:	27 c0       	rjmp	.+78     	; 0x269a <THERMOSTAT_DesiredTemp+0x114>
		delay(1);
		if (gu8_EnteredTemp[gu8_counter] == '*') {
			gu8_EnteredTemp[gu8_counter] = NULL_TERMINATOR;
			break;
		}
		gu8_counter++;
    264c:	80 91 eb 00 	lds	r24, 0x00EB
    2650:	8f 5f       	subi	r24, 0xFF	; 255
    2652:	80 93 eb 00 	sts	0x00EB, r24
		if (gu8_counter == 4) {
    2656:	80 91 eb 00 	lds	r24, 0x00EB
    265a:	84 30       	cpi	r24, 0x04	; 4
    265c:	09 f0       	breq	.+2      	; 0x2660 <THERMOSTAT_DesiredTemp+0xda>
    265e:	af cf       	rjmp	.-162    	; 0x25be <THERMOSTAT_DesiredTemp+0x38>
			delay(1);
    2660:	81 e0       	ldi	r24, 0x01	; 1
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	0e 94 ff 11 	call	0x23fe	; 0x23fe <delay>
			LCD_ClearDisplay();
    2668:	0e 94 42 11 	call	0x2284	; 0x2284 <LCD_ClearDisplay>
			delay(1);
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	0e 94 ff 11 	call	0x23fe	; 0x23fe <delay>
			LCD_WriteString((uint8_t*) "INVALID");
    2674:	85 e8       	ldi	r24, 0x85	; 133
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	0e 94 b2 10 	call	0x2164	; 0x2164 <LCD_WriteString>
			delay(1000);
    267c:	88 ee       	ldi	r24, 0xE8	; 232
    267e:	93 e0       	ldi	r25, 0x03	; 3
    2680:	0e 94 ff 11 	call	0x23fe	; 0x23fe <delay>
			gu8_counter = 0;
    2684:	10 92 eb 00 	sts	0x00EB, r1
			LCD_ClearDisplay();
    2688:	0e 94 42 11 	call	0x2284	; 0x2284 <LCD_ClearDisplay>
			delay(1);
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	0e 94 ff 11 	call	0x23fe	; 0x23fe <delay>
			THERMOSTAT_STRING_2();
    2694:	0e 94 3d 12 	call	0x247a	; 0x247a <THERMOSTAT_STRING_2>
    2698:	92 cf       	rjmp	.-220    	; 0x25be <THERMOSTAT_DesiredTemp+0x38>
	LCD_WriteString((uint8_t*) "WANTED TEMP ");
	delay(1);
	LCD_WriteString(gu8_EnteredTemp);
	THERMOSTAT_CHAR_TO_DEC(gu8_EnteredTemp);
	do {
		gu8_PressedBtn = KP_GetTheButton(gu8_EnteredTemp + gu8_counter);
    269a:	80 91 eb 00 	lds	r24, 0x00EB
    269e:	88 2f       	mov	r24, r24
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	89 51       	subi	r24, 0x19	; 25
    26a4:	9f 4f       	sbci	r25, 0xFF	; 255
    26a6:	0e 94 90 11 	call	0x2320	; 0x2320 <KP_GetTheButton>
    26aa:	80 93 e6 00 	sts	0x00E6, r24
	} while (gu8_PressedBtn == NULL_TERMINATOR);
    26ae:	80 91 e6 00 	lds	r24, 0x00E6
    26b2:	88 23       	and	r24, r24
    26b4:	91 f3       	breq	.-28     	; 0x269a <THERMOSTAT_DesiredTemp+0x114>
	gu8_PressedBtn = NULL_TERMINATOR;
    26b6:	10 92 e6 00 	sts	0x00E6, r1
	LCD_ClearDisplay();
    26ba:	0e 94 42 11 	call	0x2284	; 0x2284 <LCD_ClearDisplay>
}
    26be:	0f 90       	pop	r0
    26c0:	cf 91       	pop	r28
    26c2:	df 91       	pop	r29
    26c4:	08 95       	ret

000026c6 <THERMOSTAT_CurrentTemp>:
static void THERMOSTAT_CurrentTemp(void) {
    26c6:	df 93       	push	r29
    26c8:	cf 93       	push	r28
    26ca:	cd b7       	in	r28, 0x3d	; 61
    26cc:	de b7       	in	r29, 0x3e	; 62
	//LCD_ClearDisplay();
	delay(1);
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	0e 94 ff 11 	call	0x23fe	; 0x23fe <delay>
	LCD_WriteString((uint8_t*) "CURRENT TEMP:");
    26d6:	8d e8       	ldi	r24, 0x8D	; 141
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	0e 94 b2 10 	call	0x2164	; 0x2164 <LCD_WriteString>
	TEMP_GetTemp(TEMP_CH_7, &gu8_ActualTemp);
    26de:	25 ee       	ldi	r18, 0xE5	; 229
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	87 e0       	ldi	r24, 0x07	; 7
    26e4:	b9 01       	movw	r22, r18
    26e6:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <TEMP_GetTemp>
	LCD_WriteNumber(gu8_ActualTemp);
    26ea:	80 91 e5 00 	lds	r24, 0x00E5
    26ee:	88 2f       	mov	r24, r24
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	0e 94 da 10 	call	0x21b4	; 0x21b4 <LCD_WriteNumber>
	LCD_CrsSecRow();
    26f6:	0e 94 4d 11 	call	0x229a	; 0x229a <LCD_CrsSecRow>
	delay(1);
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	0e 94 ff 11 	call	0x23fe	; 0x23fe <delay>
	LCD_WriteString((uint8_t*) "DESIRED TEMP");
    2702:	8b e9       	ldi	r24, 0x9B	; 155
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	0e 94 b2 10 	call	0x2164	; 0x2164 <LCD_WriteString>
	delay(1);
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	0e 94 ff 11 	call	0x23fe	; 0x23fe <delay>
	LCD_WriteNumber(gu8_desired_temp);
    2712:	80 91 e3 00 	lds	r24, 0x00E3
    2716:	90 91 e4 00 	lds	r25, 0x00E4
    271a:	0e 94 da 10 	call	0x21b4	; 0x21b4 <LCD_WriteNumber>

}
    271e:	cf 91       	pop	r28
    2720:	df 91       	pop	r29
    2722:	08 95       	ret

00002724 <Thermostat_SetTemp>:
static void Thermostat_SetTemp(void) {
    2724:	df 93       	push	r29
    2726:	cf 93       	push	r28
    2728:	cd b7       	in	r28, 0x3d	; 61
    272a:	de b7       	in	r29, 0x3e	; 62
	/*Wait until user press '#'*/
	LCD_WriteString((uint8_t*) "PRS # to SET");
    272c:	88 ea       	ldi	r24, 0xA8	; 168
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	0e 94 b2 10 	call	0x2164	; 0x2164 <LCD_WriteString>
    2734:	04 c0       	rjmp	.+8      	; 0x273e <Thermostat_SetTemp+0x1a>
	while (gu8_PressedBtn != '#') {
		KP_GetTheButton(&gu8_PressedBtn);
    2736:	86 ee       	ldi	r24, 0xE6	; 230
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	0e 94 90 11 	call	0x2320	; 0x2320 <KP_GetTheButton>

}
static void Thermostat_SetTemp(void) {
	/*Wait until user press '#'*/
	LCD_WriteString((uint8_t*) "PRS # to SET");
	while (gu8_PressedBtn != '#') {
    273e:	80 91 e6 00 	lds	r24, 0x00E6
    2742:	83 32       	cpi	r24, 0x23	; 35
    2744:	c1 f7       	brne	.-16     	; 0x2736 <Thermostat_SetTemp+0x12>
		KP_GetTheButton(&gu8_PressedBtn);
	}
	gu8_PressedBtn = NULL_TERMINATOR;
    2746:	10 92 e6 00 	sts	0x00E6, r1
	/*Clear Display*/
	LCD_ClearDisplay();
    274a:	0e 94 42 11 	call	0x2284	; 0x2284 <LCD_ClearDisplay>
	delay(1);
    274e:	81 e0       	ldi	r24, 0x01	; 1
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	0e 94 ff 11 	call	0x23fe	; 0x23fe <delay>
	THERMOSTAT_STRING_2();
    2756:	0e 94 3d 12 	call	0x247a	; 0x247a <THERMOSTAT_STRING_2>
	delay(1);
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	0e 94 ff 11 	call	0x23fe	; 0x23fe <delay>
	/*Get desired temperature */
	THERMOSTAT_DesiredTemp();
    2762:	0e 94 c3 12 	call	0x2586	; 0x2586 <THERMOSTAT_DesiredTemp>
    2766:	24 c0       	rjmp	.+72     	; 0x27b0 <Thermostat_SetTemp+0x8c>
	/*check if temp is bigger than 150*/
	while (gu8_desired_temp > 150) {
		delay(1);
    2768:	81 e0       	ldi	r24, 0x01	; 1
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	0e 94 ff 11 	call	0x23fe	; 0x23fe <delay>
		LCD_WriteString((uint8_t*) "TEMP EXCEEDED");
    2770:	85 eb       	ldi	r24, 0xB5	; 181
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	0e 94 b2 10 	call	0x2164	; 0x2164 <LCD_WriteString>
		LCD_CrsSecRow();
    2778:	0e 94 4d 11 	call	0x229a	; 0x229a <LCD_CrsSecRow>
		delay(1);
    277c:	81 e0       	ldi	r24, 0x01	; 1
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	0e 94 ff 11 	call	0x23fe	; 0x23fe <delay>
		LCD_WriteString((uint8_t*) "PRS ANY KEY");
    2784:	83 ec       	ldi	r24, 0xC3	; 195
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	0e 94 b2 10 	call	0x2164	; 0x2164 <LCD_WriteString>
		do {
			gu8_PressedBtn = KP_GetTheButton(gu8_EnteredTemp + gu8_counter);
    278c:	80 91 eb 00 	lds	r24, 0x00EB
    2790:	88 2f       	mov	r24, r24
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	89 51       	subi	r24, 0x19	; 25
    2796:	9f 4f       	sbci	r25, 0xFF	; 255
    2798:	0e 94 90 11 	call	0x2320	; 0x2320 <KP_GetTheButton>
    279c:	80 93 e6 00 	sts	0x00E6, r24
		} while (gu8_PressedBtn == NULL_TERMINATOR);
    27a0:	80 91 e6 00 	lds	r24, 0x00E6
    27a4:	88 23       	and	r24, r24
    27a6:	91 f3       	breq	.-28     	; 0x278c <Thermostat_SetTemp+0x68>
		gu8_PressedBtn = NULL_TERMINATOR;
    27a8:	10 92 e6 00 	sts	0x00E6, r1
		THERMOSTAT_DesiredTemp();
    27ac:	0e 94 c3 12 	call	0x2586	; 0x2586 <THERMOSTAT_DesiredTemp>
	THERMOSTAT_STRING_2();
	delay(1);
	/*Get desired temperature */
	THERMOSTAT_DesiredTemp();
	/*check if temp is bigger than 150*/
	while (gu8_desired_temp > 150) {
    27b0:	80 91 e3 00 	lds	r24, 0x00E3
    27b4:	90 91 e4 00 	lds	r25, 0x00E4
    27b8:	87 39       	cpi	r24, 0x97	; 151
    27ba:	91 05       	cpc	r25, r1
    27bc:	a8 f6       	brcc	.-86     	; 0x2768 <Thermostat_SetTemp+0x44>
			gu8_PressedBtn = KP_GetTheButton(gu8_EnteredTemp + gu8_counter);
		} while (gu8_PressedBtn == NULL_TERMINATOR);
		gu8_PressedBtn = NULL_TERMINATOR;
		THERMOSTAT_DesiredTemp();
	}
	delay(1);
    27be:	81 e0       	ldi	r24, 0x01	; 1
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	0e 94 ff 11 	call	0x23fe	; 0x23fe <delay>
}
    27c6:	cf 91       	pop	r28
    27c8:	df 91       	pop	r29
    27ca:	08 95       	ret

000027cc <App_Init>:
/*- APIs IMPLEMENTATION
 -----------------------------------*/
void App_Init(void) {
    27cc:	df 93       	push	r29
    27ce:	cf 93       	push	r28
    27d0:	cd b7       	in	r28, 0x3d	; 61
    27d2:	de b7       	in	r29, 0x3e	; 62
	/*--Initialization--*/
	LCD_Initialization();
    27d4:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <LCD_Initialization>
	Keypad_Initialization();
    27d8:	0e 94 80 11 	call	0x2300	; 0x2300 <Keypad_Initialization>
	TEMP_Init(TEMP_CH_0);
    27dc:	80 e0       	ldi	r24, 0x00	; 0
    27de:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <TEMP_Init>
	MOTOR_init();
    27e2:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <MOTOR_init>

}
    27e6:	cf 91       	pop	r28
    27e8:	df 91       	pop	r29
    27ea:	08 95       	ret

000027ec <App_Update>:
void App_Update(void) {
    27ec:	df 93       	push	r29
    27ee:	cf 93       	push	r28
    27f0:	cd b7       	in	r28, 0x3d	; 61
    27f2:	de b7       	in	r29, 0x3e	; 62
	Thermostat_SetTemp();
    27f4:	0e 94 92 13 	call	0x2724	; 0x2724 <Thermostat_SetTemp>
	while (1) {
		gu8_PressedBtn = NULL_TERMINATOR;
    27f8:	10 92 e6 00 	sts	0x00E6, r1
		THERMOSTAT_CurrentTemp();
    27fc:	0e 94 63 13 	call	0x26c6	; 0x26c6 <THERMOSTAT_CurrentTemp>
		if (gu8_ActualTemp >= gu8_desired_temp) {
    2800:	80 91 e5 00 	lds	r24, 0x00E5
    2804:	28 2f       	mov	r18, r24
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	80 91 e3 00 	lds	r24, 0x00E3
    280c:	90 91 e4 00 	lds	r25, 0x00E4
    2810:	28 17       	cp	r18, r24
    2812:	39 07       	cpc	r19, r25
    2814:	28 f0       	brcs	.+10     	; 0x2820 <App_Update+0x34>
			MOTOR_start(MOTER1, MOTOR1_FORWARD);
    2816:	80 e0       	ldi	r24, 0x00	; 0
    2818:	61 e0       	ldi	r22, 0x01	; 1
    281a:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <MOTOR_start>
    281e:	03 c0       	rjmp	.+6      	; 0x2826 <App_Update+0x3a>
		} else {
			MOTOR_stop(MOTER1);
    2820:	80 e0       	ldi	r24, 0x00	; 0
    2822:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <MOTOR_stop>
		}
		delay(1000);
    2826:	88 ee       	ldi	r24, 0xE8	; 232
    2828:	93 e0       	ldi	r25, 0x03	; 3
    282a:	0e 94 ff 11 	call	0x23fe	; 0x23fe <delay>
    282e:	e4 cf       	rjmp	.-56     	; 0x27f8 <App_Update+0xc>

00002830 <main>:
/*- INCLUDES 
 -----------------------------------------------*/
#include "App/THERMOSTAT/thermostat.h"


int main() {
    2830:	df 93       	push	r29
    2832:	cf 93       	push	r28
    2834:	cd b7       	in	r28, 0x3d	; 61
    2836:	de b7       	in	r29, 0x3e	; 62

	App_Init();
    2838:	0e 94 e6 13 	call	0x27cc	; 0x27cc <App_Init>
	while (1) {
	App_Update();
    283c:	0e 94 f6 13 	call	0x27ec	; 0x27ec <App_Update>
    2840:	fd cf       	rjmp	.-6      	; 0x283c <main+0xc>

00002842 <__mulsi3>:
    2842:	62 9f       	mul	r22, r18
    2844:	d0 01       	movw	r26, r0
    2846:	73 9f       	mul	r23, r19
    2848:	f0 01       	movw	r30, r0
    284a:	82 9f       	mul	r24, r18
    284c:	e0 0d       	add	r30, r0
    284e:	f1 1d       	adc	r31, r1
    2850:	64 9f       	mul	r22, r20
    2852:	e0 0d       	add	r30, r0
    2854:	f1 1d       	adc	r31, r1
    2856:	92 9f       	mul	r25, r18
    2858:	f0 0d       	add	r31, r0
    285a:	83 9f       	mul	r24, r19
    285c:	f0 0d       	add	r31, r0
    285e:	74 9f       	mul	r23, r20
    2860:	f0 0d       	add	r31, r0
    2862:	65 9f       	mul	r22, r21
    2864:	f0 0d       	add	r31, r0
    2866:	99 27       	eor	r25, r25
    2868:	72 9f       	mul	r23, r18
    286a:	b0 0d       	add	r27, r0
    286c:	e1 1d       	adc	r30, r1
    286e:	f9 1f       	adc	r31, r25
    2870:	63 9f       	mul	r22, r19
    2872:	b0 0d       	add	r27, r0
    2874:	e1 1d       	adc	r30, r1
    2876:	f9 1f       	adc	r31, r25
    2878:	bd 01       	movw	r22, r26
    287a:	cf 01       	movw	r24, r30
    287c:	11 24       	eor	r1, r1
    287e:	08 95       	ret

00002880 <__udivmodhi4>:
    2880:	aa 1b       	sub	r26, r26
    2882:	bb 1b       	sub	r27, r27
    2884:	51 e1       	ldi	r21, 0x11	; 17
    2886:	07 c0       	rjmp	.+14     	; 0x2896 <__udivmodhi4_ep>

00002888 <__udivmodhi4_loop>:
    2888:	aa 1f       	adc	r26, r26
    288a:	bb 1f       	adc	r27, r27
    288c:	a6 17       	cp	r26, r22
    288e:	b7 07       	cpc	r27, r23
    2890:	10 f0       	brcs	.+4      	; 0x2896 <__udivmodhi4_ep>
    2892:	a6 1b       	sub	r26, r22
    2894:	b7 0b       	sbc	r27, r23

00002896 <__udivmodhi4_ep>:
    2896:	88 1f       	adc	r24, r24
    2898:	99 1f       	adc	r25, r25
    289a:	5a 95       	dec	r21
    289c:	a9 f7       	brne	.-22     	; 0x2888 <__udivmodhi4_loop>
    289e:	80 95       	com	r24
    28a0:	90 95       	com	r25
    28a2:	bc 01       	movw	r22, r24
    28a4:	cd 01       	movw	r24, r26
    28a6:	08 95       	ret

000028a8 <__udivmodsi4>:
    28a8:	a1 e2       	ldi	r26, 0x21	; 33
    28aa:	1a 2e       	mov	r1, r26
    28ac:	aa 1b       	sub	r26, r26
    28ae:	bb 1b       	sub	r27, r27
    28b0:	fd 01       	movw	r30, r26
    28b2:	0d c0       	rjmp	.+26     	; 0x28ce <__udivmodsi4_ep>

000028b4 <__udivmodsi4_loop>:
    28b4:	aa 1f       	adc	r26, r26
    28b6:	bb 1f       	adc	r27, r27
    28b8:	ee 1f       	adc	r30, r30
    28ba:	ff 1f       	adc	r31, r31
    28bc:	a2 17       	cp	r26, r18
    28be:	b3 07       	cpc	r27, r19
    28c0:	e4 07       	cpc	r30, r20
    28c2:	f5 07       	cpc	r31, r21
    28c4:	20 f0       	brcs	.+8      	; 0x28ce <__udivmodsi4_ep>
    28c6:	a2 1b       	sub	r26, r18
    28c8:	b3 0b       	sbc	r27, r19
    28ca:	e4 0b       	sbc	r30, r20
    28cc:	f5 0b       	sbc	r31, r21

000028ce <__udivmodsi4_ep>:
    28ce:	66 1f       	adc	r22, r22
    28d0:	77 1f       	adc	r23, r23
    28d2:	88 1f       	adc	r24, r24
    28d4:	99 1f       	adc	r25, r25
    28d6:	1a 94       	dec	r1
    28d8:	69 f7       	brne	.-38     	; 0x28b4 <__udivmodsi4_loop>
    28da:	60 95       	com	r22
    28dc:	70 95       	com	r23
    28de:	80 95       	com	r24
    28e0:	90 95       	com	r25
    28e2:	9b 01       	movw	r18, r22
    28e4:	ac 01       	movw	r20, r24
    28e6:	bd 01       	movw	r22, r26
    28e8:	cf 01       	movw	r24, r30
    28ea:	08 95       	ret

000028ec <_exit>:
    28ec:	f8 94       	cli

000028ee <__stop_program>:
    28ee:	ff cf       	rjmp	.-2      	; 0x28ee <__stop_program>
