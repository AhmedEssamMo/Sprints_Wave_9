
S_UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001144  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000064  00800060  00001144  000011d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006a  008000c4  008000c4  0000123c  2**0
                  ALLOC
  3 .stab         0000189c  00000000  00000000  0000123c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e3b  00000000  00000000  00002ad8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e4       	ldi	r30, 0x44	; 68
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3c       	cpi	r26, 0xC4	; 196
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 ec       	ldi	r26, 0xC4	; 196
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 32       	cpi	r26, 0x2E	; 46
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 97 08 	call	0x112e	; 0x112e <main>
      8a:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_Init>:
Ptr_VoidFuncVoid_t Gptr_uartDataEmptyRegInt;
Ptr_VoidFuncVoid_t Gptr_uartTxInt;

/*APIs IMPLEMENTATION
 -------------------------*/
uint8_t UART_Init(uint8_t UartNumber) {
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	0f 92       	push	r0
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
      9c:	89 83       	std	Y+1, r24	; 0x01
#if RECEIVEING
	Set_Bit(UCSRB, RXEN);
      9e:	aa e2       	ldi	r26, 0x2A	; 42
      a0:	b0 e0       	ldi	r27, 0x00	; 0
      a2:	ea e2       	ldi	r30, 0x2A	; 42
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	80 61       	ori	r24, 0x10	; 16
      aa:	8c 93       	st	X, r24
#else
	Clr_Bit(UCSRB,RXEN);
#endif
#if TRANSMITTING
	Set_Bit(UCSRB, TXEN);
      ac:	aa e2       	ldi	r26, 0x2A	; 42
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	ea e2       	ldi	r30, 0x2A	; 42
      b2:	f0 e0       	ldi	r31, 0x00	; 0
      b4:	80 81       	ld	r24, Z
      b6:	88 60       	ori	r24, 0x08	; 8
      b8:	8c 93       	st	X, r24
	Clr_Bit(UCSRB,TXEN);
#endif
#if SPEED
	Set_Bit(UCSRA,U2X);
#else
	Clr_Bit(UCSRA, U2X);
      ba:	ab e2       	ldi	r26, 0x2B	; 43
      bc:	b0 e0       	ldi	r27, 0x00	; 0
      be:	eb e2       	ldi	r30, 0x2B	; 43
      c0:	f0 e0       	ldi	r31, 0x00	; 0
      c2:	80 81       	ld	r24, Z
      c4:	8d 7f       	andi	r24, 0xFD	; 253
      c6:	8c 93       	st	X, r24
#endif
#if NINE_BIT
	Set_Bit(UCSRB, UCSZ2);
#else
	Clr_Bit(UCSRB, UCSZ2);
      c8:	aa e2       	ldi	r26, 0x2A	; 42
      ca:	b0 e0       	ldi	r27, 0x00	; 0
      cc:	ea e2       	ldi	r30, 0x2A	; 42
      ce:	f0 e0       	ldi	r31, 0x00	; 0
      d0:	80 81       	ld	r24, Z
      d2:	8b 7f       	andi	r24, 0xFB	; 251
      d4:	8c 93       	st	X, r24
#endif
	UCSRC |= ((SYNCHRONIZATION ) & (STOP_BITS ) & (CHARACTER_SIZE )
      d6:	a0 e4       	ldi	r26, 0x40	; 64
      d8:	b0 e0       	ldi	r27, 0x00	; 0
      da:	e0 e4       	ldi	r30, 0x40	; 64
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	80 81       	ld	r24, Z
      e0:	86 68       	ori	r24, 0x86	; 134
      e2:	8c 93       	st	X, r24
			& (PARITY_MODE ) & (CLOCK_POLARITY ));
	UBRRL = BUAD_RATE;
      e4:	e9 e2       	ldi	r30, 0x29	; 41
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	83 e3       	ldi	r24, 0x33	; 51
      ea:	80 83       	st	Z, r24
	return 0;
      ec:	80 e0       	ldi	r24, 0x00	; 0
}
      ee:	0f 90       	pop	r0
      f0:	cf 91       	pop	r28
      f2:	df 91       	pop	r29
      f4:	08 95       	ret

000000f6 <UART_TransmitChar>:
uint8_t UART_TransmitChar(uint8_t UartNumber, uint8_t TxChar) {
      f6:	df 93       	push	r29
      f8:	cf 93       	push	r28
      fa:	00 d0       	rcall	.+0      	; 0xfc <UART_TransmitChar+0x6>
      fc:	cd b7       	in	r28, 0x3d	; 61
      fe:	de b7       	in	r29, 0x3e	; 62
     100:	89 83       	std	Y+1, r24	; 0x01
     102:	6a 83       	std	Y+2, r22	; 0x02
	UDR = TxChar;
     104:	ec e2       	ldi	r30, 0x2C	; 44
     106:	f0 e0       	ldi	r31, 0x00	; 0
     108:	8a 81       	ldd	r24, Y+2	; 0x02
     10a:	80 83       	st	Z, r24
	while ((Get_Bit(UCSRA, UDRE)) != 1) {
     10c:	eb e2       	ldi	r30, 0x2B	; 43
     10e:	f0 e0       	ldi	r31, 0x00	; 0
     110:	80 81       	ld	r24, Z
     112:	82 95       	swap	r24
     114:	86 95       	lsr	r24
     116:	87 70       	andi	r24, 0x07	; 7
     118:	88 2f       	mov	r24, r24
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	81 70       	andi	r24, 0x01	; 1
     11e:	90 70       	andi	r25, 0x00	; 0
     120:	00 97       	sbiw	r24, 0x00	; 0
     122:	a1 f3       	breq	.-24     	; 0x10c <UART_TransmitChar+0x16>
	}
	return 0;
     124:	80 e0       	ldi	r24, 0x00	; 0
}
     126:	0f 90       	pop	r0
     128:	0f 90       	pop	r0
     12a:	cf 91       	pop	r28
     12c:	df 91       	pop	r29
     12e:	08 95       	ret

00000130 <UART_TransmitString>:
uint8_t UART_TransmitString(uint8_t UartNumber, ptr_uint8_t TxString) {
     130:	df 93       	push	r29
     132:	cf 93       	push	r28
     134:	00 d0       	rcall	.+0      	; 0x136 <UART_TransmitString+0x6>
     136:	00 d0       	rcall	.+0      	; 0x138 <UART_TransmitString+0x8>
     138:	cd b7       	in	r28, 0x3d	; 61
     13a:	de b7       	in	r29, 0x3e	; 62
     13c:	8a 83       	std	Y+2, r24	; 0x02
     13e:	7c 83       	std	Y+4, r23	; 0x04
     140:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t counter = 0;
     142:	19 82       	std	Y+1, r1	; 0x01
     144:	1b c0       	rjmp	.+54     	; 0x17c <UART_TransmitString+0x4c>
	while ((*(TxString + counter)) != NULL_TERMINATOR) {
		UDR = *(TxString + counter);//TxString[counter]
     146:	ac e2       	ldi	r26, 0x2C	; 44
     148:	b0 e0       	ldi	r27, 0x00	; 0
     14a:	89 81       	ldd	r24, Y+1	; 0x01
     14c:	28 2f       	mov	r18, r24
     14e:	30 e0       	ldi	r19, 0x00	; 0
     150:	8b 81       	ldd	r24, Y+3	; 0x03
     152:	9c 81       	ldd	r25, Y+4	; 0x04
     154:	fc 01       	movw	r30, r24
     156:	e2 0f       	add	r30, r18
     158:	f3 1f       	adc	r31, r19
     15a:	80 81       	ld	r24, Z
     15c:	8c 93       	st	X, r24
		while ((Get_Bit(UCSRA, UDRE)) != 1) ;
     15e:	eb e2       	ldi	r30, 0x2B	; 43
     160:	f0 e0       	ldi	r31, 0x00	; 0
     162:	80 81       	ld	r24, Z
     164:	82 95       	swap	r24
     166:	86 95       	lsr	r24
     168:	87 70       	andi	r24, 0x07	; 7
     16a:	88 2f       	mov	r24, r24
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	81 70       	andi	r24, 0x01	; 1
     170:	90 70       	andi	r25, 0x00	; 0
     172:	00 97       	sbiw	r24, 0x00	; 0
     174:	a1 f3       	breq	.-24     	; 0x15e <UART_TransmitString+0x2e>
		counter++;
     176:	89 81       	ldd	r24, Y+1	; 0x01
     178:	8f 5f       	subi	r24, 0xFF	; 255
     17a:	89 83       	std	Y+1, r24	; 0x01
	}
	return 0;
}
uint8_t UART_TransmitString(uint8_t UartNumber, ptr_uint8_t TxString) {
	uint8_t counter = 0;
	while ((*(TxString + counter)) != NULL_TERMINATOR) {
     17c:	89 81       	ldd	r24, Y+1	; 0x01
     17e:	28 2f       	mov	r18, r24
     180:	30 e0       	ldi	r19, 0x00	; 0
     182:	8b 81       	ldd	r24, Y+3	; 0x03
     184:	9c 81       	ldd	r25, Y+4	; 0x04
     186:	fc 01       	movw	r30, r24
     188:	e2 0f       	add	r30, r18
     18a:	f3 1f       	adc	r31, r19
     18c:	80 81       	ld	r24, Z
     18e:	88 23       	and	r24, r24
     190:	d1 f6       	brne	.-76     	; 0x146 <UART_TransmitString+0x16>
		UDR = *(TxString + counter);//TxString[counter]
		while ((Get_Bit(UCSRA, UDRE)) != 1) ;
		counter++;

	}
	return 0;
     192:	80 e0       	ldi	r24, 0x00	; 0
}
     194:	0f 90       	pop	r0
     196:	0f 90       	pop	r0
     198:	0f 90       	pop	r0
     19a:	0f 90       	pop	r0
     19c:	cf 91       	pop	r28
     19e:	df 91       	pop	r29
     1a0:	08 95       	ret

000001a2 <UART_ReceiveChar>:
uint8_t UART_ReceiveChar(uint8_t UartNumber, ptr_uint8_t RxChar) {
     1a2:	df 93       	push	r29
     1a4:	cf 93       	push	r28
     1a6:	00 d0       	rcall	.+0      	; 0x1a8 <UART_ReceiveChar+0x6>
     1a8:	0f 92       	push	r0
     1aa:	cd b7       	in	r28, 0x3d	; 61
     1ac:	de b7       	in	r29, 0x3e	; 62
     1ae:	89 83       	std	Y+1, r24	; 0x01
     1b0:	7b 83       	std	Y+3, r23	; 0x03
     1b2:	6a 83       	std	Y+2, r22	; 0x02

	while ( !(UCSRA & (1<<RXC)) );
     1b4:	eb e2       	ldi	r30, 0x2B	; 43
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	80 81       	ld	r24, Z
     1ba:	88 23       	and	r24, r24
     1bc:	dc f7       	brge	.-10     	; 0x1b4 <UART_ReceiveChar+0x12>
	*(RxChar) = (uint8_t)UDR;
     1be:	ec e2       	ldi	r30, 0x2C	; 44
     1c0:	f0 e0       	ldi	r31, 0x00	; 0
     1c2:	80 81       	ld	r24, Z
     1c4:	ea 81       	ldd	r30, Y+2	; 0x02
     1c6:	fb 81       	ldd	r31, Y+3	; 0x03
     1c8:	80 83       	st	Z, r24
	return 0;
     1ca:	80 e0       	ldi	r24, 0x00	; 0
}
     1cc:	0f 90       	pop	r0
     1ce:	0f 90       	pop	r0
     1d0:	0f 90       	pop	r0
     1d2:	cf 91       	pop	r28
     1d4:	df 91       	pop	r29
     1d6:	08 95       	ret

000001d8 <UART_ReceiveString>:
uint8_t UART_ReceiveString(uint8_t UartNumber, ptr_uint8_t RxString) {
     1d8:	df 93       	push	r29
     1da:	cf 93       	push	r28
     1dc:	00 d0       	rcall	.+0      	; 0x1de <UART_ReceiveString+0x6>
     1de:	00 d0       	rcall	.+0      	; 0x1e0 <UART_ReceiveString+0x8>
     1e0:	cd b7       	in	r28, 0x3d	; 61
     1e2:	de b7       	in	r29, 0x3e	; 62
     1e4:	8a 83       	std	Y+2, r24	; 0x02
     1e6:	7c 83       	std	Y+4, r23	; 0x04
     1e8:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t counter = 0;
     1ea:	19 82       	std	Y+1, r1	; 0x01

	while (1) {
		while ( !(UCSRA & (1<<RXC)) );
     1ec:	eb e2       	ldi	r30, 0x2B	; 43
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	80 81       	ld	r24, Z
     1f2:	88 23       	and	r24, r24
     1f4:	dc f7       	brge	.-10     	; 0x1ec <UART_ReceiveString+0x14>
		RxString[counter] = (uint8_t)UDR;
     1f6:	89 81       	ldd	r24, Y+1	; 0x01
     1f8:	28 2f       	mov	r18, r24
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	8b 81       	ldd	r24, Y+3	; 0x03
     1fe:	9c 81       	ldd	r25, Y+4	; 0x04
     200:	dc 01       	movw	r26, r24
     202:	a2 0f       	add	r26, r18
     204:	b3 1f       	adc	r27, r19
     206:	ec e2       	ldi	r30, 0x2C	; 44
     208:	f0 e0       	ldi	r31, 0x00	; 0
     20a:	80 81       	ld	r24, Z
     20c:	8c 93       	st	X, r24
		UART_TransmitChar(UART_1,RxString[counter]);
     20e:	89 81       	ldd	r24, Y+1	; 0x01
     210:	28 2f       	mov	r18, r24
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	8b 81       	ldd	r24, Y+3	; 0x03
     216:	9c 81       	ldd	r25, Y+4	; 0x04
     218:	fc 01       	movw	r30, r24
     21a:	e2 0f       	add	r30, r18
     21c:	f3 1f       	adc	r31, r19
     21e:	90 81       	ld	r25, Z
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	69 2f       	mov	r22, r25
     224:	0e 94 7b 00 	call	0xf6	; 0xf6 <UART_TransmitChar>
		counter++;
     228:	89 81       	ldd	r24, Y+1	; 0x01
     22a:	8f 5f       	subi	r24, 0xFF	; 255
     22c:	89 83       	std	Y+1, r24	; 0x01
		if((UDR)==(NEW_LINE)){
     22e:	ec e2       	ldi	r30, 0x2C	; 44
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	80 81       	ld	r24, Z
     234:	8d 30       	cpi	r24, 0x0D	; 13
     236:	a1 f4       	brne	.+40     	; 0x260 <UART_ReceiveString+0x88>
			RxString[counter-1]=NULL_TERMINATOR;
     238:	89 81       	ldd	r24, Y+1	; 0x01
     23a:	88 2f       	mov	r24, r24
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	9c 01       	movw	r18, r24
     240:	21 50       	subi	r18, 0x01	; 1
     242:	30 40       	sbci	r19, 0x00	; 0
     244:	8b 81       	ldd	r24, Y+3	; 0x03
     246:	9c 81       	ldd	r25, Y+4	; 0x04
     248:	fc 01       	movw	r30, r24
     24a:	e2 0f       	add	r30, r18
     24c:	f3 1f       	adc	r31, r19
     24e:	10 82       	st	Z, r1



	}
	//*(RxString+counter)='\n';
	return 0;
     250:	80 e0       	ldi	r24, 0x00	; 0
}
     252:	0f 90       	pop	r0
     254:	0f 90       	pop	r0
     256:	0f 90       	pop	r0
     258:	0f 90       	pop	r0
     25a:	cf 91       	pop	r28
     25c:	df 91       	pop	r29
     25e:	08 95       	ret
		counter++;
		if((UDR)==(NEW_LINE)){
			RxString[counter-1]=NULL_TERMINATOR;
			break;
		}
		else if(((UDR)==(BACKSPACE))&&counter>1){
     260:	ec e2       	ldi	r30, 0x2C	; 44
     262:	f0 e0       	ldi	r31, 0x00	; 0
     264:	80 81       	ld	r24, Z
     266:	88 30       	cpi	r24, 0x08	; 8
     268:	39 f4       	brne	.+14     	; 0x278 <UART_ReceiveString+0xa0>
     26a:	89 81       	ldd	r24, Y+1	; 0x01
     26c:	82 30       	cpi	r24, 0x02	; 2
     26e:	20 f0       	brcs	.+8      	; 0x278 <UART_ReceiveString+0xa0>
			counter=counter-2;
     270:	89 81       	ldd	r24, Y+1	; 0x01
     272:	82 50       	subi	r24, 0x02	; 2
     274:	89 83       	std	Y+1, r24	; 0x01
     276:	ba cf       	rjmp	.-140    	; 0x1ec <UART_ReceiveString+0x14>
		}
		else if(((UDR)==(BACKSPACE))&&counter<=1){
     278:	ec e2       	ldi	r30, 0x2C	; 44
     27a:	f0 e0       	ldi	r31, 0x00	; 0
     27c:	80 81       	ld	r24, Z
     27e:	88 30       	cpi	r24, 0x08	; 8
     280:	09 f0       	breq	.+2      	; 0x284 <UART_ReceiveString+0xac>
     282:	b4 cf       	rjmp	.-152    	; 0x1ec <UART_ReceiveString+0x14>
     284:	89 81       	ldd	r24, Y+1	; 0x01
     286:	82 30       	cpi	r24, 0x02	; 2
     288:	08 f0       	brcs	.+2      	; 0x28c <UART_ReceiveString+0xb4>
     28a:	b0 cf       	rjmp	.-160    	; 0x1ec <UART_ReceiveString+0x14>
			counter=0;
     28c:	19 82       	std	Y+1, r1	; 0x01
     28e:	ae cf       	rjmp	.-164    	; 0x1ec <UART_ReceiveString+0x14>

00000290 <UART_EnableInterrupt>:

	}
	//*(RxString+counter)='\n';
	return 0;
}
uint8_t UART_EnableInterrupt(uint8_t UartNumber, uint8_t UartInterruptType) {
     290:	df 93       	push	r29
     292:	cf 93       	push	r28
     294:	00 d0       	rcall	.+0      	; 0x296 <UART_EnableInterrupt+0x6>
     296:	00 d0       	rcall	.+0      	; 0x298 <UART_EnableInterrupt+0x8>
     298:	cd b7       	in	r28, 0x3d	; 61
     29a:	de b7       	in	r29, 0x3e	; 62
     29c:	89 83       	std	Y+1, r24	; 0x01
     29e:	6a 83       	std	Y+2, r22	; 0x02
	switch (UartNumber) {
     2a0:	89 81       	ldd	r24, Y+1	; 0x01
     2a2:	88 2f       	mov	r24, r24
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	00 97       	sbiw	r24, 0x00	; 0
     2a8:	51 f5       	brne	.+84     	; 0x2fe <UART_EnableInterrupt+0x6e>
	case UART_1 :
		switch (UartInterruptType) {
     2aa:	8a 81       	ldd	r24, Y+2	; 0x02
     2ac:	28 2f       	mov	r18, r24
     2ae:	30 e0       	ldi	r19, 0x00	; 0
     2b0:	3c 83       	std	Y+4, r19	; 0x04
     2b2:	2b 83       	std	Y+3, r18	; 0x03
     2b4:	8b 81       	ldd	r24, Y+3	; 0x03
     2b6:	9c 81       	ldd	r25, Y+4	; 0x04
     2b8:	81 30       	cpi	r24, 0x01	; 1
     2ba:	91 05       	cpc	r25, r1
     2bc:	89 f0       	breq	.+34     	; 0x2e0 <UART_EnableInterrupt+0x50>
     2be:	2b 81       	ldd	r18, Y+3	; 0x03
     2c0:	3c 81       	ldd	r19, Y+4	; 0x04
     2c2:	22 30       	cpi	r18, 0x02	; 2
     2c4:	31 05       	cpc	r19, r1
     2c6:	a1 f0       	breq	.+40     	; 0x2f0 <UART_EnableInterrupt+0x60>
     2c8:	8b 81       	ldd	r24, Y+3	; 0x03
     2ca:	9c 81       	ldd	r25, Y+4	; 0x04
     2cc:	00 97       	sbiw	r24, 0x00	; 0
     2ce:	b9 f4       	brne	.+46     	; 0x2fe <UART_EnableInterrupt+0x6e>
		case RECIVE_INT :
			Set_Bit(UCSRB, RXCIE);
     2d0:	aa e2       	ldi	r26, 0x2A	; 42
     2d2:	b0 e0       	ldi	r27, 0x00	; 0
     2d4:	ea e2       	ldi	r30, 0x2A	; 42
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	80 81       	ld	r24, Z
     2da:	80 68       	ori	r24, 0x80	; 128
     2dc:	8c 93       	st	X, r24
     2de:	0f c0       	rjmp	.+30     	; 0x2fe <UART_EnableInterrupt+0x6e>
			break;
		case TRANSMIT_INT :
			Set_Bit(UCSRB, TXCIE);
     2e0:	aa e2       	ldi	r26, 0x2A	; 42
     2e2:	b0 e0       	ldi	r27, 0x00	; 0
     2e4:	ea e2       	ldi	r30, 0x2A	; 42
     2e6:	f0 e0       	ldi	r31, 0x00	; 0
     2e8:	80 81       	ld	r24, Z
     2ea:	80 64       	ori	r24, 0x40	; 64
     2ec:	8c 93       	st	X, r24
     2ee:	07 c0       	rjmp	.+14     	; 0x2fe <UART_EnableInterrupt+0x6e>
			break;
		case EMPTY_BUFFERR_INT :
			Set_Bit(UCSRB, UDRIE);
     2f0:	aa e2       	ldi	r26, 0x2A	; 42
     2f2:	b0 e0       	ldi	r27, 0x00	; 0
     2f4:	ea e2       	ldi	r30, 0x2A	; 42
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	80 81       	ld	r24, Z
     2fa:	80 62       	ori	r24, 0x20	; 32
     2fc:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
	return 0;
     2fe:	80 e0       	ldi	r24, 0x00	; 0
}
     300:	0f 90       	pop	r0
     302:	0f 90       	pop	r0
     304:	0f 90       	pop	r0
     306:	0f 90       	pop	r0
     308:	cf 91       	pop	r28
     30a:	df 91       	pop	r29
     30c:	08 95       	ret

0000030e <UART_DisableInterrupt>:
uint8_t UART_DisableInterrupt(uint8_t UartNumber, uint8_t UartInterruptType) {
     30e:	df 93       	push	r29
     310:	cf 93       	push	r28
     312:	00 d0       	rcall	.+0      	; 0x314 <UART_DisableInterrupt+0x6>
     314:	00 d0       	rcall	.+0      	; 0x316 <UART_DisableInterrupt+0x8>
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62
     31a:	89 83       	std	Y+1, r24	; 0x01
     31c:	6a 83       	std	Y+2, r22	; 0x02
	switch (UartNumber) {
     31e:	89 81       	ldd	r24, Y+1	; 0x01
     320:	88 2f       	mov	r24, r24
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	00 97       	sbiw	r24, 0x00	; 0
     326:	51 f5       	brne	.+84     	; 0x37c <UART_DisableInterrupt+0x6e>
	case UART_1 :
		switch (UartInterruptType) {
     328:	8a 81       	ldd	r24, Y+2	; 0x02
     32a:	28 2f       	mov	r18, r24
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	3c 83       	std	Y+4, r19	; 0x04
     330:	2b 83       	std	Y+3, r18	; 0x03
     332:	8b 81       	ldd	r24, Y+3	; 0x03
     334:	9c 81       	ldd	r25, Y+4	; 0x04
     336:	81 30       	cpi	r24, 0x01	; 1
     338:	91 05       	cpc	r25, r1
     33a:	89 f0       	breq	.+34     	; 0x35e <UART_DisableInterrupt+0x50>
     33c:	2b 81       	ldd	r18, Y+3	; 0x03
     33e:	3c 81       	ldd	r19, Y+4	; 0x04
     340:	22 30       	cpi	r18, 0x02	; 2
     342:	31 05       	cpc	r19, r1
     344:	a1 f0       	breq	.+40     	; 0x36e <UART_DisableInterrupt+0x60>
     346:	8b 81       	ldd	r24, Y+3	; 0x03
     348:	9c 81       	ldd	r25, Y+4	; 0x04
     34a:	00 97       	sbiw	r24, 0x00	; 0
     34c:	b9 f4       	brne	.+46     	; 0x37c <UART_DisableInterrupt+0x6e>
		case RECIVE_INT :
			Clr_Bit(UCSRB, RXCIE);
     34e:	aa e2       	ldi	r26, 0x2A	; 42
     350:	b0 e0       	ldi	r27, 0x00	; 0
     352:	ea e2       	ldi	r30, 0x2A	; 42
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	80 81       	ld	r24, Z
     358:	8f 77       	andi	r24, 0x7F	; 127
     35a:	8c 93       	st	X, r24
     35c:	0f c0       	rjmp	.+30     	; 0x37c <UART_DisableInterrupt+0x6e>
			break;
		case TRANSMIT_INT :
			Clr_Bit(UCSRB, TXCIE);
     35e:	aa e2       	ldi	r26, 0x2A	; 42
     360:	b0 e0       	ldi	r27, 0x00	; 0
     362:	ea e2       	ldi	r30, 0x2A	; 42
     364:	f0 e0       	ldi	r31, 0x00	; 0
     366:	80 81       	ld	r24, Z
     368:	8f 7b       	andi	r24, 0xBF	; 191
     36a:	8c 93       	st	X, r24
     36c:	07 c0       	rjmp	.+14     	; 0x37c <UART_DisableInterrupt+0x6e>
			break;
		case EMPTY_BUFFERR_INT :
			Clr_Bit(UCSRB, UDRIE);
     36e:	aa e2       	ldi	r26, 0x2A	; 42
     370:	b0 e0       	ldi	r27, 0x00	; 0
     372:	ea e2       	ldi	r30, 0x2A	; 42
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	80 81       	ld	r24, Z
     378:	8f 7d       	andi	r24, 0xDF	; 223
     37a:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
	return 0;
     37c:	80 e0       	ldi	r24, 0x00	; 0
}
     37e:	0f 90       	pop	r0
     380:	0f 90       	pop	r0
     382:	0f 90       	pop	r0
     384:	0f 90       	pop	r0
     386:	cf 91       	pop	r28
     388:	df 91       	pop	r29
     38a:	08 95       	ret

0000038c <DIO_setPortDirection>:


/* APIs IMPLEMENTATION */

/* API to Set Port Direction */
DIO_ERROR_state_t DIO_setPortDirection(uint8_t PortID, uint8_t PortDirection) {
     38c:	df 93       	push	r29
     38e:	cf 93       	push	r28
     390:	00 d0       	rcall	.+0      	; 0x392 <DIO_setPortDirection+0x6>
     392:	00 d0       	rcall	.+0      	; 0x394 <DIO_setPortDirection+0x8>
     394:	0f 92       	push	r0
     396:	cd b7       	in	r28, 0x3d	; 61
     398:	de b7       	in	r29, 0x3e	; 62
     39a:	89 83       	std	Y+1, r24	; 0x01
     39c:	6a 83       	std	Y+2, r22	; 0x02
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA )) {
     39e:	89 81       	ldd	r24, Y+1	; 0x01
     3a0:	84 30       	cpi	r24, 0x04	; 4
     3a2:	a0 f5       	brcc	.+104    	; 0x40c <DIO_setPortDirection+0x80>
		switch (PortID) {
     3a4:	89 81       	ldd	r24, Y+1	; 0x01
     3a6:	28 2f       	mov	r18, r24
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	3d 83       	std	Y+5, r19	; 0x05
     3ac:	2c 83       	std	Y+4, r18	; 0x04
     3ae:	8c 81       	ldd	r24, Y+4	; 0x04
     3b0:	9d 81       	ldd	r25, Y+5	; 0x05
     3b2:	81 30       	cpi	r24, 0x01	; 1
     3b4:	91 05       	cpc	r25, r1
     3b6:	d1 f0       	breq	.+52     	; 0x3ec <DIO_setPortDirection+0x60>
     3b8:	2c 81       	ldd	r18, Y+4	; 0x04
     3ba:	3d 81       	ldd	r19, Y+5	; 0x05
     3bc:	22 30       	cpi	r18, 0x02	; 2
     3be:	31 05       	cpc	r19, r1
     3c0:	2c f4       	brge	.+10     	; 0x3cc <DIO_setPortDirection+0x40>
     3c2:	8c 81       	ldd	r24, Y+4	; 0x04
     3c4:	9d 81       	ldd	r25, Y+5	; 0x05
     3c6:	00 97       	sbiw	r24, 0x00	; 0
     3c8:	61 f0       	breq	.+24     	; 0x3e2 <DIO_setPortDirection+0x56>
     3ca:	1e c0       	rjmp	.+60     	; 0x408 <DIO_setPortDirection+0x7c>
     3cc:	2c 81       	ldd	r18, Y+4	; 0x04
     3ce:	3d 81       	ldd	r19, Y+5	; 0x05
     3d0:	22 30       	cpi	r18, 0x02	; 2
     3d2:	31 05       	cpc	r19, r1
     3d4:	81 f0       	breq	.+32     	; 0x3f6 <DIO_setPortDirection+0x6a>
     3d6:	8c 81       	ldd	r24, Y+4	; 0x04
     3d8:	9d 81       	ldd	r25, Y+5	; 0x05
     3da:	83 30       	cpi	r24, 0x03	; 3
     3dc:	91 05       	cpc	r25, r1
     3de:	81 f0       	breq	.+32     	; 0x400 <DIO_setPortDirection+0x74>
     3e0:	13 c0       	rjmp	.+38     	; 0x408 <DIO_setPortDirection+0x7c>
		case PORTA :
			PORTA_DIR = PortDirection;
     3e2:	ea e3       	ldi	r30, 0x3A	; 58
     3e4:	f0 e0       	ldi	r31, 0x00	; 0
     3e6:	8a 81       	ldd	r24, Y+2	; 0x02
     3e8:	80 83       	st	Z, r24
     3ea:	0e c0       	rjmp	.+28     	; 0x408 <DIO_setPortDirection+0x7c>
			break;
		case PORTB :
			PORTB_DIR = PortDirection;
     3ec:	e7 e3       	ldi	r30, 0x37	; 55
     3ee:	f0 e0       	ldi	r31, 0x00	; 0
     3f0:	8a 81       	ldd	r24, Y+2	; 0x02
     3f2:	80 83       	st	Z, r24
     3f4:	09 c0       	rjmp	.+18     	; 0x408 <DIO_setPortDirection+0x7c>
			break;
		case PORTC :
			PORTC_DIR = PortDirection;
     3f6:	e4 e3       	ldi	r30, 0x34	; 52
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	8a 81       	ldd	r24, Y+2	; 0x02
     3fc:	80 83       	st	Z, r24
     3fe:	04 c0       	rjmp	.+8      	; 0x408 <DIO_setPortDirection+0x7c>
			break;
		case PORTD :
			PORTD_DIR = PortDirection;
     400:	e1 e3       	ldi	r30, 0x31	; 49
     402:	f0 e0       	ldi	r31, 0x00	; 0
     404:	8a 81       	ldd	r24, Y+2	; 0x02
     406:	80 83       	st	Z, r24
			break;

		} //END of SWITCH
		return E_DIO_SUCCESS ;
     408:	1b 82       	std	Y+3, r1	; 0x03
     40a:	02 c0       	rjmp	.+4      	; 0x410 <DIO_setPortDirection+0x84>
	}	  //END of IF
	else {
		return E_DIO_INVALID_PORT_NUMBER ;
     40c:	91 e0       	ldi	r25, 0x01	; 1
     40e:	9b 83       	std	Y+3, r25	; 0x03
     410:	8b 81       	ldd	r24, Y+3	; 0x03

	}	  //END of ELSE
}	  //END DIO_setPortDirection
     412:	0f 90       	pop	r0
     414:	0f 90       	pop	r0
     416:	0f 90       	pop	r0
     418:	0f 90       	pop	r0
     41a:	0f 90       	pop	r0
     41c:	cf 91       	pop	r28
     41e:	df 91       	pop	r29
     420:	08 95       	ret

00000422 <DIO_SetPinDirection>:

/* API to Set Pin Direction */
DIO_ERROR_state_t DIO_SetPinDirection(uint8_t PortID, uint8_t PinNumber,
		uint8_t PinDirection) {
     422:	df 93       	push	r29
     424:	cf 93       	push	r28
     426:	cd b7       	in	r28, 0x3d	; 61
     428:	de b7       	in	r29, 0x3e	; 62
     42a:	28 97       	sbiw	r28, 0x08	; 8
     42c:	0f b6       	in	r0, 0x3f	; 63
     42e:	f8 94       	cli
     430:	de bf       	out	0x3e, r29	; 62
     432:	0f be       	out	0x3f, r0	; 63
     434:	cd bf       	out	0x3d, r28	; 61
     436:	89 83       	std	Y+1, r24	; 0x01
     438:	6a 83       	std	Y+2, r22	; 0x02
     43a:	4b 83       	std	Y+3, r20	; 0x03
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA ) && (PinNumber >= PIN0 )
     43c:	89 81       	ldd	r24, Y+1	; 0x01
     43e:	84 30       	cpi	r24, 0x04	; 4
     440:	08 f0       	brcs	.+2      	; 0x444 <DIO_SetPinDirection+0x22>
     442:	f4 c0       	rjmp	.+488    	; 0x62c <DIO_SetPinDirection+0x20a>
     444:	8a 81       	ldd	r24, Y+2	; 0x02
     446:	88 30       	cpi	r24, 0x08	; 8
     448:	08 f0       	brcs	.+2      	; 0x44c <DIO_SetPinDirection+0x2a>
     44a:	f0 c0       	rjmp	.+480    	; 0x62c <DIO_SetPinDirection+0x20a>
			&& (PinNumber <= PIN7 )) {
		if (PinDirection == PIN_OUTPUT) {
     44c:	8b 81       	ldd	r24, Y+3	; 0x03
     44e:	81 30       	cpi	r24, 0x01	; 1
     450:	09 f0       	breq	.+2      	; 0x454 <DIO_SetPinDirection+0x32>
     452:	70 c0       	rjmp	.+224    	; 0x534 <DIO_SetPinDirection+0x112>
			switch (PortID) {
     454:	89 81       	ldd	r24, Y+1	; 0x01
     456:	28 2f       	mov	r18, r24
     458:	30 e0       	ldi	r19, 0x00	; 0
     45a:	38 87       	std	Y+8, r19	; 0x08
     45c:	2f 83       	std	Y+7, r18	; 0x07
     45e:	8f 81       	ldd	r24, Y+7	; 0x07
     460:	98 85       	ldd	r25, Y+8	; 0x08
     462:	81 30       	cpi	r24, 0x01	; 1
     464:	91 05       	cpc	r25, r1
     466:	49 f1       	breq	.+82     	; 0x4ba <DIO_SetPinDirection+0x98>
     468:	2f 81       	ldd	r18, Y+7	; 0x07
     46a:	38 85       	ldd	r19, Y+8	; 0x08
     46c:	22 30       	cpi	r18, 0x02	; 2
     46e:	31 05       	cpc	r19, r1
     470:	2c f4       	brge	.+10     	; 0x47c <DIO_SetPinDirection+0x5a>
     472:	8f 81       	ldd	r24, Y+7	; 0x07
     474:	98 85       	ldd	r25, Y+8	; 0x08
     476:	00 97       	sbiw	r24, 0x00	; 0
     478:	61 f0       	breq	.+24     	; 0x492 <DIO_SetPinDirection+0x70>
     47a:	5a c0       	rjmp	.+180    	; 0x530 <DIO_SetPinDirection+0x10e>
     47c:	2f 81       	ldd	r18, Y+7	; 0x07
     47e:	38 85       	ldd	r19, Y+8	; 0x08
     480:	22 30       	cpi	r18, 0x02	; 2
     482:	31 05       	cpc	r19, r1
     484:	71 f1       	breq	.+92     	; 0x4e2 <DIO_SetPinDirection+0xc0>
     486:	8f 81       	ldd	r24, Y+7	; 0x07
     488:	98 85       	ldd	r25, Y+8	; 0x08
     48a:	83 30       	cpi	r24, 0x03	; 3
     48c:	91 05       	cpc	r25, r1
     48e:	e9 f1       	breq	.+122    	; 0x50a <DIO_SetPinDirection+0xe8>
     490:	4f c0       	rjmp	.+158    	; 0x530 <DIO_SetPinDirection+0x10e>
			case PORTA :
				Set_Bit(PORTA_DIR, PinNumber);
     492:	aa e3       	ldi	r26, 0x3A	; 58
     494:	b0 e0       	ldi	r27, 0x00	; 0
     496:	ea e3       	ldi	r30, 0x3A	; 58
     498:	f0 e0       	ldi	r31, 0x00	; 0
     49a:	80 81       	ld	r24, Z
     49c:	48 2f       	mov	r20, r24
     49e:	8a 81       	ldd	r24, Y+2	; 0x02
     4a0:	28 2f       	mov	r18, r24
     4a2:	30 e0       	ldi	r19, 0x00	; 0
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	02 2e       	mov	r0, r18
     4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <DIO_SetPinDirection+0x8e>
     4ac:	88 0f       	add	r24, r24
     4ae:	99 1f       	adc	r25, r25
     4b0:	0a 94       	dec	r0
     4b2:	e2 f7       	brpl	.-8      	; 0x4ac <DIO_SetPinDirection+0x8a>
     4b4:	84 2b       	or	r24, r20
     4b6:	8c 93       	st	X, r24
     4b8:	3b c0       	rjmp	.+118    	; 0x530 <DIO_SetPinDirection+0x10e>
				break;
			case PORTB :
				Set_Bit(PORTB_DIR, PinNumber);
     4ba:	a7 e3       	ldi	r26, 0x37	; 55
     4bc:	b0 e0       	ldi	r27, 0x00	; 0
     4be:	e7 e3       	ldi	r30, 0x37	; 55
     4c0:	f0 e0       	ldi	r31, 0x00	; 0
     4c2:	80 81       	ld	r24, Z
     4c4:	48 2f       	mov	r20, r24
     4c6:	8a 81       	ldd	r24, Y+2	; 0x02
     4c8:	28 2f       	mov	r18, r24
     4ca:	30 e0       	ldi	r19, 0x00	; 0
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	02 2e       	mov	r0, r18
     4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <DIO_SetPinDirection+0xb6>
     4d4:	88 0f       	add	r24, r24
     4d6:	99 1f       	adc	r25, r25
     4d8:	0a 94       	dec	r0
     4da:	e2 f7       	brpl	.-8      	; 0x4d4 <DIO_SetPinDirection+0xb2>
     4dc:	84 2b       	or	r24, r20
     4de:	8c 93       	st	X, r24
     4e0:	27 c0       	rjmp	.+78     	; 0x530 <DIO_SetPinDirection+0x10e>
				break;
			case PORTC :
				Set_Bit(PORTC_DIR, PinNumber);
     4e2:	a4 e3       	ldi	r26, 0x34	; 52
     4e4:	b0 e0       	ldi	r27, 0x00	; 0
     4e6:	e4 e3       	ldi	r30, 0x34	; 52
     4e8:	f0 e0       	ldi	r31, 0x00	; 0
     4ea:	80 81       	ld	r24, Z
     4ec:	48 2f       	mov	r20, r24
     4ee:	8a 81       	ldd	r24, Y+2	; 0x02
     4f0:	28 2f       	mov	r18, r24
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	02 2e       	mov	r0, r18
     4fa:	02 c0       	rjmp	.+4      	; 0x500 <DIO_SetPinDirection+0xde>
     4fc:	88 0f       	add	r24, r24
     4fe:	99 1f       	adc	r25, r25
     500:	0a 94       	dec	r0
     502:	e2 f7       	brpl	.-8      	; 0x4fc <DIO_SetPinDirection+0xda>
     504:	84 2b       	or	r24, r20
     506:	8c 93       	st	X, r24
     508:	13 c0       	rjmp	.+38     	; 0x530 <DIO_SetPinDirection+0x10e>
				break;
			case PORTD :
				Set_Bit(PORTD_DIR, PinNumber);
     50a:	a1 e3       	ldi	r26, 0x31	; 49
     50c:	b0 e0       	ldi	r27, 0x00	; 0
     50e:	e1 e3       	ldi	r30, 0x31	; 49
     510:	f0 e0       	ldi	r31, 0x00	; 0
     512:	80 81       	ld	r24, Z
     514:	48 2f       	mov	r20, r24
     516:	8a 81       	ldd	r24, Y+2	; 0x02
     518:	28 2f       	mov	r18, r24
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	02 2e       	mov	r0, r18
     522:	02 c0       	rjmp	.+4      	; 0x528 <DIO_SetPinDirection+0x106>
     524:	88 0f       	add	r24, r24
     526:	99 1f       	adc	r25, r25
     528:	0a 94       	dec	r0
     52a:	e2 f7       	brpl	.-8      	; 0x524 <DIO_SetPinDirection+0x102>
     52c:	84 2b       	or	r24, r20
     52e:	8c 93       	st	X, r24
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
     530:	1e 82       	std	Y+6, r1	; 0x06
     532:	7e c0       	rjmp	.+252    	; 0x630 <DIO_SetPinDirection+0x20e>
		} // END of IF that check for the direction if it is INPUT
		else if (PinDirection == PIN_INPUT) {
     534:	8b 81       	ldd	r24, Y+3	; 0x03
     536:	88 23       	and	r24, r24
     538:	09 f0       	breq	.+2      	; 0x53c <DIO_SetPinDirection+0x11a>
     53a:	75 c0       	rjmp	.+234    	; 0x626 <DIO_SetPinDirection+0x204>
			switch (PortID) {
     53c:	89 81       	ldd	r24, Y+1	; 0x01
     53e:	28 2f       	mov	r18, r24
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	3d 83       	std	Y+5, r19	; 0x05
     544:	2c 83       	std	Y+4, r18	; 0x04
     546:	8c 81       	ldd	r24, Y+4	; 0x04
     548:	9d 81       	ldd	r25, Y+5	; 0x05
     54a:	81 30       	cpi	r24, 0x01	; 1
     54c:	91 05       	cpc	r25, r1
     54e:	59 f1       	breq	.+86     	; 0x5a6 <DIO_SetPinDirection+0x184>
     550:	2c 81       	ldd	r18, Y+4	; 0x04
     552:	3d 81       	ldd	r19, Y+5	; 0x05
     554:	22 30       	cpi	r18, 0x02	; 2
     556:	31 05       	cpc	r19, r1
     558:	2c f4       	brge	.+10     	; 0x564 <DIO_SetPinDirection+0x142>
     55a:	8c 81       	ldd	r24, Y+4	; 0x04
     55c:	9d 81       	ldd	r25, Y+5	; 0x05
     55e:	00 97       	sbiw	r24, 0x00	; 0
     560:	69 f0       	breq	.+26     	; 0x57c <DIO_SetPinDirection+0x15a>
     562:	5f c0       	rjmp	.+190    	; 0x622 <DIO_SetPinDirection+0x200>
     564:	2c 81       	ldd	r18, Y+4	; 0x04
     566:	3d 81       	ldd	r19, Y+5	; 0x05
     568:	22 30       	cpi	r18, 0x02	; 2
     56a:	31 05       	cpc	r19, r1
     56c:	89 f1       	breq	.+98     	; 0x5d0 <DIO_SetPinDirection+0x1ae>
     56e:	8c 81       	ldd	r24, Y+4	; 0x04
     570:	9d 81       	ldd	r25, Y+5	; 0x05
     572:	83 30       	cpi	r24, 0x03	; 3
     574:	91 05       	cpc	r25, r1
     576:	09 f4       	brne	.+2      	; 0x57a <DIO_SetPinDirection+0x158>
     578:	40 c0       	rjmp	.+128    	; 0x5fa <DIO_SetPinDirection+0x1d8>
     57a:	53 c0       	rjmp	.+166    	; 0x622 <DIO_SetPinDirection+0x200>
			case PORTA :
				Clr_Bit(PORTA_DIR, PinNumber);
     57c:	aa e3       	ldi	r26, 0x3A	; 58
     57e:	b0 e0       	ldi	r27, 0x00	; 0
     580:	ea e3       	ldi	r30, 0x3A	; 58
     582:	f0 e0       	ldi	r31, 0x00	; 0
     584:	80 81       	ld	r24, Z
     586:	48 2f       	mov	r20, r24
     588:	8a 81       	ldd	r24, Y+2	; 0x02
     58a:	28 2f       	mov	r18, r24
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	02 2e       	mov	r0, r18
     594:	02 c0       	rjmp	.+4      	; 0x59a <DIO_SetPinDirection+0x178>
     596:	88 0f       	add	r24, r24
     598:	99 1f       	adc	r25, r25
     59a:	0a 94       	dec	r0
     59c:	e2 f7       	brpl	.-8      	; 0x596 <DIO_SetPinDirection+0x174>
     59e:	80 95       	com	r24
     5a0:	84 23       	and	r24, r20
     5a2:	8c 93       	st	X, r24
     5a4:	3e c0       	rjmp	.+124    	; 0x622 <DIO_SetPinDirection+0x200>
				break;
			case PORTB :
				Clr_Bit(PORTB_DIR, PinNumber);
     5a6:	a7 e3       	ldi	r26, 0x37	; 55
     5a8:	b0 e0       	ldi	r27, 0x00	; 0
     5aa:	e7 e3       	ldi	r30, 0x37	; 55
     5ac:	f0 e0       	ldi	r31, 0x00	; 0
     5ae:	80 81       	ld	r24, Z
     5b0:	48 2f       	mov	r20, r24
     5b2:	8a 81       	ldd	r24, Y+2	; 0x02
     5b4:	28 2f       	mov	r18, r24
     5b6:	30 e0       	ldi	r19, 0x00	; 0
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	02 2e       	mov	r0, r18
     5be:	02 c0       	rjmp	.+4      	; 0x5c4 <DIO_SetPinDirection+0x1a2>
     5c0:	88 0f       	add	r24, r24
     5c2:	99 1f       	adc	r25, r25
     5c4:	0a 94       	dec	r0
     5c6:	e2 f7       	brpl	.-8      	; 0x5c0 <DIO_SetPinDirection+0x19e>
     5c8:	80 95       	com	r24
     5ca:	84 23       	and	r24, r20
     5cc:	8c 93       	st	X, r24
     5ce:	29 c0       	rjmp	.+82     	; 0x622 <DIO_SetPinDirection+0x200>
				break;
			case PORTC :
				Clr_Bit(PORTC_DIR, PinNumber);
     5d0:	a4 e3       	ldi	r26, 0x34	; 52
     5d2:	b0 e0       	ldi	r27, 0x00	; 0
     5d4:	e4 e3       	ldi	r30, 0x34	; 52
     5d6:	f0 e0       	ldi	r31, 0x00	; 0
     5d8:	80 81       	ld	r24, Z
     5da:	48 2f       	mov	r20, r24
     5dc:	8a 81       	ldd	r24, Y+2	; 0x02
     5de:	28 2f       	mov	r18, r24
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	02 2e       	mov	r0, r18
     5e8:	02 c0       	rjmp	.+4      	; 0x5ee <DIO_SetPinDirection+0x1cc>
     5ea:	88 0f       	add	r24, r24
     5ec:	99 1f       	adc	r25, r25
     5ee:	0a 94       	dec	r0
     5f0:	e2 f7       	brpl	.-8      	; 0x5ea <DIO_SetPinDirection+0x1c8>
     5f2:	80 95       	com	r24
     5f4:	84 23       	and	r24, r20
     5f6:	8c 93       	st	X, r24
     5f8:	14 c0       	rjmp	.+40     	; 0x622 <DIO_SetPinDirection+0x200>
				break;
			case PORTD :
				Clr_Bit(PORTD_DIR, PinNumber);
     5fa:	a1 e3       	ldi	r26, 0x31	; 49
     5fc:	b0 e0       	ldi	r27, 0x00	; 0
     5fe:	e1 e3       	ldi	r30, 0x31	; 49
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	80 81       	ld	r24, Z
     604:	48 2f       	mov	r20, r24
     606:	8a 81       	ldd	r24, Y+2	; 0x02
     608:	28 2f       	mov	r18, r24
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	02 2e       	mov	r0, r18
     612:	02 c0       	rjmp	.+4      	; 0x618 <DIO_SetPinDirection+0x1f6>
     614:	88 0f       	add	r24, r24
     616:	99 1f       	adc	r25, r25
     618:	0a 94       	dec	r0
     61a:	e2 f7       	brpl	.-8      	; 0x614 <DIO_SetPinDirection+0x1f2>
     61c:	80 95       	com	r24
     61e:	84 23       	and	r24, r20
     620:	8c 93       	st	X, r24
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
     622:	1e 82       	std	Y+6, r1	; 0x06
     624:	05 c0       	rjmp	.+10     	; 0x630 <DIO_SetPinDirection+0x20e>
		} // END of ELSE IF that check for the direction if it is INPUT
		else {
			return E_DIO_INVALID_PIN_DIRECTION ;
     626:	92 e0       	ldi	r25, 0x02	; 2
     628:	9e 83       	std	Y+6, r25	; 0x06
     62a:	02 c0       	rjmp	.+4      	; 0x630 <DIO_SetPinDirection+0x20e>
		} //END OF ELSE

	}	  //END of IF That checking the port and pin number

	else {
		return E_DIO_INVALID_PORT_NUMBER ;
     62c:	21 e0       	ldi	r18, 0x01	; 1
     62e:	2e 83       	std	Y+6, r18	; 0x06
     630:	8e 81       	ldd	r24, Y+6	; 0x06

	}	  //END of ELSE
}	  //END DIO_setPinDirection
     632:	28 96       	adiw	r28, 0x08	; 8
     634:	0f b6       	in	r0, 0x3f	; 63
     636:	f8 94       	cli
     638:	de bf       	out	0x3e, r29	; 62
     63a:	0f be       	out	0x3f, r0	; 63
     63c:	cd bf       	out	0x3d, r28	; 61
     63e:	cf 91       	pop	r28
     640:	df 91       	pop	r29
     642:	08 95       	ret

00000644 <DIO_writePort>:

/* API to Write Port  Value */
DIO_ERROR_state_t DIO_writePort(uint8_t PortID, uint8_t PortValue) {
     644:	df 93       	push	r29
     646:	cf 93       	push	r28
     648:	00 d0       	rcall	.+0      	; 0x64a <DIO_writePort+0x6>
     64a:	00 d0       	rcall	.+0      	; 0x64c <DIO_writePort+0x8>
     64c:	0f 92       	push	r0
     64e:	cd b7       	in	r28, 0x3d	; 61
     650:	de b7       	in	r29, 0x3e	; 62
     652:	89 83       	std	Y+1, r24	; 0x01
     654:	6a 83       	std	Y+2, r22	; 0x02
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA )) {
     656:	89 81       	ldd	r24, Y+1	; 0x01
     658:	84 30       	cpi	r24, 0x04	; 4
     65a:	a0 f5       	brcc	.+104    	; 0x6c4 <DIO_writePort+0x80>
		switch (PortID) {
     65c:	89 81       	ldd	r24, Y+1	; 0x01
     65e:	28 2f       	mov	r18, r24
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	3d 83       	std	Y+5, r19	; 0x05
     664:	2c 83       	std	Y+4, r18	; 0x04
     666:	8c 81       	ldd	r24, Y+4	; 0x04
     668:	9d 81       	ldd	r25, Y+5	; 0x05
     66a:	81 30       	cpi	r24, 0x01	; 1
     66c:	91 05       	cpc	r25, r1
     66e:	d1 f0       	breq	.+52     	; 0x6a4 <DIO_writePort+0x60>
     670:	2c 81       	ldd	r18, Y+4	; 0x04
     672:	3d 81       	ldd	r19, Y+5	; 0x05
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	31 05       	cpc	r19, r1
     678:	2c f4       	brge	.+10     	; 0x684 <DIO_writePort+0x40>
     67a:	8c 81       	ldd	r24, Y+4	; 0x04
     67c:	9d 81       	ldd	r25, Y+5	; 0x05
     67e:	00 97       	sbiw	r24, 0x00	; 0
     680:	61 f0       	breq	.+24     	; 0x69a <DIO_writePort+0x56>
     682:	1e c0       	rjmp	.+60     	; 0x6c0 <DIO_writePort+0x7c>
     684:	2c 81       	ldd	r18, Y+4	; 0x04
     686:	3d 81       	ldd	r19, Y+5	; 0x05
     688:	22 30       	cpi	r18, 0x02	; 2
     68a:	31 05       	cpc	r19, r1
     68c:	81 f0       	breq	.+32     	; 0x6ae <DIO_writePort+0x6a>
     68e:	8c 81       	ldd	r24, Y+4	; 0x04
     690:	9d 81       	ldd	r25, Y+5	; 0x05
     692:	83 30       	cpi	r24, 0x03	; 3
     694:	91 05       	cpc	r25, r1
     696:	81 f0       	breq	.+32     	; 0x6b8 <DIO_writePort+0x74>
     698:	13 c0       	rjmp	.+38     	; 0x6c0 <DIO_writePort+0x7c>
		case PORTA :
			PORTA_DATA = PortValue;
     69a:	eb e3       	ldi	r30, 0x3B	; 59
     69c:	f0 e0       	ldi	r31, 0x00	; 0
     69e:	8a 81       	ldd	r24, Y+2	; 0x02
     6a0:	80 83       	st	Z, r24
     6a2:	0e c0       	rjmp	.+28     	; 0x6c0 <DIO_writePort+0x7c>
			break;
		case PORTB :
			PORTB_DATA = PortValue;
     6a4:	e8 e3       	ldi	r30, 0x38	; 56
     6a6:	f0 e0       	ldi	r31, 0x00	; 0
     6a8:	8a 81       	ldd	r24, Y+2	; 0x02
     6aa:	80 83       	st	Z, r24
     6ac:	09 c0       	rjmp	.+18     	; 0x6c0 <DIO_writePort+0x7c>
			break;
		case PORTC :
			PORTC_DATA = PortValue;
     6ae:	e5 e3       	ldi	r30, 0x35	; 53
     6b0:	f0 e0       	ldi	r31, 0x00	; 0
     6b2:	8a 81       	ldd	r24, Y+2	; 0x02
     6b4:	80 83       	st	Z, r24
     6b6:	04 c0       	rjmp	.+8      	; 0x6c0 <DIO_writePort+0x7c>
			break;
		case PORTD :
			PORTD_DATA = PortValue;
     6b8:	e2 e3       	ldi	r30, 0x32	; 50
     6ba:	f0 e0       	ldi	r31, 0x00	; 0
     6bc:	8a 81       	ldd	r24, Y+2	; 0x02
     6be:	80 83       	st	Z, r24
			break;

		} //END of SWITCH
		return E_DIO_SUCCESS ;
     6c0:	1b 82       	std	Y+3, r1	; 0x03
     6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <DIO_writePort+0x84>
	}	  //END of IF
	else {
		return E_DIO_INVALID_PORT_NUMBER ;
     6c4:	91 e0       	ldi	r25, 0x01	; 1
     6c6:	9b 83       	std	Y+3, r25	; 0x03
     6c8:	8b 81       	ldd	r24, Y+3	; 0x03

	}	  //END of ELSE
}	  //END DIO_writePortValue
     6ca:	0f 90       	pop	r0
     6cc:	0f 90       	pop	r0
     6ce:	0f 90       	pop	r0
     6d0:	0f 90       	pop	r0
     6d2:	0f 90       	pop	r0
     6d4:	cf 91       	pop	r28
     6d6:	df 91       	pop	r29
     6d8:	08 95       	ret

000006da <DIO_WritePin>:

/* API to Write Pin  Value */
DIO_ERROR_state_t DIO_WritePin(uint8_t PortID, uint8_t PinNumber,
		uint8_t PinDirection) {
     6da:	df 93       	push	r29
     6dc:	cf 93       	push	r28
     6de:	cd b7       	in	r28, 0x3d	; 61
     6e0:	de b7       	in	r29, 0x3e	; 62
     6e2:	28 97       	sbiw	r28, 0x08	; 8
     6e4:	0f b6       	in	r0, 0x3f	; 63
     6e6:	f8 94       	cli
     6e8:	de bf       	out	0x3e, r29	; 62
     6ea:	0f be       	out	0x3f, r0	; 63
     6ec:	cd bf       	out	0x3d, r28	; 61
     6ee:	89 83       	std	Y+1, r24	; 0x01
     6f0:	6a 83       	std	Y+2, r22	; 0x02
     6f2:	4b 83       	std	Y+3, r20	; 0x03
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA ) && (PinNumber >= PIN0 )
     6f4:	89 81       	ldd	r24, Y+1	; 0x01
     6f6:	84 30       	cpi	r24, 0x04	; 4
     6f8:	08 f0       	brcs	.+2      	; 0x6fc <DIO_WritePin+0x22>
     6fa:	f4 c0       	rjmp	.+488    	; 0x8e4 <__stack+0x85>
     6fc:	8a 81       	ldd	r24, Y+2	; 0x02
     6fe:	88 30       	cpi	r24, 0x08	; 8
     700:	08 f0       	brcs	.+2      	; 0x704 <DIO_WritePin+0x2a>
     702:	f0 c0       	rjmp	.+480    	; 0x8e4 <__stack+0x85>
			&& (PinNumber <= PIN7 )) {
		if (PinDirection == PIN_HIGH) {
     704:	8b 81       	ldd	r24, Y+3	; 0x03
     706:	81 30       	cpi	r24, 0x01	; 1
     708:	09 f0       	breq	.+2      	; 0x70c <DIO_WritePin+0x32>
     70a:	70 c0       	rjmp	.+224    	; 0x7ec <DIO_WritePin+0x112>
			switch (PortID) {
     70c:	89 81       	ldd	r24, Y+1	; 0x01
     70e:	28 2f       	mov	r18, r24
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	38 87       	std	Y+8, r19	; 0x08
     714:	2f 83       	std	Y+7, r18	; 0x07
     716:	8f 81       	ldd	r24, Y+7	; 0x07
     718:	98 85       	ldd	r25, Y+8	; 0x08
     71a:	81 30       	cpi	r24, 0x01	; 1
     71c:	91 05       	cpc	r25, r1
     71e:	49 f1       	breq	.+82     	; 0x772 <DIO_WritePin+0x98>
     720:	2f 81       	ldd	r18, Y+7	; 0x07
     722:	38 85       	ldd	r19, Y+8	; 0x08
     724:	22 30       	cpi	r18, 0x02	; 2
     726:	31 05       	cpc	r19, r1
     728:	2c f4       	brge	.+10     	; 0x734 <DIO_WritePin+0x5a>
     72a:	8f 81       	ldd	r24, Y+7	; 0x07
     72c:	98 85       	ldd	r25, Y+8	; 0x08
     72e:	00 97       	sbiw	r24, 0x00	; 0
     730:	61 f0       	breq	.+24     	; 0x74a <DIO_WritePin+0x70>
     732:	5a c0       	rjmp	.+180    	; 0x7e8 <DIO_WritePin+0x10e>
     734:	2f 81       	ldd	r18, Y+7	; 0x07
     736:	38 85       	ldd	r19, Y+8	; 0x08
     738:	22 30       	cpi	r18, 0x02	; 2
     73a:	31 05       	cpc	r19, r1
     73c:	71 f1       	breq	.+92     	; 0x79a <DIO_WritePin+0xc0>
     73e:	8f 81       	ldd	r24, Y+7	; 0x07
     740:	98 85       	ldd	r25, Y+8	; 0x08
     742:	83 30       	cpi	r24, 0x03	; 3
     744:	91 05       	cpc	r25, r1
     746:	e9 f1       	breq	.+122    	; 0x7c2 <DIO_WritePin+0xe8>
     748:	4f c0       	rjmp	.+158    	; 0x7e8 <DIO_WritePin+0x10e>
			case PORTA :
				Set_Bit(PORTA_DATA, PinNumber);
     74a:	ab e3       	ldi	r26, 0x3B	; 59
     74c:	b0 e0       	ldi	r27, 0x00	; 0
     74e:	eb e3       	ldi	r30, 0x3B	; 59
     750:	f0 e0       	ldi	r31, 0x00	; 0
     752:	80 81       	ld	r24, Z
     754:	48 2f       	mov	r20, r24
     756:	8a 81       	ldd	r24, Y+2	; 0x02
     758:	28 2f       	mov	r18, r24
     75a:	30 e0       	ldi	r19, 0x00	; 0
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	02 2e       	mov	r0, r18
     762:	02 c0       	rjmp	.+4      	; 0x768 <DIO_WritePin+0x8e>
     764:	88 0f       	add	r24, r24
     766:	99 1f       	adc	r25, r25
     768:	0a 94       	dec	r0
     76a:	e2 f7       	brpl	.-8      	; 0x764 <DIO_WritePin+0x8a>
     76c:	84 2b       	or	r24, r20
     76e:	8c 93       	st	X, r24
     770:	3b c0       	rjmp	.+118    	; 0x7e8 <DIO_WritePin+0x10e>
				break;
			case PORTB :
				Set_Bit(PORTB_DATA, PinNumber);
     772:	a8 e3       	ldi	r26, 0x38	; 56
     774:	b0 e0       	ldi	r27, 0x00	; 0
     776:	e8 e3       	ldi	r30, 0x38	; 56
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	80 81       	ld	r24, Z
     77c:	48 2f       	mov	r20, r24
     77e:	8a 81       	ldd	r24, Y+2	; 0x02
     780:	28 2f       	mov	r18, r24
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	02 2e       	mov	r0, r18
     78a:	02 c0       	rjmp	.+4      	; 0x790 <DIO_WritePin+0xb6>
     78c:	88 0f       	add	r24, r24
     78e:	99 1f       	adc	r25, r25
     790:	0a 94       	dec	r0
     792:	e2 f7       	brpl	.-8      	; 0x78c <DIO_WritePin+0xb2>
     794:	84 2b       	or	r24, r20
     796:	8c 93       	st	X, r24
     798:	27 c0       	rjmp	.+78     	; 0x7e8 <DIO_WritePin+0x10e>
				break;
			case PORTC :
				Set_Bit(PORTC_DATA, PinNumber);
     79a:	a5 e3       	ldi	r26, 0x35	; 53
     79c:	b0 e0       	ldi	r27, 0x00	; 0
     79e:	e5 e3       	ldi	r30, 0x35	; 53
     7a0:	f0 e0       	ldi	r31, 0x00	; 0
     7a2:	80 81       	ld	r24, Z
     7a4:	48 2f       	mov	r20, r24
     7a6:	8a 81       	ldd	r24, Y+2	; 0x02
     7a8:	28 2f       	mov	r18, r24
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	02 2e       	mov	r0, r18
     7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <DIO_WritePin+0xde>
     7b4:	88 0f       	add	r24, r24
     7b6:	99 1f       	adc	r25, r25
     7b8:	0a 94       	dec	r0
     7ba:	e2 f7       	brpl	.-8      	; 0x7b4 <DIO_WritePin+0xda>
     7bc:	84 2b       	or	r24, r20
     7be:	8c 93       	st	X, r24
     7c0:	13 c0       	rjmp	.+38     	; 0x7e8 <DIO_WritePin+0x10e>
				break;
			case PORTD :
				Set_Bit(PORTD_DATA, PinNumber);
     7c2:	a2 e3       	ldi	r26, 0x32	; 50
     7c4:	b0 e0       	ldi	r27, 0x00	; 0
     7c6:	e2 e3       	ldi	r30, 0x32	; 50
     7c8:	f0 e0       	ldi	r31, 0x00	; 0
     7ca:	80 81       	ld	r24, Z
     7cc:	48 2f       	mov	r20, r24
     7ce:	8a 81       	ldd	r24, Y+2	; 0x02
     7d0:	28 2f       	mov	r18, r24
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	02 2e       	mov	r0, r18
     7da:	02 c0       	rjmp	.+4      	; 0x7e0 <DIO_WritePin+0x106>
     7dc:	88 0f       	add	r24, r24
     7de:	99 1f       	adc	r25, r25
     7e0:	0a 94       	dec	r0
     7e2:	e2 f7       	brpl	.-8      	; 0x7dc <DIO_WritePin+0x102>
     7e4:	84 2b       	or	r24, r20
     7e6:	8c 93       	st	X, r24
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
     7e8:	1e 82       	std	Y+6, r1	; 0x06
     7ea:	7e c0       	rjmp	.+252    	; 0x8e8 <__stack+0x89>
		} // END of IF that check for the direction if it is INPUT
		else if (PinDirection == PIN_LOW) {
     7ec:	8b 81       	ldd	r24, Y+3	; 0x03
     7ee:	88 23       	and	r24, r24
     7f0:	09 f0       	breq	.+2      	; 0x7f4 <DIO_WritePin+0x11a>
     7f2:	75 c0       	rjmp	.+234    	; 0x8de <__stack+0x7f>
			switch (PortID) {
     7f4:	89 81       	ldd	r24, Y+1	; 0x01
     7f6:	28 2f       	mov	r18, r24
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	3d 83       	std	Y+5, r19	; 0x05
     7fc:	2c 83       	std	Y+4, r18	; 0x04
     7fe:	8c 81       	ldd	r24, Y+4	; 0x04
     800:	9d 81       	ldd	r25, Y+5	; 0x05
     802:	81 30       	cpi	r24, 0x01	; 1
     804:	91 05       	cpc	r25, r1
     806:	59 f1       	breq	.+86     	; 0x85e <DIO_WritePin+0x184>
     808:	2c 81       	ldd	r18, Y+4	; 0x04
     80a:	3d 81       	ldd	r19, Y+5	; 0x05
     80c:	22 30       	cpi	r18, 0x02	; 2
     80e:	31 05       	cpc	r19, r1
     810:	2c f4       	brge	.+10     	; 0x81c <DIO_WritePin+0x142>
     812:	8c 81       	ldd	r24, Y+4	; 0x04
     814:	9d 81       	ldd	r25, Y+5	; 0x05
     816:	00 97       	sbiw	r24, 0x00	; 0
     818:	69 f0       	breq	.+26     	; 0x834 <DIO_WritePin+0x15a>
     81a:	5f c0       	rjmp	.+190    	; 0x8da <__stack+0x7b>
     81c:	2c 81       	ldd	r18, Y+4	; 0x04
     81e:	3d 81       	ldd	r19, Y+5	; 0x05
     820:	22 30       	cpi	r18, 0x02	; 2
     822:	31 05       	cpc	r19, r1
     824:	89 f1       	breq	.+98     	; 0x888 <__stack+0x29>
     826:	8c 81       	ldd	r24, Y+4	; 0x04
     828:	9d 81       	ldd	r25, Y+5	; 0x05
     82a:	83 30       	cpi	r24, 0x03	; 3
     82c:	91 05       	cpc	r25, r1
     82e:	09 f4       	brne	.+2      	; 0x832 <DIO_WritePin+0x158>
     830:	40 c0       	rjmp	.+128    	; 0x8b2 <__stack+0x53>
     832:	53 c0       	rjmp	.+166    	; 0x8da <__stack+0x7b>
			case PORTA :
				Clr_Bit(PORTA_DATA, PinNumber);
     834:	ab e3       	ldi	r26, 0x3B	; 59
     836:	b0 e0       	ldi	r27, 0x00	; 0
     838:	eb e3       	ldi	r30, 0x3B	; 59
     83a:	f0 e0       	ldi	r31, 0x00	; 0
     83c:	80 81       	ld	r24, Z
     83e:	48 2f       	mov	r20, r24
     840:	8a 81       	ldd	r24, Y+2	; 0x02
     842:	28 2f       	mov	r18, r24
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	02 2e       	mov	r0, r18
     84c:	02 c0       	rjmp	.+4      	; 0x852 <DIO_WritePin+0x178>
     84e:	88 0f       	add	r24, r24
     850:	99 1f       	adc	r25, r25
     852:	0a 94       	dec	r0
     854:	e2 f7       	brpl	.-8      	; 0x84e <DIO_WritePin+0x174>
     856:	80 95       	com	r24
     858:	84 23       	and	r24, r20
     85a:	8c 93       	st	X, r24
     85c:	3e c0       	rjmp	.+124    	; 0x8da <__stack+0x7b>
				break;
			case PORTB :
				Clr_Bit(PORTB_DATA, PinNumber);
     85e:	a8 e3       	ldi	r26, 0x38	; 56
     860:	b0 e0       	ldi	r27, 0x00	; 0
     862:	e8 e3       	ldi	r30, 0x38	; 56
     864:	f0 e0       	ldi	r31, 0x00	; 0
     866:	80 81       	ld	r24, Z
     868:	48 2f       	mov	r20, r24
     86a:	8a 81       	ldd	r24, Y+2	; 0x02
     86c:	28 2f       	mov	r18, r24
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	02 2e       	mov	r0, r18
     876:	02 c0       	rjmp	.+4      	; 0x87c <__stack+0x1d>
     878:	88 0f       	add	r24, r24
     87a:	99 1f       	adc	r25, r25
     87c:	0a 94       	dec	r0
     87e:	e2 f7       	brpl	.-8      	; 0x878 <__stack+0x19>
     880:	80 95       	com	r24
     882:	84 23       	and	r24, r20
     884:	8c 93       	st	X, r24
     886:	29 c0       	rjmp	.+82     	; 0x8da <__stack+0x7b>
				break;
			case PORTC :
				Clr_Bit(PORTC_DATA, PinNumber);
     888:	a5 e3       	ldi	r26, 0x35	; 53
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	e5 e3       	ldi	r30, 0x35	; 53
     88e:	f0 e0       	ldi	r31, 0x00	; 0
     890:	80 81       	ld	r24, Z
     892:	48 2f       	mov	r20, r24
     894:	8a 81       	ldd	r24, Y+2	; 0x02
     896:	28 2f       	mov	r18, r24
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	02 2e       	mov	r0, r18
     8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <__stack+0x47>
     8a2:	88 0f       	add	r24, r24
     8a4:	99 1f       	adc	r25, r25
     8a6:	0a 94       	dec	r0
     8a8:	e2 f7       	brpl	.-8      	; 0x8a2 <__stack+0x43>
     8aa:	80 95       	com	r24
     8ac:	84 23       	and	r24, r20
     8ae:	8c 93       	st	X, r24
     8b0:	14 c0       	rjmp	.+40     	; 0x8da <__stack+0x7b>
				break;
			case PORTD :
				Clr_Bit(PORTD_DATA, PinNumber);
     8b2:	a2 e3       	ldi	r26, 0x32	; 50
     8b4:	b0 e0       	ldi	r27, 0x00	; 0
     8b6:	e2 e3       	ldi	r30, 0x32	; 50
     8b8:	f0 e0       	ldi	r31, 0x00	; 0
     8ba:	80 81       	ld	r24, Z
     8bc:	48 2f       	mov	r20, r24
     8be:	8a 81       	ldd	r24, Y+2	; 0x02
     8c0:	28 2f       	mov	r18, r24
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	02 2e       	mov	r0, r18
     8ca:	02 c0       	rjmp	.+4      	; 0x8d0 <__stack+0x71>
     8cc:	88 0f       	add	r24, r24
     8ce:	99 1f       	adc	r25, r25
     8d0:	0a 94       	dec	r0
     8d2:	e2 f7       	brpl	.-8      	; 0x8cc <__stack+0x6d>
     8d4:	80 95       	com	r24
     8d6:	84 23       	and	r24, r20
     8d8:	8c 93       	st	X, r24
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
     8da:	1e 82       	std	Y+6, r1	; 0x06
     8dc:	05 c0       	rjmp	.+10     	; 0x8e8 <__stack+0x89>
		} // END of ELSE IF that check for the direction if it is INPUT
		else {
			return E_DIO_INVALID_PIN_DIRECTION ;
     8de:	92 e0       	ldi	r25, 0x02	; 2
     8e0:	9e 83       	std	Y+6, r25	; 0x06
     8e2:	02 c0       	rjmp	.+4      	; 0x8e8 <__stack+0x89>
		} //END OF ELSE

	}	  //END of IF That checking the port and pin number

	else {
		return E_DIO_INVALID_PORT_NUMBER ;
     8e4:	21 e0       	ldi	r18, 0x01	; 1
     8e6:	2e 83       	std	Y+6, r18	; 0x06
     8e8:	8e 81       	ldd	r24, Y+6	; 0x06

	}	  //END of ELSE
}	  //END of DIO_writePinValue
     8ea:	28 96       	adiw	r28, 0x08	; 8
     8ec:	0f b6       	in	r0, 0x3f	; 63
     8ee:	f8 94       	cli
     8f0:	de bf       	out	0x3e, r29	; 62
     8f2:	0f be       	out	0x3f, r0	; 63
     8f4:	cd bf       	out	0x3d, r28	; 61
     8f6:	cf 91       	pop	r28
     8f8:	df 91       	pop	r29
     8fa:	08 95       	ret

000008fc <DIO_ReadPort>:

/* API to Read Port  Value */
DIO_ERROR_state_t DIO_ReadPort(uint8_t PortID, uint8_t* PortState) {
     8fc:	df 93       	push	r29
     8fe:	cf 93       	push	r28
     900:	00 d0       	rcall	.+0      	; 0x902 <DIO_ReadPort+0x6>
     902:	00 d0       	rcall	.+0      	; 0x904 <DIO_ReadPort+0x8>
     904:	00 d0       	rcall	.+0      	; 0x906 <DIO_ReadPort+0xa>
     906:	cd b7       	in	r28, 0x3d	; 61
     908:	de b7       	in	r29, 0x3e	; 62
     90a:	89 83       	std	Y+1, r24	; 0x01
     90c:	7b 83       	std	Y+3, r23	; 0x03
     90e:	6a 83       	std	Y+2, r22	; 0x02
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA )) {
     910:	89 81       	ldd	r24, Y+1	; 0x01
     912:	84 30       	cpi	r24, 0x04	; 4
     914:	e0 f5       	brcc	.+120    	; 0x98e <DIO_ReadPort+0x92>
		switch (PortID) {
     916:	89 81       	ldd	r24, Y+1	; 0x01
     918:	28 2f       	mov	r18, r24
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	3e 83       	std	Y+6, r19	; 0x06
     91e:	2d 83       	std	Y+5, r18	; 0x05
     920:	8d 81       	ldd	r24, Y+5	; 0x05
     922:	9e 81       	ldd	r25, Y+6	; 0x06
     924:	81 30       	cpi	r24, 0x01	; 1
     926:	91 05       	cpc	r25, r1
     928:	e1 f0       	breq	.+56     	; 0x962 <DIO_ReadPort+0x66>
     92a:	2d 81       	ldd	r18, Y+5	; 0x05
     92c:	3e 81       	ldd	r19, Y+6	; 0x06
     92e:	22 30       	cpi	r18, 0x02	; 2
     930:	31 05       	cpc	r19, r1
     932:	2c f4       	brge	.+10     	; 0x93e <DIO_ReadPort+0x42>
     934:	8d 81       	ldd	r24, Y+5	; 0x05
     936:	9e 81       	ldd	r25, Y+6	; 0x06
     938:	00 97       	sbiw	r24, 0x00	; 0
     93a:	61 f0       	breq	.+24     	; 0x954 <DIO_ReadPort+0x58>
     93c:	26 c0       	rjmp	.+76     	; 0x98a <DIO_ReadPort+0x8e>
     93e:	2d 81       	ldd	r18, Y+5	; 0x05
     940:	3e 81       	ldd	r19, Y+6	; 0x06
     942:	22 30       	cpi	r18, 0x02	; 2
     944:	31 05       	cpc	r19, r1
     946:	a1 f0       	breq	.+40     	; 0x970 <DIO_ReadPort+0x74>
     948:	8d 81       	ldd	r24, Y+5	; 0x05
     94a:	9e 81       	ldd	r25, Y+6	; 0x06
     94c:	83 30       	cpi	r24, 0x03	; 3
     94e:	91 05       	cpc	r25, r1
     950:	b1 f0       	breq	.+44     	; 0x97e <DIO_ReadPort+0x82>
     952:	1b c0       	rjmp	.+54     	; 0x98a <DIO_ReadPort+0x8e>
		case PORTA :
			*(PortState) = PORTA_STAT;
     954:	e9 e3       	ldi	r30, 0x39	; 57
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	80 81       	ld	r24, Z
     95a:	ea 81       	ldd	r30, Y+2	; 0x02
     95c:	fb 81       	ldd	r31, Y+3	; 0x03
     95e:	80 83       	st	Z, r24
     960:	14 c0       	rjmp	.+40     	; 0x98a <DIO_ReadPort+0x8e>
			break;
		case PORTB :
			*(PortState) = PORTB_STAT;
     962:	e6 e3       	ldi	r30, 0x36	; 54
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	80 81       	ld	r24, Z
     968:	ea 81       	ldd	r30, Y+2	; 0x02
     96a:	fb 81       	ldd	r31, Y+3	; 0x03
     96c:	80 83       	st	Z, r24
     96e:	0d c0       	rjmp	.+26     	; 0x98a <DIO_ReadPort+0x8e>
			break;
		case PORTC :
			*(PortState) = PORTC_STAT;
     970:	e3 e3       	ldi	r30, 0x33	; 51
     972:	f0 e0       	ldi	r31, 0x00	; 0
     974:	80 81       	ld	r24, Z
     976:	ea 81       	ldd	r30, Y+2	; 0x02
     978:	fb 81       	ldd	r31, Y+3	; 0x03
     97a:	80 83       	st	Z, r24
     97c:	06 c0       	rjmp	.+12     	; 0x98a <DIO_ReadPort+0x8e>
			break;
		case PORTD :
			*(PortState) = PORTD_STAT;
     97e:	e0 e3       	ldi	r30, 0x30	; 48
     980:	f0 e0       	ldi	r31, 0x00	; 0
     982:	80 81       	ld	r24, Z
     984:	ea 81       	ldd	r30, Y+2	; 0x02
     986:	fb 81       	ldd	r31, Y+3	; 0x03
     988:	80 83       	st	Z, r24
			break;

		} //END of SWITCH
		return E_DIO_SUCCESS ;
     98a:	1c 82       	std	Y+4, r1	; 0x04
     98c:	02 c0       	rjmp	.+4      	; 0x992 <DIO_ReadPort+0x96>
	}	  //END of IF
	else {
		return E_DIO_INVALID_PORT_NUMBER ;
     98e:	91 e0       	ldi	r25, 0x01	; 1
     990:	9c 83       	std	Y+4, r25	; 0x04
     992:	8c 81       	ldd	r24, Y+4	; 0x04

	}	  //END of ELSE
}	  //END of DIO_readPort
     994:	26 96       	adiw	r28, 0x06	; 6
     996:	0f b6       	in	r0, 0x3f	; 63
     998:	f8 94       	cli
     99a:	de bf       	out	0x3e, r29	; 62
     99c:	0f be       	out	0x3f, r0	; 63
     99e:	cd bf       	out	0x3d, r28	; 61
     9a0:	cf 91       	pop	r28
     9a2:	df 91       	pop	r29
     9a4:	08 95       	ret

000009a6 <DIO_ReadPin>:

/* API to Read Pin  Value */
DIO_ERROR_state_t DIO_ReadPin(uint8_t PortID, uint8_t PinNumber,
		uint8_t* PinState) {
     9a6:	df 93       	push	r29
     9a8:	cf 93       	push	r28
     9aa:	cd b7       	in	r28, 0x3d	; 61
     9ac:	de b7       	in	r29, 0x3e	; 62
     9ae:	27 97       	sbiw	r28, 0x07	; 7
     9b0:	0f b6       	in	r0, 0x3f	; 63
     9b2:	f8 94       	cli
     9b4:	de bf       	out	0x3e, r29	; 62
     9b6:	0f be       	out	0x3f, r0	; 63
     9b8:	cd bf       	out	0x3d, r28	; 61
     9ba:	89 83       	std	Y+1, r24	; 0x01
     9bc:	6a 83       	std	Y+2, r22	; 0x02
     9be:	5c 83       	std	Y+4, r21	; 0x04
     9c0:	4b 83       	std	Y+3, r20	; 0x03
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA ) && (PinNumber >= PIN0 )
     9c2:	89 81       	ldd	r24, Y+1	; 0x01
     9c4:	84 30       	cpi	r24, 0x04	; 4
     9c6:	08 f0       	brcs	.+2      	; 0x9ca <DIO_ReadPin+0x24>
     9c8:	76 c0       	rjmp	.+236    	; 0xab6 <DIO_ReadPin+0x110>
     9ca:	8a 81       	ldd	r24, Y+2	; 0x02
     9cc:	88 30       	cpi	r24, 0x08	; 8
     9ce:	08 f0       	brcs	.+2      	; 0x9d2 <DIO_ReadPin+0x2c>
     9d0:	72 c0       	rjmp	.+228    	; 0xab6 <DIO_ReadPin+0x110>
			&& (PinNumber <= PIN7 )) {

		switch (PortID) {
     9d2:	89 81       	ldd	r24, Y+1	; 0x01
     9d4:	28 2f       	mov	r18, r24
     9d6:	30 e0       	ldi	r19, 0x00	; 0
     9d8:	3f 83       	std	Y+7, r19	; 0x07
     9da:	2e 83       	std	Y+6, r18	; 0x06
     9dc:	4e 81       	ldd	r20, Y+6	; 0x06
     9de:	5f 81       	ldd	r21, Y+7	; 0x07
     9e0:	41 30       	cpi	r20, 0x01	; 1
     9e2:	51 05       	cpc	r21, r1
     9e4:	59 f1       	breq	.+86     	; 0xa3c <DIO_ReadPin+0x96>
     9e6:	8e 81       	ldd	r24, Y+6	; 0x06
     9e8:	9f 81       	ldd	r25, Y+7	; 0x07
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	91 05       	cpc	r25, r1
     9ee:	34 f4       	brge	.+12     	; 0x9fc <DIO_ReadPin+0x56>
     9f0:	2e 81       	ldd	r18, Y+6	; 0x06
     9f2:	3f 81       	ldd	r19, Y+7	; 0x07
     9f4:	21 15       	cp	r18, r1
     9f6:	31 05       	cpc	r19, r1
     9f8:	69 f0       	breq	.+26     	; 0xa14 <DIO_ReadPin+0x6e>
     9fa:	5b c0       	rjmp	.+182    	; 0xab2 <DIO_ReadPin+0x10c>
     9fc:	4e 81       	ldd	r20, Y+6	; 0x06
     9fe:	5f 81       	ldd	r21, Y+7	; 0x07
     a00:	42 30       	cpi	r20, 0x02	; 2
     a02:	51 05       	cpc	r21, r1
     a04:	79 f1       	breq	.+94     	; 0xa64 <DIO_ReadPin+0xbe>
     a06:	8e 81       	ldd	r24, Y+6	; 0x06
     a08:	9f 81       	ldd	r25, Y+7	; 0x07
     a0a:	83 30       	cpi	r24, 0x03	; 3
     a0c:	91 05       	cpc	r25, r1
     a0e:	09 f4       	brne	.+2      	; 0xa12 <DIO_ReadPin+0x6c>
     a10:	3d c0       	rjmp	.+122    	; 0xa8c <DIO_ReadPin+0xe6>
     a12:	4f c0       	rjmp	.+158    	; 0xab2 <DIO_ReadPin+0x10c>
		case PORTA :
			*(PinState) = Get_Bit(PORTA_STAT, PinNumber);
     a14:	e9 e3       	ldi	r30, 0x39	; 57
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	80 81       	ld	r24, Z
     a1a:	28 2f       	mov	r18, r24
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	8a 81       	ldd	r24, Y+2	; 0x02
     a20:	88 2f       	mov	r24, r24
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	a9 01       	movw	r20, r18
     a26:	02 c0       	rjmp	.+4      	; 0xa2c <DIO_ReadPin+0x86>
     a28:	55 95       	asr	r21
     a2a:	47 95       	ror	r20
     a2c:	8a 95       	dec	r24
     a2e:	e2 f7       	brpl	.-8      	; 0xa28 <DIO_ReadPin+0x82>
     a30:	ca 01       	movw	r24, r20
     a32:	81 70       	andi	r24, 0x01	; 1
     a34:	eb 81       	ldd	r30, Y+3	; 0x03
     a36:	fc 81       	ldd	r31, Y+4	; 0x04
     a38:	80 83       	st	Z, r24
     a3a:	3b c0       	rjmp	.+118    	; 0xab2 <DIO_ReadPin+0x10c>
			break;
		case PORTB :
			*(PinState) = Get_Bit(PORTB_STAT, PinNumber);
     a3c:	e6 e3       	ldi	r30, 0x36	; 54
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
     a40:	80 81       	ld	r24, Z
     a42:	28 2f       	mov	r18, r24
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	8a 81       	ldd	r24, Y+2	; 0x02
     a48:	88 2f       	mov	r24, r24
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	a9 01       	movw	r20, r18
     a4e:	02 c0       	rjmp	.+4      	; 0xa54 <DIO_ReadPin+0xae>
     a50:	55 95       	asr	r21
     a52:	47 95       	ror	r20
     a54:	8a 95       	dec	r24
     a56:	e2 f7       	brpl	.-8      	; 0xa50 <DIO_ReadPin+0xaa>
     a58:	ca 01       	movw	r24, r20
     a5a:	81 70       	andi	r24, 0x01	; 1
     a5c:	eb 81       	ldd	r30, Y+3	; 0x03
     a5e:	fc 81       	ldd	r31, Y+4	; 0x04
     a60:	80 83       	st	Z, r24
     a62:	27 c0       	rjmp	.+78     	; 0xab2 <DIO_ReadPin+0x10c>
			break;
		case PORTC :
			*(PinState) = Get_Bit(PORTC_STAT, PinNumber);
     a64:	e3 e3       	ldi	r30, 0x33	; 51
     a66:	f0 e0       	ldi	r31, 0x00	; 0
     a68:	80 81       	ld	r24, Z
     a6a:	28 2f       	mov	r18, r24
     a6c:	30 e0       	ldi	r19, 0x00	; 0
     a6e:	8a 81       	ldd	r24, Y+2	; 0x02
     a70:	88 2f       	mov	r24, r24
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a9 01       	movw	r20, r18
     a76:	02 c0       	rjmp	.+4      	; 0xa7c <DIO_ReadPin+0xd6>
     a78:	55 95       	asr	r21
     a7a:	47 95       	ror	r20
     a7c:	8a 95       	dec	r24
     a7e:	e2 f7       	brpl	.-8      	; 0xa78 <DIO_ReadPin+0xd2>
     a80:	ca 01       	movw	r24, r20
     a82:	81 70       	andi	r24, 0x01	; 1
     a84:	eb 81       	ldd	r30, Y+3	; 0x03
     a86:	fc 81       	ldd	r31, Y+4	; 0x04
     a88:	80 83       	st	Z, r24
     a8a:	13 c0       	rjmp	.+38     	; 0xab2 <DIO_ReadPin+0x10c>
			break;
		case PORTD :
			*(PinState) = Get_Bit(PORTD_STAT, PinNumber);
     a8c:	e0 e3       	ldi	r30, 0x30	; 48
     a8e:	f0 e0       	ldi	r31, 0x00	; 0
     a90:	80 81       	ld	r24, Z
     a92:	28 2f       	mov	r18, r24
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	8a 81       	ldd	r24, Y+2	; 0x02
     a98:	88 2f       	mov	r24, r24
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a9 01       	movw	r20, r18
     a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <DIO_ReadPin+0xfe>
     aa0:	55 95       	asr	r21
     aa2:	47 95       	ror	r20
     aa4:	8a 95       	dec	r24
     aa6:	e2 f7       	brpl	.-8      	; 0xaa0 <DIO_ReadPin+0xfa>
     aa8:	ca 01       	movw	r24, r20
     aaa:	81 70       	andi	r24, 0x01	; 1
     aac:	eb 81       	ldd	r30, Y+3	; 0x03
     aae:	fc 81       	ldd	r31, Y+4	; 0x04
     ab0:	80 83       	st	Z, r24
			break;

		} //END of SWITCH
		return E_DIO_SUCCESS ;
     ab2:	1d 82       	std	Y+5, r1	; 0x05
     ab4:	02 c0       	rjmp	.+4      	; 0xaba <DIO_ReadPin+0x114>

	}	  //END of IF That checking the port and pin number

	else {
		return E_DIO_INVALID_PORT_NUMBER ;
     ab6:	51 e0       	ldi	r21, 0x01	; 1
     ab8:	5d 83       	std	Y+5, r21	; 0x05
     aba:	8d 81       	ldd	r24, Y+5	; 0x05

	}	  //END of ELSE
}    //END of DIO_readPint
     abc:	27 96       	adiw	r28, 0x07	; 7
     abe:	0f b6       	in	r0, 0x3f	; 63
     ac0:	f8 94       	cli
     ac2:	de bf       	out	0x3e, r29	; 62
     ac4:	0f be       	out	0x3f, r0	; 63
     ac6:	cd bf       	out	0x3d, r28	; 61
     ac8:	cf 91       	pop	r28
     aca:	df 91       	pop	r29
     acc:	08 95       	ret

00000ace <DIO_TogglePin>:

/* API to toggle pin*/
DIO_ERROR_state_t DIO_TogglePin(uint8_t PortID, uint8_t PinNumber){
     ace:	df 93       	push	r29
     ad0:	cf 93       	push	r28
     ad2:	00 d0       	rcall	.+0      	; 0xad4 <DIO_TogglePin+0x6>
     ad4:	00 d0       	rcall	.+0      	; 0xad6 <DIO_TogglePin+0x8>
     ad6:	0f 92       	push	r0
     ad8:	cd b7       	in	r28, 0x3d	; 61
     ada:	de b7       	in	r29, 0x3e	; 62
     adc:	89 83       	std	Y+1, r24	; 0x01
     ade:	6a 83       	std	Y+2, r22	; 0x02
	//Check for the ports if it is between 0 to 3
		if ((PortID <= PORTD ) && (PortID >= PORTA ) && (PinNumber >= PIN0 )
     ae0:	89 81       	ldd	r24, Y+1	; 0x01
     ae2:	84 30       	cpi	r24, 0x04	; 4
     ae4:	08 f0       	brcs	.+2      	; 0xae8 <DIO_TogglePin+0x1a>
     ae6:	74 c0       	rjmp	.+232    	; 0xbd0 <DIO_TogglePin+0x102>
     ae8:	8a 81       	ldd	r24, Y+2	; 0x02
     aea:	88 30       	cpi	r24, 0x08	; 8
     aec:	08 f0       	brcs	.+2      	; 0xaf0 <DIO_TogglePin+0x22>
     aee:	70 c0       	rjmp	.+224    	; 0xbd0 <DIO_TogglePin+0x102>
				&& (PinNumber <= PIN7 )) {
			switch (PortID) {
     af0:	89 81       	ldd	r24, Y+1	; 0x01
     af2:	28 2f       	mov	r18, r24
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	3d 83       	std	Y+5, r19	; 0x05
     af8:	2c 83       	std	Y+4, r18	; 0x04
     afa:	8c 81       	ldd	r24, Y+4	; 0x04
     afc:	9d 81       	ldd	r25, Y+5	; 0x05
     afe:	81 30       	cpi	r24, 0x01	; 1
     b00:	91 05       	cpc	r25, r1
     b02:	49 f1       	breq	.+82     	; 0xb56 <DIO_TogglePin+0x88>
     b04:	2c 81       	ldd	r18, Y+4	; 0x04
     b06:	3d 81       	ldd	r19, Y+5	; 0x05
     b08:	22 30       	cpi	r18, 0x02	; 2
     b0a:	31 05       	cpc	r19, r1
     b0c:	2c f4       	brge	.+10     	; 0xb18 <DIO_TogglePin+0x4a>
     b0e:	8c 81       	ldd	r24, Y+4	; 0x04
     b10:	9d 81       	ldd	r25, Y+5	; 0x05
     b12:	00 97       	sbiw	r24, 0x00	; 0
     b14:	61 f0       	breq	.+24     	; 0xb2e <DIO_TogglePin+0x60>
     b16:	5a c0       	rjmp	.+180    	; 0xbcc <DIO_TogglePin+0xfe>
     b18:	2c 81       	ldd	r18, Y+4	; 0x04
     b1a:	3d 81       	ldd	r19, Y+5	; 0x05
     b1c:	22 30       	cpi	r18, 0x02	; 2
     b1e:	31 05       	cpc	r19, r1
     b20:	71 f1       	breq	.+92     	; 0xb7e <DIO_TogglePin+0xb0>
     b22:	8c 81       	ldd	r24, Y+4	; 0x04
     b24:	9d 81       	ldd	r25, Y+5	; 0x05
     b26:	83 30       	cpi	r24, 0x03	; 3
     b28:	91 05       	cpc	r25, r1
     b2a:	e9 f1       	breq	.+122    	; 0xba6 <DIO_TogglePin+0xd8>
     b2c:	4f c0       	rjmp	.+158    	; 0xbcc <DIO_TogglePin+0xfe>
			case PORTA :
				Toggle_Bit(PORTA_DATA, PinNumber);
     b2e:	ab e3       	ldi	r26, 0x3B	; 59
     b30:	b0 e0       	ldi	r27, 0x00	; 0
     b32:	eb e3       	ldi	r30, 0x3B	; 59
     b34:	f0 e0       	ldi	r31, 0x00	; 0
     b36:	80 81       	ld	r24, Z
     b38:	48 2f       	mov	r20, r24
     b3a:	8a 81       	ldd	r24, Y+2	; 0x02
     b3c:	28 2f       	mov	r18, r24
     b3e:	30 e0       	ldi	r19, 0x00	; 0
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	02 2e       	mov	r0, r18
     b46:	02 c0       	rjmp	.+4      	; 0xb4c <DIO_TogglePin+0x7e>
     b48:	88 0f       	add	r24, r24
     b4a:	99 1f       	adc	r25, r25
     b4c:	0a 94       	dec	r0
     b4e:	e2 f7       	brpl	.-8      	; 0xb48 <DIO_TogglePin+0x7a>
     b50:	84 27       	eor	r24, r20
     b52:	8c 93       	st	X, r24
     b54:	3b c0       	rjmp	.+118    	; 0xbcc <DIO_TogglePin+0xfe>
				break;
			case PORTB :
				Toggle_Bit(PORTB_DATA, PinNumber);
     b56:	a8 e3       	ldi	r26, 0x38	; 56
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	e8 e3       	ldi	r30, 0x38	; 56
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 81       	ld	r24, Z
     b60:	48 2f       	mov	r20, r24
     b62:	8a 81       	ldd	r24, Y+2	; 0x02
     b64:	28 2f       	mov	r18, r24
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	02 2e       	mov	r0, r18
     b6e:	02 c0       	rjmp	.+4      	; 0xb74 <DIO_TogglePin+0xa6>
     b70:	88 0f       	add	r24, r24
     b72:	99 1f       	adc	r25, r25
     b74:	0a 94       	dec	r0
     b76:	e2 f7       	brpl	.-8      	; 0xb70 <DIO_TogglePin+0xa2>
     b78:	84 27       	eor	r24, r20
     b7a:	8c 93       	st	X, r24
     b7c:	27 c0       	rjmp	.+78     	; 0xbcc <DIO_TogglePin+0xfe>
				break;
			case PORTC :
				Toggle_Bit(PORTC_DATA, PinNumber);
     b7e:	a5 e3       	ldi	r26, 0x35	; 53
     b80:	b0 e0       	ldi	r27, 0x00	; 0
     b82:	e5 e3       	ldi	r30, 0x35	; 53
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	80 81       	ld	r24, Z
     b88:	48 2f       	mov	r20, r24
     b8a:	8a 81       	ldd	r24, Y+2	; 0x02
     b8c:	28 2f       	mov	r18, r24
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	02 2e       	mov	r0, r18
     b96:	02 c0       	rjmp	.+4      	; 0xb9c <DIO_TogglePin+0xce>
     b98:	88 0f       	add	r24, r24
     b9a:	99 1f       	adc	r25, r25
     b9c:	0a 94       	dec	r0
     b9e:	e2 f7       	brpl	.-8      	; 0xb98 <DIO_TogglePin+0xca>
     ba0:	84 27       	eor	r24, r20
     ba2:	8c 93       	st	X, r24
     ba4:	13 c0       	rjmp	.+38     	; 0xbcc <DIO_TogglePin+0xfe>
				break;
			case PORTD :
				Toggle_Bit(PORTD_DATA, PinNumber);
     ba6:	a2 e3       	ldi	r26, 0x32	; 50
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	e2 e3       	ldi	r30, 0x32	; 50
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	48 2f       	mov	r20, r24
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	02 2e       	mov	r0, r18
     bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <DIO_TogglePin+0xf6>
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	0a 94       	dec	r0
     bc6:	e2 f7       	brpl	.-8      	; 0xbc0 <DIO_TogglePin+0xf2>
     bc8:	84 27       	eor	r24, r20
     bca:	8c 93       	st	X, r24
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
     bcc:	1b 82       	std	Y+3, r1	; 0x03
     bce:	02 c0       	rjmp	.+4      	; 0xbd4 <DIO_TogglePin+0x106>

		}	  //END of IF That checking the port and pin number

		else {
			return E_DIO_INVALID_PORT_NUMBER ;
     bd0:	91 e0       	ldi	r25, 0x01	; 1
     bd2:	9b 83       	std	Y+3, r25	; 0x03
     bd4:	8b 81       	ldd	r24, Y+3	; 0x03

		}	  //END of ELSE

}
     bd6:	0f 90       	pop	r0
     bd8:	0f 90       	pop	r0
     bda:	0f 90       	pop	r0
     bdc:	0f 90       	pop	r0
     bde:	0f 90       	pop	r0
     be0:	cf 91       	pop	r28
     be2:	df 91       	pop	r29
     be4:	08 95       	ret

00000be6 <DIO_EnablePinPullup>:
DIO_ERROR_state_t DIO_EnablePinPullup(uint8_t PortID, uint8_t PinNumber){
     be6:	df 93       	push	r29
     be8:	cf 93       	push	r28
     bea:	00 d0       	rcall	.+0      	; 0xbec <DIO_EnablePinPullup+0x6>
     bec:	00 d0       	rcall	.+0      	; 0xbee <DIO_EnablePinPullup+0x8>
     bee:	0f 92       	push	r0
     bf0:	cd b7       	in	r28, 0x3d	; 61
     bf2:	de b7       	in	r29, 0x3e	; 62
     bf4:	89 83       	std	Y+1, r24	; 0x01
     bf6:	6a 83       	std	Y+2, r22	; 0x02
	//Check for the ports if it is between 0 to 3
		if ((PortID <= PORTD ) && (PortID >= PORTA ) && (PinNumber >= PIN0 )
     bf8:	89 81       	ldd	r24, Y+1	; 0x01
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	08 f0       	brcs	.+2      	; 0xc00 <DIO_EnablePinPullup+0x1a>
     bfe:	d1 c0       	rjmp	.+418    	; 0xda2 <DIO_EnablePinPullup+0x1bc>
     c00:	8a 81       	ldd	r24, Y+2	; 0x02
     c02:	88 30       	cpi	r24, 0x08	; 8
     c04:	08 f0       	brcs	.+2      	; 0xc08 <DIO_EnablePinPullup+0x22>
     c06:	cd c0       	rjmp	.+410    	; 0xda2 <DIO_EnablePinPullup+0x1bc>
				&& (PinNumber <= PIN7 )) {
			switch (PortID) {
     c08:	89 81       	ldd	r24, Y+1	; 0x01
     c0a:	28 2f       	mov	r18, r24
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	3d 83       	std	Y+5, r19	; 0x05
     c10:	2c 83       	std	Y+4, r18	; 0x04
     c12:	4c 81       	ldd	r20, Y+4	; 0x04
     c14:	5d 81       	ldd	r21, Y+5	; 0x05
     c16:	41 30       	cpi	r20, 0x01	; 1
     c18:	51 05       	cpc	r21, r1
     c1a:	09 f4       	brne	.+2      	; 0xc1e <DIO_EnablePinPullup+0x38>
     c1c:	42 c0       	rjmp	.+132    	; 0xca2 <DIO_EnablePinPullup+0xbc>
     c1e:	8c 81       	ldd	r24, Y+4	; 0x04
     c20:	9d 81       	ldd	r25, Y+5	; 0x05
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	91 05       	cpc	r25, r1
     c26:	34 f4       	brge	.+12     	; 0xc34 <DIO_EnablePinPullup+0x4e>
     c28:	2c 81       	ldd	r18, Y+4	; 0x04
     c2a:	3d 81       	ldd	r19, Y+5	; 0x05
     c2c:	21 15       	cp	r18, r1
     c2e:	31 05       	cpc	r19, r1
     c30:	71 f0       	breq	.+28     	; 0xc4e <DIO_EnablePinPullup+0x68>
     c32:	b5 c0       	rjmp	.+362    	; 0xd9e <DIO_EnablePinPullup+0x1b8>
     c34:	4c 81       	ldd	r20, Y+4	; 0x04
     c36:	5d 81       	ldd	r21, Y+5	; 0x05
     c38:	42 30       	cpi	r20, 0x02	; 2
     c3a:	51 05       	cpc	r21, r1
     c3c:	09 f4       	brne	.+2      	; 0xc40 <DIO_EnablePinPullup+0x5a>
     c3e:	5b c0       	rjmp	.+182    	; 0xcf6 <DIO_EnablePinPullup+0x110>
     c40:	8c 81       	ldd	r24, Y+4	; 0x04
     c42:	9d 81       	ldd	r25, Y+5	; 0x05
     c44:	83 30       	cpi	r24, 0x03	; 3
     c46:	91 05       	cpc	r25, r1
     c48:	09 f4       	brne	.+2      	; 0xc4c <DIO_EnablePinPullup+0x66>
     c4a:	7f c0       	rjmp	.+254    	; 0xd4a <DIO_EnablePinPullup+0x164>
     c4c:	a8 c0       	rjmp	.+336    	; 0xd9e <DIO_EnablePinPullup+0x1b8>
			case PORTA :
				if(Get_Bit(PORTA_DIR, PinNumber)==PIN_INPUT){
     c4e:	ea e3       	ldi	r30, 0x3A	; 58
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	28 2f       	mov	r18, r24
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	8a 81       	ldd	r24, Y+2	; 0x02
     c5a:	88 2f       	mov	r24, r24
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	a9 01       	movw	r20, r18
     c60:	02 c0       	rjmp	.+4      	; 0xc66 <DIO_EnablePinPullup+0x80>
     c62:	55 95       	asr	r21
     c64:	47 95       	ror	r20
     c66:	8a 95       	dec	r24
     c68:	e2 f7       	brpl	.-8      	; 0xc62 <DIO_EnablePinPullup+0x7c>
     c6a:	ca 01       	movw	r24, r20
     c6c:	81 70       	andi	r24, 0x01	; 1
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	00 97       	sbiw	r24, 0x00	; 0
     c72:	a1 f4       	brne	.+40     	; 0xc9c <DIO_EnablePinPullup+0xb6>
					Set_Bit(PORTA_DATA, PinNumber);
     c74:	ab e3       	ldi	r26, 0x3B	; 59
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	eb e3       	ldi	r30, 0x3B	; 59
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	48 2f       	mov	r20, r24
     c80:	8a 81       	ldd	r24, Y+2	; 0x02
     c82:	28 2f       	mov	r18, r24
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	02 2e       	mov	r0, r18
     c8c:	02 c0       	rjmp	.+4      	; 0xc92 <DIO_EnablePinPullup+0xac>
     c8e:	88 0f       	add	r24, r24
     c90:	99 1f       	adc	r25, r25
     c92:	0a 94       	dec	r0
     c94:	e2 f7       	brpl	.-8      	; 0xc8e <DIO_EnablePinPullup+0xa8>
     c96:	84 2b       	or	r24, r20
     c98:	8c 93       	st	X, r24
     c9a:	81 c0       	rjmp	.+258    	; 0xd9e <DIO_EnablePinPullup+0x1b8>
				}// END of IF which checking if the  pin is INPUT
				else{
					return E_DIO_SET_TO_NON_INPUT;
     c9c:	53 e0       	ldi	r21, 0x03	; 3
     c9e:	5b 83       	std	Y+3, r21	; 0x03
     ca0:	82 c0       	rjmp	.+260    	; 0xda6 <DIO_EnablePinPullup+0x1c0>
				}
				break;
			case PORTB :
				if(Get_Bit(PORTB_DIR, PinNumber)==PIN_INPUT){
     ca2:	e7 e3       	ldi	r30, 0x37	; 55
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	28 2f       	mov	r18, r24
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	8a 81       	ldd	r24, Y+2	; 0x02
     cae:	88 2f       	mov	r24, r24
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	a9 01       	movw	r20, r18
     cb4:	02 c0       	rjmp	.+4      	; 0xcba <DIO_EnablePinPullup+0xd4>
     cb6:	55 95       	asr	r21
     cb8:	47 95       	ror	r20
     cba:	8a 95       	dec	r24
     cbc:	e2 f7       	brpl	.-8      	; 0xcb6 <DIO_EnablePinPullup+0xd0>
     cbe:	ca 01       	movw	r24, r20
     cc0:	81 70       	andi	r24, 0x01	; 1
     cc2:	90 70       	andi	r25, 0x00	; 0
     cc4:	00 97       	sbiw	r24, 0x00	; 0
     cc6:	a1 f4       	brne	.+40     	; 0xcf0 <DIO_EnablePinPullup+0x10a>
					Set_Bit(PORTB_DATA, PinNumber);
     cc8:	a8 e3       	ldi	r26, 0x38	; 56
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	e8 e3       	ldi	r30, 0x38	; 56
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	48 2f       	mov	r20, r24
     cd4:	8a 81       	ldd	r24, Y+2	; 0x02
     cd6:	28 2f       	mov	r18, r24
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	02 2e       	mov	r0, r18
     ce0:	02 c0       	rjmp	.+4      	; 0xce6 <DIO_EnablePinPullup+0x100>
     ce2:	88 0f       	add	r24, r24
     ce4:	99 1f       	adc	r25, r25
     ce6:	0a 94       	dec	r0
     ce8:	e2 f7       	brpl	.-8      	; 0xce2 <DIO_EnablePinPullup+0xfc>
     cea:	84 2b       	or	r24, r20
     cec:	8c 93       	st	X, r24
     cee:	57 c0       	rjmp	.+174    	; 0xd9e <DIO_EnablePinPullup+0x1b8>
				}// END of IF which checking if the  pin is INPUT
				else{
					return E_DIO_SET_TO_NON_INPUT;
     cf0:	53 e0       	ldi	r21, 0x03	; 3
     cf2:	5b 83       	std	Y+3, r21	; 0x03
     cf4:	58 c0       	rjmp	.+176    	; 0xda6 <DIO_EnablePinPullup+0x1c0>
				}
				break;
			case PORTC :
				if(Get_Bit(PORTC_DIR, PinNumber)==PIN_INPUT){
     cf6:	e4 e3       	ldi	r30, 0x34	; 52
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	28 2f       	mov	r18, r24
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	8a 81       	ldd	r24, Y+2	; 0x02
     d02:	88 2f       	mov	r24, r24
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	a9 01       	movw	r20, r18
     d08:	02 c0       	rjmp	.+4      	; 0xd0e <DIO_EnablePinPullup+0x128>
     d0a:	55 95       	asr	r21
     d0c:	47 95       	ror	r20
     d0e:	8a 95       	dec	r24
     d10:	e2 f7       	brpl	.-8      	; 0xd0a <DIO_EnablePinPullup+0x124>
     d12:	ca 01       	movw	r24, r20
     d14:	81 70       	andi	r24, 0x01	; 1
     d16:	90 70       	andi	r25, 0x00	; 0
     d18:	00 97       	sbiw	r24, 0x00	; 0
     d1a:	a1 f4       	brne	.+40     	; 0xd44 <DIO_EnablePinPullup+0x15e>
					Set_Bit(PORTC_DATA, PinNumber);
     d1c:	a5 e3       	ldi	r26, 0x35	; 53
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	e5 e3       	ldi	r30, 0x35	; 53
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	48 2f       	mov	r20, r24
     d28:	8a 81       	ldd	r24, Y+2	; 0x02
     d2a:	28 2f       	mov	r18, r24
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	02 2e       	mov	r0, r18
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <DIO_EnablePinPullup+0x154>
     d36:	88 0f       	add	r24, r24
     d38:	99 1f       	adc	r25, r25
     d3a:	0a 94       	dec	r0
     d3c:	e2 f7       	brpl	.-8      	; 0xd36 <DIO_EnablePinPullup+0x150>
     d3e:	84 2b       	or	r24, r20
     d40:	8c 93       	st	X, r24
     d42:	2d c0       	rjmp	.+90     	; 0xd9e <DIO_EnablePinPullup+0x1b8>
				}// END of IF which checking if the  pin is INPUT
				else{
					return E_DIO_SET_TO_NON_INPUT;
     d44:	53 e0       	ldi	r21, 0x03	; 3
     d46:	5b 83       	std	Y+3, r21	; 0x03
     d48:	2e c0       	rjmp	.+92     	; 0xda6 <DIO_EnablePinPullup+0x1c0>
				}
				break;
			case PORTD :
				if(Get_Bit(PORTD_DIR, PinNumber)==PIN_INPUT){
     d4a:	e1 e3       	ldi	r30, 0x31	; 49
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	28 2f       	mov	r18, r24
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	8a 81       	ldd	r24, Y+2	; 0x02
     d56:	88 2f       	mov	r24, r24
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	a9 01       	movw	r20, r18
     d5c:	02 c0       	rjmp	.+4      	; 0xd62 <DIO_EnablePinPullup+0x17c>
     d5e:	55 95       	asr	r21
     d60:	47 95       	ror	r20
     d62:	8a 95       	dec	r24
     d64:	e2 f7       	brpl	.-8      	; 0xd5e <DIO_EnablePinPullup+0x178>
     d66:	ca 01       	movw	r24, r20
     d68:	81 70       	andi	r24, 0x01	; 1
     d6a:	90 70       	andi	r25, 0x00	; 0
     d6c:	00 97       	sbiw	r24, 0x00	; 0
     d6e:	a1 f4       	brne	.+40     	; 0xd98 <DIO_EnablePinPullup+0x1b2>
					Set_Bit(PORTD_DATA, PinNumber);
     d70:	a2 e3       	ldi	r26, 0x32	; 50
     d72:	b0 e0       	ldi	r27, 0x00	; 0
     d74:	e2 e3       	ldi	r30, 0x32	; 50
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	48 2f       	mov	r20, r24
     d7c:	8a 81       	ldd	r24, Y+2	; 0x02
     d7e:	28 2f       	mov	r18, r24
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	02 2e       	mov	r0, r18
     d88:	02 c0       	rjmp	.+4      	; 0xd8e <DIO_EnablePinPullup+0x1a8>
     d8a:	88 0f       	add	r24, r24
     d8c:	99 1f       	adc	r25, r25
     d8e:	0a 94       	dec	r0
     d90:	e2 f7       	brpl	.-8      	; 0xd8a <DIO_EnablePinPullup+0x1a4>
     d92:	84 2b       	or	r24, r20
     d94:	8c 93       	st	X, r24
     d96:	03 c0       	rjmp	.+6      	; 0xd9e <DIO_EnablePinPullup+0x1b8>
				}// END of IF which checking if the  pin is INPUT
				else{
					return E_DIO_SET_TO_NON_INPUT;
     d98:	53 e0       	ldi	r21, 0x03	; 3
     d9a:	5b 83       	std	Y+3, r21	; 0x03
     d9c:	04 c0       	rjmp	.+8      	; 0xda6 <DIO_EnablePinPullup+0x1c0>
				}
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
     d9e:	1b 82       	std	Y+3, r1	; 0x03
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <DIO_EnablePinPullup+0x1c0>

		}	  //END of IF That checking the port and pin number

		else {
			return E_DIO_INVALID_PORT_NUMBER ;
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	8b 83       	std	Y+3, r24	; 0x03
     da6:	8b 81       	ldd	r24, Y+3	; 0x03

		}	  //END of ELSE

}
     da8:	0f 90       	pop	r0
     daa:	0f 90       	pop	r0
     dac:	0f 90       	pop	r0
     dae:	0f 90       	pop	r0
     db0:	0f 90       	pop	r0
     db2:	cf 91       	pop	r28
     db4:	df 91       	pop	r29
     db6:	08 95       	ret

00000db8 <LED_Init>:
#define PIN_LOW  (uint8_t)0




uint8_t LED_Init(void){
     db8:	df 93       	push	r29
     dba:	cf 93       	push	r28
     dbc:	cd b7       	in	r28, 0x3d	; 61
     dbe:	de b7       	in	r29, 0x3e	; 62
#if LED_1
	DIO_SetPinDirection(LED_1_PORT,LED_1_PIN,PIN_OUTPUT);
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	60 e0       	ldi	r22, 0x00	; 0
     dc4:	41 e0       	ldi	r20, 0x01	; 1
     dc6:	0e 94 11 02 	call	0x422	; 0x422 <DIO_SetPinDirection>
#endif
#if LED_2
	DIO_SetPinDirection(LED_2_PORT,LED_2_PIN,PIN_OUTPUT);
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	61 e0       	ldi	r22, 0x01	; 1
     dce:	41 e0       	ldi	r20, 0x01	; 1
     dd0:	0e 94 11 02 	call	0x422	; 0x422 <DIO_SetPinDirection>
#endif
#if LED_3
	DIO_SetPinDirection(LED_3_PORT,LED_3_PIN,PIN_OUTPUT);
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	62 e0       	ldi	r22, 0x02	; 2
     dd8:	41 e0       	ldi	r20, 0x01	; 1
     dda:	0e 94 11 02 	call	0x422	; 0x422 <DIO_SetPinDirection>
#endif
	return 0;
     dde:	80 e0       	ldi	r24, 0x00	; 0
}
     de0:	cf 91       	pop	r28
     de2:	df 91       	pop	r29
     de4:	08 95       	ret

00000de6 <LED_On>:
uint8_t LED_On(uint8_t LedNumber){
     de6:	df 93       	push	r29
     de8:	cf 93       	push	r28
     dea:	00 d0       	rcall	.+0      	; 0xdec <LED_On+0x6>
     dec:	0f 92       	push	r0
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62
     df2:	89 83       	std	Y+1, r24	; 0x01
	switch (LedNumber){
     df4:	89 81       	ldd	r24, Y+1	; 0x01
     df6:	28 2f       	mov	r18, r24
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	3b 83       	std	Y+3, r19	; 0x03
     dfc:	2a 83       	std	Y+2, r18	; 0x02
     dfe:	8a 81       	ldd	r24, Y+2	; 0x02
     e00:	9b 81       	ldd	r25, Y+3	; 0x03
     e02:	82 30       	cpi	r24, 0x02	; 2
     e04:	91 05       	cpc	r25, r1
     e06:	81 f0       	breq	.+32     	; 0xe28 <LED_On+0x42>
     e08:	2a 81       	ldd	r18, Y+2	; 0x02
     e0a:	3b 81       	ldd	r19, Y+3	; 0x03
     e0c:	23 30       	cpi	r18, 0x03	; 3
     e0e:	31 05       	cpc	r19, r1
     e10:	89 f0       	breq	.+34     	; 0xe34 <LED_On+0x4e>
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	9b 81       	ldd	r25, Y+3	; 0x03
     e16:	81 30       	cpi	r24, 0x01	; 1
     e18:	91 05       	cpc	r25, r1
     e1a:	89 f4       	brne	.+34     	; 0xe3e <LED_On+0x58>
	case LED_1:
		DIO_WritePin(LED_1_PORT,LED_1_PIN,PIN_HIGH);
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	60 e0       	ldi	r22, 0x00	; 0
     e20:	41 e0       	ldi	r20, 0x01	; 1
     e22:	0e 94 6d 03 	call	0x6da	; 0x6da <DIO_WritePin>
     e26:	0b c0       	rjmp	.+22     	; 0xe3e <LED_On+0x58>
		break;
	case LED_2:
		DIO_WritePin(LED_2_PORT,LED_2_PIN,PIN_HIGH);
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	61 e0       	ldi	r22, 0x01	; 1
     e2c:	41 e0       	ldi	r20, 0x01	; 1
     e2e:	0e 94 6d 03 	call	0x6da	; 0x6da <DIO_WritePin>
     e32:	05 c0       	rjmp	.+10     	; 0xe3e <LED_On+0x58>
		break;
	case LED_3:
		DIO_WritePin(LED_3_PORT,LED_3_PIN,PIN_HIGH);
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	62 e0       	ldi	r22, 0x02	; 2
     e38:	41 e0       	ldi	r20, 0x01	; 1
     e3a:	0e 94 6d 03 	call	0x6da	; 0x6da <DIO_WritePin>
		break;
	}
	return 0;
     e3e:	80 e0       	ldi	r24, 0x00	; 0

}
     e40:	0f 90       	pop	r0
     e42:	0f 90       	pop	r0
     e44:	0f 90       	pop	r0
     e46:	cf 91       	pop	r28
     e48:	df 91       	pop	r29
     e4a:	08 95       	ret

00000e4c <LED_Off>:
uint8_t LED_Off(uint8_t LedNumber){
     e4c:	df 93       	push	r29
     e4e:	cf 93       	push	r28
     e50:	00 d0       	rcall	.+0      	; 0xe52 <LED_Off+0x6>
     e52:	0f 92       	push	r0
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
     e58:	89 83       	std	Y+1, r24	; 0x01
	switch (LedNumber){
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
     e5c:	28 2f       	mov	r18, r24
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	3b 83       	std	Y+3, r19	; 0x03
     e62:	2a 83       	std	Y+2, r18	; 0x02
     e64:	8a 81       	ldd	r24, Y+2	; 0x02
     e66:	9b 81       	ldd	r25, Y+3	; 0x03
     e68:	82 30       	cpi	r24, 0x02	; 2
     e6a:	91 05       	cpc	r25, r1
     e6c:	81 f0       	breq	.+32     	; 0xe8e <LED_Off+0x42>
     e6e:	2a 81       	ldd	r18, Y+2	; 0x02
     e70:	3b 81       	ldd	r19, Y+3	; 0x03
     e72:	23 30       	cpi	r18, 0x03	; 3
     e74:	31 05       	cpc	r19, r1
     e76:	89 f0       	breq	.+34     	; 0xe9a <LED_Off+0x4e>
     e78:	8a 81       	ldd	r24, Y+2	; 0x02
     e7a:	9b 81       	ldd	r25, Y+3	; 0x03
     e7c:	81 30       	cpi	r24, 0x01	; 1
     e7e:	91 05       	cpc	r25, r1
     e80:	89 f4       	brne	.+34     	; 0xea4 <LED_Off+0x58>
	case LED_1:
		DIO_WritePin(LED_1_PORT,LED_1_PIN,PIN_LOW);
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	40 e0       	ldi	r20, 0x00	; 0
     e88:	0e 94 6d 03 	call	0x6da	; 0x6da <DIO_WritePin>
     e8c:	0b c0       	rjmp	.+22     	; 0xea4 <LED_Off+0x58>
		break;
	case LED_2:
		DIO_WritePin(LED_2_PORT,LED_2_PIN,PIN_LOW);
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	61 e0       	ldi	r22, 0x01	; 1
     e92:	40 e0       	ldi	r20, 0x00	; 0
     e94:	0e 94 6d 03 	call	0x6da	; 0x6da <DIO_WritePin>
     e98:	05 c0       	rjmp	.+10     	; 0xea4 <LED_Off+0x58>
		break;
	case LED_3:
		DIO_WritePin(LED_3_PORT,LED_3_PIN,PIN_LOW);
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	62 e0       	ldi	r22, 0x02	; 2
     e9e:	40 e0       	ldi	r20, 0x00	; 0
     ea0:	0e 94 6d 03 	call	0x6da	; 0x6da <DIO_WritePin>
		break;
	}

	return 0;
     ea4:	80 e0       	ldi	r24, 0x00	; 0
}
     ea6:	0f 90       	pop	r0
     ea8:	0f 90       	pop	r0
     eaa:	0f 90       	pop	r0
     eac:	cf 91       	pop	r28
     eae:	df 91       	pop	r29
     eb0:	08 95       	ret

00000eb2 <LED_Toggle>:
uint8_t LED_Toggle(uint8_t LedNumber){
     eb2:	df 93       	push	r29
     eb4:	cf 93       	push	r28
     eb6:	00 d0       	rcall	.+0      	; 0xeb8 <LED_Toggle+0x6>
     eb8:	0f 92       	push	r0
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
     ebe:	89 83       	std	Y+1, r24	; 0x01
	switch (LedNumber){
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	28 2f       	mov	r18, r24
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	3b 83       	std	Y+3, r19	; 0x03
     ec8:	2a 83       	std	Y+2, r18	; 0x02
     eca:	8a 81       	ldd	r24, Y+2	; 0x02
     ecc:	9b 81       	ldd	r25, Y+3	; 0x03
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	91 05       	cpc	r25, r1
     ed2:	79 f0       	breq	.+30     	; 0xef2 <LED_Toggle+0x40>
     ed4:	2a 81       	ldd	r18, Y+2	; 0x02
     ed6:	3b 81       	ldd	r19, Y+3	; 0x03
     ed8:	23 30       	cpi	r18, 0x03	; 3
     eda:	31 05       	cpc	r19, r1
     edc:	79 f0       	breq	.+30     	; 0xefc <LED_Toggle+0x4a>
     ede:	8a 81       	ldd	r24, Y+2	; 0x02
     ee0:	9b 81       	ldd	r25, Y+3	; 0x03
     ee2:	81 30       	cpi	r24, 0x01	; 1
     ee4:	91 05       	cpc	r25, r1
     ee6:	71 f4       	brne	.+28     	; 0xf04 <LED_Toggle+0x52>
	case LED_1:
		DIO_TogglePin(LED_1_PORT,LED_1_PIN);
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	60 e0       	ldi	r22, 0x00	; 0
     eec:	0e 94 67 05 	call	0xace	; 0xace <DIO_TogglePin>
     ef0:	09 c0       	rjmp	.+18     	; 0xf04 <LED_Toggle+0x52>
		break;
	case LED_2:
		DIO_TogglePin(LED_2_PORT,LED_2_PIN);
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	61 e0       	ldi	r22, 0x01	; 1
     ef6:	0e 94 67 05 	call	0xace	; 0xace <DIO_TogglePin>
     efa:	04 c0       	rjmp	.+8      	; 0xf04 <LED_Toggle+0x52>
		break;
	case LED_3:
		DIO_TogglePin(LED_3_PORT,LED_3_PIN);
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	62 e0       	ldi	r22, 0x02	; 2
     f00:	0e 94 67 05 	call	0xace	; 0xace <DIO_TogglePin>
		break;
	}
	return 0;
     f04:	80 e0       	ldi	r24, 0x00	; 0

}
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	0f 90       	pop	r0
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	08 95       	ret

00000f12 <LED_Status>:
uint8_t LED_Status(uint8_t LedNumber, uint8_t* LedState){
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	00 d0       	rcall	.+0      	; 0xf18 <LED_Status+0x6>
     f18:	00 d0       	rcall	.+0      	; 0xf1a <LED_Status+0x8>
     f1a:	0f 92       	push	r0
     f1c:	cd b7       	in	r28, 0x3d	; 61
     f1e:	de b7       	in	r29, 0x3e	; 62
     f20:	89 83       	std	Y+1, r24	; 0x01
     f22:	7b 83       	std	Y+3, r23	; 0x03
     f24:	6a 83       	std	Y+2, r22	; 0x02
	switch (LedNumber){
     f26:	89 81       	ldd	r24, Y+1	; 0x01
     f28:	28 2f       	mov	r18, r24
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	3d 83       	std	Y+5, r19	; 0x05
     f2e:	2c 83       	std	Y+4, r18	; 0x04
     f30:	8c 81       	ldd	r24, Y+4	; 0x04
     f32:	9d 81       	ldd	r25, Y+5	; 0x05
     f34:	82 30       	cpi	r24, 0x02	; 2
     f36:	91 05       	cpc	r25, r1
     f38:	91 f0       	breq	.+36     	; 0xf5e <LED_Status+0x4c>
     f3a:	2c 81       	ldd	r18, Y+4	; 0x04
     f3c:	3d 81       	ldd	r19, Y+5	; 0x05
     f3e:	23 30       	cpi	r18, 0x03	; 3
     f40:	31 05       	cpc	r19, r1
     f42:	a9 f0       	breq	.+42     	; 0xf6e <LED_Status+0x5c>
     f44:	8c 81       	ldd	r24, Y+4	; 0x04
     f46:	9d 81       	ldd	r25, Y+5	; 0x05
     f48:	81 30       	cpi	r24, 0x01	; 1
     f4a:	91 05       	cpc	r25, r1
     f4c:	b9 f4       	brne	.+46     	; 0xf7c <LED_Status+0x6a>
	case LED_1:
		DIO_ReadPin(LED_1_PORT,LED_1_PIN,LedState);
     f4e:	2a 81       	ldd	r18, Y+2	; 0x02
     f50:	3b 81       	ldd	r19, Y+3	; 0x03
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	60 e0       	ldi	r22, 0x00	; 0
     f56:	a9 01       	movw	r20, r18
     f58:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <DIO_ReadPin>
     f5c:	0f c0       	rjmp	.+30     	; 0xf7c <LED_Status+0x6a>
		break;
	case LED_2:
		DIO_ReadPin(LED_2_PORT,LED_2_PIN,LedState);
     f5e:	2a 81       	ldd	r18, Y+2	; 0x02
     f60:	3b 81       	ldd	r19, Y+3	; 0x03
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	61 e0       	ldi	r22, 0x01	; 1
     f66:	a9 01       	movw	r20, r18
     f68:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <DIO_ReadPin>
     f6c:	07 c0       	rjmp	.+14     	; 0xf7c <LED_Status+0x6a>
		break;
	case LED_3:
		DIO_ReadPin(LED_3_PORT,LED_3_PIN,LedState);
     f6e:	2a 81       	ldd	r18, Y+2	; 0x02
     f70:	3b 81       	ldd	r19, Y+3	; 0x03
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	62 e0       	ldi	r22, 0x02	; 2
     f76:	a9 01       	movw	r20, r18
     f78:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <DIO_ReadPin>
		break;
	}
	return 0;
     f7c:	80 e0       	ldi	r24, 0x00	; 0

}
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	0f 90       	pop	r0
     f84:	0f 90       	pop	r0
     f86:	0f 90       	pop	r0
     f88:	cf 91       	pop	r28
     f8a:	df 91       	pop	r29
     f8c:	08 95       	ret

00000f8e <StringCmpr>:
uint8_t gu8_ReceiverBuffer[100];


/*LOCAL FUNCTION IMPLEMENTATION
----------------------------*/
static uint8_t StringCmpr(ptr_uint8_t STRING_1, ptr_uint8_t STRING_2) {
     f8e:	df 93       	push	r29
     f90:	cf 93       	push	r28
     f92:	00 d0       	rcall	.+0      	; 0xf94 <StringCmpr+0x6>
     f94:	00 d0       	rcall	.+0      	; 0xf96 <StringCmpr+0x8>
     f96:	00 d0       	rcall	.+0      	; 0xf98 <StringCmpr+0xa>
     f98:	cd b7       	in	r28, 0x3d	; 61
     f9a:	de b7       	in	r29, 0x3e	; 62
     f9c:	9b 83       	std	Y+3, r25	; 0x03
     f9e:	8a 83       	std	Y+2, r24	; 0x02
     fa0:	7d 83       	std	Y+5, r23	; 0x05
     fa2:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t i = 0;
     fa4:	19 82       	std	Y+1, r1	; 0x01
     fa6:	19 c0       	rjmp	.+50     	; 0xfda <StringCmpr+0x4c>
	while ((STRING_1[i] != NULL_TERMINATOR) || (STRING_2[i] != NULL_TERMINATOR)) {
		if (STRING_1[i] != STRING_2[i]) {
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	9b 81       	ldd	r25, Y+3	; 0x03
     fb2:	fc 01       	movw	r30, r24
     fb4:	e2 0f       	add	r30, r18
     fb6:	f3 1f       	adc	r31, r19
     fb8:	40 81       	ld	r20, Z
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	8c 81       	ldd	r24, Y+4	; 0x04
     fc2:	9d 81       	ldd	r25, Y+5	; 0x05
     fc4:	fc 01       	movw	r30, r24
     fc6:	e2 0f       	add	r30, r18
     fc8:	f3 1f       	adc	r31, r19
     fca:	80 81       	ld	r24, Z
     fcc:	48 17       	cp	r20, r24
     fce:	11 f0       	breq	.+4      	; 0xfd4 <StringCmpr+0x46>
			return 0;
     fd0:	1e 82       	std	Y+6, r1	; 0x06
     fd2:	1b c0       	rjmp	.+54     	; 0x100a <StringCmpr+0x7c>
		} else {
		}
		i++;
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	8f 5f       	subi	r24, 0xFF	; 255
     fd8:	89 83       	std	Y+1, r24	; 0x01

/*LOCAL FUNCTION IMPLEMENTATION
----------------------------*/
static uint8_t StringCmpr(ptr_uint8_t STRING_1, ptr_uint8_t STRING_2) {
	uint8_t i = 0;
	while ((STRING_1[i] != NULL_TERMINATOR) || (STRING_2[i] != NULL_TERMINATOR)) {
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	8a 81       	ldd	r24, Y+2	; 0x02
     fe2:	9b 81       	ldd	r25, Y+3	; 0x03
     fe4:	fc 01       	movw	r30, r24
     fe6:	e2 0f       	add	r30, r18
     fe8:	f3 1f       	adc	r31, r19
     fea:	80 81       	ld	r24, Z
     fec:	88 23       	and	r24, r24
     fee:	e1 f6       	brne	.-72     	; 0xfa8 <StringCmpr+0x1a>
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	28 2f       	mov	r18, r24
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	8c 81       	ldd	r24, Y+4	; 0x04
     ff8:	9d 81       	ldd	r25, Y+5	; 0x05
     ffa:	fc 01       	movw	r30, r24
     ffc:	e2 0f       	add	r30, r18
     ffe:	f3 1f       	adc	r31, r19
    1000:	80 81       	ld	r24, Z
    1002:	88 23       	and	r24, r24
    1004:	89 f6       	brne	.-94     	; 0xfa8 <StringCmpr+0x1a>
			return 0;
		} else {
		}
		i++;
	}
	return 1;
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	8e 83       	std	Y+6, r24	; 0x06
    100a:	8e 81       	ldd	r24, Y+6	; 0x06
}
    100c:	26 96       	adiw	r28, 0x06	; 6
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	de bf       	out	0x3e, r29	; 62
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	cd bf       	out	0x3d, r28	; 61
    1018:	cf 91       	pop	r28
    101a:	df 91       	pop	r29
    101c:	08 95       	ret

0000101e <TrafficLightInit>:

/*- APIs IMPLEMENTATION
-----------------------------------*/


uint8_t TrafficLightInit(void) {
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	0f 92       	push	r0
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
	uint8_t state;
	state = LED_Init();
    1028:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <LED_Init>
    102c:	89 83       	std	Y+1, r24	; 0x01
	UART_Init(UART_1);
    102e:	80 e0       	ldi	r24, 0x00	; 0
    1030:	0e 94 49 00 	call	0x92	; 0x92 <UART_Init>
	return 0;
    1034:	80 e0       	ldi	r24, 0x00	; 0
}
    1036:	0f 90       	pop	r0
    1038:	cf 91       	pop	r28
    103a:	df 91       	pop	r29
    103c:	08 95       	ret

0000103e <TrafficLightUpdate>:
uint8_t TrafficLightUpdate(void) {
    103e:	df 93       	push	r29
    1040:	cf 93       	push	r28
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
	UART_ReceiveString(UART_1, gu8_ReceiverBuffer);
    1046:	2a ec       	ldi	r18, 0xCA	; 202
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	b9 01       	movw	r22, r18
    104e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <UART_ReceiveString>
	if (StringCmpr(gu8_Start, gu8_ReceiverBuffer) == 1) {
    1052:	80 e6       	ldi	r24, 0x60	; 96
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	2a ec       	ldi	r18, 0xCA	; 202
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	b9 01       	movw	r22, r18
    105c:	0e 94 c7 07 	call	0xf8e	; 0xf8e <StringCmpr>
    1060:	81 30       	cpi	r24, 0x01	; 1
    1062:	81 f4       	brne	.+32     	; 0x1084 <TrafficLightUpdate+0x46>
		UART_TransmitString(UART_1, gu8_StartReply);
    1064:	26 e6       	ldi	r18, 0x66	; 102
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	b9 01       	movw	r22, r18
    106c:	0e 94 98 00 	call	0x130	; 0x130 <UART_TransmitString>
		LED_On(LED_1);
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	0e 94 f3 06 	call	0xde6	; 0xde6 <LED_On>
		LED_Off(LED_2);
    1076:	82 e0       	ldi	r24, 0x02	; 2
    1078:	0e 94 26 07 	call	0xe4c	; 0xe4c <LED_Off>
		LED_Off(LED_3);
    107c:	83 e0       	ldi	r24, 0x03	; 3
    107e:	0e 94 26 07 	call	0xe4c	; 0xe4c <LED_Off>
    1082:	51 c0       	rjmp	.+162    	; 0x1126 <TrafficLightUpdate+0xe8>
	} else if (StringCmpr(gu8_Wait, gu8_ReceiverBuffer) == 1) {
    1084:	87 e7       	ldi	r24, 0x77	; 119
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	2a ec       	ldi	r18, 0xCA	; 202
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	b9 01       	movw	r22, r18
    108e:	0e 94 c7 07 	call	0xf8e	; 0xf8e <StringCmpr>
    1092:	81 30       	cpi	r24, 0x01	; 1
    1094:	81 f4       	brne	.+32     	; 0x10b6 <TrafficLightUpdate+0x78>
		UART_TransmitString(UART_1, gu8_WaitReply);
    1096:	2c e7       	ldi	r18, 0x7C	; 124
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	b9 01       	movw	r22, r18
    109e:	0e 94 98 00 	call	0x130	; 0x130 <UART_TransmitString>
		LED_Off(LED_1);
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	0e 94 26 07 	call	0xe4c	; 0xe4c <LED_Off>
		LED_On(LED_2);
    10a8:	82 e0       	ldi	r24, 0x02	; 2
    10aa:	0e 94 f3 06 	call	0xde6	; 0xde6 <LED_On>
		LED_Off(LED_3);
    10ae:	83 e0       	ldi	r24, 0x03	; 3
    10b0:	0e 94 26 07 	call	0xe4c	; 0xe4c <LED_Off>
    10b4:	38 c0       	rjmp	.+112    	; 0x1126 <TrafficLightUpdate+0xe8>
	} else if (StringCmpr(gu8_Stop, gu8_ReceiverBuffer) == 1) {
    10b6:	8e e8       	ldi	r24, 0x8E	; 142
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	2a ec       	ldi	r18, 0xCA	; 202
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	b9 01       	movw	r22, r18
    10c0:	0e 94 c7 07 	call	0xf8e	; 0xf8e <StringCmpr>
    10c4:	81 30       	cpi	r24, 0x01	; 1
    10c6:	81 f4       	brne	.+32     	; 0x10e8 <TrafficLightUpdate+0xaa>
		UART_TransmitString(UART_1, gu8_StopReply);
    10c8:	23 e9       	ldi	r18, 0x93	; 147
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	b9 01       	movw	r22, r18
    10d0:	0e 94 98 00 	call	0x130	; 0x130 <UART_TransmitString>
		LED_Off(LED_1);
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	0e 94 26 07 	call	0xe4c	; 0xe4c <LED_Off>
		LED_Off(LED_2);
    10da:	82 e0       	ldi	r24, 0x02	; 2
    10dc:	0e 94 26 07 	call	0xe4c	; 0xe4c <LED_Off>
		LED_On(LED_3);
    10e0:	83 e0       	ldi	r24, 0x03	; 3
    10e2:	0e 94 f3 06 	call	0xde6	; 0xde6 <LED_On>
    10e6:	1f c0       	rjmp	.+62     	; 0x1126 <TrafficLightUpdate+0xe8>
	} else if (StringCmpr(gu8_SystemCheck, gu8_ReceiverBuffer) == 1) {
    10e8:	82 eb       	ldi	r24, 0xB2	; 178
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	2a ec       	ldi	r18, 0xCA	; 202
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	b9 01       	movw	r22, r18
    10f2:	0e 94 c7 07 	call	0xf8e	; 0xf8e <StringCmpr>
    10f6:	81 30       	cpi	r24, 0x01	; 1
    10f8:	39 f4       	brne	.+14     	; 0x1108 <TrafficLightUpdate+0xca>
		UART_TransmitString(UART_1, gu8_CheckReply);
    10fa:	25 eb       	ldi	r18, 0xB5	; 181
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	b9 01       	movw	r22, r18
    1102:	0e 94 98 00 	call	0x130	; 0x130 <UART_TransmitString>
    1106:	0f c0       	rjmp	.+30     	; 0x1126 <TrafficLightUpdate+0xe8>
	} else {
		UART_TransmitString(UART_1, gu8_ErrorReply);
    1108:	22 ea       	ldi	r18, 0xA2	; 162
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	b9 01       	movw	r22, r18
    1110:	0e 94 98 00 	call	0x130	; 0x130 <UART_TransmitString>

		LED_Off(LED_1);
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	0e 94 26 07 	call	0xe4c	; 0xe4c <LED_Off>
		LED_Off(LED_2);
    111a:	82 e0       	ldi	r24, 0x02	; 2
    111c:	0e 94 26 07 	call	0xe4c	; 0xe4c <LED_Off>
		LED_Off(LED_3);
    1120:	83 e0       	ldi	r24, 0x03	; 3
    1122:	0e 94 26 07 	call	0xe4c	; 0xe4c <LED_Off>

	}
	return 0;
    1126:	80 e0       	ldi	r24, 0x00	; 0
}
    1128:	cf 91       	pop	r28
    112a:	df 91       	pop	r29
    112c:	08 95       	ret

0000112e <main>:
/*- INCLUDES 
-----------------------------------------------*/
#include"App/TrafficLight/TrafficLight.h"

int main(){
    112e:	df 93       	push	r29
    1130:	cf 93       	push	r28
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
	TrafficLightInit();
    1136:	0e 94 0f 08 	call	0x101e	; 0x101e <TrafficLightInit>
	while(1){
		TrafficLightUpdate();
    113a:	0e 94 1f 08 	call	0x103e	; 0x103e <TrafficLightUpdate>
    113e:	fd cf       	rjmp	.-6      	; 0x113a <main+0xc>

00001140 <_exit>:
    1140:	f8 94       	cli

00001142 <__stop_program>:
    1142:	ff cf       	rjmp	.-2      	; 0x1142 <__stop_program>
