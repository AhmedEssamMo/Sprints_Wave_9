
S_SPI_SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000015ae  00001642  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800062  00800062  00001644  2**0
                  ALLOC
  3 .stab         000022b0  00000000  00000000  00001644  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f6c  00000000  00000000  000038f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 82 04 	jmp	0x904	; 0x904 <__vector_1>
       8:	0c 94 92 04 	jmp	0x924	; 0x924 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 e3 02 	jmp	0x5c6	; 0x5c6 <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ea       	ldi	r30, 0xAE	; 174
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 36       	cpi	r26, 0x62	; 98
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e6       	ldi	r26, 0x62	; 98
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 36       	cpi	r26, 0x6A	; 106
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cc 0a 	call	0x1598	; 0x1598 <main>
      8a:	0c 94 d5 0a 	jmp	0x15aa	; 0x15aa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_Init>:
Ptr_VoidFuncVoid_t Gptr_uartDataEmptyRegInt;
Ptr_VoidFuncVoid_t Gptr_uartTxInt;

/*APIs IMPLEMENTATION
 -------------------------*/
uint8_t UART_Init(uint8_t UartNumber) {
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	0f 92       	push	r0
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
      9c:	89 83       	std	Y+1, r24	; 0x01
#if RECEIVEING
	Set_Bit(UCSRB, RXEN);
      9e:	aa e2       	ldi	r26, 0x2A	; 42
      a0:	b0 e0       	ldi	r27, 0x00	; 0
      a2:	ea e2       	ldi	r30, 0x2A	; 42
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	80 61       	ori	r24, 0x10	; 16
      aa:	8c 93       	st	X, r24
#else
	Clr_Bit(UCSRB,RXEN);
#endif
#if TRANSMITTING
	Set_Bit(UCSRB, TXEN);
      ac:	aa e2       	ldi	r26, 0x2A	; 42
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	ea e2       	ldi	r30, 0x2A	; 42
      b2:	f0 e0       	ldi	r31, 0x00	; 0
      b4:	80 81       	ld	r24, Z
      b6:	88 60       	ori	r24, 0x08	; 8
      b8:	8c 93       	st	X, r24
	Clr_Bit(UCSRB,TXEN);
#endif
#if SPEED
	Set_Bit(UCSRA,U2X);
#else
	Clr_Bit(UCSRA, U2X);
      ba:	ab e2       	ldi	r26, 0x2B	; 43
      bc:	b0 e0       	ldi	r27, 0x00	; 0
      be:	eb e2       	ldi	r30, 0x2B	; 43
      c0:	f0 e0       	ldi	r31, 0x00	; 0
      c2:	80 81       	ld	r24, Z
      c4:	8d 7f       	andi	r24, 0xFD	; 253
      c6:	8c 93       	st	X, r24
#endif
#if NINE_BIT
	Set_Bit(UCSRB, UCSZ2);
#else
	Clr_Bit(UCSRB, UCSZ2);
      c8:	aa e2       	ldi	r26, 0x2A	; 42
      ca:	b0 e0       	ldi	r27, 0x00	; 0
      cc:	ea e2       	ldi	r30, 0x2A	; 42
      ce:	f0 e0       	ldi	r31, 0x00	; 0
      d0:	80 81       	ld	r24, Z
      d2:	8b 7f       	andi	r24, 0xFB	; 251
      d4:	8c 93       	st	X, r24
#endif
	UCSRC |= ((SYNCHRONIZATION ) & (STOP_BITS ) & (CHARACTER_SIZE )
      d6:	a0 e4       	ldi	r26, 0x40	; 64
      d8:	b0 e0       	ldi	r27, 0x00	; 0
      da:	e0 e4       	ldi	r30, 0x40	; 64
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	80 81       	ld	r24, Z
      e0:	86 68       	ori	r24, 0x86	; 134
      e2:	8c 93       	st	X, r24
			& (PARITY_MODE ) & (CLOCK_POLARITY ));
	UBRRL = BUAD_RATE;
      e4:	e9 e2       	ldi	r30, 0x29	; 41
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	83 e3       	ldi	r24, 0x33	; 51
      ea:	80 83       	st	Z, r24
	return 0;
      ec:	80 e0       	ldi	r24, 0x00	; 0
}
      ee:	0f 90       	pop	r0
      f0:	cf 91       	pop	r28
      f2:	df 91       	pop	r29
      f4:	08 95       	ret

000000f6 <UART_TransmitChar>:
uint8_t UART_TransmitChar(uint8_t UartNumber, uint8_t TxChar) {
      f6:	df 93       	push	r29
      f8:	cf 93       	push	r28
      fa:	00 d0       	rcall	.+0      	; 0xfc <UART_TransmitChar+0x6>
      fc:	cd b7       	in	r28, 0x3d	; 61
      fe:	de b7       	in	r29, 0x3e	; 62
     100:	89 83       	std	Y+1, r24	; 0x01
     102:	6a 83       	std	Y+2, r22	; 0x02
	UDR = TxChar;
     104:	ec e2       	ldi	r30, 0x2C	; 44
     106:	f0 e0       	ldi	r31, 0x00	; 0
     108:	8a 81       	ldd	r24, Y+2	; 0x02
     10a:	80 83       	st	Z, r24
	while ((Get_Bit(UCSRA, UDRE)) != 1) {
     10c:	eb e2       	ldi	r30, 0x2B	; 43
     10e:	f0 e0       	ldi	r31, 0x00	; 0
     110:	80 81       	ld	r24, Z
     112:	82 95       	swap	r24
     114:	86 95       	lsr	r24
     116:	87 70       	andi	r24, 0x07	; 7
     118:	88 2f       	mov	r24, r24
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	81 70       	andi	r24, 0x01	; 1
     11e:	90 70       	andi	r25, 0x00	; 0
     120:	00 97       	sbiw	r24, 0x00	; 0
     122:	a1 f3       	breq	.-24     	; 0x10c <UART_TransmitChar+0x16>
	}
	return 0;
     124:	80 e0       	ldi	r24, 0x00	; 0
}
     126:	0f 90       	pop	r0
     128:	0f 90       	pop	r0
     12a:	cf 91       	pop	r28
     12c:	df 91       	pop	r29
     12e:	08 95       	ret

00000130 <UART_TransmitString>:
uint8_t UART_TransmitString(uint8_t UartNumber, ptr_uint8_t TxString) {
     130:	df 93       	push	r29
     132:	cf 93       	push	r28
     134:	00 d0       	rcall	.+0      	; 0x136 <UART_TransmitString+0x6>
     136:	00 d0       	rcall	.+0      	; 0x138 <UART_TransmitString+0x8>
     138:	cd b7       	in	r28, 0x3d	; 61
     13a:	de b7       	in	r29, 0x3e	; 62
     13c:	8a 83       	std	Y+2, r24	; 0x02
     13e:	7c 83       	std	Y+4, r23	; 0x04
     140:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t counter = 0;
     142:	19 82       	std	Y+1, r1	; 0x01
     144:	1b c0       	rjmp	.+54     	; 0x17c <UART_TransmitString+0x4c>
	while ((*(TxString + counter)) != NULL_TERMINATOR) {
		UDR = *(TxString + counter);//TxString[counter]
     146:	ac e2       	ldi	r26, 0x2C	; 44
     148:	b0 e0       	ldi	r27, 0x00	; 0
     14a:	89 81       	ldd	r24, Y+1	; 0x01
     14c:	28 2f       	mov	r18, r24
     14e:	30 e0       	ldi	r19, 0x00	; 0
     150:	8b 81       	ldd	r24, Y+3	; 0x03
     152:	9c 81       	ldd	r25, Y+4	; 0x04
     154:	fc 01       	movw	r30, r24
     156:	e2 0f       	add	r30, r18
     158:	f3 1f       	adc	r31, r19
     15a:	80 81       	ld	r24, Z
     15c:	8c 93       	st	X, r24
		while ((Get_Bit(UCSRA, UDRE)) != 1) ;
     15e:	eb e2       	ldi	r30, 0x2B	; 43
     160:	f0 e0       	ldi	r31, 0x00	; 0
     162:	80 81       	ld	r24, Z
     164:	82 95       	swap	r24
     166:	86 95       	lsr	r24
     168:	87 70       	andi	r24, 0x07	; 7
     16a:	88 2f       	mov	r24, r24
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	81 70       	andi	r24, 0x01	; 1
     170:	90 70       	andi	r25, 0x00	; 0
     172:	00 97       	sbiw	r24, 0x00	; 0
     174:	a1 f3       	breq	.-24     	; 0x15e <UART_TransmitString+0x2e>
		counter++;
     176:	89 81       	ldd	r24, Y+1	; 0x01
     178:	8f 5f       	subi	r24, 0xFF	; 255
     17a:	89 83       	std	Y+1, r24	; 0x01
	}
	return 0;
}
uint8_t UART_TransmitString(uint8_t UartNumber, ptr_uint8_t TxString) {
	uint8_t counter = 0;
	while ((*(TxString + counter)) != NULL_TERMINATOR) {
     17c:	89 81       	ldd	r24, Y+1	; 0x01
     17e:	28 2f       	mov	r18, r24
     180:	30 e0       	ldi	r19, 0x00	; 0
     182:	8b 81       	ldd	r24, Y+3	; 0x03
     184:	9c 81       	ldd	r25, Y+4	; 0x04
     186:	fc 01       	movw	r30, r24
     188:	e2 0f       	add	r30, r18
     18a:	f3 1f       	adc	r31, r19
     18c:	80 81       	ld	r24, Z
     18e:	88 23       	and	r24, r24
     190:	d1 f6       	brne	.-76     	; 0x146 <UART_TransmitString+0x16>
		UDR = *(TxString + counter);//TxString[counter]
		while ((Get_Bit(UCSRA, UDRE)) != 1) ;
		counter++;
	}
	UDR ='\r';//TxString[counter]
     192:	ec e2       	ldi	r30, 0x2C	; 44
     194:	f0 e0       	ldi	r31, 0x00	; 0
     196:	8d e0       	ldi	r24, 0x0D	; 13
     198:	80 83       	st	Z, r24
	while ((Get_Bit(UCSRA, UDRE)) != 1) ;
     19a:	eb e2       	ldi	r30, 0x2B	; 43
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	80 81       	ld	r24, Z
     1a0:	82 95       	swap	r24
     1a2:	86 95       	lsr	r24
     1a4:	87 70       	andi	r24, 0x07	; 7
     1a6:	88 2f       	mov	r24, r24
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	81 70       	andi	r24, 0x01	; 1
     1ac:	90 70       	andi	r25, 0x00	; 0
     1ae:	00 97       	sbiw	r24, 0x00	; 0
     1b0:	a1 f3       	breq	.-24     	; 0x19a <UART_TransmitString+0x6a>
	return 0;
     1b2:	80 e0       	ldi	r24, 0x00	; 0
}
     1b4:	0f 90       	pop	r0
     1b6:	0f 90       	pop	r0
     1b8:	0f 90       	pop	r0
     1ba:	0f 90       	pop	r0
     1bc:	cf 91       	pop	r28
     1be:	df 91       	pop	r29
     1c0:	08 95       	ret

000001c2 <UART_ReceiveChar>:
uint8_t UART_ReceiveChar(uint8_t UartNumber, ptr_uint8_t RxChar) {
     1c2:	df 93       	push	r29
     1c4:	cf 93       	push	r28
     1c6:	00 d0       	rcall	.+0      	; 0x1c8 <UART_ReceiveChar+0x6>
     1c8:	0f 92       	push	r0
     1ca:	cd b7       	in	r28, 0x3d	; 61
     1cc:	de b7       	in	r29, 0x3e	; 62
     1ce:	89 83       	std	Y+1, r24	; 0x01
     1d0:	7b 83       	std	Y+3, r23	; 0x03
     1d2:	6a 83       	std	Y+2, r22	; 0x02

	while ( !(UCSRA & (1<<RXC)) );
     1d4:	eb e2       	ldi	r30, 0x2B	; 43
     1d6:	f0 e0       	ldi	r31, 0x00	; 0
     1d8:	80 81       	ld	r24, Z
     1da:	88 23       	and	r24, r24
     1dc:	dc f7       	brge	.-10     	; 0x1d4 <UART_ReceiveChar+0x12>
	*(RxChar) = (uint8_t)UDR;
     1de:	ec e2       	ldi	r30, 0x2C	; 44
     1e0:	f0 e0       	ldi	r31, 0x00	; 0
     1e2:	80 81       	ld	r24, Z
     1e4:	ea 81       	ldd	r30, Y+2	; 0x02
     1e6:	fb 81       	ldd	r31, Y+3	; 0x03
     1e8:	80 83       	st	Z, r24
	return 0;
     1ea:	80 e0       	ldi	r24, 0x00	; 0
}
     1ec:	0f 90       	pop	r0
     1ee:	0f 90       	pop	r0
     1f0:	0f 90       	pop	r0
     1f2:	cf 91       	pop	r28
     1f4:	df 91       	pop	r29
     1f6:	08 95       	ret

000001f8 <UART_ReceiveString>:
uint8_t UART_ReceiveString(uint8_t UartNumber, ptr_uint8_t RxString) {
     1f8:	df 93       	push	r29
     1fa:	cf 93       	push	r28
     1fc:	00 d0       	rcall	.+0      	; 0x1fe <UART_ReceiveString+0x6>
     1fe:	00 d0       	rcall	.+0      	; 0x200 <UART_ReceiveString+0x8>
     200:	cd b7       	in	r28, 0x3d	; 61
     202:	de b7       	in	r29, 0x3e	; 62
     204:	8a 83       	std	Y+2, r24	; 0x02
     206:	7c 83       	std	Y+4, r23	; 0x04
     208:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t counter = 0;
     20a:	19 82       	std	Y+1, r1	; 0x01

	while (1) {
		while ( !(UCSRA & (1<<RXC)) );
     20c:	eb e2       	ldi	r30, 0x2B	; 43
     20e:	f0 e0       	ldi	r31, 0x00	; 0
     210:	80 81       	ld	r24, Z
     212:	88 23       	and	r24, r24
     214:	dc f7       	brge	.-10     	; 0x20c <UART_ReceiveString+0x14>
		RxString[counter] = (uint8_t)UDR;
     216:	89 81       	ldd	r24, Y+1	; 0x01
     218:	28 2f       	mov	r18, r24
     21a:	30 e0       	ldi	r19, 0x00	; 0
     21c:	8b 81       	ldd	r24, Y+3	; 0x03
     21e:	9c 81       	ldd	r25, Y+4	; 0x04
     220:	dc 01       	movw	r26, r24
     222:	a2 0f       	add	r26, r18
     224:	b3 1f       	adc	r27, r19
     226:	ec e2       	ldi	r30, 0x2C	; 44
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	80 81       	ld	r24, Z
     22c:	8c 93       	st	X, r24
		UART_TransmitChar(UART_1,RxString[counter]);
     22e:	89 81       	ldd	r24, Y+1	; 0x01
     230:	28 2f       	mov	r18, r24
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	8b 81       	ldd	r24, Y+3	; 0x03
     236:	9c 81       	ldd	r25, Y+4	; 0x04
     238:	fc 01       	movw	r30, r24
     23a:	e2 0f       	add	r30, r18
     23c:	f3 1f       	adc	r31, r19
     23e:	90 81       	ld	r25, Z
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	69 2f       	mov	r22, r25
     244:	0e 94 7b 00 	call	0xf6	; 0xf6 <UART_TransmitChar>
		counter++;
     248:	89 81       	ldd	r24, Y+1	; 0x01
     24a:	8f 5f       	subi	r24, 0xFF	; 255
     24c:	89 83       	std	Y+1, r24	; 0x01
		if((UDR)==(NEW_LINE)){
     24e:	ec e2       	ldi	r30, 0x2C	; 44
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	80 81       	ld	r24, Z
     254:	8d 30       	cpi	r24, 0x0D	; 13
     256:	a1 f4       	brne	.+40     	; 0x280 <UART_ReceiveString+0x88>
			RxString[counter-1]=NULL_TERMINATOR;
     258:	89 81       	ldd	r24, Y+1	; 0x01
     25a:	88 2f       	mov	r24, r24
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	9c 01       	movw	r18, r24
     260:	21 50       	subi	r18, 0x01	; 1
     262:	30 40       	sbci	r19, 0x00	; 0
     264:	8b 81       	ldd	r24, Y+3	; 0x03
     266:	9c 81       	ldd	r25, Y+4	; 0x04
     268:	fc 01       	movw	r30, r24
     26a:	e2 0f       	add	r30, r18
     26c:	f3 1f       	adc	r31, r19
     26e:	10 82       	st	Z, r1



	}
	//*(RxString+counter)='\n';
	return 0;
     270:	80 e0       	ldi	r24, 0x00	; 0
}
     272:	0f 90       	pop	r0
     274:	0f 90       	pop	r0
     276:	0f 90       	pop	r0
     278:	0f 90       	pop	r0
     27a:	cf 91       	pop	r28
     27c:	df 91       	pop	r29
     27e:	08 95       	ret
		counter++;
		if((UDR)==(NEW_LINE)){
			RxString[counter-1]=NULL_TERMINATOR;
			break;
		}
		else if(((UDR)==(BACKSPACE))&&counter>1){
     280:	ec e2       	ldi	r30, 0x2C	; 44
     282:	f0 e0       	ldi	r31, 0x00	; 0
     284:	80 81       	ld	r24, Z
     286:	88 30       	cpi	r24, 0x08	; 8
     288:	39 f4       	brne	.+14     	; 0x298 <UART_ReceiveString+0xa0>
     28a:	89 81       	ldd	r24, Y+1	; 0x01
     28c:	82 30       	cpi	r24, 0x02	; 2
     28e:	20 f0       	brcs	.+8      	; 0x298 <UART_ReceiveString+0xa0>
			counter=counter-2;
     290:	89 81       	ldd	r24, Y+1	; 0x01
     292:	82 50       	subi	r24, 0x02	; 2
     294:	89 83       	std	Y+1, r24	; 0x01
     296:	ba cf       	rjmp	.-140    	; 0x20c <UART_ReceiveString+0x14>
		}
		else if(((UDR)==(BACKSPACE))&&counter<=1){
     298:	ec e2       	ldi	r30, 0x2C	; 44
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	80 81       	ld	r24, Z
     29e:	88 30       	cpi	r24, 0x08	; 8
     2a0:	09 f0       	breq	.+2      	; 0x2a4 <UART_ReceiveString+0xac>
     2a2:	b4 cf       	rjmp	.-152    	; 0x20c <UART_ReceiveString+0x14>
     2a4:	89 81       	ldd	r24, Y+1	; 0x01
     2a6:	82 30       	cpi	r24, 0x02	; 2
     2a8:	08 f0       	brcs	.+2      	; 0x2ac <UART_ReceiveString+0xb4>
     2aa:	b0 cf       	rjmp	.-160    	; 0x20c <UART_ReceiveString+0x14>
			counter=0;
     2ac:	19 82       	std	Y+1, r1	; 0x01
     2ae:	ae cf       	rjmp	.-164    	; 0x20c <UART_ReceiveString+0x14>

000002b0 <UART_EnableInterrupt>:

	}
	//*(RxString+counter)='\n';
	return 0;
}
uint8_t UART_EnableInterrupt(uint8_t UartNumber, uint8_t UartInterruptType) {
     2b0:	df 93       	push	r29
     2b2:	cf 93       	push	r28
     2b4:	00 d0       	rcall	.+0      	; 0x2b6 <UART_EnableInterrupt+0x6>
     2b6:	00 d0       	rcall	.+0      	; 0x2b8 <UART_EnableInterrupt+0x8>
     2b8:	cd b7       	in	r28, 0x3d	; 61
     2ba:	de b7       	in	r29, 0x3e	; 62
     2bc:	89 83       	std	Y+1, r24	; 0x01
     2be:	6a 83       	std	Y+2, r22	; 0x02
	switch (UartNumber) {
     2c0:	89 81       	ldd	r24, Y+1	; 0x01
     2c2:	88 2f       	mov	r24, r24
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	00 97       	sbiw	r24, 0x00	; 0
     2c8:	51 f5       	brne	.+84     	; 0x31e <UART_EnableInterrupt+0x6e>
	case UART_1 :
		switch (UartInterruptType) {
     2ca:	8a 81       	ldd	r24, Y+2	; 0x02
     2cc:	28 2f       	mov	r18, r24
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	3c 83       	std	Y+4, r19	; 0x04
     2d2:	2b 83       	std	Y+3, r18	; 0x03
     2d4:	8b 81       	ldd	r24, Y+3	; 0x03
     2d6:	9c 81       	ldd	r25, Y+4	; 0x04
     2d8:	81 30       	cpi	r24, 0x01	; 1
     2da:	91 05       	cpc	r25, r1
     2dc:	89 f0       	breq	.+34     	; 0x300 <UART_EnableInterrupt+0x50>
     2de:	2b 81       	ldd	r18, Y+3	; 0x03
     2e0:	3c 81       	ldd	r19, Y+4	; 0x04
     2e2:	22 30       	cpi	r18, 0x02	; 2
     2e4:	31 05       	cpc	r19, r1
     2e6:	a1 f0       	breq	.+40     	; 0x310 <UART_EnableInterrupt+0x60>
     2e8:	8b 81       	ldd	r24, Y+3	; 0x03
     2ea:	9c 81       	ldd	r25, Y+4	; 0x04
     2ec:	00 97       	sbiw	r24, 0x00	; 0
     2ee:	b9 f4       	brne	.+46     	; 0x31e <UART_EnableInterrupt+0x6e>
		case RECIVE_INT :
			Set_Bit(UCSRB, RXCIE);
     2f0:	aa e2       	ldi	r26, 0x2A	; 42
     2f2:	b0 e0       	ldi	r27, 0x00	; 0
     2f4:	ea e2       	ldi	r30, 0x2A	; 42
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	80 81       	ld	r24, Z
     2fa:	80 68       	ori	r24, 0x80	; 128
     2fc:	8c 93       	st	X, r24
     2fe:	0f c0       	rjmp	.+30     	; 0x31e <UART_EnableInterrupt+0x6e>
			break;
		case TRANSMIT_INT :
			Set_Bit(UCSRB, TXCIE);
     300:	aa e2       	ldi	r26, 0x2A	; 42
     302:	b0 e0       	ldi	r27, 0x00	; 0
     304:	ea e2       	ldi	r30, 0x2A	; 42
     306:	f0 e0       	ldi	r31, 0x00	; 0
     308:	80 81       	ld	r24, Z
     30a:	80 64       	ori	r24, 0x40	; 64
     30c:	8c 93       	st	X, r24
     30e:	07 c0       	rjmp	.+14     	; 0x31e <UART_EnableInterrupt+0x6e>
			break;
		case EMPTY_BUFFERR_INT :
			Set_Bit(UCSRB, UDRIE);
     310:	aa e2       	ldi	r26, 0x2A	; 42
     312:	b0 e0       	ldi	r27, 0x00	; 0
     314:	ea e2       	ldi	r30, 0x2A	; 42
     316:	f0 e0       	ldi	r31, 0x00	; 0
     318:	80 81       	ld	r24, Z
     31a:	80 62       	ori	r24, 0x20	; 32
     31c:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
	return 0;
     31e:	80 e0       	ldi	r24, 0x00	; 0
}
     320:	0f 90       	pop	r0
     322:	0f 90       	pop	r0
     324:	0f 90       	pop	r0
     326:	0f 90       	pop	r0
     328:	cf 91       	pop	r28
     32a:	df 91       	pop	r29
     32c:	08 95       	ret

0000032e <UART_DisableInterrupt>:
uint8_t UART_DisableInterrupt(uint8_t UartNumber, uint8_t UartInterruptType) {
     32e:	df 93       	push	r29
     330:	cf 93       	push	r28
     332:	00 d0       	rcall	.+0      	; 0x334 <UART_DisableInterrupt+0x6>
     334:	00 d0       	rcall	.+0      	; 0x336 <UART_DisableInterrupt+0x8>
     336:	cd b7       	in	r28, 0x3d	; 61
     338:	de b7       	in	r29, 0x3e	; 62
     33a:	89 83       	std	Y+1, r24	; 0x01
     33c:	6a 83       	std	Y+2, r22	; 0x02
	switch (UartNumber) {
     33e:	89 81       	ldd	r24, Y+1	; 0x01
     340:	88 2f       	mov	r24, r24
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	00 97       	sbiw	r24, 0x00	; 0
     346:	51 f5       	brne	.+84     	; 0x39c <UART_DisableInterrupt+0x6e>
	case UART_1 :
		switch (UartInterruptType) {
     348:	8a 81       	ldd	r24, Y+2	; 0x02
     34a:	28 2f       	mov	r18, r24
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	3c 83       	std	Y+4, r19	; 0x04
     350:	2b 83       	std	Y+3, r18	; 0x03
     352:	8b 81       	ldd	r24, Y+3	; 0x03
     354:	9c 81       	ldd	r25, Y+4	; 0x04
     356:	81 30       	cpi	r24, 0x01	; 1
     358:	91 05       	cpc	r25, r1
     35a:	89 f0       	breq	.+34     	; 0x37e <UART_DisableInterrupt+0x50>
     35c:	2b 81       	ldd	r18, Y+3	; 0x03
     35e:	3c 81       	ldd	r19, Y+4	; 0x04
     360:	22 30       	cpi	r18, 0x02	; 2
     362:	31 05       	cpc	r19, r1
     364:	a1 f0       	breq	.+40     	; 0x38e <UART_DisableInterrupt+0x60>
     366:	8b 81       	ldd	r24, Y+3	; 0x03
     368:	9c 81       	ldd	r25, Y+4	; 0x04
     36a:	00 97       	sbiw	r24, 0x00	; 0
     36c:	b9 f4       	brne	.+46     	; 0x39c <UART_DisableInterrupt+0x6e>
		case RECIVE_INT :
			Clr_Bit(UCSRB, RXCIE);
     36e:	aa e2       	ldi	r26, 0x2A	; 42
     370:	b0 e0       	ldi	r27, 0x00	; 0
     372:	ea e2       	ldi	r30, 0x2A	; 42
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	80 81       	ld	r24, Z
     378:	8f 77       	andi	r24, 0x7F	; 127
     37a:	8c 93       	st	X, r24
     37c:	0f c0       	rjmp	.+30     	; 0x39c <UART_DisableInterrupt+0x6e>
			break;
		case TRANSMIT_INT :
			Clr_Bit(UCSRB, TXCIE);
     37e:	aa e2       	ldi	r26, 0x2A	; 42
     380:	b0 e0       	ldi	r27, 0x00	; 0
     382:	ea e2       	ldi	r30, 0x2A	; 42
     384:	f0 e0       	ldi	r31, 0x00	; 0
     386:	80 81       	ld	r24, Z
     388:	8f 7b       	andi	r24, 0xBF	; 191
     38a:	8c 93       	st	X, r24
     38c:	07 c0       	rjmp	.+14     	; 0x39c <UART_DisableInterrupt+0x6e>
			break;
		case EMPTY_BUFFERR_INT :
			Clr_Bit(UCSRB, UDRIE);
     38e:	aa e2       	ldi	r26, 0x2A	; 42
     390:	b0 e0       	ldi	r27, 0x00	; 0
     392:	ea e2       	ldi	r30, 0x2A	; 42
     394:	f0 e0       	ldi	r31, 0x00	; 0
     396:	80 81       	ld	r24, Z
     398:	8f 7d       	andi	r24, 0xDF	; 223
     39a:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
	return 0;
     39c:	80 e0       	ldi	r24, 0x00	; 0
}
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	0f 90       	pop	r0
     3a4:	0f 90       	pop	r0
     3a6:	cf 91       	pop	r28
     3a8:	df 91       	pop	r29
     3aa:	08 95       	ret

000003ac <SPI_Init>:
#endif

	return 0;
}
#endif
uint8_t SPI_Init(uint8_t SpiNumber) {
     3ac:	df 93       	push	r29
     3ae:	cf 93       	push	r28
     3b0:	0f 92       	push	r0
     3b2:	cd b7       	in	r28, 0x3d	; 61
     3b4:	de b7       	in	r29, 0x3e	; 62
     3b6:	89 83       	std	Y+1, r24	; 0x01
#else
	Clr_Bit(SPSR, SPI2X);
#endif /*DOUBLE_SPEED*/

#else
	Clr_Bit(SPCR, MSTR);
     3b8:	ad e2       	ldi	r26, 0x2D	; 45
     3ba:	b0 e0       	ldi	r27, 0x00	; 0
     3bc:	ed e2       	ldi	r30, 0x2D	; 45
     3be:	f0 e0       	ldi	r31, 0x00	; 0
     3c0:	80 81       	ld	r24, Z
     3c2:	8f 7e       	andi	r24, 0xEF	; 239
     3c4:	8c 93       	st	X, r24
	Set_Bit(SPCR, SPE);
     3c6:	ad e2       	ldi	r26, 0x2D	; 45
     3c8:	b0 e0       	ldi	r27, 0x00	; 0
     3ca:	ed e2       	ldi	r30, 0x2D	; 45
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	80 81       	ld	r24, Z
     3d0:	80 64       	ori	r24, 0x40	; 64
     3d2:	8c 93       	st	X, r24
	DIO_SetPinDirection(SPI_CH0_MISO_PORT, SPI_CH0_MISO_PIN, PIN_OUTPUT);
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	66 e0       	ldi	r22, 0x06	; 6
     3d8:	41 e0       	ldi	r20, 0x01	; 1
     3da:	0e 94 ed 04 	call	0x9da	; 0x9da <DIO_SetPinDirection>
	DIO_SetPinDirection(SPI_CH0_MOSI_PORT, SPI_CH0_MOSI_PIN, PIN_INPUT);
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	65 e0       	ldi	r22, 0x05	; 5
     3e2:	40 e0       	ldi	r20, 0x00	; 0
     3e4:	0e 94 ed 04 	call	0x9da	; 0x9da <DIO_SetPinDirection>
	DIO_SetPinDirection(SPI_CH0_SCK_PORT, SPI_CH0_SCK_PIN, PIN_INPUT);
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	67 e0       	ldi	r22, 0x07	; 7
     3ec:	40 e0       	ldi	r20, 0x00	; 0
     3ee:	0e 94 ed 04 	call	0x9da	; 0x9da <DIO_SetPinDirection>
	DIO_SetPinDirection(SPI_CH0_SS_PORT, SPI_CH0_SS_PIN, PIN_INPUT);
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	64 e0       	ldi	r22, 0x04	; 4
     3f6:	40 e0       	ldi	r20, 0x00	; 0
     3f8:	0e 94 ed 04 	call	0x9da	; 0x9da <DIO_SetPinDirection>
#endif/*MODE_MSRT_SLAVE*/
	return 0;
     3fc:	80 e0       	ldi	r24, 0x00	; 0
}
     3fe:	0f 90       	pop	r0
     400:	cf 91       	pop	r28
     402:	df 91       	pop	r29
     404:	08 95       	ret

00000406 <SPI_TransmitChar>:

uint8_t SPI_TransmitChar(uint8_t SpiNumber, uint8_t TxChar, uint8_t slave_CH) {
     406:	df 93       	push	r29
     408:	cf 93       	push	r28
     40a:	00 d0       	rcall	.+0      	; 0x40c <SPI_TransmitChar+0x6>
     40c:	0f 92       	push	r0
     40e:	cd b7       	in	r28, 0x3d	; 61
     410:	de b7       	in	r29, 0x3e	; 62
     412:	89 83       	std	Y+1, r24	; 0x01
     414:	6a 83       	std	Y+2, r22	; 0x02
     416:	4b 83       	std	Y+3, r20	; 0x03
		break;
		default:
		break;
	}
#else
	SPDR = TxChar;
     418:	ef e2       	ldi	r30, 0x2F	; 47
     41a:	f0 e0       	ldi	r31, 0x00	; 0
     41c:	8a 81       	ldd	r24, Y+2	; 0x02
     41e:	80 83       	st	Z, r24
	//trigger an external interrupt in master MCU
	while (!(SPSR & (1 << SPIF )))
     420:	ee e2       	ldi	r30, 0x2E	; 46
     422:	f0 e0       	ldi	r31, 0x00	; 0
     424:	80 81       	ld	r24, Z
     426:	88 23       	and	r24, r24
     428:	dc f7       	brge	.-10     	; 0x420 <SPI_TransmitChar+0x1a>
		;
#endif
	return 0;
     42a:	80 e0       	ldi	r24, 0x00	; 0
}
     42c:	0f 90       	pop	r0
     42e:	0f 90       	pop	r0
     430:	0f 90       	pop	r0
     432:	cf 91       	pop	r28
     434:	df 91       	pop	r29
     436:	08 95       	ret

00000438 <SPI_TransmitString>:
uint8_t SPI_TransmitString(uint8_t SpiNumber, ptr_uint8_t TxString,
		uint8_t slave_CH) {
     438:	df 93       	push	r29
     43a:	cf 93       	push	r28
     43c:	00 d0       	rcall	.+0      	; 0x43e <SPI_TransmitString+0x6>
     43e:	00 d0       	rcall	.+0      	; 0x440 <SPI_TransmitString+0x8>
     440:	0f 92       	push	r0
     442:	cd b7       	in	r28, 0x3d	; 61
     444:	de b7       	in	r29, 0x3e	; 62
     446:	8a 83       	std	Y+2, r24	; 0x02
     448:	7c 83       	std	Y+4, r23	; 0x04
     44a:	6b 83       	std	Y+3, r22	; 0x03
     44c:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t counter = 0;
     44e:	19 82       	std	Y+1, r1	; 0x01
		break;

	}
#else
	while (counter <= 255) {
		if ((*(TxString + counter)) == NULL_TERMINATOR) {
     450:	89 81       	ldd	r24, Y+1	; 0x01
     452:	28 2f       	mov	r18, r24
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	8b 81       	ldd	r24, Y+3	; 0x03
     458:	9c 81       	ldd	r25, Y+4	; 0x04
     45a:	fc 01       	movw	r30, r24
     45c:	e2 0f       	add	r30, r18
     45e:	f3 1f       	adc	r31, r19
     460:	80 81       	ld	r24, Z
     462:	88 23       	and	r24, r24
     464:	61 f4       	brne	.+24     	; 0x47e <__stack+0x1f>
			SPDR = NULL_TERMINATOR;
     466:	ef e2       	ldi	r30, 0x2F	; 47
     468:	f0 e0       	ldi	r31, 0x00	; 0
     46a:	10 82       	st	Z, r1
		//trigger an external interrupt in master MCU
		while (!(SPSR & (1 << SPIF )))
			;
	}
#endif
	return 0;
     46c:	80 e0       	ldi	r24, 0x00	; 0
}
     46e:	0f 90       	pop	r0
     470:	0f 90       	pop	r0
     472:	0f 90       	pop	r0
     474:	0f 90       	pop	r0
     476:	0f 90       	pop	r0
     478:	cf 91       	pop	r28
     47a:	df 91       	pop	r29
     47c:	08 95       	ret
	while (counter <= 255) {
		if ((*(TxString + counter)) == NULL_TERMINATOR) {
			SPDR = NULL_TERMINATOR;
			break;
		}
		SPDR = *(TxString + counter);
     47e:	af e2       	ldi	r26, 0x2F	; 47
     480:	b0 e0       	ldi	r27, 0x00	; 0
     482:	89 81       	ldd	r24, Y+1	; 0x01
     484:	28 2f       	mov	r18, r24
     486:	30 e0       	ldi	r19, 0x00	; 0
     488:	8b 81       	ldd	r24, Y+3	; 0x03
     48a:	9c 81       	ldd	r25, Y+4	; 0x04
     48c:	fc 01       	movw	r30, r24
     48e:	e2 0f       	add	r30, r18
     490:	f3 1f       	adc	r31, r19
     492:	80 81       	ld	r24, Z
     494:	8c 93       	st	X, r24
		counter++;
     496:	89 81       	ldd	r24, Y+1	; 0x01
     498:	8f 5f       	subi	r24, 0xFF	; 255
     49a:	89 83       	std	Y+1, r24	; 0x01
		//trigger an external interrupt in master MCU
		while (!(SPSR & (1 << SPIF )))
     49c:	ee e2       	ldi	r30, 0x2E	; 46
     49e:	f0 e0       	ldi	r31, 0x00	; 0
     4a0:	80 81       	ld	r24, Z
     4a2:	88 23       	and	r24, r24
     4a4:	dc f7       	brge	.-10     	; 0x49c <__stack+0x3d>
     4a6:	d4 cf       	rjmp	.-88     	; 0x450 <SPI_TransmitString+0x18>

000004a8 <SPI_ReceiveChar>:
	}
#endif
	return 0;
}

uint8_t SPI_ReceiveChar(uint8_t SpiNumber, ptr_uint8_t RxData, uint8_t slave_CH) {
     4a8:	df 93       	push	r29
     4aa:	cf 93       	push	r28
     4ac:	00 d0       	rcall	.+0      	; 0x4ae <SPI_ReceiveChar+0x6>
     4ae:	00 d0       	rcall	.+0      	; 0x4b0 <SPI_ReceiveChar+0x8>
     4b0:	cd b7       	in	r28, 0x3d	; 61
     4b2:	de b7       	in	r29, 0x3e	; 62
     4b4:	89 83       	std	Y+1, r24	; 0x01
     4b6:	7b 83       	std	Y+3, r23	; 0x03
     4b8:	6a 83       	std	Y+2, r22	; 0x02
     4ba:	4c 83       	std	Y+4, r20	; 0x04
		break;
		default:
		break;
	}
#else
	while (!(SPSR & (1 << SPIF )))
     4bc:	ee e2       	ldi	r30, 0x2E	; 46
     4be:	f0 e0       	ldi	r31, 0x00	; 0
     4c0:	80 81       	ld	r24, Z
     4c2:	88 23       	and	r24, r24
     4c4:	dc f7       	brge	.-10     	; 0x4bc <SPI_ReceiveChar+0x14>
		;
	*(RxData) = SPDR;
     4c6:	ef e2       	ldi	r30, 0x2F	; 47
     4c8:	f0 e0       	ldi	r31, 0x00	; 0
     4ca:	80 81       	ld	r24, Z
     4cc:	ea 81       	ldd	r30, Y+2	; 0x02
     4ce:	fb 81       	ldd	r31, Y+3	; 0x03
     4d0:	80 83       	st	Z, r24
#endif
	return 0;
     4d2:	80 e0       	ldi	r24, 0x00	; 0
}
     4d4:	0f 90       	pop	r0
     4d6:	0f 90       	pop	r0
     4d8:	0f 90       	pop	r0
     4da:	0f 90       	pop	r0
     4dc:	cf 91       	pop	r28
     4de:	df 91       	pop	r29
     4e0:	08 95       	ret

000004e2 <SPI_ReceiveString>:
uint8_t SPI_ReceiveString(uint8_t SpiNumber, ptr_uint8_t RxString,
		uint8_t slave_CH) {
     4e2:	df 93       	push	r29
     4e4:	cf 93       	push	r28
     4e6:	00 d0       	rcall	.+0      	; 0x4e8 <SPI_ReceiveString+0x6>
     4e8:	00 d0       	rcall	.+0      	; 0x4ea <SPI_ReceiveString+0x8>
     4ea:	0f 92       	push	r0
     4ec:	cd b7       	in	r28, 0x3d	; 61
     4ee:	de b7       	in	r29, 0x3e	; 62
     4f0:	8a 83       	std	Y+2, r24	; 0x02
     4f2:	7c 83       	std	Y+4, r23	; 0x04
     4f4:	6b 83       	std	Y+3, r22	; 0x03
     4f6:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t counter = 0;
     4f8:	19 82       	std	Y+1, r1	; 0x01
		default:
		break;
	}
#else
	while (1) {
		while ((Get_Bit(SPSR, SPIF)) != 1);
     4fa:	ee e2       	ldi	r30, 0x2E	; 46
     4fc:	f0 e0       	ldi	r31, 0x00	; 0
     4fe:	80 81       	ld	r24, Z
     500:	88 1f       	adc	r24, r24
     502:	88 27       	eor	r24, r24
     504:	88 1f       	adc	r24, r24
     506:	81 30       	cpi	r24, 0x01	; 1
     508:	c1 f7       	brne	.-16     	; 0x4fa <SPI_ReceiveString+0x18>
		*(RxString + counter) = SPDR;
     50a:	89 81       	ldd	r24, Y+1	; 0x01
     50c:	28 2f       	mov	r18, r24
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	8b 81       	ldd	r24, Y+3	; 0x03
     512:	9c 81       	ldd	r25, Y+4	; 0x04
     514:	dc 01       	movw	r26, r24
     516:	a2 0f       	add	r26, r18
     518:	b3 1f       	adc	r27, r19
     51a:	ef e2       	ldi	r30, 0x2F	; 47
     51c:	f0 e0       	ldi	r31, 0x00	; 0
     51e:	80 81       	ld	r24, Z
     520:	8c 93       	st	X, r24
		if ((*(RxString + counter)) == NULL_TERMINATOR) {
     522:	89 81       	ldd	r24, Y+1	; 0x01
     524:	28 2f       	mov	r18, r24
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	8b 81       	ldd	r24, Y+3	; 0x03
     52a:	9c 81       	ldd	r25, Y+4	; 0x04
     52c:	fc 01       	movw	r30, r24
     52e:	e2 0f       	add	r30, r18
     530:	f3 1f       	adc	r31, r19
     532:	80 81       	ld	r24, Z
     534:	88 23       	and	r24, r24
     536:	21 f0       	breq	.+8      	; 0x540 <SPI_ReceiveString+0x5e>
			break;
		}
		counter++;
     538:	89 81       	ldd	r24, Y+1	; 0x01
     53a:	8f 5f       	subi	r24, 0xFF	; 255
     53c:	89 83       	std	Y+1, r24	; 0x01
     53e:	dd cf       	rjmp	.-70     	; 0x4fa <SPI_ReceiveString+0x18>
	}
#endif
	return 0;
     540:	80 e0       	ldi	r24, 0x00	; 0
}
     542:	0f 90       	pop	r0
     544:	0f 90       	pop	r0
     546:	0f 90       	pop	r0
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
     54c:	cf 91       	pop	r28
     54e:	df 91       	pop	r29
     550:	08 95       	ret

00000552 <SPI_EnableInterrupt>:

uint8_t SPI_EnableInterrupt(uint8_t SpiNumber) {
     552:	df 93       	push	r29
     554:	cf 93       	push	r28
     556:	0f 92       	push	r0
     558:	cd b7       	in	r28, 0x3d	; 61
     55a:	de b7       	in	r29, 0x3e	; 62
     55c:	89 83       	std	Y+1, r24	; 0x01
	Set_Bit(SPCR, SPIE);
     55e:	ad e2       	ldi	r26, 0x2D	; 45
     560:	b0 e0       	ldi	r27, 0x00	; 0
     562:	ed e2       	ldi	r30, 0x2D	; 45
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	80 81       	ld	r24, Z
     568:	80 68       	ori	r24, 0x80	; 128
     56a:	8c 93       	st	X, r24
	return 0;
     56c:	80 e0       	ldi	r24, 0x00	; 0
}
     56e:	0f 90       	pop	r0
     570:	cf 91       	pop	r28
     572:	df 91       	pop	r29
     574:	08 95       	ret

00000576 <SPI_DisableInterrupt>:
uint8_t SPI_DisableInterrupt(uint8_t SpiNumber) {
     576:	df 93       	push	r29
     578:	cf 93       	push	r28
     57a:	0f 92       	push	r0
     57c:	cd b7       	in	r28, 0x3d	; 61
     57e:	de b7       	in	r29, 0x3e	; 62
     580:	89 83       	std	Y+1, r24	; 0x01
	Clr_Bit(SPCR, SPIE);
     582:	ad e2       	ldi	r26, 0x2D	; 45
     584:	b0 e0       	ldi	r27, 0x00	; 0
     586:	ed e2       	ldi	r30, 0x2D	; 45
     588:	f0 e0       	ldi	r31, 0x00	; 0
     58a:	80 81       	ld	r24, Z
     58c:	8f 77       	andi	r24, 0x7F	; 127
     58e:	8c 93       	st	X, r24
	return 0;
     590:	80 e0       	ldi	r24, 0x00	; 0
}
     592:	0f 90       	pop	r0
     594:	cf 91       	pop	r28
     596:	df 91       	pop	r29
     598:	08 95       	ret

0000059a <SPI_SetCallback>:

uint8_t SPI_SetCallback(uint8_t SpiNumber, Ptr_VoidFuncVoid_t Callback) {
     59a:	df 93       	push	r29
     59c:	cf 93       	push	r28
     59e:	00 d0       	rcall	.+0      	; 0x5a0 <SPI_SetCallback+0x6>
     5a0:	0f 92       	push	r0
     5a2:	cd b7       	in	r28, 0x3d	; 61
     5a4:	de b7       	in	r29, 0x3e	; 62
     5a6:	89 83       	std	Y+1, r24	; 0x01
     5a8:	7b 83       	std	Y+3, r23	; 0x03
     5aa:	6a 83       	std	Y+2, r22	; 0x02
	G_SPI_CALLBACK=Callback;
     5ac:	8a 81       	ldd	r24, Y+2	; 0x02
     5ae:	9b 81       	ldd	r25, Y+3	; 0x03
     5b0:	90 93 69 00 	sts	0x0069, r25
     5b4:	80 93 68 00 	sts	0x0068, r24
	return 0;
     5b8:	80 e0       	ldi	r24, 0x00	; 0
}
     5ba:	0f 90       	pop	r0
     5bc:	0f 90       	pop	r0
     5be:	0f 90       	pop	r0
     5c0:	cf 91       	pop	r28
     5c2:	df 91       	pop	r29
     5c4:	08 95       	ret

000005c6 <__vector_12>:

void __vector_12(void) __attribute__((signal)); // Serial Transfer Complete
void __vector_12(void) {
     5c6:	1f 92       	push	r1
     5c8:	0f 92       	push	r0
     5ca:	0f b6       	in	r0, 0x3f	; 63
     5cc:	0f 92       	push	r0
     5ce:	11 24       	eor	r1, r1
     5d0:	2f 93       	push	r18
     5d2:	3f 93       	push	r19
     5d4:	4f 93       	push	r20
     5d6:	5f 93       	push	r21
     5d8:	6f 93       	push	r22
     5da:	7f 93       	push	r23
     5dc:	8f 93       	push	r24
     5de:	9f 93       	push	r25
     5e0:	af 93       	push	r26
     5e2:	bf 93       	push	r27
     5e4:	ef 93       	push	r30
     5e6:	ff 93       	push	r31
     5e8:	df 93       	push	r29
     5ea:	cf 93       	push	r28
     5ec:	cd b7       	in	r28, 0x3d	; 61
     5ee:	de b7       	in	r29, 0x3e	; 62
	G_SPI_CALLBACK();
     5f0:	e0 91 68 00 	lds	r30, 0x0068
     5f4:	f0 91 69 00 	lds	r31, 0x0069
     5f8:	09 95       	icall
}
     5fa:	cf 91       	pop	r28
     5fc:	df 91       	pop	r29
     5fe:	ff 91       	pop	r31
     600:	ef 91       	pop	r30
     602:	bf 91       	pop	r27
     604:	af 91       	pop	r26
     606:	9f 91       	pop	r25
     608:	8f 91       	pop	r24
     60a:	7f 91       	pop	r23
     60c:	6f 91       	pop	r22
     60e:	5f 91       	pop	r21
     610:	4f 91       	pop	r20
     612:	3f 91       	pop	r19
     614:	2f 91       	pop	r18
     616:	0f 90       	pop	r0
     618:	0f be       	out	0x3f, r0	; 63
     61a:	0f 90       	pop	r0
     61c:	1f 90       	pop	r1
     61e:	18 95       	reti

00000620 <GI_EnableGI>:
 */
#include"globalInterruptReg.h"
#include"globalInterrupt.h"

void GI_EnableGI (void)
{
     620:	df 93       	push	r29
     622:	cf 93       	push	r28
     624:	cd b7       	in	r28, 0x3d	; 61
     626:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(SREG_REGISTER,I_BIT);
     628:	af e5       	ldi	r26, 0x5F	; 95
     62a:	b0 e0       	ldi	r27, 0x00	; 0
     62c:	ef e5       	ldi	r30, 0x5F	; 95
     62e:	f0 e0       	ldi	r31, 0x00	; 0
     630:	80 81       	ld	r24, Z
     632:	80 68       	ori	r24, 0x80	; 128
     634:	8c 93       	st	X, r24
}
     636:	cf 91       	pop	r28
     638:	df 91       	pop	r29
     63a:	08 95       	ret

0000063c <GI_DisableGI>:


void GI_DisableGI (void)
{
     63c:	df 93       	push	r29
     63e:	cf 93       	push	r28
     640:	cd b7       	in	r28, 0x3d	; 61
     642:	de b7       	in	r29, 0x3e	; 62
	Clr_Bit(SREG_REGISTER, I_BIT);
     644:	af e5       	ldi	r26, 0x5F	; 95
     646:	b0 e0       	ldi	r27, 0x00	; 0
     648:	ef e5       	ldi	r30, 0x5F	; 95
     64a:	f0 e0       	ldi	r31, 0x00	; 0
     64c:	80 81       	ld	r24, Z
     64e:	8f 77       	andi	r24, 0x7F	; 127
     650:	8c 93       	st	X, r24
}
     652:	cf 91       	pop	r28
     654:	df 91       	pop	r29
     656:	08 95       	ret

00000658 <EX_vdDisable>:
#include"externalInterruptReg.h"
#include"externalInterrupt.h"


void EX_vdDisable(uint8_t CopyInterrupt)
{
     658:	df 93       	push	r29
     65a:	cf 93       	push	r28
     65c:	00 d0       	rcall	.+0      	; 0x65e <EX_vdDisable+0x6>
     65e:	0f 92       	push	r0
     660:	cd b7       	in	r28, 0x3d	; 61
     662:	de b7       	in	r29, 0x3e	; 62
     664:	89 83       	std	Y+1, r24	; 0x01
	if(CopyInterrupt <= EX_INT2)
     666:	89 81       	ldd	r24, Y+1	; 0x01
     668:	83 30       	cpi	r24, 0x03	; 3
     66a:	50 f5       	brcc	.+84     	; 0x6c0 <EX_vdDisable+0x68>
	{
		switch (CopyInterrupt)
     66c:	89 81       	ldd	r24, Y+1	; 0x01
     66e:	28 2f       	mov	r18, r24
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	3b 83       	std	Y+3, r19	; 0x03
     674:	2a 83       	std	Y+2, r18	; 0x02
     676:	8a 81       	ldd	r24, Y+2	; 0x02
     678:	9b 81       	ldd	r25, Y+3	; 0x03
     67a:	81 30       	cpi	r24, 0x01	; 1
     67c:	91 05       	cpc	r25, r1
     67e:	89 f0       	breq	.+34     	; 0x6a2 <EX_vdDisable+0x4a>
     680:	2a 81       	ldd	r18, Y+2	; 0x02
     682:	3b 81       	ldd	r19, Y+3	; 0x03
     684:	22 30       	cpi	r18, 0x02	; 2
     686:	31 05       	cpc	r19, r1
     688:	a1 f0       	breq	.+40     	; 0x6b2 <EX_vdDisable+0x5a>
     68a:	8a 81       	ldd	r24, Y+2	; 0x02
     68c:	9b 81       	ldd	r25, Y+3	; 0x03
     68e:	00 97       	sbiw	r24, 0x00	; 0
     690:	b9 f4       	brne	.+46     	; 0x6c0 <EX_vdDisable+0x68>
		{
		case EX_INT0:
			Clr_Bit(GICR,6);
     692:	ab e5       	ldi	r26, 0x5B	; 91
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	eb e5       	ldi	r30, 0x5B	; 91
     698:	f0 e0       	ldi	r31, 0x00	; 0
     69a:	80 81       	ld	r24, Z
     69c:	8f 7b       	andi	r24, 0xBF	; 191
     69e:	8c 93       	st	X, r24
     6a0:	0f c0       	rjmp	.+30     	; 0x6c0 <EX_vdDisable+0x68>
			break;
		case EX_INT1:
			Clr_Bit(GICR,7);
     6a2:	ab e5       	ldi	r26, 0x5B	; 91
     6a4:	b0 e0       	ldi	r27, 0x00	; 0
     6a6:	eb e5       	ldi	r30, 0x5B	; 91
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	80 81       	ld	r24, Z
     6ac:	8f 77       	andi	r24, 0x7F	; 127
     6ae:	8c 93       	st	X, r24
     6b0:	07 c0       	rjmp	.+14     	; 0x6c0 <EX_vdDisable+0x68>
			break;
		case EX_INT2:
			Clr_Bit(GICR,5);
     6b2:	ab e5       	ldi	r26, 0x5B	; 91
     6b4:	b0 e0       	ldi	r27, 0x00	; 0
     6b6:	eb e5       	ldi	r30, 0x5B	; 91
     6b8:	f0 e0       	ldi	r31, 0x00	; 0
     6ba:	80 81       	ld	r24, Z
     6bc:	8f 7d       	andi	r24, 0xDF	; 223
     6be:	8c 93       	st	X, r24
			break;
		default:
			break;
		}
	}
}
     6c0:	0f 90       	pop	r0
     6c2:	0f 90       	pop	r0
     6c4:	0f 90       	pop	r0
     6c6:	cf 91       	pop	r28
     6c8:	df 91       	pop	r29
     6ca:	08 95       	ret

000006cc <EX_vdConfigInterrupt>:

void EX_vdConfigInterrupt(uint8_t CopyInterrupt , uint8_t CopyControlSense)
{
     6cc:	df 93       	push	r29
     6ce:	cf 93       	push	r28
     6d0:	cd b7       	in	r28, 0x3d	; 61
     6d2:	de b7       	in	r29, 0x3e	; 62
     6d4:	2a 97       	sbiw	r28, 0x0a	; 10
     6d6:	0f b6       	in	r0, 0x3f	; 63
     6d8:	f8 94       	cli
     6da:	de bf       	out	0x3e, r29	; 62
     6dc:	0f be       	out	0x3f, r0	; 63
     6de:	cd bf       	out	0x3d, r28	; 61
     6e0:	89 83       	std	Y+1, r24	; 0x01
     6e2:	6a 83       	std	Y+2, r22	; 0x02
	if(CopyInterrupt <= EX_INT2 && CopyControlSense <= EX_SENSE_LOGIACL_CHANGE)
     6e4:	89 81       	ldd	r24, Y+1	; 0x01
     6e6:	83 30       	cpi	r24, 0x03	; 3
     6e8:	08 f0       	brcs	.+2      	; 0x6ec <EX_vdConfigInterrupt+0x20>
     6ea:	03 c1       	rjmp	.+518    	; 0x8f2 <EX_vdConfigInterrupt+0x226>
     6ec:	8a 81       	ldd	r24, Y+2	; 0x02
     6ee:	84 30       	cpi	r24, 0x04	; 4
     6f0:	08 f0       	brcs	.+2      	; 0x6f4 <EX_vdConfigInterrupt+0x28>
     6f2:	ff c0       	rjmp	.+510    	; 0x8f2 <EX_vdConfigInterrupt+0x226>
	{
		switch (CopyInterrupt)
     6f4:	89 81       	ldd	r24, Y+1	; 0x01
     6f6:	28 2f       	mov	r18, r24
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	3a 87       	std	Y+10, r19	; 0x0a
     6fc:	29 87       	std	Y+9, r18	; 0x09
     6fe:	89 85       	ldd	r24, Y+9	; 0x09
     700:	9a 85       	ldd	r25, Y+10	; 0x0a
     702:	81 30       	cpi	r24, 0x01	; 1
     704:	91 05       	cpc	r25, r1
     706:	09 f4       	brne	.+2      	; 0x70a <EX_vdConfigInterrupt+0x3e>
     708:	6d c0       	rjmp	.+218    	; 0x7e4 <EX_vdConfigInterrupt+0x118>
     70a:	29 85       	ldd	r18, Y+9	; 0x09
     70c:	3a 85       	ldd	r19, Y+10	; 0x0a
     70e:	22 30       	cpi	r18, 0x02	; 2
     710:	31 05       	cpc	r19, r1
     712:	09 f4       	brne	.+2      	; 0x716 <EX_vdConfigInterrupt+0x4a>
     714:	c9 c0       	rjmp	.+402    	; 0x8a8 <EX_vdConfigInterrupt+0x1dc>
     716:	89 85       	ldd	r24, Y+9	; 0x09
     718:	9a 85       	ldd	r25, Y+10	; 0x0a
     71a:	00 97       	sbiw	r24, 0x00	; 0
     71c:	09 f0       	breq	.+2      	; 0x720 <EX_vdConfigInterrupt+0x54>
     71e:	e9 c0       	rjmp	.+466    	; 0x8f2 <EX_vdConfigInterrupt+0x226>
		{
			case EX_INT0:
				Set_Bit(GICR,6);
     720:	ab e5       	ldi	r26, 0x5B	; 91
     722:	b0 e0       	ldi	r27, 0x00	; 0
     724:	eb e5       	ldi	r30, 0x5B	; 91
     726:	f0 e0       	ldi	r31, 0x00	; 0
     728:	80 81       	ld	r24, Z
     72a:	80 64       	ori	r24, 0x40	; 64
     72c:	8c 93       	st	X, r24
				switch (CopyControlSense)
     72e:	8a 81       	ldd	r24, Y+2	; 0x02
     730:	28 2f       	mov	r18, r24
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	38 87       	std	Y+8, r19	; 0x08
     736:	2f 83       	std	Y+7, r18	; 0x07
     738:	8f 81       	ldd	r24, Y+7	; 0x07
     73a:	98 85       	ldd	r25, Y+8	; 0x08
     73c:	81 30       	cpi	r24, 0x01	; 1
     73e:	91 05       	cpc	r25, r1
     740:	21 f1       	breq	.+72     	; 0x78a <EX_vdConfigInterrupt+0xbe>
     742:	2f 81       	ldd	r18, Y+7	; 0x07
     744:	38 85       	ldd	r19, Y+8	; 0x08
     746:	22 30       	cpi	r18, 0x02	; 2
     748:	31 05       	cpc	r19, r1
     74a:	2c f4       	brge	.+10     	; 0x756 <EX_vdConfigInterrupt+0x8a>
     74c:	8f 81       	ldd	r24, Y+7	; 0x07
     74e:	98 85       	ldd	r25, Y+8	; 0x08
     750:	00 97       	sbiw	r24, 0x00	; 0
     752:	61 f0       	breq	.+24     	; 0x76c <EX_vdConfigInterrupt+0xa0>
     754:	ce c0       	rjmp	.+412    	; 0x8f2 <EX_vdConfigInterrupt+0x226>
     756:	2f 81       	ldd	r18, Y+7	; 0x07
     758:	38 85       	ldd	r19, Y+8	; 0x08
     75a:	22 30       	cpi	r18, 0x02	; 2
     75c:	31 05       	cpc	r19, r1
     75e:	21 f1       	breq	.+72     	; 0x7a8 <EX_vdConfigInterrupt+0xdc>
     760:	8f 81       	ldd	r24, Y+7	; 0x07
     762:	98 85       	ldd	r25, Y+8	; 0x08
     764:	83 30       	cpi	r24, 0x03	; 3
     766:	91 05       	cpc	r25, r1
     768:	71 f1       	breq	.+92     	; 0x7c6 <EX_vdConfigInterrupt+0xfa>
     76a:	c3 c0       	rjmp	.+390    	; 0x8f2 <EX_vdConfigInterrupt+0x226>
				{
					case EX_SENSE_FALLING_EDGE:
						Clr_Bit(MCUCR,0);
     76c:	a5 e5       	ldi	r26, 0x55	; 85
     76e:	b0 e0       	ldi	r27, 0x00	; 0
     770:	e5 e5       	ldi	r30, 0x55	; 85
     772:	f0 e0       	ldi	r31, 0x00	; 0
     774:	80 81       	ld	r24, Z
     776:	8e 7f       	andi	r24, 0xFE	; 254
     778:	8c 93       	st	X, r24
						Set_Bit(MCUCR,1);
     77a:	a5 e5       	ldi	r26, 0x55	; 85
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e5 e5       	ldi	r30, 0x55	; 85
     780:	f0 e0       	ldi	r31, 0x00	; 0
     782:	80 81       	ld	r24, Z
     784:	82 60       	ori	r24, 0x02	; 2
     786:	8c 93       	st	X, r24
     788:	b4 c0       	rjmp	.+360    	; 0x8f2 <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_RAISING_EDGE:
						Set_Bit(MCUCR,0);
     78a:	a5 e5       	ldi	r26, 0x55	; 85
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	e5 e5       	ldi	r30, 0x55	; 85
     790:	f0 e0       	ldi	r31, 0x00	; 0
     792:	80 81       	ld	r24, Z
     794:	81 60       	ori	r24, 0x01	; 1
     796:	8c 93       	st	X, r24
						Set_Bit(MCUCR,1);
     798:	a5 e5       	ldi	r26, 0x55	; 85
     79a:	b0 e0       	ldi	r27, 0x00	; 0
     79c:	e5 e5       	ldi	r30, 0x55	; 85
     79e:	f0 e0       	ldi	r31, 0x00	; 0
     7a0:	80 81       	ld	r24, Z
     7a2:	82 60       	ori	r24, 0x02	; 2
     7a4:	8c 93       	st	X, r24
     7a6:	a5 c0       	rjmp	.+330    	; 0x8f2 <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_LOW_LEVEL:
						Clr_Bit(MCUCR,0);
     7a8:	a5 e5       	ldi	r26, 0x55	; 85
     7aa:	b0 e0       	ldi	r27, 0x00	; 0
     7ac:	e5 e5       	ldi	r30, 0x55	; 85
     7ae:	f0 e0       	ldi	r31, 0x00	; 0
     7b0:	80 81       	ld	r24, Z
     7b2:	8e 7f       	andi	r24, 0xFE	; 254
     7b4:	8c 93       	st	X, r24
						Clr_Bit(MCUCR,1);
     7b6:	a5 e5       	ldi	r26, 0x55	; 85
     7b8:	b0 e0       	ldi	r27, 0x00	; 0
     7ba:	e5 e5       	ldi	r30, 0x55	; 85
     7bc:	f0 e0       	ldi	r31, 0x00	; 0
     7be:	80 81       	ld	r24, Z
     7c0:	8d 7f       	andi	r24, 0xFD	; 253
     7c2:	8c 93       	st	X, r24
     7c4:	96 c0       	rjmp	.+300    	; 0x8f2 <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_LOGIACL_CHANGE:
						Set_Bit(MCUCR,0);
     7c6:	a5 e5       	ldi	r26, 0x55	; 85
     7c8:	b0 e0       	ldi	r27, 0x00	; 0
     7ca:	e5 e5       	ldi	r30, 0x55	; 85
     7cc:	f0 e0       	ldi	r31, 0x00	; 0
     7ce:	80 81       	ld	r24, Z
     7d0:	81 60       	ori	r24, 0x01	; 1
     7d2:	8c 93       	st	X, r24
						Clr_Bit(MCUCR,1);
     7d4:	a5 e5       	ldi	r26, 0x55	; 85
     7d6:	b0 e0       	ldi	r27, 0x00	; 0
     7d8:	e5 e5       	ldi	r30, 0x55	; 85
     7da:	f0 e0       	ldi	r31, 0x00	; 0
     7dc:	80 81       	ld	r24, Z
     7de:	8d 7f       	andi	r24, 0xFD	; 253
     7e0:	8c 93       	st	X, r24
     7e2:	87 c0       	rjmp	.+270    	; 0x8f2 <EX_vdConfigInterrupt+0x226>
						break;
				}
				break;
			case EX_INT1:
				Set_Bit(GICR,7);
     7e4:	ab e5       	ldi	r26, 0x5B	; 91
     7e6:	b0 e0       	ldi	r27, 0x00	; 0
     7e8:	eb e5       	ldi	r30, 0x5B	; 91
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	80 81       	ld	r24, Z
     7ee:	80 68       	ori	r24, 0x80	; 128
     7f0:	8c 93       	st	X, r24
				switch (CopyControlSense)
     7f2:	8a 81       	ldd	r24, Y+2	; 0x02
     7f4:	28 2f       	mov	r18, r24
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	3e 83       	std	Y+6, r19	; 0x06
     7fa:	2d 83       	std	Y+5, r18	; 0x05
     7fc:	8d 81       	ldd	r24, Y+5	; 0x05
     7fe:	9e 81       	ldd	r25, Y+6	; 0x06
     800:	81 30       	cpi	r24, 0x01	; 1
     802:	91 05       	cpc	r25, r1
     804:	21 f1       	breq	.+72     	; 0x84e <EX_vdConfigInterrupt+0x182>
     806:	2d 81       	ldd	r18, Y+5	; 0x05
     808:	3e 81       	ldd	r19, Y+6	; 0x06
     80a:	22 30       	cpi	r18, 0x02	; 2
     80c:	31 05       	cpc	r19, r1
     80e:	2c f4       	brge	.+10     	; 0x81a <EX_vdConfigInterrupt+0x14e>
     810:	8d 81       	ldd	r24, Y+5	; 0x05
     812:	9e 81       	ldd	r25, Y+6	; 0x06
     814:	00 97       	sbiw	r24, 0x00	; 0
     816:	61 f0       	breq	.+24     	; 0x830 <EX_vdConfigInterrupt+0x164>
     818:	6c c0       	rjmp	.+216    	; 0x8f2 <EX_vdConfigInterrupt+0x226>
     81a:	2d 81       	ldd	r18, Y+5	; 0x05
     81c:	3e 81       	ldd	r19, Y+6	; 0x06
     81e:	22 30       	cpi	r18, 0x02	; 2
     820:	31 05       	cpc	r19, r1
     822:	21 f1       	breq	.+72     	; 0x86c <EX_vdConfigInterrupt+0x1a0>
     824:	8d 81       	ldd	r24, Y+5	; 0x05
     826:	9e 81       	ldd	r25, Y+6	; 0x06
     828:	83 30       	cpi	r24, 0x03	; 3
     82a:	91 05       	cpc	r25, r1
     82c:	71 f1       	breq	.+92     	; 0x88a <EX_vdConfigInterrupt+0x1be>
     82e:	61 c0       	rjmp	.+194    	; 0x8f2 <EX_vdConfigInterrupt+0x226>
				{
					case EX_SENSE_FALLING_EDGE:
						Clr_Bit(MCUCR,2);
     830:	a5 e5       	ldi	r26, 0x55	; 85
     832:	b0 e0       	ldi	r27, 0x00	; 0
     834:	e5 e5       	ldi	r30, 0x55	; 85
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	80 81       	ld	r24, Z
     83a:	8b 7f       	andi	r24, 0xFB	; 251
     83c:	8c 93       	st	X, r24
						Set_Bit(MCUCR,3);
     83e:	a5 e5       	ldi	r26, 0x55	; 85
     840:	b0 e0       	ldi	r27, 0x00	; 0
     842:	e5 e5       	ldi	r30, 0x55	; 85
     844:	f0 e0       	ldi	r31, 0x00	; 0
     846:	80 81       	ld	r24, Z
     848:	88 60       	ori	r24, 0x08	; 8
     84a:	8c 93       	st	X, r24
     84c:	52 c0       	rjmp	.+164    	; 0x8f2 <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_RAISING_EDGE:
						Set_Bit(MCUCR,2);
     84e:	a5 e5       	ldi	r26, 0x55	; 85
     850:	b0 e0       	ldi	r27, 0x00	; 0
     852:	e5 e5       	ldi	r30, 0x55	; 85
     854:	f0 e0       	ldi	r31, 0x00	; 0
     856:	80 81       	ld	r24, Z
     858:	84 60       	ori	r24, 0x04	; 4
     85a:	8c 93       	st	X, r24
						Set_Bit(MCUCR,3);
     85c:	a5 e5       	ldi	r26, 0x55	; 85
     85e:	b0 e0       	ldi	r27, 0x00	; 0
     860:	e5 e5       	ldi	r30, 0x55	; 85
     862:	f0 e0       	ldi	r31, 0x00	; 0
     864:	80 81       	ld	r24, Z
     866:	88 60       	ori	r24, 0x08	; 8
     868:	8c 93       	st	X, r24
     86a:	43 c0       	rjmp	.+134    	; 0x8f2 <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_LOW_LEVEL:
						Clr_Bit(MCUCR,2);
     86c:	a5 e5       	ldi	r26, 0x55	; 85
     86e:	b0 e0       	ldi	r27, 0x00	; 0
     870:	e5 e5       	ldi	r30, 0x55	; 85
     872:	f0 e0       	ldi	r31, 0x00	; 0
     874:	80 81       	ld	r24, Z
     876:	8b 7f       	andi	r24, 0xFB	; 251
     878:	8c 93       	st	X, r24
						Clr_Bit(MCUCR,3);
     87a:	a5 e5       	ldi	r26, 0x55	; 85
     87c:	b0 e0       	ldi	r27, 0x00	; 0
     87e:	e5 e5       	ldi	r30, 0x55	; 85
     880:	f0 e0       	ldi	r31, 0x00	; 0
     882:	80 81       	ld	r24, Z
     884:	87 7f       	andi	r24, 0xF7	; 247
     886:	8c 93       	st	X, r24
     888:	34 c0       	rjmp	.+104    	; 0x8f2 <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_LOGIACL_CHANGE:
						Set_Bit(MCUCR,2);
     88a:	a5 e5       	ldi	r26, 0x55	; 85
     88c:	b0 e0       	ldi	r27, 0x00	; 0
     88e:	e5 e5       	ldi	r30, 0x55	; 85
     890:	f0 e0       	ldi	r31, 0x00	; 0
     892:	80 81       	ld	r24, Z
     894:	84 60       	ori	r24, 0x04	; 4
     896:	8c 93       	st	X, r24
						Clr_Bit(MCUCR,3);
     898:	a5 e5       	ldi	r26, 0x55	; 85
     89a:	b0 e0       	ldi	r27, 0x00	; 0
     89c:	e5 e5       	ldi	r30, 0x55	; 85
     89e:	f0 e0       	ldi	r31, 0x00	; 0
     8a0:	80 81       	ld	r24, Z
     8a2:	87 7f       	andi	r24, 0xF7	; 247
     8a4:	8c 93       	st	X, r24
     8a6:	25 c0       	rjmp	.+74     	; 0x8f2 <EX_vdConfigInterrupt+0x226>
						break;
				}
				break;
			case EX_INT2:
				Set_Bit(GICR,5);
     8a8:	ab e5       	ldi	r26, 0x5B	; 91
     8aa:	b0 e0       	ldi	r27, 0x00	; 0
     8ac:	eb e5       	ldi	r30, 0x5B	; 91
     8ae:	f0 e0       	ldi	r31, 0x00	; 0
     8b0:	80 81       	ld	r24, Z
     8b2:	80 62       	ori	r24, 0x20	; 32
     8b4:	8c 93       	st	X, r24
				switch (CopyControlSense)
     8b6:	8a 81       	ldd	r24, Y+2	; 0x02
     8b8:	28 2f       	mov	r18, r24
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	3c 83       	std	Y+4, r19	; 0x04
     8be:	2b 83       	std	Y+3, r18	; 0x03
     8c0:	8b 81       	ldd	r24, Y+3	; 0x03
     8c2:	9c 81       	ldd	r25, Y+4	; 0x04
     8c4:	00 97       	sbiw	r24, 0x00	; 0
     8c6:	31 f0       	breq	.+12     	; 0x8d4 <EX_vdConfigInterrupt+0x208>
     8c8:	2b 81       	ldd	r18, Y+3	; 0x03
     8ca:	3c 81       	ldd	r19, Y+4	; 0x04
     8cc:	21 30       	cpi	r18, 0x01	; 1
     8ce:	31 05       	cpc	r19, r1
     8d0:	49 f0       	breq	.+18     	; 0x8e4 <EX_vdConfigInterrupt+0x218>
     8d2:	0f c0       	rjmp	.+30     	; 0x8f2 <EX_vdConfigInterrupt+0x226>
				{
					case EX_SENSE_FALLING_EDGE:
						Clr_Bit(MCUCSR,6);
     8d4:	a4 e5       	ldi	r26, 0x54	; 84
     8d6:	b0 e0       	ldi	r27, 0x00	; 0
     8d8:	e4 e5       	ldi	r30, 0x54	; 84
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	80 81       	ld	r24, Z
     8de:	8f 7b       	andi	r24, 0xBF	; 191
     8e0:	8c 93       	st	X, r24
     8e2:	07 c0       	rjmp	.+14     	; 0x8f2 <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_RAISING_EDGE:
						Set_Bit(MCUCSR,6);
     8e4:	a4 e5       	ldi	r26, 0x54	; 84
     8e6:	b0 e0       	ldi	r27, 0x00	; 0
     8e8:	e4 e5       	ldi	r30, 0x54	; 84
     8ea:	f0 e0       	ldi	r31, 0x00	; 0
     8ec:	80 81       	ld	r24, Z
     8ee:	80 64       	ori	r24, 0x40	; 64
     8f0:	8c 93       	st	X, r24
						break;
				}
				break;
		}
	}
}
     8f2:	2a 96       	adiw	r28, 0x0a	; 10
     8f4:	0f b6       	in	r0, 0x3f	; 63
     8f6:	f8 94       	cli
     8f8:	de bf       	out	0x3e, r29	; 62
     8fa:	0f be       	out	0x3f, r0	; 63
     8fc:	cd bf       	out	0x3d, r28	; 61
     8fe:	cf 91       	pop	r28
     900:	df 91       	pop	r29
     902:	08 95       	ret

00000904 <__vector_1>:
void __vector_1 (void)
{
     904:	1f 92       	push	r1
     906:	0f 92       	push	r0
     908:	0f b6       	in	r0, 0x3f	; 63
     90a:	0f 92       	push	r0
     90c:	11 24       	eor	r1, r1
     90e:	df 93       	push	r29
     910:	cf 93       	push	r28
     912:	cd b7       	in	r28, 0x3d	; 61
     914:	de b7       	in	r29, 0x3e	; 62

}
     916:	cf 91       	pop	r28
     918:	df 91       	pop	r29
     91a:	0f 90       	pop	r0
     91c:	0f be       	out	0x3f, r0	; 63
     91e:	0f 90       	pop	r0
     920:	1f 90       	pop	r1
     922:	18 95       	reti

00000924 <__vector_2>:
void __vector_2 (void)
{
     924:	1f 92       	push	r1
     926:	0f 92       	push	r0
     928:	0f b6       	in	r0, 0x3f	; 63
     92a:	0f 92       	push	r0
     92c:	11 24       	eor	r1, r1
     92e:	df 93       	push	r29
     930:	cf 93       	push	r28
     932:	cd b7       	in	r28, 0x3d	; 61
     934:	de b7       	in	r29, 0x3e	; 62

}
     936:	cf 91       	pop	r28
     938:	df 91       	pop	r29
     93a:	0f 90       	pop	r0
     93c:	0f be       	out	0x3f, r0	; 63
     93e:	0f 90       	pop	r0
     940:	1f 90       	pop	r1
     942:	18 95       	reti

00000944 <DIO_setPortDirection>:


/* APIs IMPLEMENTATION */

/* API to Set Port Direction */
DIO_ERROR_state_t DIO_setPortDirection(uint8_t PortID, uint8_t PortDirection) {
     944:	df 93       	push	r29
     946:	cf 93       	push	r28
     948:	00 d0       	rcall	.+0      	; 0x94a <DIO_setPortDirection+0x6>
     94a:	00 d0       	rcall	.+0      	; 0x94c <DIO_setPortDirection+0x8>
     94c:	0f 92       	push	r0
     94e:	cd b7       	in	r28, 0x3d	; 61
     950:	de b7       	in	r29, 0x3e	; 62
     952:	89 83       	std	Y+1, r24	; 0x01
     954:	6a 83       	std	Y+2, r22	; 0x02
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA )) {
     956:	89 81       	ldd	r24, Y+1	; 0x01
     958:	84 30       	cpi	r24, 0x04	; 4
     95a:	a0 f5       	brcc	.+104    	; 0x9c4 <DIO_setPortDirection+0x80>
		switch (PortID) {
     95c:	89 81       	ldd	r24, Y+1	; 0x01
     95e:	28 2f       	mov	r18, r24
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	3d 83       	std	Y+5, r19	; 0x05
     964:	2c 83       	std	Y+4, r18	; 0x04
     966:	8c 81       	ldd	r24, Y+4	; 0x04
     968:	9d 81       	ldd	r25, Y+5	; 0x05
     96a:	81 30       	cpi	r24, 0x01	; 1
     96c:	91 05       	cpc	r25, r1
     96e:	d1 f0       	breq	.+52     	; 0x9a4 <DIO_setPortDirection+0x60>
     970:	2c 81       	ldd	r18, Y+4	; 0x04
     972:	3d 81       	ldd	r19, Y+5	; 0x05
     974:	22 30       	cpi	r18, 0x02	; 2
     976:	31 05       	cpc	r19, r1
     978:	2c f4       	brge	.+10     	; 0x984 <DIO_setPortDirection+0x40>
     97a:	8c 81       	ldd	r24, Y+4	; 0x04
     97c:	9d 81       	ldd	r25, Y+5	; 0x05
     97e:	00 97       	sbiw	r24, 0x00	; 0
     980:	61 f0       	breq	.+24     	; 0x99a <DIO_setPortDirection+0x56>
     982:	1e c0       	rjmp	.+60     	; 0x9c0 <DIO_setPortDirection+0x7c>
     984:	2c 81       	ldd	r18, Y+4	; 0x04
     986:	3d 81       	ldd	r19, Y+5	; 0x05
     988:	22 30       	cpi	r18, 0x02	; 2
     98a:	31 05       	cpc	r19, r1
     98c:	81 f0       	breq	.+32     	; 0x9ae <DIO_setPortDirection+0x6a>
     98e:	8c 81       	ldd	r24, Y+4	; 0x04
     990:	9d 81       	ldd	r25, Y+5	; 0x05
     992:	83 30       	cpi	r24, 0x03	; 3
     994:	91 05       	cpc	r25, r1
     996:	81 f0       	breq	.+32     	; 0x9b8 <DIO_setPortDirection+0x74>
     998:	13 c0       	rjmp	.+38     	; 0x9c0 <DIO_setPortDirection+0x7c>
		case PORTA :
			PORTA_DIR = PortDirection;
     99a:	ea e3       	ldi	r30, 0x3A	; 58
     99c:	f0 e0       	ldi	r31, 0x00	; 0
     99e:	8a 81       	ldd	r24, Y+2	; 0x02
     9a0:	80 83       	st	Z, r24
     9a2:	0e c0       	rjmp	.+28     	; 0x9c0 <DIO_setPortDirection+0x7c>
			break;
		case PORTB :
			PORTB_DIR = PortDirection;
     9a4:	e7 e3       	ldi	r30, 0x37	; 55
     9a6:	f0 e0       	ldi	r31, 0x00	; 0
     9a8:	8a 81       	ldd	r24, Y+2	; 0x02
     9aa:	80 83       	st	Z, r24
     9ac:	09 c0       	rjmp	.+18     	; 0x9c0 <DIO_setPortDirection+0x7c>
			break;
		case PORTC :
			PORTC_DIR = PortDirection;
     9ae:	e4 e3       	ldi	r30, 0x34	; 52
     9b0:	f0 e0       	ldi	r31, 0x00	; 0
     9b2:	8a 81       	ldd	r24, Y+2	; 0x02
     9b4:	80 83       	st	Z, r24
     9b6:	04 c0       	rjmp	.+8      	; 0x9c0 <DIO_setPortDirection+0x7c>
			break;
		case PORTD :
			PORTD_DIR = PortDirection;
     9b8:	e1 e3       	ldi	r30, 0x31	; 49
     9ba:	f0 e0       	ldi	r31, 0x00	; 0
     9bc:	8a 81       	ldd	r24, Y+2	; 0x02
     9be:	80 83       	st	Z, r24
			break;
		} //END of SWITCH
		return E_DIO_SUCCESS ;
     9c0:	1b 82       	std	Y+3, r1	; 0x03
     9c2:	02 c0       	rjmp	.+4      	; 0x9c8 <DIO_setPortDirection+0x84>
	}	  //END of IF
	else {
		return E_DIO_INVALID_PORT_NUMBER ;
     9c4:	91 e0       	ldi	r25, 0x01	; 1
     9c6:	9b 83       	std	Y+3, r25	; 0x03
     9c8:	8b 81       	ldd	r24, Y+3	; 0x03

	}	  //END of ELSE
}	  //END DIO_setPortDirection
     9ca:	0f 90       	pop	r0
     9cc:	0f 90       	pop	r0
     9ce:	0f 90       	pop	r0
     9d0:	0f 90       	pop	r0
     9d2:	0f 90       	pop	r0
     9d4:	cf 91       	pop	r28
     9d6:	df 91       	pop	r29
     9d8:	08 95       	ret

000009da <DIO_SetPinDirection>:

/* API to Set Pin Direction */
DIO_ERROR_state_t DIO_SetPinDirection(uint8_t PortID, uint8_t PinNumber,
		uint8_t PinDirection) {
     9da:	df 93       	push	r29
     9dc:	cf 93       	push	r28
     9de:	cd b7       	in	r28, 0x3d	; 61
     9e0:	de b7       	in	r29, 0x3e	; 62
     9e2:	28 97       	sbiw	r28, 0x08	; 8
     9e4:	0f b6       	in	r0, 0x3f	; 63
     9e6:	f8 94       	cli
     9e8:	de bf       	out	0x3e, r29	; 62
     9ea:	0f be       	out	0x3f, r0	; 63
     9ec:	cd bf       	out	0x3d, r28	; 61
     9ee:	89 83       	std	Y+1, r24	; 0x01
     9f0:	6a 83       	std	Y+2, r22	; 0x02
     9f2:	4b 83       	std	Y+3, r20	; 0x03
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA ) && (PinNumber >= PIN0 )
     9f4:	89 81       	ldd	r24, Y+1	; 0x01
     9f6:	84 30       	cpi	r24, 0x04	; 4
     9f8:	08 f0       	brcs	.+2      	; 0x9fc <DIO_SetPinDirection+0x22>
     9fa:	f4 c0       	rjmp	.+488    	; 0xbe4 <DIO_SetPinDirection+0x20a>
     9fc:	8a 81       	ldd	r24, Y+2	; 0x02
     9fe:	88 30       	cpi	r24, 0x08	; 8
     a00:	08 f0       	brcs	.+2      	; 0xa04 <DIO_SetPinDirection+0x2a>
     a02:	f0 c0       	rjmp	.+480    	; 0xbe4 <DIO_SetPinDirection+0x20a>
			&& (PinNumber <= PIN7 )) {
		if (PinDirection == PIN_OUTPUT) {
     a04:	8b 81       	ldd	r24, Y+3	; 0x03
     a06:	81 30       	cpi	r24, 0x01	; 1
     a08:	09 f0       	breq	.+2      	; 0xa0c <DIO_SetPinDirection+0x32>
     a0a:	70 c0       	rjmp	.+224    	; 0xaec <DIO_SetPinDirection+0x112>
			switch (PortID) {
     a0c:	89 81       	ldd	r24, Y+1	; 0x01
     a0e:	28 2f       	mov	r18, r24
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	38 87       	std	Y+8, r19	; 0x08
     a14:	2f 83       	std	Y+7, r18	; 0x07
     a16:	8f 81       	ldd	r24, Y+7	; 0x07
     a18:	98 85       	ldd	r25, Y+8	; 0x08
     a1a:	81 30       	cpi	r24, 0x01	; 1
     a1c:	91 05       	cpc	r25, r1
     a1e:	49 f1       	breq	.+82     	; 0xa72 <DIO_SetPinDirection+0x98>
     a20:	2f 81       	ldd	r18, Y+7	; 0x07
     a22:	38 85       	ldd	r19, Y+8	; 0x08
     a24:	22 30       	cpi	r18, 0x02	; 2
     a26:	31 05       	cpc	r19, r1
     a28:	2c f4       	brge	.+10     	; 0xa34 <DIO_SetPinDirection+0x5a>
     a2a:	8f 81       	ldd	r24, Y+7	; 0x07
     a2c:	98 85       	ldd	r25, Y+8	; 0x08
     a2e:	00 97       	sbiw	r24, 0x00	; 0
     a30:	61 f0       	breq	.+24     	; 0xa4a <DIO_SetPinDirection+0x70>
     a32:	5a c0       	rjmp	.+180    	; 0xae8 <DIO_SetPinDirection+0x10e>
     a34:	2f 81       	ldd	r18, Y+7	; 0x07
     a36:	38 85       	ldd	r19, Y+8	; 0x08
     a38:	22 30       	cpi	r18, 0x02	; 2
     a3a:	31 05       	cpc	r19, r1
     a3c:	71 f1       	breq	.+92     	; 0xa9a <DIO_SetPinDirection+0xc0>
     a3e:	8f 81       	ldd	r24, Y+7	; 0x07
     a40:	98 85       	ldd	r25, Y+8	; 0x08
     a42:	83 30       	cpi	r24, 0x03	; 3
     a44:	91 05       	cpc	r25, r1
     a46:	e9 f1       	breq	.+122    	; 0xac2 <DIO_SetPinDirection+0xe8>
     a48:	4f c0       	rjmp	.+158    	; 0xae8 <DIO_SetPinDirection+0x10e>
			case PORTA :
				Set_Bit(PORTA_DIR, PinNumber);
     a4a:	aa e3       	ldi	r26, 0x3A	; 58
     a4c:	b0 e0       	ldi	r27, 0x00	; 0
     a4e:	ea e3       	ldi	r30, 0x3A	; 58
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	80 81       	ld	r24, Z
     a54:	48 2f       	mov	r20, r24
     a56:	8a 81       	ldd	r24, Y+2	; 0x02
     a58:	28 2f       	mov	r18, r24
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	02 2e       	mov	r0, r18
     a62:	02 c0       	rjmp	.+4      	; 0xa68 <DIO_SetPinDirection+0x8e>
     a64:	88 0f       	add	r24, r24
     a66:	99 1f       	adc	r25, r25
     a68:	0a 94       	dec	r0
     a6a:	e2 f7       	brpl	.-8      	; 0xa64 <DIO_SetPinDirection+0x8a>
     a6c:	84 2b       	or	r24, r20
     a6e:	8c 93       	st	X, r24
     a70:	3b c0       	rjmp	.+118    	; 0xae8 <DIO_SetPinDirection+0x10e>
				break;
			case PORTB :
				Set_Bit(PORTB_DIR, PinNumber);
     a72:	a7 e3       	ldi	r26, 0x37	; 55
     a74:	b0 e0       	ldi	r27, 0x00	; 0
     a76:	e7 e3       	ldi	r30, 0x37	; 55
     a78:	f0 e0       	ldi	r31, 0x00	; 0
     a7a:	80 81       	ld	r24, Z
     a7c:	48 2f       	mov	r20, r24
     a7e:	8a 81       	ldd	r24, Y+2	; 0x02
     a80:	28 2f       	mov	r18, r24
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	02 2e       	mov	r0, r18
     a8a:	02 c0       	rjmp	.+4      	; 0xa90 <DIO_SetPinDirection+0xb6>
     a8c:	88 0f       	add	r24, r24
     a8e:	99 1f       	adc	r25, r25
     a90:	0a 94       	dec	r0
     a92:	e2 f7       	brpl	.-8      	; 0xa8c <DIO_SetPinDirection+0xb2>
     a94:	84 2b       	or	r24, r20
     a96:	8c 93       	st	X, r24
     a98:	27 c0       	rjmp	.+78     	; 0xae8 <DIO_SetPinDirection+0x10e>
				break;
			case PORTC :
				Set_Bit(PORTC_DIR, PinNumber);
     a9a:	a4 e3       	ldi	r26, 0x34	; 52
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e4 e3       	ldi	r30, 0x34	; 52
     aa0:	f0 e0       	ldi	r31, 0x00	; 0
     aa2:	80 81       	ld	r24, Z
     aa4:	48 2f       	mov	r20, r24
     aa6:	8a 81       	ldd	r24, Y+2	; 0x02
     aa8:	28 2f       	mov	r18, r24
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	02 2e       	mov	r0, r18
     ab2:	02 c0       	rjmp	.+4      	; 0xab8 <DIO_SetPinDirection+0xde>
     ab4:	88 0f       	add	r24, r24
     ab6:	99 1f       	adc	r25, r25
     ab8:	0a 94       	dec	r0
     aba:	e2 f7       	brpl	.-8      	; 0xab4 <DIO_SetPinDirection+0xda>
     abc:	84 2b       	or	r24, r20
     abe:	8c 93       	st	X, r24
     ac0:	13 c0       	rjmp	.+38     	; 0xae8 <DIO_SetPinDirection+0x10e>
				break;
			case PORTD :
				Set_Bit(PORTD_DIR, PinNumber);
     ac2:	a1 e3       	ldi	r26, 0x31	; 49
     ac4:	b0 e0       	ldi	r27, 0x00	; 0
     ac6:	e1 e3       	ldi	r30, 0x31	; 49
     ac8:	f0 e0       	ldi	r31, 0x00	; 0
     aca:	80 81       	ld	r24, Z
     acc:	48 2f       	mov	r20, r24
     ace:	8a 81       	ldd	r24, Y+2	; 0x02
     ad0:	28 2f       	mov	r18, r24
     ad2:	30 e0       	ldi	r19, 0x00	; 0
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	02 2e       	mov	r0, r18
     ada:	02 c0       	rjmp	.+4      	; 0xae0 <DIO_SetPinDirection+0x106>
     adc:	88 0f       	add	r24, r24
     ade:	99 1f       	adc	r25, r25
     ae0:	0a 94       	dec	r0
     ae2:	e2 f7       	brpl	.-8      	; 0xadc <DIO_SetPinDirection+0x102>
     ae4:	84 2b       	or	r24, r20
     ae6:	8c 93       	st	X, r24
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
     ae8:	1e 82       	std	Y+6, r1	; 0x06
     aea:	7e c0       	rjmp	.+252    	; 0xbe8 <DIO_SetPinDirection+0x20e>
		} // END of IF that check for the direction if it is INPUT
		else if (PinDirection == PIN_INPUT) {
     aec:	8b 81       	ldd	r24, Y+3	; 0x03
     aee:	88 23       	and	r24, r24
     af0:	09 f0       	breq	.+2      	; 0xaf4 <DIO_SetPinDirection+0x11a>
     af2:	75 c0       	rjmp	.+234    	; 0xbde <DIO_SetPinDirection+0x204>
			switch (PortID) {
     af4:	89 81       	ldd	r24, Y+1	; 0x01
     af6:	28 2f       	mov	r18, r24
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	3d 83       	std	Y+5, r19	; 0x05
     afc:	2c 83       	std	Y+4, r18	; 0x04
     afe:	8c 81       	ldd	r24, Y+4	; 0x04
     b00:	9d 81       	ldd	r25, Y+5	; 0x05
     b02:	81 30       	cpi	r24, 0x01	; 1
     b04:	91 05       	cpc	r25, r1
     b06:	59 f1       	breq	.+86     	; 0xb5e <DIO_SetPinDirection+0x184>
     b08:	2c 81       	ldd	r18, Y+4	; 0x04
     b0a:	3d 81       	ldd	r19, Y+5	; 0x05
     b0c:	22 30       	cpi	r18, 0x02	; 2
     b0e:	31 05       	cpc	r19, r1
     b10:	2c f4       	brge	.+10     	; 0xb1c <DIO_SetPinDirection+0x142>
     b12:	8c 81       	ldd	r24, Y+4	; 0x04
     b14:	9d 81       	ldd	r25, Y+5	; 0x05
     b16:	00 97       	sbiw	r24, 0x00	; 0
     b18:	69 f0       	breq	.+26     	; 0xb34 <DIO_SetPinDirection+0x15a>
     b1a:	5f c0       	rjmp	.+190    	; 0xbda <DIO_SetPinDirection+0x200>
     b1c:	2c 81       	ldd	r18, Y+4	; 0x04
     b1e:	3d 81       	ldd	r19, Y+5	; 0x05
     b20:	22 30       	cpi	r18, 0x02	; 2
     b22:	31 05       	cpc	r19, r1
     b24:	89 f1       	breq	.+98     	; 0xb88 <DIO_SetPinDirection+0x1ae>
     b26:	8c 81       	ldd	r24, Y+4	; 0x04
     b28:	9d 81       	ldd	r25, Y+5	; 0x05
     b2a:	83 30       	cpi	r24, 0x03	; 3
     b2c:	91 05       	cpc	r25, r1
     b2e:	09 f4       	brne	.+2      	; 0xb32 <DIO_SetPinDirection+0x158>
     b30:	40 c0       	rjmp	.+128    	; 0xbb2 <DIO_SetPinDirection+0x1d8>
     b32:	53 c0       	rjmp	.+166    	; 0xbda <DIO_SetPinDirection+0x200>
			case PORTA :
				Clr_Bit(PORTA_DIR, PinNumber);
     b34:	aa e3       	ldi	r26, 0x3A	; 58
     b36:	b0 e0       	ldi	r27, 0x00	; 0
     b38:	ea e3       	ldi	r30, 0x3A	; 58
     b3a:	f0 e0       	ldi	r31, 0x00	; 0
     b3c:	80 81       	ld	r24, Z
     b3e:	48 2f       	mov	r20, r24
     b40:	8a 81       	ldd	r24, Y+2	; 0x02
     b42:	28 2f       	mov	r18, r24
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	02 2e       	mov	r0, r18
     b4c:	02 c0       	rjmp	.+4      	; 0xb52 <DIO_SetPinDirection+0x178>
     b4e:	88 0f       	add	r24, r24
     b50:	99 1f       	adc	r25, r25
     b52:	0a 94       	dec	r0
     b54:	e2 f7       	brpl	.-8      	; 0xb4e <DIO_SetPinDirection+0x174>
     b56:	80 95       	com	r24
     b58:	84 23       	and	r24, r20
     b5a:	8c 93       	st	X, r24
     b5c:	3e c0       	rjmp	.+124    	; 0xbda <DIO_SetPinDirection+0x200>
				break;
			case PORTB :
				Clr_Bit(PORTB_DIR, PinNumber);
     b5e:	a7 e3       	ldi	r26, 0x37	; 55
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	e7 e3       	ldi	r30, 0x37	; 55
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	80 81       	ld	r24, Z
     b68:	48 2f       	mov	r20, r24
     b6a:	8a 81       	ldd	r24, Y+2	; 0x02
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	02 2e       	mov	r0, r18
     b76:	02 c0       	rjmp	.+4      	; 0xb7c <DIO_SetPinDirection+0x1a2>
     b78:	88 0f       	add	r24, r24
     b7a:	99 1f       	adc	r25, r25
     b7c:	0a 94       	dec	r0
     b7e:	e2 f7       	brpl	.-8      	; 0xb78 <DIO_SetPinDirection+0x19e>
     b80:	80 95       	com	r24
     b82:	84 23       	and	r24, r20
     b84:	8c 93       	st	X, r24
     b86:	29 c0       	rjmp	.+82     	; 0xbda <DIO_SetPinDirection+0x200>
				break;
			case PORTC :
				Clr_Bit(PORTC_DIR, PinNumber);
     b88:	a4 e3       	ldi	r26, 0x34	; 52
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	e4 e3       	ldi	r30, 0x34	; 52
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 81       	ld	r24, Z
     b92:	48 2f       	mov	r20, r24
     b94:	8a 81       	ldd	r24, Y+2	; 0x02
     b96:	28 2f       	mov	r18, r24
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	02 2e       	mov	r0, r18
     ba0:	02 c0       	rjmp	.+4      	; 0xba6 <DIO_SetPinDirection+0x1cc>
     ba2:	88 0f       	add	r24, r24
     ba4:	99 1f       	adc	r25, r25
     ba6:	0a 94       	dec	r0
     ba8:	e2 f7       	brpl	.-8      	; 0xba2 <DIO_SetPinDirection+0x1c8>
     baa:	80 95       	com	r24
     bac:	84 23       	and	r24, r20
     bae:	8c 93       	st	X, r24
     bb0:	14 c0       	rjmp	.+40     	; 0xbda <DIO_SetPinDirection+0x200>
				break;
			case PORTD :
				Clr_Bit(PORTD_DIR, PinNumber);
     bb2:	a1 e3       	ldi	r26, 0x31	; 49
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	e1 e3       	ldi	r30, 0x31	; 49
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	48 2f       	mov	r20, r24
     bbe:	8a 81       	ldd	r24, Y+2	; 0x02
     bc0:	28 2f       	mov	r18, r24
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	02 2e       	mov	r0, r18
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <DIO_SetPinDirection+0x1f6>
     bcc:	88 0f       	add	r24, r24
     bce:	99 1f       	adc	r25, r25
     bd0:	0a 94       	dec	r0
     bd2:	e2 f7       	brpl	.-8      	; 0xbcc <DIO_SetPinDirection+0x1f2>
     bd4:	80 95       	com	r24
     bd6:	84 23       	and	r24, r20
     bd8:	8c 93       	st	X, r24
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
     bda:	1e 82       	std	Y+6, r1	; 0x06
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <DIO_SetPinDirection+0x20e>
		} // END of ELSE IF that check for the direction if it is INPUT
		else {
			return E_DIO_INVALID_PIN_DIRECTION ;
     bde:	92 e0       	ldi	r25, 0x02	; 2
     be0:	9e 83       	std	Y+6, r25	; 0x06
     be2:	02 c0       	rjmp	.+4      	; 0xbe8 <DIO_SetPinDirection+0x20e>
		} //END OF ELSE

	}	  //END of IF That checking the port and pin number

	else {
		return E_DIO_INVALID_PORT_NUMBER ;
     be4:	21 e0       	ldi	r18, 0x01	; 1
     be6:	2e 83       	std	Y+6, r18	; 0x06
     be8:	8e 81       	ldd	r24, Y+6	; 0x06

	}	  //END of ELSE
}	  //END DIO_setPinDirection
     bea:	28 96       	adiw	r28, 0x08	; 8
     bec:	0f b6       	in	r0, 0x3f	; 63
     bee:	f8 94       	cli
     bf0:	de bf       	out	0x3e, r29	; 62
     bf2:	0f be       	out	0x3f, r0	; 63
     bf4:	cd bf       	out	0x3d, r28	; 61
     bf6:	cf 91       	pop	r28
     bf8:	df 91       	pop	r29
     bfa:	08 95       	ret

00000bfc <DIO_writePort>:

/* API to Write Port  Value */
DIO_ERROR_state_t DIO_writePort(uint8_t PortID, uint8_t PortValue) {
     bfc:	df 93       	push	r29
     bfe:	cf 93       	push	r28
     c00:	00 d0       	rcall	.+0      	; 0xc02 <DIO_writePort+0x6>
     c02:	00 d0       	rcall	.+0      	; 0xc04 <DIO_writePort+0x8>
     c04:	0f 92       	push	r0
     c06:	cd b7       	in	r28, 0x3d	; 61
     c08:	de b7       	in	r29, 0x3e	; 62
     c0a:	89 83       	std	Y+1, r24	; 0x01
     c0c:	6a 83       	std	Y+2, r22	; 0x02
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA )) {
     c0e:	89 81       	ldd	r24, Y+1	; 0x01
     c10:	84 30       	cpi	r24, 0x04	; 4
     c12:	a0 f5       	brcc	.+104    	; 0xc7c <DIO_writePort+0x80>
		switch (PortID) {
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	28 2f       	mov	r18, r24
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	3d 83       	std	Y+5, r19	; 0x05
     c1c:	2c 83       	std	Y+4, r18	; 0x04
     c1e:	8c 81       	ldd	r24, Y+4	; 0x04
     c20:	9d 81       	ldd	r25, Y+5	; 0x05
     c22:	81 30       	cpi	r24, 0x01	; 1
     c24:	91 05       	cpc	r25, r1
     c26:	d1 f0       	breq	.+52     	; 0xc5c <DIO_writePort+0x60>
     c28:	2c 81       	ldd	r18, Y+4	; 0x04
     c2a:	3d 81       	ldd	r19, Y+5	; 0x05
     c2c:	22 30       	cpi	r18, 0x02	; 2
     c2e:	31 05       	cpc	r19, r1
     c30:	2c f4       	brge	.+10     	; 0xc3c <DIO_writePort+0x40>
     c32:	8c 81       	ldd	r24, Y+4	; 0x04
     c34:	9d 81       	ldd	r25, Y+5	; 0x05
     c36:	00 97       	sbiw	r24, 0x00	; 0
     c38:	61 f0       	breq	.+24     	; 0xc52 <DIO_writePort+0x56>
     c3a:	1e c0       	rjmp	.+60     	; 0xc78 <DIO_writePort+0x7c>
     c3c:	2c 81       	ldd	r18, Y+4	; 0x04
     c3e:	3d 81       	ldd	r19, Y+5	; 0x05
     c40:	22 30       	cpi	r18, 0x02	; 2
     c42:	31 05       	cpc	r19, r1
     c44:	81 f0       	breq	.+32     	; 0xc66 <DIO_writePort+0x6a>
     c46:	8c 81       	ldd	r24, Y+4	; 0x04
     c48:	9d 81       	ldd	r25, Y+5	; 0x05
     c4a:	83 30       	cpi	r24, 0x03	; 3
     c4c:	91 05       	cpc	r25, r1
     c4e:	81 f0       	breq	.+32     	; 0xc70 <DIO_writePort+0x74>
     c50:	13 c0       	rjmp	.+38     	; 0xc78 <DIO_writePort+0x7c>
		case PORTA :
			PORTA_DATA = PortValue;
     c52:	eb e3       	ldi	r30, 0x3B	; 59
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	8a 81       	ldd	r24, Y+2	; 0x02
     c58:	80 83       	st	Z, r24
     c5a:	0e c0       	rjmp	.+28     	; 0xc78 <DIO_writePort+0x7c>
			break;
		case PORTB :
			PORTB_DATA = PortValue;
     c5c:	e8 e3       	ldi	r30, 0x38	; 56
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	8a 81       	ldd	r24, Y+2	; 0x02
     c62:	80 83       	st	Z, r24
     c64:	09 c0       	rjmp	.+18     	; 0xc78 <DIO_writePort+0x7c>
			break;
		case PORTC :
			PORTC_DATA = PortValue;
     c66:	e5 e3       	ldi	r30, 0x35	; 53
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	8a 81       	ldd	r24, Y+2	; 0x02
     c6c:	80 83       	st	Z, r24
     c6e:	04 c0       	rjmp	.+8      	; 0xc78 <DIO_writePort+0x7c>
			break;
		case PORTD :
			PORTD_DATA = PortValue;
     c70:	e2 e3       	ldi	r30, 0x32	; 50
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	8a 81       	ldd	r24, Y+2	; 0x02
     c76:	80 83       	st	Z, r24
			break;

		} //END of SWITCH
		return E_DIO_SUCCESS ;
     c78:	1b 82       	std	Y+3, r1	; 0x03
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <DIO_writePort+0x84>
	}	  //END of IF
	else {
		return E_DIO_INVALID_PORT_NUMBER ;
     c7c:	91 e0       	ldi	r25, 0x01	; 1
     c7e:	9b 83       	std	Y+3, r25	; 0x03
     c80:	8b 81       	ldd	r24, Y+3	; 0x03

	}	  //END of ELSE
}	  //END DIO_writePortValue
     c82:	0f 90       	pop	r0
     c84:	0f 90       	pop	r0
     c86:	0f 90       	pop	r0
     c88:	0f 90       	pop	r0
     c8a:	0f 90       	pop	r0
     c8c:	cf 91       	pop	r28
     c8e:	df 91       	pop	r29
     c90:	08 95       	ret

00000c92 <DIO_WritePin>:

/* API to Write Pin  Value */
DIO_ERROR_state_t DIO_WritePin(uint8_t PortID, uint8_t PinNumber,
		uint8_t PinDirection) {
     c92:	df 93       	push	r29
     c94:	cf 93       	push	r28
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
     c9a:	28 97       	sbiw	r28, 0x08	; 8
     c9c:	0f b6       	in	r0, 0x3f	; 63
     c9e:	f8 94       	cli
     ca0:	de bf       	out	0x3e, r29	; 62
     ca2:	0f be       	out	0x3f, r0	; 63
     ca4:	cd bf       	out	0x3d, r28	; 61
     ca6:	89 83       	std	Y+1, r24	; 0x01
     ca8:	6a 83       	std	Y+2, r22	; 0x02
     caa:	4b 83       	std	Y+3, r20	; 0x03
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA ) && (PinNumber >= PIN0 )
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	84 30       	cpi	r24, 0x04	; 4
     cb0:	08 f0       	brcs	.+2      	; 0xcb4 <DIO_WritePin+0x22>
     cb2:	f4 c0       	rjmp	.+488    	; 0xe9c <DIO_WritePin+0x20a>
     cb4:	8a 81       	ldd	r24, Y+2	; 0x02
     cb6:	88 30       	cpi	r24, 0x08	; 8
     cb8:	08 f0       	brcs	.+2      	; 0xcbc <DIO_WritePin+0x2a>
     cba:	f0 c0       	rjmp	.+480    	; 0xe9c <DIO_WritePin+0x20a>
			&& (PinNumber <= PIN7 )) {
		if (PinDirection == PIN_HIGH) {
     cbc:	8b 81       	ldd	r24, Y+3	; 0x03
     cbe:	81 30       	cpi	r24, 0x01	; 1
     cc0:	09 f0       	breq	.+2      	; 0xcc4 <DIO_WritePin+0x32>
     cc2:	70 c0       	rjmp	.+224    	; 0xda4 <DIO_WritePin+0x112>
			switch (PortID) {
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	38 87       	std	Y+8, r19	; 0x08
     ccc:	2f 83       	std	Y+7, r18	; 0x07
     cce:	8f 81       	ldd	r24, Y+7	; 0x07
     cd0:	98 85       	ldd	r25, Y+8	; 0x08
     cd2:	81 30       	cpi	r24, 0x01	; 1
     cd4:	91 05       	cpc	r25, r1
     cd6:	49 f1       	breq	.+82     	; 0xd2a <DIO_WritePin+0x98>
     cd8:	2f 81       	ldd	r18, Y+7	; 0x07
     cda:	38 85       	ldd	r19, Y+8	; 0x08
     cdc:	22 30       	cpi	r18, 0x02	; 2
     cde:	31 05       	cpc	r19, r1
     ce0:	2c f4       	brge	.+10     	; 0xcec <DIO_WritePin+0x5a>
     ce2:	8f 81       	ldd	r24, Y+7	; 0x07
     ce4:	98 85       	ldd	r25, Y+8	; 0x08
     ce6:	00 97       	sbiw	r24, 0x00	; 0
     ce8:	61 f0       	breq	.+24     	; 0xd02 <DIO_WritePin+0x70>
     cea:	5a c0       	rjmp	.+180    	; 0xda0 <DIO_WritePin+0x10e>
     cec:	2f 81       	ldd	r18, Y+7	; 0x07
     cee:	38 85       	ldd	r19, Y+8	; 0x08
     cf0:	22 30       	cpi	r18, 0x02	; 2
     cf2:	31 05       	cpc	r19, r1
     cf4:	71 f1       	breq	.+92     	; 0xd52 <DIO_WritePin+0xc0>
     cf6:	8f 81       	ldd	r24, Y+7	; 0x07
     cf8:	98 85       	ldd	r25, Y+8	; 0x08
     cfa:	83 30       	cpi	r24, 0x03	; 3
     cfc:	91 05       	cpc	r25, r1
     cfe:	e9 f1       	breq	.+122    	; 0xd7a <DIO_WritePin+0xe8>
     d00:	4f c0       	rjmp	.+158    	; 0xda0 <DIO_WritePin+0x10e>
			case PORTA :
				Set_Bit(PORTA_DATA, PinNumber);
     d02:	ab e3       	ldi	r26, 0x3B	; 59
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	eb e3       	ldi	r30, 0x3B	; 59
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	48 2f       	mov	r20, r24
     d0e:	8a 81       	ldd	r24, Y+2	; 0x02
     d10:	28 2f       	mov	r18, r24
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	02 2e       	mov	r0, r18
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <DIO_WritePin+0x8e>
     d1c:	88 0f       	add	r24, r24
     d1e:	99 1f       	adc	r25, r25
     d20:	0a 94       	dec	r0
     d22:	e2 f7       	brpl	.-8      	; 0xd1c <DIO_WritePin+0x8a>
     d24:	84 2b       	or	r24, r20
     d26:	8c 93       	st	X, r24
     d28:	3b c0       	rjmp	.+118    	; 0xda0 <DIO_WritePin+0x10e>
				break;
			case PORTB :
				Set_Bit(PORTB_DATA, PinNumber);
     d2a:	a8 e3       	ldi	r26, 0x38	; 56
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e8 e3       	ldi	r30, 0x38	; 56
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	48 2f       	mov	r20, r24
     d36:	8a 81       	ldd	r24, Y+2	; 0x02
     d38:	28 2f       	mov	r18, r24
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	02 2e       	mov	r0, r18
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <DIO_WritePin+0xb6>
     d44:	88 0f       	add	r24, r24
     d46:	99 1f       	adc	r25, r25
     d48:	0a 94       	dec	r0
     d4a:	e2 f7       	brpl	.-8      	; 0xd44 <DIO_WritePin+0xb2>
     d4c:	84 2b       	or	r24, r20
     d4e:	8c 93       	st	X, r24
     d50:	27 c0       	rjmp	.+78     	; 0xda0 <DIO_WritePin+0x10e>
				break;
			case PORTC :
				Set_Bit(PORTC_DATA, PinNumber);
     d52:	a5 e3       	ldi	r26, 0x35	; 53
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	e5 e3       	ldi	r30, 0x35	; 53
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	48 2f       	mov	r20, r24
     d5e:	8a 81       	ldd	r24, Y+2	; 0x02
     d60:	28 2f       	mov	r18, r24
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	02 2e       	mov	r0, r18
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <DIO_WritePin+0xde>
     d6c:	88 0f       	add	r24, r24
     d6e:	99 1f       	adc	r25, r25
     d70:	0a 94       	dec	r0
     d72:	e2 f7       	brpl	.-8      	; 0xd6c <DIO_WritePin+0xda>
     d74:	84 2b       	or	r24, r20
     d76:	8c 93       	st	X, r24
     d78:	13 c0       	rjmp	.+38     	; 0xda0 <DIO_WritePin+0x10e>
				break;
			case PORTD :
				Set_Bit(PORTD_DATA, PinNumber);
     d7a:	a2 e3       	ldi	r26, 0x32	; 50
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	e2 e3       	ldi	r30, 0x32	; 50
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	48 2f       	mov	r20, r24
     d86:	8a 81       	ldd	r24, Y+2	; 0x02
     d88:	28 2f       	mov	r18, r24
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	02 2e       	mov	r0, r18
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <DIO_WritePin+0x106>
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	0a 94       	dec	r0
     d9a:	e2 f7       	brpl	.-8      	; 0xd94 <DIO_WritePin+0x102>
     d9c:	84 2b       	or	r24, r20
     d9e:	8c 93       	st	X, r24
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
     da0:	1e 82       	std	Y+6, r1	; 0x06
     da2:	7e c0       	rjmp	.+252    	; 0xea0 <DIO_WritePin+0x20e>
		} // END of IF that check for the direction if it is INPUT
		else if (PinDirection == PIN_LOW) {
     da4:	8b 81       	ldd	r24, Y+3	; 0x03
     da6:	88 23       	and	r24, r24
     da8:	09 f0       	breq	.+2      	; 0xdac <DIO_WritePin+0x11a>
     daa:	75 c0       	rjmp	.+234    	; 0xe96 <DIO_WritePin+0x204>
			switch (PortID) {
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	28 2f       	mov	r18, r24
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	3d 83       	std	Y+5, r19	; 0x05
     db4:	2c 83       	std	Y+4, r18	; 0x04
     db6:	8c 81       	ldd	r24, Y+4	; 0x04
     db8:	9d 81       	ldd	r25, Y+5	; 0x05
     dba:	81 30       	cpi	r24, 0x01	; 1
     dbc:	91 05       	cpc	r25, r1
     dbe:	59 f1       	breq	.+86     	; 0xe16 <DIO_WritePin+0x184>
     dc0:	2c 81       	ldd	r18, Y+4	; 0x04
     dc2:	3d 81       	ldd	r19, Y+5	; 0x05
     dc4:	22 30       	cpi	r18, 0x02	; 2
     dc6:	31 05       	cpc	r19, r1
     dc8:	2c f4       	brge	.+10     	; 0xdd4 <DIO_WritePin+0x142>
     dca:	8c 81       	ldd	r24, Y+4	; 0x04
     dcc:	9d 81       	ldd	r25, Y+5	; 0x05
     dce:	00 97       	sbiw	r24, 0x00	; 0
     dd0:	69 f0       	breq	.+26     	; 0xdec <DIO_WritePin+0x15a>
     dd2:	5f c0       	rjmp	.+190    	; 0xe92 <DIO_WritePin+0x200>
     dd4:	2c 81       	ldd	r18, Y+4	; 0x04
     dd6:	3d 81       	ldd	r19, Y+5	; 0x05
     dd8:	22 30       	cpi	r18, 0x02	; 2
     dda:	31 05       	cpc	r19, r1
     ddc:	89 f1       	breq	.+98     	; 0xe40 <DIO_WritePin+0x1ae>
     dde:	8c 81       	ldd	r24, Y+4	; 0x04
     de0:	9d 81       	ldd	r25, Y+5	; 0x05
     de2:	83 30       	cpi	r24, 0x03	; 3
     de4:	91 05       	cpc	r25, r1
     de6:	09 f4       	brne	.+2      	; 0xdea <DIO_WritePin+0x158>
     de8:	40 c0       	rjmp	.+128    	; 0xe6a <DIO_WritePin+0x1d8>
     dea:	53 c0       	rjmp	.+166    	; 0xe92 <DIO_WritePin+0x200>
			case PORTA :
				Clr_Bit(PORTA_DATA, PinNumber);
     dec:	ab e3       	ldi	r26, 0x3B	; 59
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	eb e3       	ldi	r30, 0x3B	; 59
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	48 2f       	mov	r20, r24
     df8:	8a 81       	ldd	r24, Y+2	; 0x02
     dfa:	28 2f       	mov	r18, r24
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	02 2e       	mov	r0, r18
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <DIO_WritePin+0x178>
     e06:	88 0f       	add	r24, r24
     e08:	99 1f       	adc	r25, r25
     e0a:	0a 94       	dec	r0
     e0c:	e2 f7       	brpl	.-8      	; 0xe06 <DIO_WritePin+0x174>
     e0e:	80 95       	com	r24
     e10:	84 23       	and	r24, r20
     e12:	8c 93       	st	X, r24
     e14:	3e c0       	rjmp	.+124    	; 0xe92 <DIO_WritePin+0x200>
				break;
			case PORTB :
				Clr_Bit(PORTB_DATA, PinNumber);
     e16:	a8 e3       	ldi	r26, 0x38	; 56
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	e8 e3       	ldi	r30, 0x38	; 56
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	48 2f       	mov	r20, r24
     e22:	8a 81       	ldd	r24, Y+2	; 0x02
     e24:	28 2f       	mov	r18, r24
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	02 2e       	mov	r0, r18
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <DIO_WritePin+0x1a2>
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	0a 94       	dec	r0
     e36:	e2 f7       	brpl	.-8      	; 0xe30 <DIO_WritePin+0x19e>
     e38:	80 95       	com	r24
     e3a:	84 23       	and	r24, r20
     e3c:	8c 93       	st	X, r24
     e3e:	29 c0       	rjmp	.+82     	; 0xe92 <DIO_WritePin+0x200>
				break;
			case PORTC :
				Clr_Bit(PORTC_DATA, PinNumber);
     e40:	a5 e3       	ldi	r26, 0x35	; 53
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	e5 e3       	ldi	r30, 0x35	; 53
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	48 2f       	mov	r20, r24
     e4c:	8a 81       	ldd	r24, Y+2	; 0x02
     e4e:	28 2f       	mov	r18, r24
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	02 2e       	mov	r0, r18
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <DIO_WritePin+0x1cc>
     e5a:	88 0f       	add	r24, r24
     e5c:	99 1f       	adc	r25, r25
     e5e:	0a 94       	dec	r0
     e60:	e2 f7       	brpl	.-8      	; 0xe5a <DIO_WritePin+0x1c8>
     e62:	80 95       	com	r24
     e64:	84 23       	and	r24, r20
     e66:	8c 93       	st	X, r24
     e68:	14 c0       	rjmp	.+40     	; 0xe92 <DIO_WritePin+0x200>
				break;
			case PORTD :
				Clr_Bit(PORTD_DATA, PinNumber);
     e6a:	a2 e3       	ldi	r26, 0x32	; 50
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	e2 e3       	ldi	r30, 0x32	; 50
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	48 2f       	mov	r20, r24
     e76:	8a 81       	ldd	r24, Y+2	; 0x02
     e78:	28 2f       	mov	r18, r24
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	02 2e       	mov	r0, r18
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <DIO_WritePin+0x1f6>
     e84:	88 0f       	add	r24, r24
     e86:	99 1f       	adc	r25, r25
     e88:	0a 94       	dec	r0
     e8a:	e2 f7       	brpl	.-8      	; 0xe84 <DIO_WritePin+0x1f2>
     e8c:	80 95       	com	r24
     e8e:	84 23       	and	r24, r20
     e90:	8c 93       	st	X, r24
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
     e92:	1e 82       	std	Y+6, r1	; 0x06
     e94:	05 c0       	rjmp	.+10     	; 0xea0 <DIO_WritePin+0x20e>
		} // END of ELSE IF that check for the direction if it is INPUT
		else {
			return E_DIO_INVALID_PIN_DIRECTION ;
     e96:	92 e0       	ldi	r25, 0x02	; 2
     e98:	9e 83       	std	Y+6, r25	; 0x06
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <DIO_WritePin+0x20e>
		} //END OF ELSE

	}	  //END of IF That checking the port and pin number

	else {
		return E_DIO_INVALID_PORT_NUMBER ;
     e9c:	21 e0       	ldi	r18, 0x01	; 1
     e9e:	2e 83       	std	Y+6, r18	; 0x06
     ea0:	8e 81       	ldd	r24, Y+6	; 0x06

	}	  //END of ELSE
}	  //END of DIO_writePinValue
     ea2:	28 96       	adiw	r28, 0x08	; 8
     ea4:	0f b6       	in	r0, 0x3f	; 63
     ea6:	f8 94       	cli
     ea8:	de bf       	out	0x3e, r29	; 62
     eaa:	0f be       	out	0x3f, r0	; 63
     eac:	cd bf       	out	0x3d, r28	; 61
     eae:	cf 91       	pop	r28
     eb0:	df 91       	pop	r29
     eb2:	08 95       	ret

00000eb4 <DIO_ReadPort>:

/* API to Read Port  Value */
DIO_ERROR_state_t DIO_ReadPort(uint8_t PortID, uint8_t* PortState) {
     eb4:	df 93       	push	r29
     eb6:	cf 93       	push	r28
     eb8:	00 d0       	rcall	.+0      	; 0xeba <DIO_ReadPort+0x6>
     eba:	00 d0       	rcall	.+0      	; 0xebc <DIO_ReadPort+0x8>
     ebc:	00 d0       	rcall	.+0      	; 0xebe <DIO_ReadPort+0xa>
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
     ec2:	89 83       	std	Y+1, r24	; 0x01
     ec4:	7b 83       	std	Y+3, r23	; 0x03
     ec6:	6a 83       	std	Y+2, r22	; 0x02
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA )) {
     ec8:	89 81       	ldd	r24, Y+1	; 0x01
     eca:	84 30       	cpi	r24, 0x04	; 4
     ecc:	e0 f5       	brcc	.+120    	; 0xf46 <DIO_ReadPort+0x92>
		switch (PortID) {
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	3e 83       	std	Y+6, r19	; 0x06
     ed6:	2d 83       	std	Y+5, r18	; 0x05
     ed8:	8d 81       	ldd	r24, Y+5	; 0x05
     eda:	9e 81       	ldd	r25, Y+6	; 0x06
     edc:	81 30       	cpi	r24, 0x01	; 1
     ede:	91 05       	cpc	r25, r1
     ee0:	e1 f0       	breq	.+56     	; 0xf1a <DIO_ReadPort+0x66>
     ee2:	2d 81       	ldd	r18, Y+5	; 0x05
     ee4:	3e 81       	ldd	r19, Y+6	; 0x06
     ee6:	22 30       	cpi	r18, 0x02	; 2
     ee8:	31 05       	cpc	r19, r1
     eea:	2c f4       	brge	.+10     	; 0xef6 <DIO_ReadPort+0x42>
     eec:	8d 81       	ldd	r24, Y+5	; 0x05
     eee:	9e 81       	ldd	r25, Y+6	; 0x06
     ef0:	00 97       	sbiw	r24, 0x00	; 0
     ef2:	61 f0       	breq	.+24     	; 0xf0c <DIO_ReadPort+0x58>
     ef4:	26 c0       	rjmp	.+76     	; 0xf42 <DIO_ReadPort+0x8e>
     ef6:	2d 81       	ldd	r18, Y+5	; 0x05
     ef8:	3e 81       	ldd	r19, Y+6	; 0x06
     efa:	22 30       	cpi	r18, 0x02	; 2
     efc:	31 05       	cpc	r19, r1
     efe:	a1 f0       	breq	.+40     	; 0xf28 <DIO_ReadPort+0x74>
     f00:	8d 81       	ldd	r24, Y+5	; 0x05
     f02:	9e 81       	ldd	r25, Y+6	; 0x06
     f04:	83 30       	cpi	r24, 0x03	; 3
     f06:	91 05       	cpc	r25, r1
     f08:	b1 f0       	breq	.+44     	; 0xf36 <DIO_ReadPort+0x82>
     f0a:	1b c0       	rjmp	.+54     	; 0xf42 <DIO_ReadPort+0x8e>
		case PORTA :
			*(PortState) = PORTA_STAT;
     f0c:	e9 e3       	ldi	r30, 0x39	; 57
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	ea 81       	ldd	r30, Y+2	; 0x02
     f14:	fb 81       	ldd	r31, Y+3	; 0x03
     f16:	80 83       	st	Z, r24
     f18:	14 c0       	rjmp	.+40     	; 0xf42 <DIO_ReadPort+0x8e>
			break;
		case PORTB :
			*(PortState) = PORTB_STAT;
     f1a:	e6 e3       	ldi	r30, 0x36	; 54
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	ea 81       	ldd	r30, Y+2	; 0x02
     f22:	fb 81       	ldd	r31, Y+3	; 0x03
     f24:	80 83       	st	Z, r24
     f26:	0d c0       	rjmp	.+26     	; 0xf42 <DIO_ReadPort+0x8e>
			break;
		case PORTC :
			*(PortState) = PORTC_STAT;
     f28:	e3 e3       	ldi	r30, 0x33	; 51
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	ea 81       	ldd	r30, Y+2	; 0x02
     f30:	fb 81       	ldd	r31, Y+3	; 0x03
     f32:	80 83       	st	Z, r24
     f34:	06 c0       	rjmp	.+12     	; 0xf42 <DIO_ReadPort+0x8e>
			break;
		case PORTD :
			*(PortState) = PORTD_STAT;
     f36:	e0 e3       	ldi	r30, 0x30	; 48
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	ea 81       	ldd	r30, Y+2	; 0x02
     f3e:	fb 81       	ldd	r31, Y+3	; 0x03
     f40:	80 83       	st	Z, r24
			break;

		} //END of SWITCH
		return E_DIO_SUCCESS ;
     f42:	1c 82       	std	Y+4, r1	; 0x04
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <DIO_ReadPort+0x96>
	}	  //END of IF
	else {
		return E_DIO_INVALID_PORT_NUMBER ;
     f46:	91 e0       	ldi	r25, 0x01	; 1
     f48:	9c 83       	std	Y+4, r25	; 0x04
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04

	}	  //END of ELSE
}	  //END of DIO_readPort
     f4c:	26 96       	adiw	r28, 0x06	; 6
     f4e:	0f b6       	in	r0, 0x3f	; 63
     f50:	f8 94       	cli
     f52:	de bf       	out	0x3e, r29	; 62
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	cd bf       	out	0x3d, r28	; 61
     f58:	cf 91       	pop	r28
     f5a:	df 91       	pop	r29
     f5c:	08 95       	ret

00000f5e <DIO_ReadPin>:

/* API to Read Pin  Value */
DIO_ERROR_state_t DIO_ReadPin(uint8_t PortID, uint8_t PinNumber,
		uint8_t* PinState) {
     f5e:	df 93       	push	r29
     f60:	cf 93       	push	r28
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62
     f66:	27 97       	sbiw	r28, 0x07	; 7
     f68:	0f b6       	in	r0, 0x3f	; 63
     f6a:	f8 94       	cli
     f6c:	de bf       	out	0x3e, r29	; 62
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	cd bf       	out	0x3d, r28	; 61
     f72:	89 83       	std	Y+1, r24	; 0x01
     f74:	6a 83       	std	Y+2, r22	; 0x02
     f76:	5c 83       	std	Y+4, r21	; 0x04
     f78:	4b 83       	std	Y+3, r20	; 0x03
	//Check for the ports if it is between 0 to 3
	if ((PortID <= PORTD ) && (PortID >= PORTA ) && (PinNumber >= PIN0 )
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	84 30       	cpi	r24, 0x04	; 4
     f7e:	08 f0       	brcs	.+2      	; 0xf82 <DIO_ReadPin+0x24>
     f80:	76 c0       	rjmp	.+236    	; 0x106e <DIO_ReadPin+0x110>
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	88 30       	cpi	r24, 0x08	; 8
     f86:	08 f0       	brcs	.+2      	; 0xf8a <DIO_ReadPin+0x2c>
     f88:	72 c0       	rjmp	.+228    	; 0x106e <DIO_ReadPin+0x110>
			&& (PinNumber <= PIN7 )) {

		switch (PortID) {
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	3f 83       	std	Y+7, r19	; 0x07
     f92:	2e 83       	std	Y+6, r18	; 0x06
     f94:	4e 81       	ldd	r20, Y+6	; 0x06
     f96:	5f 81       	ldd	r21, Y+7	; 0x07
     f98:	41 30       	cpi	r20, 0x01	; 1
     f9a:	51 05       	cpc	r21, r1
     f9c:	59 f1       	breq	.+86     	; 0xff4 <DIO_ReadPin+0x96>
     f9e:	8e 81       	ldd	r24, Y+6	; 0x06
     fa0:	9f 81       	ldd	r25, Y+7	; 0x07
     fa2:	82 30       	cpi	r24, 0x02	; 2
     fa4:	91 05       	cpc	r25, r1
     fa6:	34 f4       	brge	.+12     	; 0xfb4 <DIO_ReadPin+0x56>
     fa8:	2e 81       	ldd	r18, Y+6	; 0x06
     faa:	3f 81       	ldd	r19, Y+7	; 0x07
     fac:	21 15       	cp	r18, r1
     fae:	31 05       	cpc	r19, r1
     fb0:	69 f0       	breq	.+26     	; 0xfcc <DIO_ReadPin+0x6e>
     fb2:	5b c0       	rjmp	.+182    	; 0x106a <DIO_ReadPin+0x10c>
     fb4:	4e 81       	ldd	r20, Y+6	; 0x06
     fb6:	5f 81       	ldd	r21, Y+7	; 0x07
     fb8:	42 30       	cpi	r20, 0x02	; 2
     fba:	51 05       	cpc	r21, r1
     fbc:	79 f1       	breq	.+94     	; 0x101c <DIO_ReadPin+0xbe>
     fbe:	8e 81       	ldd	r24, Y+6	; 0x06
     fc0:	9f 81       	ldd	r25, Y+7	; 0x07
     fc2:	83 30       	cpi	r24, 0x03	; 3
     fc4:	91 05       	cpc	r25, r1
     fc6:	09 f4       	brne	.+2      	; 0xfca <DIO_ReadPin+0x6c>
     fc8:	3d c0       	rjmp	.+122    	; 0x1044 <DIO_ReadPin+0xe6>
     fca:	4f c0       	rjmp	.+158    	; 0x106a <DIO_ReadPin+0x10c>
		case PORTA :
			*(PinState) = Get_Bit(PORTA_STAT, PinNumber);
     fcc:	e9 e3       	ldi	r30, 0x39	; 57
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	88 2f       	mov	r24, r24
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	a9 01       	movw	r20, r18
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <DIO_ReadPin+0x86>
     fe0:	55 95       	asr	r21
     fe2:	47 95       	ror	r20
     fe4:	8a 95       	dec	r24
     fe6:	e2 f7       	brpl	.-8      	; 0xfe0 <DIO_ReadPin+0x82>
     fe8:	ca 01       	movw	r24, r20
     fea:	81 70       	andi	r24, 0x01	; 1
     fec:	eb 81       	ldd	r30, Y+3	; 0x03
     fee:	fc 81       	ldd	r31, Y+4	; 0x04
     ff0:	80 83       	st	Z, r24
     ff2:	3b c0       	rjmp	.+118    	; 0x106a <DIO_ReadPin+0x10c>
			break;
		case PORTB :
			*(PinState) = Get_Bit(PORTB_STAT, PinNumber);
     ff4:	e6 e3       	ldi	r30, 0x36	; 54
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    1000:	88 2f       	mov	r24, r24
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	a9 01       	movw	r20, r18
    1006:	02 c0       	rjmp	.+4      	; 0x100c <DIO_ReadPin+0xae>
    1008:	55 95       	asr	r21
    100a:	47 95       	ror	r20
    100c:	8a 95       	dec	r24
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <DIO_ReadPin+0xaa>
    1010:	ca 01       	movw	r24, r20
    1012:	81 70       	andi	r24, 0x01	; 1
    1014:	eb 81       	ldd	r30, Y+3	; 0x03
    1016:	fc 81       	ldd	r31, Y+4	; 0x04
    1018:	80 83       	st	Z, r24
    101a:	27 c0       	rjmp	.+78     	; 0x106a <DIO_ReadPin+0x10c>
			break;
		case PORTC :
			*(PinState) = Get_Bit(PORTC_STAT, PinNumber);
    101c:	e3 e3       	ldi	r30, 0x33	; 51
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	8a 81       	ldd	r24, Y+2	; 0x02
    1028:	88 2f       	mov	r24, r24
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	a9 01       	movw	r20, r18
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <DIO_ReadPin+0xd6>
    1030:	55 95       	asr	r21
    1032:	47 95       	ror	r20
    1034:	8a 95       	dec	r24
    1036:	e2 f7       	brpl	.-8      	; 0x1030 <DIO_ReadPin+0xd2>
    1038:	ca 01       	movw	r24, r20
    103a:	81 70       	andi	r24, 0x01	; 1
    103c:	eb 81       	ldd	r30, Y+3	; 0x03
    103e:	fc 81       	ldd	r31, Y+4	; 0x04
    1040:	80 83       	st	Z, r24
    1042:	13 c0       	rjmp	.+38     	; 0x106a <DIO_ReadPin+0x10c>
			break;
		case PORTD :
			*(PinState) = Get_Bit(PORTD_STAT, PinNumber);
    1044:	e0 e3       	ldi	r30, 0x30	; 48
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	28 2f       	mov	r18, r24
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	88 2f       	mov	r24, r24
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	a9 01       	movw	r20, r18
    1056:	02 c0       	rjmp	.+4      	; 0x105c <DIO_ReadPin+0xfe>
    1058:	55 95       	asr	r21
    105a:	47 95       	ror	r20
    105c:	8a 95       	dec	r24
    105e:	e2 f7       	brpl	.-8      	; 0x1058 <DIO_ReadPin+0xfa>
    1060:	ca 01       	movw	r24, r20
    1062:	81 70       	andi	r24, 0x01	; 1
    1064:	eb 81       	ldd	r30, Y+3	; 0x03
    1066:	fc 81       	ldd	r31, Y+4	; 0x04
    1068:	80 83       	st	Z, r24
			break;

		} //END of SWITCH
		return E_DIO_SUCCESS ;
    106a:	1d 82       	std	Y+5, r1	; 0x05
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <DIO_ReadPin+0x114>

	}	  //END of IF That checking the port and pin number

	else {
		return E_DIO_INVALID_PORT_NUMBER ;
    106e:	51 e0       	ldi	r21, 0x01	; 1
    1070:	5d 83       	std	Y+5, r21	; 0x05
    1072:	8d 81       	ldd	r24, Y+5	; 0x05

	}	  //END of ELSE
}    //END of DIO_readPint
    1074:	27 96       	adiw	r28, 0x07	; 7
    1076:	0f b6       	in	r0, 0x3f	; 63
    1078:	f8 94       	cli
    107a:	de bf       	out	0x3e, r29	; 62
    107c:	0f be       	out	0x3f, r0	; 63
    107e:	cd bf       	out	0x3d, r28	; 61
    1080:	cf 91       	pop	r28
    1082:	df 91       	pop	r29
    1084:	08 95       	ret

00001086 <DIO_TogglePin>:

/* API to toggle pin*/
DIO_ERROR_state_t DIO_TogglePin(uint8_t PortID, uint8_t PinNumber){
    1086:	df 93       	push	r29
    1088:	cf 93       	push	r28
    108a:	00 d0       	rcall	.+0      	; 0x108c <DIO_TogglePin+0x6>
    108c:	00 d0       	rcall	.+0      	; 0x108e <DIO_TogglePin+0x8>
    108e:	0f 92       	push	r0
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
    1094:	89 83       	std	Y+1, r24	; 0x01
    1096:	6a 83       	std	Y+2, r22	; 0x02
	//Check for the ports if it is between 0 to 3
		if ((PortID <= PORTD ) && (PortID >= PORTA ) && (PinNumber >= PIN0 )
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	84 30       	cpi	r24, 0x04	; 4
    109c:	08 f0       	brcs	.+2      	; 0x10a0 <DIO_TogglePin+0x1a>
    109e:	74 c0       	rjmp	.+232    	; 0x1188 <DIO_TogglePin+0x102>
    10a0:	8a 81       	ldd	r24, Y+2	; 0x02
    10a2:	88 30       	cpi	r24, 0x08	; 8
    10a4:	08 f0       	brcs	.+2      	; 0x10a8 <DIO_TogglePin+0x22>
    10a6:	70 c0       	rjmp	.+224    	; 0x1188 <DIO_TogglePin+0x102>
				&& (PinNumber <= PIN7 )) {
			switch (PortID) {
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	3d 83       	std	Y+5, r19	; 0x05
    10b0:	2c 83       	std	Y+4, r18	; 0x04
    10b2:	8c 81       	ldd	r24, Y+4	; 0x04
    10b4:	9d 81       	ldd	r25, Y+5	; 0x05
    10b6:	81 30       	cpi	r24, 0x01	; 1
    10b8:	91 05       	cpc	r25, r1
    10ba:	49 f1       	breq	.+82     	; 0x110e <DIO_TogglePin+0x88>
    10bc:	2c 81       	ldd	r18, Y+4	; 0x04
    10be:	3d 81       	ldd	r19, Y+5	; 0x05
    10c0:	22 30       	cpi	r18, 0x02	; 2
    10c2:	31 05       	cpc	r19, r1
    10c4:	2c f4       	brge	.+10     	; 0x10d0 <DIO_TogglePin+0x4a>
    10c6:	8c 81       	ldd	r24, Y+4	; 0x04
    10c8:	9d 81       	ldd	r25, Y+5	; 0x05
    10ca:	00 97       	sbiw	r24, 0x00	; 0
    10cc:	61 f0       	breq	.+24     	; 0x10e6 <DIO_TogglePin+0x60>
    10ce:	5a c0       	rjmp	.+180    	; 0x1184 <DIO_TogglePin+0xfe>
    10d0:	2c 81       	ldd	r18, Y+4	; 0x04
    10d2:	3d 81       	ldd	r19, Y+5	; 0x05
    10d4:	22 30       	cpi	r18, 0x02	; 2
    10d6:	31 05       	cpc	r19, r1
    10d8:	71 f1       	breq	.+92     	; 0x1136 <DIO_TogglePin+0xb0>
    10da:	8c 81       	ldd	r24, Y+4	; 0x04
    10dc:	9d 81       	ldd	r25, Y+5	; 0x05
    10de:	83 30       	cpi	r24, 0x03	; 3
    10e0:	91 05       	cpc	r25, r1
    10e2:	e9 f1       	breq	.+122    	; 0x115e <DIO_TogglePin+0xd8>
    10e4:	4f c0       	rjmp	.+158    	; 0x1184 <DIO_TogglePin+0xfe>
			case PORTA :
				Toggle_Bit(PORTA_DATA, PinNumber);
    10e6:	ab e3       	ldi	r26, 0x3B	; 59
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	eb e3       	ldi	r30, 0x3B	; 59
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	48 2f       	mov	r20, r24
    10f2:	8a 81       	ldd	r24, Y+2	; 0x02
    10f4:	28 2f       	mov	r18, r24
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	02 2e       	mov	r0, r18
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <DIO_TogglePin+0x7e>
    1100:	88 0f       	add	r24, r24
    1102:	99 1f       	adc	r25, r25
    1104:	0a 94       	dec	r0
    1106:	e2 f7       	brpl	.-8      	; 0x1100 <DIO_TogglePin+0x7a>
    1108:	84 27       	eor	r24, r20
    110a:	8c 93       	st	X, r24
    110c:	3b c0       	rjmp	.+118    	; 0x1184 <DIO_TogglePin+0xfe>
				break;
			case PORTB :
				Toggle_Bit(PORTB_DATA, PinNumber);
    110e:	a8 e3       	ldi	r26, 0x38	; 56
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	e8 e3       	ldi	r30, 0x38	; 56
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	48 2f       	mov	r20, r24
    111a:	8a 81       	ldd	r24, Y+2	; 0x02
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	02 2e       	mov	r0, r18
    1126:	02 c0       	rjmp	.+4      	; 0x112c <DIO_TogglePin+0xa6>
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	0a 94       	dec	r0
    112e:	e2 f7       	brpl	.-8      	; 0x1128 <DIO_TogglePin+0xa2>
    1130:	84 27       	eor	r24, r20
    1132:	8c 93       	st	X, r24
    1134:	27 c0       	rjmp	.+78     	; 0x1184 <DIO_TogglePin+0xfe>
				break;
			case PORTC :
				Toggle_Bit(PORTC_DATA, PinNumber);
    1136:	a5 e3       	ldi	r26, 0x35	; 53
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	e5 e3       	ldi	r30, 0x35	; 53
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	48 2f       	mov	r20, r24
    1142:	8a 81       	ldd	r24, Y+2	; 0x02
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	02 2e       	mov	r0, r18
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <DIO_TogglePin+0xce>
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	0a 94       	dec	r0
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <DIO_TogglePin+0xca>
    1158:	84 27       	eor	r24, r20
    115a:	8c 93       	st	X, r24
    115c:	13 c0       	rjmp	.+38     	; 0x1184 <DIO_TogglePin+0xfe>
				break;
			case PORTD :
				Toggle_Bit(PORTD_DATA, PinNumber);
    115e:	a2 e3       	ldi	r26, 0x32	; 50
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	e2 e3       	ldi	r30, 0x32	; 50
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	48 2f       	mov	r20, r24
    116a:	8a 81       	ldd	r24, Y+2	; 0x02
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	02 2e       	mov	r0, r18
    1176:	02 c0       	rjmp	.+4      	; 0x117c <DIO_TogglePin+0xf6>
    1178:	88 0f       	add	r24, r24
    117a:	99 1f       	adc	r25, r25
    117c:	0a 94       	dec	r0
    117e:	e2 f7       	brpl	.-8      	; 0x1178 <DIO_TogglePin+0xf2>
    1180:	84 27       	eor	r24, r20
    1182:	8c 93       	st	X, r24
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
    1184:	1b 82       	std	Y+3, r1	; 0x03
    1186:	02 c0       	rjmp	.+4      	; 0x118c <DIO_TogglePin+0x106>

		}	  //END of IF That checking the port and pin number

		else {
			return E_DIO_INVALID_PORT_NUMBER ;
    1188:	91 e0       	ldi	r25, 0x01	; 1
    118a:	9b 83       	std	Y+3, r25	; 0x03
    118c:	8b 81       	ldd	r24, Y+3	; 0x03

		}	  //END of ELSE

}
    118e:	0f 90       	pop	r0
    1190:	0f 90       	pop	r0
    1192:	0f 90       	pop	r0
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	cf 91       	pop	r28
    119a:	df 91       	pop	r29
    119c:	08 95       	ret

0000119e <DIO_EnablePinPullup>:
DIO_ERROR_state_t DIO_EnablePinPullup(uint8_t PortID, uint8_t PinNumber){
    119e:	df 93       	push	r29
    11a0:	cf 93       	push	r28
    11a2:	00 d0       	rcall	.+0      	; 0x11a4 <DIO_EnablePinPullup+0x6>
    11a4:	00 d0       	rcall	.+0      	; 0x11a6 <DIO_EnablePinPullup+0x8>
    11a6:	0f 92       	push	r0
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
    11ac:	89 83       	std	Y+1, r24	; 0x01
    11ae:	6a 83       	std	Y+2, r22	; 0x02
	//Check for the ports if it is between 0 to 3
		if ((PortID <= PORTD ) && (PortID >= PORTA ) && (PinNumber >= PIN0 )
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	84 30       	cpi	r24, 0x04	; 4
    11b4:	08 f0       	brcs	.+2      	; 0x11b8 <DIO_EnablePinPullup+0x1a>
    11b6:	d1 c0       	rjmp	.+418    	; 0x135a <DIO_EnablePinPullup+0x1bc>
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	88 30       	cpi	r24, 0x08	; 8
    11bc:	08 f0       	brcs	.+2      	; 0x11c0 <DIO_EnablePinPullup+0x22>
    11be:	cd c0       	rjmp	.+410    	; 0x135a <DIO_EnablePinPullup+0x1bc>
				&& (PinNumber <= PIN7 )) {
			switch (PortID) {
    11c0:	89 81       	ldd	r24, Y+1	; 0x01
    11c2:	28 2f       	mov	r18, r24
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	3d 83       	std	Y+5, r19	; 0x05
    11c8:	2c 83       	std	Y+4, r18	; 0x04
    11ca:	4c 81       	ldd	r20, Y+4	; 0x04
    11cc:	5d 81       	ldd	r21, Y+5	; 0x05
    11ce:	41 30       	cpi	r20, 0x01	; 1
    11d0:	51 05       	cpc	r21, r1
    11d2:	09 f4       	brne	.+2      	; 0x11d6 <DIO_EnablePinPullup+0x38>
    11d4:	42 c0       	rjmp	.+132    	; 0x125a <DIO_EnablePinPullup+0xbc>
    11d6:	8c 81       	ldd	r24, Y+4	; 0x04
    11d8:	9d 81       	ldd	r25, Y+5	; 0x05
    11da:	82 30       	cpi	r24, 0x02	; 2
    11dc:	91 05       	cpc	r25, r1
    11de:	34 f4       	brge	.+12     	; 0x11ec <DIO_EnablePinPullup+0x4e>
    11e0:	2c 81       	ldd	r18, Y+4	; 0x04
    11e2:	3d 81       	ldd	r19, Y+5	; 0x05
    11e4:	21 15       	cp	r18, r1
    11e6:	31 05       	cpc	r19, r1
    11e8:	71 f0       	breq	.+28     	; 0x1206 <DIO_EnablePinPullup+0x68>
    11ea:	b5 c0       	rjmp	.+362    	; 0x1356 <DIO_EnablePinPullup+0x1b8>
    11ec:	4c 81       	ldd	r20, Y+4	; 0x04
    11ee:	5d 81       	ldd	r21, Y+5	; 0x05
    11f0:	42 30       	cpi	r20, 0x02	; 2
    11f2:	51 05       	cpc	r21, r1
    11f4:	09 f4       	brne	.+2      	; 0x11f8 <DIO_EnablePinPullup+0x5a>
    11f6:	5b c0       	rjmp	.+182    	; 0x12ae <DIO_EnablePinPullup+0x110>
    11f8:	8c 81       	ldd	r24, Y+4	; 0x04
    11fa:	9d 81       	ldd	r25, Y+5	; 0x05
    11fc:	83 30       	cpi	r24, 0x03	; 3
    11fe:	91 05       	cpc	r25, r1
    1200:	09 f4       	brne	.+2      	; 0x1204 <DIO_EnablePinPullup+0x66>
    1202:	7f c0       	rjmp	.+254    	; 0x1302 <DIO_EnablePinPullup+0x164>
    1204:	a8 c0       	rjmp	.+336    	; 0x1356 <DIO_EnablePinPullup+0x1b8>
			case PORTA :
				if(Get_Bit(PORTA_DIR, PinNumber)==PIN_INPUT){
    1206:	ea e3       	ldi	r30, 0x3A	; 58
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	8a 81       	ldd	r24, Y+2	; 0x02
    1212:	88 2f       	mov	r24, r24
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	a9 01       	movw	r20, r18
    1218:	02 c0       	rjmp	.+4      	; 0x121e <DIO_EnablePinPullup+0x80>
    121a:	55 95       	asr	r21
    121c:	47 95       	ror	r20
    121e:	8a 95       	dec	r24
    1220:	e2 f7       	brpl	.-8      	; 0x121a <DIO_EnablePinPullup+0x7c>
    1222:	ca 01       	movw	r24, r20
    1224:	81 70       	andi	r24, 0x01	; 1
    1226:	90 70       	andi	r25, 0x00	; 0
    1228:	00 97       	sbiw	r24, 0x00	; 0
    122a:	a1 f4       	brne	.+40     	; 0x1254 <DIO_EnablePinPullup+0xb6>
					Set_Bit(PORTA_DATA, PinNumber);
    122c:	ab e3       	ldi	r26, 0x3B	; 59
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	eb e3       	ldi	r30, 0x3B	; 59
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	48 2f       	mov	r20, r24
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	02 2e       	mov	r0, r18
    1244:	02 c0       	rjmp	.+4      	; 0x124a <DIO_EnablePinPullup+0xac>
    1246:	88 0f       	add	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	0a 94       	dec	r0
    124c:	e2 f7       	brpl	.-8      	; 0x1246 <DIO_EnablePinPullup+0xa8>
    124e:	84 2b       	or	r24, r20
    1250:	8c 93       	st	X, r24
    1252:	81 c0       	rjmp	.+258    	; 0x1356 <DIO_EnablePinPullup+0x1b8>
				}// END of IF which checking if the  pin is INPUT
				else{
					return E_DIO_SET_TO_NON_INPUT;
    1254:	53 e0       	ldi	r21, 0x03	; 3
    1256:	5b 83       	std	Y+3, r21	; 0x03
    1258:	82 c0       	rjmp	.+260    	; 0x135e <DIO_EnablePinPullup+0x1c0>
				}
				break;
			case PORTB :
				if(Get_Bit(PORTB_DIR, PinNumber)==PIN_INPUT){
    125a:	e7 e3       	ldi	r30, 0x37	; 55
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	88 2f       	mov	r24, r24
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	a9 01       	movw	r20, r18
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <DIO_EnablePinPullup+0xd4>
    126e:	55 95       	asr	r21
    1270:	47 95       	ror	r20
    1272:	8a 95       	dec	r24
    1274:	e2 f7       	brpl	.-8      	; 0x126e <DIO_EnablePinPullup+0xd0>
    1276:	ca 01       	movw	r24, r20
    1278:	81 70       	andi	r24, 0x01	; 1
    127a:	90 70       	andi	r25, 0x00	; 0
    127c:	00 97       	sbiw	r24, 0x00	; 0
    127e:	a1 f4       	brne	.+40     	; 0x12a8 <DIO_EnablePinPullup+0x10a>
					Set_Bit(PORTB_DATA, PinNumber);
    1280:	a8 e3       	ldi	r26, 0x38	; 56
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	e8 e3       	ldi	r30, 0x38	; 56
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	48 2f       	mov	r20, r24
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	02 2e       	mov	r0, r18
    1298:	02 c0       	rjmp	.+4      	; 0x129e <DIO_EnablePinPullup+0x100>
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	0a 94       	dec	r0
    12a0:	e2 f7       	brpl	.-8      	; 0x129a <DIO_EnablePinPullup+0xfc>
    12a2:	84 2b       	or	r24, r20
    12a4:	8c 93       	st	X, r24
    12a6:	57 c0       	rjmp	.+174    	; 0x1356 <DIO_EnablePinPullup+0x1b8>
				}// END of IF which checking if the  pin is INPUT
				else{
					return E_DIO_SET_TO_NON_INPUT;
    12a8:	53 e0       	ldi	r21, 0x03	; 3
    12aa:	5b 83       	std	Y+3, r21	; 0x03
    12ac:	58 c0       	rjmp	.+176    	; 0x135e <DIO_EnablePinPullup+0x1c0>
				}
				break;
			case PORTC :
				if(Get_Bit(PORTC_DIR, PinNumber)==PIN_INPUT){
    12ae:	e4 e3       	ldi	r30, 0x34	; 52
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	88 2f       	mov	r24, r24
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	a9 01       	movw	r20, r18
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <DIO_EnablePinPullup+0x128>
    12c2:	55 95       	asr	r21
    12c4:	47 95       	ror	r20
    12c6:	8a 95       	dec	r24
    12c8:	e2 f7       	brpl	.-8      	; 0x12c2 <DIO_EnablePinPullup+0x124>
    12ca:	ca 01       	movw	r24, r20
    12cc:	81 70       	andi	r24, 0x01	; 1
    12ce:	90 70       	andi	r25, 0x00	; 0
    12d0:	00 97       	sbiw	r24, 0x00	; 0
    12d2:	a1 f4       	brne	.+40     	; 0x12fc <DIO_EnablePinPullup+0x15e>
					Set_Bit(PORTC_DATA, PinNumber);
    12d4:	a5 e3       	ldi	r26, 0x35	; 53
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	e5 e3       	ldi	r30, 0x35	; 53
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	48 2f       	mov	r20, r24
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	28 2f       	mov	r18, r24
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	02 2e       	mov	r0, r18
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <DIO_EnablePinPullup+0x154>
    12ee:	88 0f       	add	r24, r24
    12f0:	99 1f       	adc	r25, r25
    12f2:	0a 94       	dec	r0
    12f4:	e2 f7       	brpl	.-8      	; 0x12ee <DIO_EnablePinPullup+0x150>
    12f6:	84 2b       	or	r24, r20
    12f8:	8c 93       	st	X, r24
    12fa:	2d c0       	rjmp	.+90     	; 0x1356 <DIO_EnablePinPullup+0x1b8>
				}// END of IF which checking if the  pin is INPUT
				else{
					return E_DIO_SET_TO_NON_INPUT;
    12fc:	53 e0       	ldi	r21, 0x03	; 3
    12fe:	5b 83       	std	Y+3, r21	; 0x03
    1300:	2e c0       	rjmp	.+92     	; 0x135e <DIO_EnablePinPullup+0x1c0>
				}
				break;
			case PORTD :
				if(Get_Bit(PORTD_DIR, PinNumber)==PIN_INPUT){
    1302:	e1 e3       	ldi	r30, 0x31	; 49
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	28 2f       	mov	r18, r24
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	88 2f       	mov	r24, r24
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	a9 01       	movw	r20, r18
    1314:	02 c0       	rjmp	.+4      	; 0x131a <DIO_EnablePinPullup+0x17c>
    1316:	55 95       	asr	r21
    1318:	47 95       	ror	r20
    131a:	8a 95       	dec	r24
    131c:	e2 f7       	brpl	.-8      	; 0x1316 <DIO_EnablePinPullup+0x178>
    131e:	ca 01       	movw	r24, r20
    1320:	81 70       	andi	r24, 0x01	; 1
    1322:	90 70       	andi	r25, 0x00	; 0
    1324:	00 97       	sbiw	r24, 0x00	; 0
    1326:	a1 f4       	brne	.+40     	; 0x1350 <DIO_EnablePinPullup+0x1b2>
					Set_Bit(PORTD_DATA, PinNumber);
    1328:	a2 e3       	ldi	r26, 0x32	; 50
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e2 e3       	ldi	r30, 0x32	; 50
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	48 2f       	mov	r20, r24
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	02 2e       	mov	r0, r18
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <DIO_EnablePinPullup+0x1a8>
    1342:	88 0f       	add	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	0a 94       	dec	r0
    1348:	e2 f7       	brpl	.-8      	; 0x1342 <DIO_EnablePinPullup+0x1a4>
    134a:	84 2b       	or	r24, r20
    134c:	8c 93       	st	X, r24
    134e:	03 c0       	rjmp	.+6      	; 0x1356 <DIO_EnablePinPullup+0x1b8>
				}// END of IF which checking if the  pin is INPUT
				else{
					return E_DIO_SET_TO_NON_INPUT;
    1350:	53 e0       	ldi	r21, 0x03	; 3
    1352:	5b 83       	std	Y+3, r21	; 0x03
    1354:	04 c0       	rjmp	.+8      	; 0x135e <DIO_EnablePinPullup+0x1c0>
				}
				break;

			} //END of SWITCH
			return E_DIO_SUCCESS ;
    1356:	1b 82       	std	Y+3, r1	; 0x03
    1358:	02 c0       	rjmp	.+4      	; 0x135e <DIO_EnablePinPullup+0x1c0>

		}	  //END of IF That checking the port and pin number

		else {
			return E_DIO_INVALID_PORT_NUMBER ;
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	8b 83       	std	Y+3, r24	; 0x03
    135e:	8b 81       	ldd	r24, Y+3	; 0x03

		}	  //END of ELSE

}
    1360:	0f 90       	pop	r0
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	cf 91       	pop	r28
    136c:	df 91       	pop	r29
    136e:	08 95       	ret

00001370 <LED_Init>:
#define PIN_LOW  (uint8_t)0




uint8_t LED_Init(void){
    1370:	df 93       	push	r29
    1372:	cf 93       	push	r28
    1374:	cd b7       	in	r28, 0x3d	; 61
    1376:	de b7       	in	r29, 0x3e	; 62
#if LED_1
	DIO_SetPinDirection(LED_1_PORT,LED_1_PIN,PIN_OUTPUT);
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	60 e0       	ldi	r22, 0x00	; 0
    137c:	41 e0       	ldi	r20, 0x01	; 1
    137e:	0e 94 ed 04 	call	0x9da	; 0x9da <DIO_SetPinDirection>
#endif
#if LED_2
	DIO_SetPinDirection(LED_2_PORT,LED_2_PIN,PIN_OUTPUT);
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	61 e0       	ldi	r22, 0x01	; 1
    1386:	41 e0       	ldi	r20, 0x01	; 1
    1388:	0e 94 ed 04 	call	0x9da	; 0x9da <DIO_SetPinDirection>
#endif
#if LED_3
	DIO_SetPinDirection(LED_3_PORT,LED_3_PIN,PIN_OUTPUT);
    138c:	80 e0       	ldi	r24, 0x00	; 0
    138e:	62 e0       	ldi	r22, 0x02	; 2
    1390:	41 e0       	ldi	r20, 0x01	; 1
    1392:	0e 94 ed 04 	call	0x9da	; 0x9da <DIO_SetPinDirection>
#endif
	return 0;
    1396:	80 e0       	ldi	r24, 0x00	; 0
}
    1398:	cf 91       	pop	r28
    139a:	df 91       	pop	r29
    139c:	08 95       	ret

0000139e <LED_On>:
uint8_t LED_On(uint8_t LedNumber){
    139e:	df 93       	push	r29
    13a0:	cf 93       	push	r28
    13a2:	00 d0       	rcall	.+0      	; 0x13a4 <LED_On+0x6>
    13a4:	0f 92       	push	r0
    13a6:	cd b7       	in	r28, 0x3d	; 61
    13a8:	de b7       	in	r29, 0x3e	; 62
    13aa:	89 83       	std	Y+1, r24	; 0x01
	switch (LedNumber){
    13ac:	89 81       	ldd	r24, Y+1	; 0x01
    13ae:	28 2f       	mov	r18, r24
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	3b 83       	std	Y+3, r19	; 0x03
    13b4:	2a 83       	std	Y+2, r18	; 0x02
    13b6:	8a 81       	ldd	r24, Y+2	; 0x02
    13b8:	9b 81       	ldd	r25, Y+3	; 0x03
    13ba:	82 30       	cpi	r24, 0x02	; 2
    13bc:	91 05       	cpc	r25, r1
    13be:	81 f0       	breq	.+32     	; 0x13e0 <LED_On+0x42>
    13c0:	2a 81       	ldd	r18, Y+2	; 0x02
    13c2:	3b 81       	ldd	r19, Y+3	; 0x03
    13c4:	23 30       	cpi	r18, 0x03	; 3
    13c6:	31 05       	cpc	r19, r1
    13c8:	89 f0       	breq	.+34     	; 0x13ec <LED_On+0x4e>
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	9b 81       	ldd	r25, Y+3	; 0x03
    13ce:	81 30       	cpi	r24, 0x01	; 1
    13d0:	91 05       	cpc	r25, r1
    13d2:	89 f4       	brne	.+34     	; 0x13f6 <LED_On+0x58>
	case LED_1:
		DIO_WritePin(LED_1_PORT,LED_1_PIN,PIN_HIGH);
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	60 e0       	ldi	r22, 0x00	; 0
    13d8:	41 e0       	ldi	r20, 0x01	; 1
    13da:	0e 94 49 06 	call	0xc92	; 0xc92 <DIO_WritePin>
    13de:	0b c0       	rjmp	.+22     	; 0x13f6 <LED_On+0x58>
		break;
	case LED_2:
		DIO_WritePin(LED_2_PORT,LED_2_PIN,PIN_HIGH);
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	61 e0       	ldi	r22, 0x01	; 1
    13e4:	41 e0       	ldi	r20, 0x01	; 1
    13e6:	0e 94 49 06 	call	0xc92	; 0xc92 <DIO_WritePin>
    13ea:	05 c0       	rjmp	.+10     	; 0x13f6 <LED_On+0x58>
		break;
	case LED_3:
		DIO_WritePin(LED_3_PORT,LED_3_PIN,PIN_HIGH);
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	62 e0       	ldi	r22, 0x02	; 2
    13f0:	41 e0       	ldi	r20, 0x01	; 1
    13f2:	0e 94 49 06 	call	0xc92	; 0xc92 <DIO_WritePin>
		break;
	}
	return 0;
    13f6:	80 e0       	ldi	r24, 0x00	; 0

}
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	0f 90       	pop	r0
    13fe:	cf 91       	pop	r28
    1400:	df 91       	pop	r29
    1402:	08 95       	ret

00001404 <LED_Off>:
uint8_t LED_Off(uint8_t LedNumber){
    1404:	df 93       	push	r29
    1406:	cf 93       	push	r28
    1408:	00 d0       	rcall	.+0      	; 0x140a <LED_Off+0x6>
    140a:	0f 92       	push	r0
    140c:	cd b7       	in	r28, 0x3d	; 61
    140e:	de b7       	in	r29, 0x3e	; 62
    1410:	89 83       	std	Y+1, r24	; 0x01
	switch (LedNumber){
    1412:	89 81       	ldd	r24, Y+1	; 0x01
    1414:	28 2f       	mov	r18, r24
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	3b 83       	std	Y+3, r19	; 0x03
    141a:	2a 83       	std	Y+2, r18	; 0x02
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	9b 81       	ldd	r25, Y+3	; 0x03
    1420:	82 30       	cpi	r24, 0x02	; 2
    1422:	91 05       	cpc	r25, r1
    1424:	81 f0       	breq	.+32     	; 0x1446 <LED_Off+0x42>
    1426:	2a 81       	ldd	r18, Y+2	; 0x02
    1428:	3b 81       	ldd	r19, Y+3	; 0x03
    142a:	23 30       	cpi	r18, 0x03	; 3
    142c:	31 05       	cpc	r19, r1
    142e:	89 f0       	breq	.+34     	; 0x1452 <LED_Off+0x4e>
    1430:	8a 81       	ldd	r24, Y+2	; 0x02
    1432:	9b 81       	ldd	r25, Y+3	; 0x03
    1434:	81 30       	cpi	r24, 0x01	; 1
    1436:	91 05       	cpc	r25, r1
    1438:	89 f4       	brne	.+34     	; 0x145c <LED_Off+0x58>
	case LED_1:
		DIO_WritePin(LED_1_PORT,LED_1_PIN,PIN_LOW);
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	60 e0       	ldi	r22, 0x00	; 0
    143e:	40 e0       	ldi	r20, 0x00	; 0
    1440:	0e 94 49 06 	call	0xc92	; 0xc92 <DIO_WritePin>
    1444:	0b c0       	rjmp	.+22     	; 0x145c <LED_Off+0x58>
		break;
	case LED_2:
		DIO_WritePin(LED_2_PORT,LED_2_PIN,PIN_LOW);
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	61 e0       	ldi	r22, 0x01	; 1
    144a:	40 e0       	ldi	r20, 0x00	; 0
    144c:	0e 94 49 06 	call	0xc92	; 0xc92 <DIO_WritePin>
    1450:	05 c0       	rjmp	.+10     	; 0x145c <LED_Off+0x58>
		break;
	case LED_3:
		DIO_WritePin(LED_3_PORT,LED_3_PIN,PIN_LOW);
    1452:	80 e0       	ldi	r24, 0x00	; 0
    1454:	62 e0       	ldi	r22, 0x02	; 2
    1456:	40 e0       	ldi	r20, 0x00	; 0
    1458:	0e 94 49 06 	call	0xc92	; 0xc92 <DIO_WritePin>
		break;
	}

	return 0;
    145c:	80 e0       	ldi	r24, 0x00	; 0
}
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	cf 91       	pop	r28
    1466:	df 91       	pop	r29
    1468:	08 95       	ret

0000146a <LED_Toggle>:
uint8_t LED_Toggle(uint8_t LedNumber){
    146a:	df 93       	push	r29
    146c:	cf 93       	push	r28
    146e:	00 d0       	rcall	.+0      	; 0x1470 <LED_Toggle+0x6>
    1470:	0f 92       	push	r0
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
    1476:	89 83       	std	Y+1, r24	; 0x01
	switch (LedNumber){
    1478:	89 81       	ldd	r24, Y+1	; 0x01
    147a:	28 2f       	mov	r18, r24
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	3b 83       	std	Y+3, r19	; 0x03
    1480:	2a 83       	std	Y+2, r18	; 0x02
    1482:	8a 81       	ldd	r24, Y+2	; 0x02
    1484:	9b 81       	ldd	r25, Y+3	; 0x03
    1486:	82 30       	cpi	r24, 0x02	; 2
    1488:	91 05       	cpc	r25, r1
    148a:	79 f0       	breq	.+30     	; 0x14aa <LED_Toggle+0x40>
    148c:	2a 81       	ldd	r18, Y+2	; 0x02
    148e:	3b 81       	ldd	r19, Y+3	; 0x03
    1490:	23 30       	cpi	r18, 0x03	; 3
    1492:	31 05       	cpc	r19, r1
    1494:	79 f0       	breq	.+30     	; 0x14b4 <LED_Toggle+0x4a>
    1496:	8a 81       	ldd	r24, Y+2	; 0x02
    1498:	9b 81       	ldd	r25, Y+3	; 0x03
    149a:	81 30       	cpi	r24, 0x01	; 1
    149c:	91 05       	cpc	r25, r1
    149e:	71 f4       	brne	.+28     	; 0x14bc <LED_Toggle+0x52>
	case LED_1:
		DIO_TogglePin(LED_1_PORT,LED_1_PIN);
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	60 e0       	ldi	r22, 0x00	; 0
    14a4:	0e 94 43 08 	call	0x1086	; 0x1086 <DIO_TogglePin>
    14a8:	09 c0       	rjmp	.+18     	; 0x14bc <LED_Toggle+0x52>
		break;
	case LED_2:
		DIO_TogglePin(LED_2_PORT,LED_2_PIN);
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	61 e0       	ldi	r22, 0x01	; 1
    14ae:	0e 94 43 08 	call	0x1086	; 0x1086 <DIO_TogglePin>
    14b2:	04 c0       	rjmp	.+8      	; 0x14bc <LED_Toggle+0x52>
		break;
	case LED_3:
		DIO_TogglePin(LED_3_PORT,LED_3_PIN);
    14b4:	80 e0       	ldi	r24, 0x00	; 0
    14b6:	62 e0       	ldi	r22, 0x02	; 2
    14b8:	0e 94 43 08 	call	0x1086	; 0x1086 <DIO_TogglePin>
		break;
	}
	return 0;
    14bc:	80 e0       	ldi	r24, 0x00	; 0

}
    14be:	0f 90       	pop	r0
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
    14c4:	cf 91       	pop	r28
    14c6:	df 91       	pop	r29
    14c8:	08 95       	ret

000014ca <LED_Status>:
uint8_t LED_Status(uint8_t LedNumber, uint8_t* LedState){
    14ca:	df 93       	push	r29
    14cc:	cf 93       	push	r28
    14ce:	00 d0       	rcall	.+0      	; 0x14d0 <LED_Status+0x6>
    14d0:	00 d0       	rcall	.+0      	; 0x14d2 <LED_Status+0x8>
    14d2:	0f 92       	push	r0
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
    14d8:	89 83       	std	Y+1, r24	; 0x01
    14da:	7b 83       	std	Y+3, r23	; 0x03
    14dc:	6a 83       	std	Y+2, r22	; 0x02
	switch (LedNumber){
    14de:	89 81       	ldd	r24, Y+1	; 0x01
    14e0:	28 2f       	mov	r18, r24
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	3d 83       	std	Y+5, r19	; 0x05
    14e6:	2c 83       	std	Y+4, r18	; 0x04
    14e8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ea:	9d 81       	ldd	r25, Y+5	; 0x05
    14ec:	82 30       	cpi	r24, 0x02	; 2
    14ee:	91 05       	cpc	r25, r1
    14f0:	91 f0       	breq	.+36     	; 0x1516 <LED_Status+0x4c>
    14f2:	2c 81       	ldd	r18, Y+4	; 0x04
    14f4:	3d 81       	ldd	r19, Y+5	; 0x05
    14f6:	23 30       	cpi	r18, 0x03	; 3
    14f8:	31 05       	cpc	r19, r1
    14fa:	a9 f0       	breq	.+42     	; 0x1526 <LED_Status+0x5c>
    14fc:	8c 81       	ldd	r24, Y+4	; 0x04
    14fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1500:	81 30       	cpi	r24, 0x01	; 1
    1502:	91 05       	cpc	r25, r1
    1504:	b9 f4       	brne	.+46     	; 0x1534 <LED_Status+0x6a>
	case LED_1:
		DIO_ReadPin(LED_1_PORT,LED_1_PIN,LedState);
    1506:	2a 81       	ldd	r18, Y+2	; 0x02
    1508:	3b 81       	ldd	r19, Y+3	; 0x03
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	60 e0       	ldi	r22, 0x00	; 0
    150e:	a9 01       	movw	r20, r18
    1510:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_ReadPin>
    1514:	0f c0       	rjmp	.+30     	; 0x1534 <LED_Status+0x6a>
		break;
	case LED_2:
		DIO_ReadPin(LED_2_PORT,LED_2_PIN,LedState);
    1516:	2a 81       	ldd	r18, Y+2	; 0x02
    1518:	3b 81       	ldd	r19, Y+3	; 0x03
    151a:	80 e0       	ldi	r24, 0x00	; 0
    151c:	61 e0       	ldi	r22, 0x01	; 1
    151e:	a9 01       	movw	r20, r18
    1520:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_ReadPin>
    1524:	07 c0       	rjmp	.+14     	; 0x1534 <LED_Status+0x6a>
		break;
	case LED_3:
		DIO_ReadPin(LED_3_PORT,LED_3_PIN,LedState);
    1526:	2a 81       	ldd	r18, Y+2	; 0x02
    1528:	3b 81       	ldd	r19, Y+3	; 0x03
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	62 e0       	ldi	r22, 0x02	; 2
    152e:	a9 01       	movw	r20, r18
    1530:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_ReadPin>
		break;
	}
	return 0;
    1534:	80 e0       	ldi	r24, 0x00	; 0

}
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	0f 90       	pop	r0
    153e:	0f 90       	pop	r0
    1540:	cf 91       	pop	r28
    1542:	df 91       	pop	r29
    1544:	08 95       	ret

00001546 <App_Init>:
uint8_t GU8_Bufer=0b11110000;
void SPI_ReceiveingInt(void);



void App_Init(void) {
    1546:	df 93       	push	r29
    1548:	cf 93       	push	r28
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62

	SPI_Init(SPI_CH1);
    154e:	80 e0       	ldi	r24, 0x00	; 0
    1550:	0e 94 d6 01 	call	0x3ac	; 0x3ac <SPI_Init>
	DIO_setPortDirection(PORTA,PORT_OUTPUT);
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	6f ef       	ldi	r22, 0xFF	; 255
    1558:	0e 94 a2 04 	call	0x944	; 0x944 <DIO_setPortDirection>
//	SPI_SetCallback(SPI_CH1,&SPI_ReceiveingInt);
//	SPI_EnableInterrupt(SPI_CH1);
//	GI_EnableGI();

}
    155c:	cf 91       	pop	r28
    155e:	df 91       	pop	r29
    1560:	08 95       	ret

00001562 <App_Update>:
void App_Update(void) {
    1562:	df 93       	push	r29
    1564:	cf 93       	push	r28
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
	SPI_ReceiveChar(SPI_CH1,&GU8_Bufer,SLAVE_CH1);
    156a:	20 e6       	ldi	r18, 0x60	; 96
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	b9 01       	movw	r22, r18
    1572:	40 e0       	ldi	r20, 0x00	; 0
    1574:	0e 94 54 02 	call	0x4a8	; 0x4a8 <SPI_ReceiveChar>
	DIO_writePort(PORTA,GU8_Bufer);
    1578:	90 91 60 00 	lds	r25, 0x0060
    157c:	80 e0       	ldi	r24, 0x00	; 0
    157e:	69 2f       	mov	r22, r25
    1580:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_writePort>
}
    1584:	cf 91       	pop	r28
    1586:	df 91       	pop	r29
    1588:	08 95       	ret

0000158a <SPI_ReceiveingInt>:

void SPI_ReceiveingInt(void){
    158a:	df 93       	push	r29
    158c:	cf 93       	push	r28
    158e:	cd b7       	in	r28, 0x3d	; 61
    1590:	de b7       	in	r29, 0x3e	; 62

}
    1592:	cf 91       	pop	r28
    1594:	df 91       	pop	r29
    1596:	08 95       	ret

00001598 <main>:
/*- INCLUDES 
-----------------------------------------------*/

#include "App/SLAVE_APP/spi_slave_app.h"

int main(){
    1598:	df 93       	push	r29
    159a:	cf 93       	push	r28
    159c:	cd b7       	in	r28, 0x3d	; 61
    159e:	de b7       	in	r29, 0x3e	; 62
	App_Init();
    15a0:	0e 94 a3 0a 	call	0x1546	; 0x1546 <App_Init>
	while(1){
		App_Update();
    15a4:	0e 94 b1 0a 	call	0x1562	; 0x1562 <App_Update>
    15a8:	fd cf       	rjmp	.-6      	; 0x15a4 <main+0xc>

000015aa <_exit>:
    15aa:	f8 94       	cli

000015ac <__stop_program>:
    15ac:	ff cf       	rjmp	.-2      	; 0x15ac <__stop_program>
